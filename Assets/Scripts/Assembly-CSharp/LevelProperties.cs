using System;
using System.Collections.Generic;

// Token: 0x02000004 RID: 4
public static class LevelProperties
{
	// Token: 0x06000005 RID: 5 RVA: 0x00002630 File Offset: 0x00000A30
	public static string GetLevelScene(Levels level)
	{
		switch (level)
		{
		case Levels.Tutorial:
			return "scene_level_tutorial";
		case Levels.Test:
			return "scene_level_test";
		case Levels.Pirate:
			return "scene_level_pirate";
		case Levels.Bat:
			return "scene_level_bat";
		default:
			switch (level)
			{
			case Levels.Platforming_Level_1_1:
				return "scene_level_platforming_1_1F";
			case Levels.Platforming_Level_1_2:
				return "scene_level_platforming_1_2F";
			case Levels.Platforming_Level_3_1:
				return "scene_level_platforming_3_1F";
			case Levels.Platforming_Level_3_2:
				return "scene_level_platforming_3_2F";
			default:
				if (level == Levels.FlyingBird)
				{
					return "scene_level_flying_bird";
				}
				if (level == Levels.FlyingTest)
				{
					return "scene_level_flying_test";
				}
				if (level == Levels.Bee)
				{
					return "scene_level_bee";
				}
				if (level == Levels.Mouse)
				{
					return "scene_level_mouse";
				}
				if (level == Levels.Dragon)
				{
					return "scene_level_dragon";
				}
				if (level == Levels.FlyingMermaid)
				{
					return "scene_level_flying_mermaid";
				}
				if (level == Levels.FlyingBlimp)
				{
					return "scene_level_flying_blimp";
				}
				if (level == Levels.Flower)
				{
					return "scene_level_flower";
				}
				if (level == Levels.Slime)
				{
					return "scene_level_slime";
				}
				if (level == Levels.Baroness)
				{
					return "scene_level_baroness";
				}
				if (level == Levels.Robot)
				{
					return "scene_level_robot";
				}
				if (level == Levels.Clown)
				{
					return "scene_level_clown";
				}
				if (level == Levels.SallyStagePlay)
				{
					return "scene_level_sally_stage_play";
				}
				if (level == Levels.DicePalaceDomino)
				{
					return "scene_level_dice_palace_domino";
				}
				if (level == Levels.DicePalaceCard)
				{
					return "scene_level_dice_palace_card";
				}
				if (level == Levels.DicePalaceChips)
				{
					return "scene_level_dice_palace_chips";
				}
				if (level == Levels.DicePalaceCigar)
				{
					return "scene_level_dice_palace_cigar";
				}
				if (level == Levels.DicePalaceTest)
				{
					return "scene_level_dice_palace_test";
				}
				if (level == Levels.DicePalaceBooze)
				{
					return "scene_level_dice_palace_booze";
				}
				if (level == Levels.DicePalaceRoulette)
				{
					return "scene_level_dice_palace_roulette";
				}
				if (level == Levels.AirshipStork)
				{
					return "scene_level_airship_stork";
				}
				if (level == Levels.DicePalacePachinko)
				{
					return "scene_level_dice_palace_pachinko";
				}
				if (level == Levels.AirshipCrab)
				{
					return "scene_level_airship_crab";
				}
				if (level == Levels.DicePalaceRabbit)
				{
					return "scene_level_dice_palace_rabbit";
				}
				if (level == Levels.AirshipClam)
				{
					return "scene_level_airship_clam";
				}
				if (level == Levels.FlyingGenie)
				{
					return "scene_level_flying_genie";
				}
				if (level == Levels.DicePalaceLight)
				{
					return "scene_level_dice_palace_light";
				}
				if (level == Levels.DicePalaceFlyingHorse)
				{
					return "scene_level_dice_palace_flying_horse";
				}
				if (level == Levels.DicePalaceFlyingMemory)
				{
					return "scene_level_dice_palace_flying_memory";
				}
				if (level == Levels.DicePalaceMain)
				{
					return "scene_level_dice_palace_main";
				}
				if (level == Levels.Devil)
				{
					return "scene_level_devil";
				}
				if (level == Levels.DicePalaceEightBall)
				{
					return "scene_level_dice_palace_eight_ball";
				}
				if (level == Levels.RetroArcade)
				{
					return "scene_level_retro_arcade";
				}
				if (level == Levels.Mausoleum)
				{
					return "scene_level_mausoleum";
				}
				if (level == Levels.House)
				{
					return "scene_level_house_elder_kettle";
				}
				if (level == Levels.DiceGate)
				{
					return "scene_level_dice_gate";
				}
				if (level == Levels.Platforming_Level_2_2)
				{
					return "scene_level_platforming_2_2F";
				}
				if (level == Levels.Platforming_Level_2_1)
				{
					return "scene_level_platforming_2_1F";
				}
				if (level == Levels.ShmupTutorial)
				{
					return "scene_level_shmup_tutorial";
				}
				if (level == Levels.Airplane)
				{
					return "scene_level_airplane";
				}
				if (level == Levels.RumRunners)
				{
					return "scene_level_rum_runners";
				}
				if (level == Levels.OldMan)
				{
					return "scene_level_old_man";
				}
				if (level == Levels.ChessBishop)
				{
					return "scene_level_chess_bishop";
				}
				if (level == Levels.SnowCult)
				{
					return "scene_level_snow_cult";
				}
				if (level == Levels.FlyingCowboy)
				{
					return "scene_level_flying_cowboy";
				}
				if (level == Levels.TowerOfPower)
				{
					return "scene_level_tower_of_power";
				}
				if (level == Levels.ChessBOldA)
				{
					return "scene_level_chess_bolda";
				}
				if (level == Levels.ChessKnight)
				{
					return "scene_level_chess_knight";
				}
				if (level == Levels.ChessRook)
				{
					return "scene_level_chess_rook";
				}
				if (level == Levels.ChessQueen)
				{
					return "scene_level_chess_queen";
				}
				if (level == Levels.ChessPawn)
				{
					return "scene_level_chess_pawn";
				}
				if (level == Levels.ChessKing)
				{
					return "scene_level_chess_king";
				}
				if (level == Levels.Kitchen)
				{
					return "scene_level_kitchen";
				}
				if (level == Levels.ChessBOldB)
				{
					return "scene_level_chess_boldb";
				}
				if (level == Levels.Saltbaker)
				{
					return "scene_level_saltbaker";
				}
				if (level == Levels.ChaliceTutorial)
				{
					return "scene_level_chalice_tutorial";
				}
				if (level == Levels.Graveyard)
				{
					return "scene_level_graveyard";
				}
				if (level != Levels.ChessCastle)
				{
					return string.Empty;
				}
				return "scene_level_chess_castle";
			}
			break;
		case Levels.Train:
			return "scene_level_train";
		case Levels.Veggies:
			return "scene_level_veggies";
		case Levels.Frogs:
			return "scene_level_frogs";
		case Levels.AirshipJelly:
			return "scene_level_airship_jelly";
		}
	}

	// Token: 0x06000006 RID: 6 RVA: 0x00002AB0 File Offset: 0x00000EB0
	public static string[] GetLevelPatternNames(Levels level)
	{
		switch (level)
		{
		case Levels.Tutorial:
			return new string[]
			{
				"A"
			};
		case Levels.Test:
			return new string[]
			{
				"Main"
			};
		case Levels.Pirate:
			return new string[]
			{
				"Shark",
				"Squid",
				"DogFish",
				"Peashot",
				"Boat"
			};
		case Levels.Bat:
			return new string[]
			{
				"Bouncer",
				"Lightning"
			};
		default:
			if (level == Levels.FlyingBird)
			{
				return new string[]
				{
					"Feathers",
					"Eggs",
					"Lasers",
					"SmallBird",
					"Garbage",
					"Heart",
					"Default"
				};
			}
			if (level == Levels.FlyingTest)
			{
				return new string[]
				{
					"Main"
				};
			}
			if (level == Levels.Bee)
			{
				return new string[]
				{
					"BlackHole",
					"Chain",
					"Triangle",
					"Follower",
					"SecurityGuard",
					"Wing",
					"Turbine"
				};
			}
			if (level == Levels.Mouse)
			{
				return new string[]
				{
					"Move",
					"Dash",
					"CherryBomb",
					"Catapult",
					"RomanCandle",
					"SawBlades",
					"Flame",
					"LeftClaw",
					"RightClaw",
					"GhostMouse"
				};
			}
			if (level == Levels.Dragon)
			{
				return new string[]
				{
					"Meteor",
					"Peashot"
				};
			}
			if (level == Levels.FlyingMermaid)
			{
				return new string[]
				{
					"Yell",
					"Summon",
					"Fish",
					"Zap",
					"Eel",
					"Bubble",
					"HeadBlast",
					"BubbleHeadBlast"
				};
			}
			if (level == Levels.FlyingBlimp)
			{
				return new string[]
				{
					"Dash",
					"Tornado",
					"Shoot"
				};
			}
			if (level == Levels.Flower)
			{
				return new string[]
				{
					"Laser",
					"PodHands",
					"GattlingGun",
					"VineHands",
					"Nothing"
				};
			}
			if (level == Levels.Slime)
			{
				return new string[]
				{
					"Jump"
				};
			}
			if (level == Levels.Baroness)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.Robot)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.Clown)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.SallyStagePlay)
			{
				return new string[]
				{
					"Jump",
					"Umbrella",
					"Kiss",
					"Teleport"
				};
			}
			if (level == Levels.DicePalaceDomino)
			{
				return new string[]
				{
					"Boomerang",
					"BouncyBall"
				};
			}
			if (level == Levels.DicePalaceCard)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.DicePalaceChips)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.DicePalaceCigar)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.DicePalaceTest)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.DicePalaceBooze)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.DicePalaceRoulette)
			{
				return new string[]
				{
					"Default",
					"Twirl",
					"Marble"
				};
			}
			if (level == Levels.AirshipStork)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.DicePalacePachinko)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.AirshipCrab)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.DicePalaceRabbit)
			{
				return new string[]
				{
					"MagicWand",
					"MagicParry"
				};
			}
			if (level == Levels.AirshipClam)
			{
				return new string[]
				{
					"Spit",
					"Barnacles"
				};
			}
			if (level == Levels.FlyingGenie)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.DicePalaceLight)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.DicePalaceFlyingHorse)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.DicePalaceFlyingMemory)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.DicePalaceMain)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.Devil)
			{
				return new string[]
				{
					"Default",
					"SplitDevilProjectileAttack",
					"SplitDevilWallAttack",
					"Clap",
					"Head",
					"Pitchfork",
					"BombEye",
					"SkullEye"
				};
			}
			if (level == Levels.DicePalaceEightBall)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.RetroArcade)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.Mausoleum)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.House)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.DiceGate)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.ShmupTutorial)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.Airplane)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.RumRunners)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.OldMan)
			{
				return new string[]
				{
					"Default",
					"Spit",
					"Duck",
					"Camel"
				};
			}
			if (level == Levels.ChessBishop)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.SnowCult)
			{
				return new string[]
				{
					"Default",
					"Switch",
					"Eye",
					"Beam",
					"Hazard",
					"Shard",
					"Mouth",
					"Quad",
					"Block",
					"SeriesShot",
					"Yeti"
				};
			}
			if (level == Levels.FlyingCowboy)
			{
				return new string[]
				{
					"Default",
					"Vacuum",
					"Ricochet"
				};
			}
			if (level == Levels.TowerOfPower)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.ChessBOldA)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.ChessKnight)
			{
				return new string[]
				{
					"Default",
					"Long",
					"Short",
					"Up"
				};
			}
			if (level == Levels.ChessRook)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.ChessQueen)
			{
				return new string[]
				{
					"Default",
					"Egg",
					"Lightning"
				};
			}
			if (level == Levels.ChessPawn)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.ChessKing)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.Kitchen)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.ChessBOldB)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.Saltbaker)
			{
				return new string[]
				{
					"Strawberries",
					"Sugarcubes",
					"Dough",
					"Limes"
				};
			}
			if (level == Levels.ChaliceTutorial)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level == Levels.Graveyard)
			{
				return new string[]
				{
					"Default"
				};
			}
			if (level != Levels.ChessCastle)
			{
				return new string[0];
			}
			return new string[]
			{
				"Default"
			};
		case Levels.Train:
			return new string[]
			{
				"Train"
			};
		case Levels.Veggies:
			return new string[]
			{
				"Potato",
				"Onion",
				"Beet",
				"Peas",
				"Carrot"
			};
		case Levels.Frogs:
			return new string[]
			{
				"TallFan",
				"ShortRage",
				"TallFireflies",
				"ShortClap",
				"Morph",
				"RagePlusFireflies"
			};
		case Levels.AirshipJelly:
			return new string[]
			{
				"Main"
			};
		}
	}

	// Token: 0x06000007 RID: 7 RVA: 0x000033D8 File Offset: 0x000017D8
	public static Levels GetPlatformingLevelLevel(PlatformingLevels platformingLevel)
	{
		switch (platformingLevel)
		{
		case PlatformingLevels.Platforming_Level_1_1:
			return Levels.Platforming_Level_1_1;
		case PlatformingLevels.Platforming_Level_1_2:
			return Levels.Platforming_Level_1_2;
		case PlatformingLevels.Platforming_Level_3_1:
			return Levels.Platforming_Level_3_1;
		case PlatformingLevels.Platforming_Level_3_2:
			return Levels.Platforming_Level_3_2;
		default:
			if (platformingLevel == PlatformingLevels.Platforming_Level_2_2)
			{
				return Levels.Platforming_Level_2_2;
			}
			if (platformingLevel != PlatformingLevels.Platforming_Level_2_1)
			{
				return Levels.Platforming_Level_1_1;
			}
			return Levels.Platforming_Level_2_1;
		}
	}

	// Token: 0x06000008 RID: 8 RVA: 0x00003448 File Offset: 0x00001848
	public static Levels GetDicePalaceLevel(DicePalaceLevels level)
	{
		if (level != DicePalaceLevels.DicePalaceDomino)
		{
			if (level == DicePalaceLevels.DicePalaceCard)
			{
				return Levels.DicePalaceCard;
			}
			if (level == DicePalaceLevels.DicePalaceChips)
			{
				return Levels.DicePalaceChips;
			}
			if (level == DicePalaceLevels.DicePalaceCigar)
			{
				return Levels.DicePalaceCigar;
			}
			if (level == DicePalaceLevels.DicePalaceTest)
			{
				return Levels.DicePalaceTest;
			}
			if (level == DicePalaceLevels.DicePalaceBooze)
			{
				return Levels.DicePalaceBooze;
			}
			if (level == DicePalaceLevels.DicePalaceRoulette)
			{
				return Levels.DicePalaceRoulette;
			}
			if (level == DicePalaceLevels.DicePalacePachinko)
			{
				return Levels.DicePalacePachinko;
			}
			if (level == DicePalaceLevels.DicePalaceRabbit)
			{
				return Levels.DicePalaceRabbit;
			}
			if (level == DicePalaceLevels.DicePalaceLight)
			{
				return Levels.DicePalaceLight;
			}
			if (level == DicePalaceLevels.DicePalaceFlyingHorse)
			{
				return Levels.DicePalaceFlyingHorse;
			}
			if (level == DicePalaceLevels.DicePalaceFlyingMemory)
			{
				return Levels.DicePalaceFlyingMemory;
			}
			if (level == DicePalaceLevels.DicePalaceMain)
			{
				return Levels.DicePalaceMain;
			}
			if (level == DicePalaceLevels.DicePalaceEightBall)
			{
				return Levels.DicePalaceEightBall;
			}
		}
		return Levels.DicePalaceDomino;
	}

	// Token: 0x04000039 RID: 57
	public static string[] levels = new string[]
	{
		"scene_level_test",
		"scene_level_flying_test",
		"scene_level_tutorial",
		"scene_level_pirate",
		"scene_level_bat",
		"scene_level_train",
		"scene_level_veggies",
		"scene_level_frogs",
		"scene_level_bee",
		"scene_level_mouse",
		"scene_level_dragon",
		"scene_level_flower",
		"scene_level_slime",
		"scene_level_baroness",
		"scene_level_airship_jelly",
		"scene_level_airship_stork",
		"scene_level_airship_crab",
		"scene_level_flying_bird",
		"scene_level_flying_mermaid",
		"scene_level_flying_blimp",
		"scene_level_robot",
		"scene_level_clown",
		"scene_level_sally_stage_play",
		"scene_level_dice_palace_domino",
		"scene_level_dice_palace_card",
		"scene_level_dice_palace_chips",
		"scene_level_dice_palace_cigar",
		"scene_level_dice_palace_test",
		"scene_level_dice_palace_booze",
		"scene_level_dice_palace_roulette",
		"scene_level_dice_palace_pachinko",
		"scene_level_dice_palace_rabbit",
		"scene_level_airship_clam",
		"scene_level_flying_genie",
		"scene_level_dice_palace_light",
		"scene_level_dice_palace_flying_horse",
		"scene_level_dice_palace_flying_memory",
		"scene_level_dice_palace_main",
		"scene_level_dice_palace_eight_ball",
		"scene_level_devil",
		"scene_level_retro_arcade",
		"scene_level_mausoleum",
		"scene_level_house_elder_kettle",
		"scene_level_dice_gate",
		"scene_level_shmup_tutorial",
		"scene_level_airplane",
		"scene_level_rum_runners",
		"scene_level_old_man",
		"scene_level_chess_bishop",
		"scene_level_snow_cult",
		"scene_level_flying_cowboy",
		"scene_level_tower_of_power",
		"scene_level_chess_bolda",
		"scene_level_chess_knight",
		"scene_level_chess_rook",
		"scene_level_chess_queen",
		"scene_level_chess_pawn",
		"scene_level_chess_king",
		"scene_level_kitchen",
		"scene_level_chess_boldb",
		"scene_level_saltbaker",
		"scene_level_chalice_tutorial",
		"scene_level_graveyard",
		"scene_level_chess_castle",
		"scene_level_platforming_1_1F",
		"scene_level_platforming_1_2F",
		"scene_level_platforming_3_1F",
		"scene_level_platforming_3_2F",
		"scene_level_platforming_2_2F",
		"scene_level_platforming_2_1F"
	};

	// Token: 0x02000005 RID: 5
	public class Airplane : AbstractLevelProperties<LevelProperties.Airplane.State, LevelProperties.Airplane.Pattern, LevelProperties.Airplane.States>
	{
		// Token: 0x0600000A RID: 10 RVA: 0x00003B4C File Offset: 0x00001F4C
		public Airplane(int hp, Level.GoalTimes goalTimes, LevelProperties.Airplane.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600000B RID: 11 RVA: 0x00003B58 File Offset: 0x00001F58
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1100f;
				timeline.events.Add(new Level.Timeline.Event("Leader", 0.4f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1400f;
				timeline.events.Add(new Level.Timeline.Event("Terriers", 0.62f));
				timeline.events.Add(new Level.Timeline.Event("Leader", 0.45f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1600f;
				timeline.events.Add(new Level.Timeline.Event("Terriers", 0.62f));
				timeline.events.Add(new Level.Timeline.Event("Leader", 0.45f));
				break;
			}
			return timeline;
		}

		// Token: 0x0600000C RID: 12 RVA: 0x00003C35 File Offset: 0x00002035
		public static LevelProperties.Airplane.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.Airplane.Pattern.Default;
				}
			}
			Debug.LogError("Pattern Airplane.Pattern for  " + id + " not found.", null);
			return LevelProperties.Airplane.Pattern.Uninitialized;
		}

		// Token: 0x0600000D RID: 13 RVA: 0x00003C74 File Offset: 0x00002074
		public static LevelProperties.Airplane GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Airplane.State> list = new List<LevelProperties.Airplane.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1600;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Airplane.State(10f, new LevelProperties.Airplane.Pattern[][]
						{
							new LevelProperties.Airplane.Pattern[1]
						}, LevelProperties.Airplane.States.Main, new LevelProperties.Airplane.Plane(new MinMax(-5f, 5f), new MinMax(-320f, 320f), 300f, 0.5f, -235f, -370f, -480f), new LevelProperties.Airplane.Turrets(new string[]
						{
							"3,0,1,2",
							"0,1,2,3",
							"2,1,3,0",
							"3,2,0,1",
							"2,1,0,3",
							"0,2,3,1"
						}, 0.5f, new MinMax(1.6f, 2.4f), 850f, 245f, 115f), new LevelProperties.Airplane.Main(3.8f, 1.5f, 0f, new MinMax(1.5f, 3f), "P,T"), new LevelProperties.Airplane.Rocket(255f, 1.75f, 5f, 6.5f, new string[]
						{
							"3,4,5,4,3"
						}, new string[]
						{
							"L,R,R,L,R,L,L,R,L,R"
						}), new LevelProperties.Airplane.Parachute(100f, -50f, -200f, new MinMax(2.2f, 2.8f), new MinMax(0.1f, 0.4f), new MinMax(1f, 1.4f), new string[]
						{
							"R,R,P,R,P"
						}, 300f, 200f, "L,R,R,L,R,L,L,R,L,R", 805f, 50f, 705f, 50f), new LevelProperties.Airplane.Triple(-80f, 1451f, 0.5f, 0.3f, new MinMax(0f, 0.02f), new MinMax(0f, 0.02f), 0f, 0.5f, new MinMax(-1.5f, 1.5f)), new LevelProperties.Airplane.Terriers(1.35f, new string[]
						{
							"0,2,1,3,2,1,3,0,2,1",
							"1,2,0,3,0,1,3,2,0,2"
						}, new string[]
						{
							"R,R,R,R,P,R,R,R,R,R,P"
						}, 505f, new string[]
						{
							"1.2,0.9,1.3,1,0.9,1.2,1.4,1.3,1.5",
							"1,1.3,0.9,1.1,0.9,1.3,1.4,0.9,1.5,1"
						}, 0.11f, 0.21f, 350f), new LevelProperties.Airplane.Leader(new string[]
						{
							"L,L,L,L"
						}, 0.2f), new LevelProperties.Airplane.Dropshot(new string[]
						{
							"0.6,0.6,0.4,0.4,0.8,0.5,0.4,0.6",
							"0.5,0.6,0.4,0.7,0.4,0.5,0.6",
							"0.4,0.7,0.6,0.4,0.7,0.4,0.6,0.5",
							"0.6,0.5,0.4,0.4,0.8,0.4,0.5",
							"0.5,0.4,0.6,0.8,0.5,0.6,0.4,0.5",
							"0.6,0.4,0.6,0.4,0.5,0.4,0.7"
						}, new string[]
						{
							"R,R,Y,R,Y,Y,R,Y",
							"R,Y,R,R,Y,R,Y,R",
							"R,Y,R,Y,Y,R,Y,R",
							"R,Y,R,Y,Y,R,Y,R",
							"R,Y,Y,R,R,Y,R,Y",
							"R,R,Y,R,Y,Y,R,R",
							"R,Y,R,R,Y,Y,R,Y",
							"R,Y,Y,R,Y,R,Y,R",
							"R,Y,R,Y,R,R,Y,R",
							"R,R,Y,R,Y,Y,R,Y"
						}, 1.35f, 715f, false), new LevelProperties.Airplane.Laser(new string[]
						{
							"A:B,C:D,B:E",
							"A:C,B:E,A:C:D",
							"C:D,A:B,C:E",
							"B:D,A:E,A:B:D",
							"A:D,B:C,A:E",
							"B:E,A:D,B:C:D",
							"B:C,A:D,B:E",
							"D:E,A:C,A:B:C"
						}, 0f, 0.8f, 0.5f, 0.3f, false), new LevelProperties.Airplane.SecretLeader(0.4f, 0.3f, 325f, 1.7f, 5f, 7f, new string[]
						{
							"-350,50,400,-100,-400,0,250,-300,300",
							"-400,0,400,100,-300,-50,350,-200,200"
						}, 0.2f, 0.2f, 0.6f), new LevelProperties.Airplane.SecretTerriers(new string[]
						{
							"1.3,1.1,0.9,1.5,0.8,0.9,1.3,0.9,1.4,1.7"
						}, new string[]
						{
							"3,0,1,2,3,0,2,1,0,1,3,2,1,2,3,0,2,1,3,0"
						}, 0.5f, 5f, 0.7f, 425f, 3f, true, 45f, 655f, 18f, "N,N,P,N,N,N,P")));
						list.Add(new LevelProperties.Airplane.State(0.9f, new LevelProperties.Airplane.Pattern[][]
						{
							new LevelProperties.Airplane.Pattern[0]
						}, LevelProperties.Airplane.States.Rocket, new LevelProperties.Airplane.Plane(new MinMax(-5f, 5f), new MinMax(-320f, 320f), 300f, 0.5f, -235f, -370f, -480f), new LevelProperties.Airplane.Turrets(new string[]
						{
							"3,0,1,2",
							"0,1,2,3",
							"2,1,3,0",
							"3,2,0,1",
							"2,1,0,3",
							"0,2,3,1"
						}, 0.5f, new MinMax(1.6f, 2.4f), 850f, 245f, 115f), new LevelProperties.Airplane.Main(3.8f, 1.5f, 0f, new MinMax(1.5f, 3f), "P,T"), new LevelProperties.Airplane.Rocket(255f, 1.75f, 5f, 6.5f, new string[]
						{
							"3,4,5,4,3"
						}, new string[]
						{
							"L,R,R,L,R,L,L,R,L,R"
						}), new LevelProperties.Airplane.Parachute(100f, -50f, -200f, new MinMax(2.2f, 2.8f), new MinMax(0.1f, 0.4f), new MinMax(1f, 1.4f), new string[]
						{
							"R,R,P,R,P"
						}, 300f, 200f, "L,R,R,L,R,L,L,R,L,R", 805f, 50f, 705f, 50f), new LevelProperties.Airplane.Triple(-80f, 1451f, 0.5f, 0.3f, new MinMax(0f, 0.02f), new MinMax(0f, 0.02f), 0f, 0.5f, new MinMax(-1.5f, 1.5f)), new LevelProperties.Airplane.Terriers(1.35f, new string[]
						{
							"0,2,1,3,2,1,3,0,2,1",
							"1,2,0,3,0,1,3,2,0,2"
						}, new string[]
						{
							"R,R,R,R,P,R,R,R,R,R,P"
						}, 505f, new string[]
						{
							"1.2,0.9,1.3,1,0.9,1.2,1.4,1.3,1.5",
							"1,1.3,0.9,1.1,0.9,1.3,1.4,0.9,1.5,1"
						}, 0.11f, 0.21f, 350f), new LevelProperties.Airplane.Leader(new string[]
						{
							"L,L,L,L"
						}, 0.2f), new LevelProperties.Airplane.Dropshot(new string[]
						{
							"0.6,0.6,0.4,0.4,0.8,0.5,0.4,0.6",
							"0.5,0.6,0.4,0.7,0.4,0.5,0.6",
							"0.4,0.7,0.6,0.4,0.7,0.4,0.6,0.5",
							"0.6,0.5,0.4,0.4,0.8,0.4,0.5",
							"0.5,0.4,0.6,0.8,0.5,0.6,0.4,0.5",
							"0.6,0.4,0.6,0.4,0.5,0.4,0.7"
						}, new string[]
						{
							"R,R,Y,R,Y,Y,R,Y",
							"R,Y,R,R,Y,R,Y,R",
							"R,Y,R,Y,Y,R,Y,R",
							"R,Y,R,Y,Y,R,Y,R",
							"R,Y,Y,R,R,Y,R,Y",
							"R,R,Y,R,Y,Y,R,R",
							"R,Y,R,R,Y,Y,R,Y",
							"R,Y,Y,R,Y,R,Y,R",
							"R,Y,R,Y,R,R,Y,R",
							"R,R,Y,R,Y,Y,R,Y"
						}, 1.35f, 715f, false), new LevelProperties.Airplane.Laser(new string[]
						{
							"A:B,C:D,B:E",
							"A:C,B:E,A:C:D",
							"C:D,A:B,C:E",
							"B:D,A:E,A:B:D",
							"A:D,B:C,A:E",
							"B:E,A:D,B:C:D",
							"B:C,A:D,B:E",
							"D:E,A:C,A:B:C"
						}, 0f, 0.8f, 0.5f, 0.3f, false), new LevelProperties.Airplane.SecretLeader(0.4f, 0.3f, 325f, 1.7f, 5f, 7f, new string[]
						{
							"-350,50,400,-100,-400,0,250,-300,300",
							"-400,0,400,100,-300,-50,350,-200,200"
						}, 0.2f, 0.2f, 0.6f), new LevelProperties.Airplane.SecretTerriers(new string[]
						{
							"1.3,1.1,0.9,1.5,0.8,0.9,1.3,0.9,1.4,1.7"
						}, new string[]
						{
							"3,0,1,2,3,0,2,1,0,1,3,2,1,2,3,0,2,1,3,0"
						}, 0.5f, 5f, 0.7f, 425f, 3f, true, 45f, 655f, 18f, "N,N,P,N,N,N,P")));
						list.Add(new LevelProperties.Airplane.State(0.62f, new LevelProperties.Airplane.Pattern[][]
						{
							new LevelProperties.Airplane.Pattern[0]
						}, LevelProperties.Airplane.States.Terriers, new LevelProperties.Airplane.Plane(new MinMax(-5f, 5f), new MinMax(-320f, 320f), 300f, 0.5f, -235f, -370f, -480f), new LevelProperties.Airplane.Turrets(new string[]
						{
							"3,0,1,2",
							"0,1,2,3",
							"2,1,3,0",
							"3,2,0,1",
							"2,1,0,3",
							"0,2,3,1"
						}, 0.5f, new MinMax(1.6f, 2.4f), 850f, 245f, 115f), new LevelProperties.Airplane.Main(3.8f, 1.5f, 0f, new MinMax(1.5f, 3f), "P,T"), new LevelProperties.Airplane.Rocket(255f, 1.75f, 5f, 6.5f, new string[]
						{
							"3,4,5,4,3"
						}, new string[]
						{
							"L,R,R,L,R,L,L,R,L,R"
						}), new LevelProperties.Airplane.Parachute(100f, -50f, -200f, new MinMax(2.2f, 2.8f), new MinMax(0.1f, 0.4f), new MinMax(1f, 1.4f), new string[]
						{
							"R,R,P,R,P"
						}, 300f, 200f, "L,R,R,L,R,L,L,R,L,R", 805f, 50f, 705f, 50f), new LevelProperties.Airplane.Triple(-80f, 1451f, 0.5f, 0.3f, new MinMax(0f, 0.02f), new MinMax(0f, 0.02f), 0f, 0.5f, new MinMax(-1.5f, 1.5f)), new LevelProperties.Airplane.Terriers(1.35f, new string[]
						{
							"0,2,1,3,2,1,3,0,2,1",
							"1,2,0,3,0,1,3,2,0,2"
						}, new string[]
						{
							"R,R,R,R,P,R,R,R,R,R,P"
						}, 505f, new string[]
						{
							"1.2,0.9,1.3,1,0.9,1.2,1.4,1.3,1.5",
							"1,1.3,0.9,1.1,0.9,1.3,1.4,0.9,1.5,1"
						}, 0.11f, 0.21f, 350f), new LevelProperties.Airplane.Leader(new string[]
						{
							"L,L,L,L"
						}, 0.2f), new LevelProperties.Airplane.Dropshot(new string[]
						{
							"0.6,0.6,0.4,0.4,0.8,0.5,0.4,0.6",
							"0.5,0.6,0.4,0.7,0.4,0.5,0.6",
							"0.4,0.7,0.6,0.4,0.7,0.4,0.6,0.5",
							"0.6,0.5,0.4,0.4,0.8,0.4,0.5",
							"0.5,0.4,0.6,0.8,0.5,0.6,0.4,0.5",
							"0.6,0.4,0.6,0.4,0.5,0.4,0.7"
						}, new string[]
						{
							"R,R,Y,R,Y,Y,R,Y",
							"R,Y,R,R,Y,R,Y,R",
							"R,Y,R,Y,Y,R,Y,R",
							"R,Y,R,Y,Y,R,Y,R",
							"R,Y,Y,R,R,Y,R,Y",
							"R,R,Y,R,Y,Y,R,R",
							"R,Y,R,R,Y,Y,R,Y",
							"R,Y,Y,R,Y,R,Y,R",
							"R,Y,R,Y,R,R,Y,R",
							"R,R,Y,R,Y,Y,R,Y"
						}, 1.35f, 715f, false), new LevelProperties.Airplane.Laser(new string[]
						{
							"A:B,C:D,B:E",
							"A:C,B:E,A:C:D",
							"C:D,A:B,C:E",
							"B:D,A:E,A:B:D",
							"A:D,B:C,A:E",
							"B:E,A:D,B:C:D",
							"B:C,A:D,B:E",
							"D:E,A:C,A:B:C"
						}, 0f, 0.8f, 0.5f, 0.3f, false), new LevelProperties.Airplane.SecretLeader(0.4f, 0.3f, 325f, 1.7f, 5f, 7f, new string[]
						{
							"-350,50,400,-100,-400,0,250,-300,300",
							"-400,0,400,100,-300,-50,350,-200,200"
						}, 0.2f, 0.2f, 0.6f), new LevelProperties.Airplane.SecretTerriers(new string[]
						{
							"1.3,1.1,0.9,1.5,0.8,0.9,1.3,0.9,1.4,1.7"
						}, new string[]
						{
							"3,0,1,2,3,0,2,1,0,1,3,2,1,2,3,0,2,1,3,0"
						}, 0.5f, 5f, 0.7f, 425f, 3f, true, 45f, 655f, 18f, "N,N,P,N,N,N,P")));
						list.Add(new LevelProperties.Airplane.State(0.45f, new LevelProperties.Airplane.Pattern[][]
						{
							new LevelProperties.Airplane.Pattern[0]
						}, LevelProperties.Airplane.States.Leader, new LevelProperties.Airplane.Plane(new MinMax(-5f, 5f), new MinMax(-320f, 320f), 300f, 0.5f, -235f, -370f, -480f), new LevelProperties.Airplane.Turrets(new string[]
						{
							"3,0,1,2",
							"0,1,2,3",
							"2,1,3,0",
							"3,2,0,1",
							"2,1,0,3",
							"0,2,3,1"
						}, 0.5f, new MinMax(1.6f, 2.4f), 850f, 245f, 115f), new LevelProperties.Airplane.Main(3.8f, 1.5f, 0f, new MinMax(1.5f, 3f), "P,T"), new LevelProperties.Airplane.Rocket(255f, 1.75f, 5f, 6.5f, new string[]
						{
							"3,4,5,4,3"
						}, new string[]
						{
							"L,R,R,L,R,L,L,R,L,R"
						}), new LevelProperties.Airplane.Parachute(100f, -50f, -200f, new MinMax(2.2f, 2.8f), new MinMax(0.1f, 0.4f), new MinMax(1f, 1.4f), new string[]
						{
							"R,R,P,R,P"
						}, 300f, 200f, "L,R,R,L,R,L,L,R,L,R", 805f, 50f, 705f, 50f), new LevelProperties.Airplane.Triple(-80f, 1451f, 0.5f, 0.3f, new MinMax(0f, 0.02f), new MinMax(0f, 0.02f), 0f, 0.5f, new MinMax(-1.5f, 1.5f)), new LevelProperties.Airplane.Terriers(1.35f, new string[]
						{
							"0,2,1,3,2,1,3,0,2,1",
							"1,2,0,3,0,1,3,2,0,2"
						}, new string[]
						{
							"R,R,R,R,P,R,R,R,R,R,P"
						}, 505f, new string[]
						{
							"1.2,0.9,1.3,1,0.9,1.2,1.4,1.3,1.5",
							"1,1.3,0.9,1.1,0.9,1.3,1.4,0.9,1.5,1"
						}, 0.11f, 0.21f, 350f), new LevelProperties.Airplane.Leader(new string[]
						{
							"L,L,L,L"
						}, 0.2f), new LevelProperties.Airplane.Dropshot(new string[]
						{
							"0.6,0.6,0.4,0.4,0.8,0.5,0.4,0.6",
							"0.5,0.6,0.4,0.7,0.4,0.5,0.6",
							"0.4,0.7,0.6,0.4,0.7,0.4,0.6,0.5",
							"0.6,0.5,0.4,0.4,0.8,0.4,0.5",
							"0.5,0.4,0.6,0.8,0.5,0.6,0.4,0.5",
							"0.6,0.4,0.6,0.4,0.5,0.4,0.7"
						}, new string[]
						{
							"R,R,Y,R,Y,Y,R,Y",
							"R,Y,R,R,Y,R,Y,R",
							"R,Y,R,Y,Y,R,Y,R",
							"R,Y,R,Y,Y,R,Y,R",
							"R,Y,Y,R,R,Y,R,Y",
							"R,R,Y,R,Y,Y,R,R",
							"R,Y,R,R,Y,Y,R,Y",
							"R,Y,Y,R,Y,R,Y,R",
							"R,Y,R,Y,R,R,Y,R",
							"R,R,Y,R,Y,Y,R,Y"
						}, 1.35f, 715f, false), new LevelProperties.Airplane.Laser(new string[]
						{
							"A:B,C:D,B:E",
							"A:C,B:E,A:C:D",
							"C:D,A:B,C:E",
							"B:D,A:E,A:B:D",
							"A:D,B:C,A:E",
							"B:E,A:D,B:C:D",
							"B:C,A:D,B:E",
							"D:E,A:C,A:B:C"
						}, 0f, 0.8f, 0.5f, 0.3f, false), new LevelProperties.Airplane.SecretLeader(0.4f, 0.3f, 325f, 1.7f, 5f, 7f, new string[]
						{
							"-350,50,400,-100,-400,0,250,-300,300",
							"-400,0,400,100,-300,-50,350,-200,200"
						}, 0.2f, 0.2f, 0.6f), new LevelProperties.Airplane.SecretTerriers(new string[]
						{
							"1.3,1.1,0.9,1.5,0.8,0.9,1.3,0.9,1.4,1.7"
						}, new string[]
						{
							"3,0,1,2,3,0,2,1,0,1,3,2,1,2,3,0,2,1,3,0"
						}, 0.5f, 5f, 0.7f, 425f, 3f, true, 45f, 655f, 18f, "N,N,P,N,N,N,P")));
					}
				}
				else
				{
					hp = 1400;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Airplane.State(10f, new LevelProperties.Airplane.Pattern[][]
					{
						new LevelProperties.Airplane.Pattern[1]
					}, LevelProperties.Airplane.States.Main, new LevelProperties.Airplane.Plane(new MinMax(-5f, 5f), new MinMax(-300f, 300f), 300f, 0.5f, -235f, -370f, -480f), new LevelProperties.Airplane.Turrets(new string[]
					{
						"0,2,1,3",
						"2,1,3,0",
						"3,2,0,1",
						"2,1,0,3",
						"0,1,3,2",
						"3,0,1,2"
					}, 0.5f, new MinMax(2.4f, 3.2f), 850f, 265f, 115f), new LevelProperties.Airplane.Main(3.8f, 1.5f, 0.4f, new MinMax(2f, 3.5f), "P,T"), new LevelProperties.Airplane.Rocket(235f, 1.6f, 5f, 7f, new string[]
					{
						"3,4,5,4"
					}, new string[]
					{
						"L,R,R,L,R,L,L,R,L,R"
					}), new LevelProperties.Airplane.Parachute(100f, -50f, -200f, new MinMax(2.5f, 2.7f), new MinMax(1.4f, 1.6f), new MinMax(0.1f, 0.3f), new string[]
					{
						"R,R,P,R,P"
					}, 300f, 200f, "L,R,R,L,R,L,L,R,L,R", 1000f, 50f, 900f, 50f), new LevelProperties.Airplane.Triple(-80f, 1205f, 0.6f, 0.3f, new MinMax(0f, 0.01f), new MinMax(0f, 0.01f), 0f, 0.5f, new MinMax(-1.5f, 1.5f)), new LevelProperties.Airplane.Terriers(1.25f, new string[]
					{
						"0,1,2,3",
						"0,1,2,3"
					}, new string[]
					{
						"R,R,R,P,R,R,R,R,P,R,R,R,P"
					}, 465f, new string[]
					{
						"1.2,0.9,1.3,1,1.2,1.4,1.3,1.5,1.8",
						"1,1.3,0.9,1.1,2,0.9,1.3,1.4,0.9,1"
					}, 0.08f, 0.21f, 350f), new LevelProperties.Airplane.Leader(new string[]
					{
						"L,L,L,L"
					}, 0.2f), new LevelProperties.Airplane.Dropshot(new string[]
					{
						"0.6,0.5,0.8,0.6,1.1,0.6",
						"0.6,0.7,0.7,0.9,0.6",
						"0.5,0.6,0.7,0.7,0.8,0.7",
						"0.7,0.6,0.9,0.6,0.7",
						"0.5,0.5,0.8,0.6,1,0.6",
						"0.6,0.6,0.7,0.6,0.9"
					}, new string[]
					{
						"Y,R,Y,R,R,Y",
						"R,R,Y,R,Y,R",
						"Y,R,Y,R,Y,R",
						"R,Y,Y,R,R,Y",
						"Y,R,R,Y,R,R",
						"Y,R,Y,Y,R,Y",
						"R,R,Y,R,Y,R",
						"R,Y,R,R,Y,R",
						"Y,R,Y,R,R,Y",
						"R,Y,R,Y,R,Y",
						"R,R,Y,R,Y,R",
						"Y,R,R,Y,R,R"
					}, 1.25f, 685f, false), new LevelProperties.Airplane.Laser(new string[]
					{
						"D,A:C,E",
						"A,B:C,E",
						"B:D,A,B:E",
						"C,A:D,E",
						"A,B:D,E",
						"A:C,B,D:E",
						"B,C:D,E",
						"D,A:B,E",
						"C:D,B,A:E",
						"A,B:C,E",
						"C,A:D,E",
						"A:B,D,C:E"
					}, 0f, 0.8f, 0.5f, 0.3f, false), new LevelProperties.Airplane.SecretLeader(0.4f, 0.8f, 295f, 1.7f, 5f, 7f, new string[]
					{
						"-400,0,400,100,-300,-50,350,-200,200",
						"-350,50,400,-100,-400,0,250,-300,300"
					}, 0.2f, 0.2f, 0.6f), new LevelProperties.Airplane.SecretTerriers(new string[]
					{
						"2,1.5,1.5,1,1.5,1,2,1,1.5,1,2,1.5,1"
					}, new string[]
					{
						"3,0,1,2,3,0,2,1,0,1,3,2,1,2,3,0,2,1,3,0"
					}, 0.5f, 5.5f, 0.6f, 400f, 3f, true, 50f, 585f, 15f, "N,N,P,N,N,N,P")));
					list.Add(new LevelProperties.Airplane.State(0.83f, new LevelProperties.Airplane.Pattern[][]
					{
						new LevelProperties.Airplane.Pattern[1]
					}, LevelProperties.Airplane.States.Rocket, new LevelProperties.Airplane.Plane(new MinMax(-5f, 5f), new MinMax(-300f, 300f), 300f, 0.5f, -235f, -370f, -480f), new LevelProperties.Airplane.Turrets(new string[]
					{
						"0,2,1,3",
						"2,1,3,0",
						"3,2,0,1",
						"2,1,0,3",
						"0,1,3,2",
						"3,0,1,2"
					}, 0.5f, new MinMax(2.4f, 3.2f), 850f, 265f, 115f), new LevelProperties.Airplane.Main(3.8f, 1.5f, 0.4f, new MinMax(2f, 3.5f), "P,T"), new LevelProperties.Airplane.Rocket(235f, 1.6f, 5f, 7f, new string[]
					{
						"3,4,5,4"
					}, new string[]
					{
						"L,R,R,L,R,L,L,R,L,R"
					}), new LevelProperties.Airplane.Parachute(100f, -50f, -200f, new MinMax(2.5f, 2.7f), new MinMax(1.4f, 1.6f), new MinMax(0.1f, 0.3f), new string[]
					{
						"R,R,P,R,P"
					}, 300f, 200f, "L,R,R,L,R,L,L,R,L,R", 1000f, 50f, 900f, 50f), new LevelProperties.Airplane.Triple(-80f, 1205f, 0.6f, 0.3f, new MinMax(0f, 0.01f), new MinMax(0f, 0.01f), 0f, 0.5f, new MinMax(-1.5f, 1.5f)), new LevelProperties.Airplane.Terriers(1.25f, new string[]
					{
						"0,1,2,3",
						"0,1,2,3"
					}, new string[]
					{
						"R,R,R,P,R,R,R,R,P,R,R,R,P"
					}, 465f, new string[]
					{
						"1.2,0.9,1.3,1,1.2,1.4,1.3,1.5,1.8",
						"1,1.3,0.9,1.1,2,0.9,1.3,1.4,0.9,1"
					}, 0.08f, 0.21f, 350f), new LevelProperties.Airplane.Leader(new string[]
					{
						"L,L,L,L"
					}, 0.2f), new LevelProperties.Airplane.Dropshot(new string[]
					{
						"0.6,0.5,0.8,0.6,1.1,0.6",
						"0.6,0.7,0.7,0.9,0.6",
						"0.5,0.6,0.7,0.7,0.8,0.7",
						"0.7,0.6,0.9,0.6,0.7",
						"0.5,0.5,0.8,0.6,1,0.6",
						"0.6,0.6,0.7,0.6,0.9"
					}, new string[]
					{
						"Y,R,Y,R,R,Y",
						"R,R,Y,R,Y,R",
						"Y,R,Y,R,Y,R",
						"R,Y,Y,R,R,Y",
						"Y,R,R,Y,R,R",
						"Y,R,Y,Y,R,Y",
						"R,R,Y,R,Y,R",
						"R,Y,R,R,Y,R",
						"Y,R,Y,R,R,Y",
						"R,Y,R,Y,R,Y",
						"R,R,Y,R,Y,R",
						"Y,R,R,Y,R,R"
					}, 1.25f, 685f, false), new LevelProperties.Airplane.Laser(new string[]
					{
						"D,A:C,E",
						"A,B:C,E",
						"B:D,A,B:E",
						"C,A:D,E",
						"A,B:D,E",
						"A:C,B,D:E",
						"B,C:D,E",
						"D,A:B,E",
						"C:D,B,A:E",
						"A,B:C,E",
						"C,A:D,E",
						"A:B,D,C:E"
					}, 0f, 0.8f, 0.5f, 0.3f, false), new LevelProperties.Airplane.SecretLeader(0.4f, 0.8f, 295f, 1.7f, 5f, 7f, new string[]
					{
						"-400,0,400,100,-300,-50,350,-200,200",
						"-350,50,400,-100,-400,0,250,-300,300"
					}, 0.2f, 0.2f, 0.6f), new LevelProperties.Airplane.SecretTerriers(new string[]
					{
						"2,1.5,1.5,1,1.5,1,2,1,1.5,1,2,1.5,1"
					}, new string[]
					{
						"3,0,1,2,3,0,2,1,0,1,3,2,1,2,3,0,2,1,3,0"
					}, 0.5f, 5.5f, 0.6f, 400f, 3f, true, 50f, 585f, 15f, "N,N,P,N,N,N,P")));
					list.Add(new LevelProperties.Airplane.State(0.62f, new LevelProperties.Airplane.Pattern[][]
					{
						new LevelProperties.Airplane.Pattern[0]
					}, LevelProperties.Airplane.States.Terriers, new LevelProperties.Airplane.Plane(new MinMax(-5f, 5f), new MinMax(-300f, 300f), 300f, 0.5f, -235f, -370f, -480f), new LevelProperties.Airplane.Turrets(new string[]
					{
						"0,2,1,3",
						"2,1,3,0",
						"3,2,0,1",
						"2,1,0,3",
						"0,1,3,2",
						"3,0,1,2"
					}, 0.5f, new MinMax(2.4f, 3.2f), 850f, 265f, 115f), new LevelProperties.Airplane.Main(3.8f, 1.5f, 0.4f, new MinMax(2f, 3.5f), "P,T"), new LevelProperties.Airplane.Rocket(235f, 1.6f, 5f, 7f, new string[]
					{
						"3,4,5,4"
					}, new string[]
					{
						"L,R,R,L,R,L,L,R,L,R"
					}), new LevelProperties.Airplane.Parachute(100f, -50f, -200f, new MinMax(2.5f, 2.7f), new MinMax(1.4f, 1.6f), new MinMax(0.1f, 0.3f), new string[]
					{
						"R,R,P,R,P"
					}, 300f, 200f, "L,R,R,L,R,L,L,R,L,R", 1000f, 50f, 900f, 50f), new LevelProperties.Airplane.Triple(-80f, 1205f, 0.6f, 0.3f, new MinMax(0f, 0.01f), new MinMax(0f, 0.01f), 0f, 0.5f, new MinMax(-1.5f, 1.5f)), new LevelProperties.Airplane.Terriers(1.25f, new string[]
					{
						"0,1,2,3",
						"0,1,2,3"
					}, new string[]
					{
						"R,R,R,P,R,R,R,R,P,R,R,R,P"
					}, 465f, new string[]
					{
						"1.2,0.9,1.3,1,1.2,1.4,1.3,1.5,1.8",
						"1,1.3,0.9,1.1,2,0.9,1.3,1.4,0.9,1"
					}, 0.08f, 0.21f, 350f), new LevelProperties.Airplane.Leader(new string[]
					{
						"L,L,L,L"
					}, 0.2f), new LevelProperties.Airplane.Dropshot(new string[]
					{
						"0.6,0.5,0.8,0.6,1.1,0.6",
						"0.6,0.7,0.7,0.9,0.6",
						"0.5,0.6,0.7,0.7,0.8,0.7",
						"0.7,0.6,0.9,0.6,0.7",
						"0.5,0.5,0.8,0.6,1,0.6",
						"0.6,0.6,0.7,0.6,0.9"
					}, new string[]
					{
						"Y,R,Y,R,R,Y",
						"R,R,Y,R,Y,R",
						"Y,R,Y,R,Y,R",
						"R,Y,Y,R,R,Y",
						"Y,R,R,Y,R,R",
						"Y,R,Y,Y,R,Y",
						"R,R,Y,R,Y,R",
						"R,Y,R,R,Y,R",
						"Y,R,Y,R,R,Y",
						"R,Y,R,Y,R,Y",
						"R,R,Y,R,Y,R",
						"Y,R,R,Y,R,R"
					}, 1.25f, 685f, false), new LevelProperties.Airplane.Laser(new string[]
					{
						"D,A:C,E",
						"A,B:C,E",
						"B:D,A,B:E",
						"C,A:D,E",
						"A,B:D,E",
						"A:C,B,D:E",
						"B,C:D,E",
						"D,A:B,E",
						"C:D,B,A:E",
						"A,B:C,E",
						"C,A:D,E",
						"A:B,D,C:E"
					}, 0f, 0.8f, 0.5f, 0.3f, false), new LevelProperties.Airplane.SecretLeader(0.4f, 0.8f, 295f, 1.7f, 5f, 7f, new string[]
					{
						"-400,0,400,100,-300,-50,350,-200,200",
						"-350,50,400,-100,-400,0,250,-300,300"
					}, 0.2f, 0.2f, 0.6f), new LevelProperties.Airplane.SecretTerriers(new string[]
					{
						"2,1.5,1.5,1,1.5,1,2,1,1.5,1,2,1.5,1"
					}, new string[]
					{
						"3,0,1,2,3,0,2,1,0,1,3,2,1,2,3,0,2,1,3,0"
					}, 0.5f, 5.5f, 0.6f, 400f, 3f, true, 50f, 585f, 15f, "N,N,P,N,N,N,P")));
					list.Add(new LevelProperties.Airplane.State(0.45f, new LevelProperties.Airplane.Pattern[][]
					{
						new LevelProperties.Airplane.Pattern[0]
					}, LevelProperties.Airplane.States.Leader, new LevelProperties.Airplane.Plane(new MinMax(-5f, 5f), new MinMax(-300f, 300f), 300f, 0.5f, -235f, -370f, -480f), new LevelProperties.Airplane.Turrets(new string[]
					{
						"0,2,1,3",
						"2,1,3,0",
						"3,2,0,1",
						"2,1,0,3",
						"0,1,3,2",
						"3,0,1,2"
					}, 0.5f, new MinMax(2.4f, 3.2f), 850f, 265f, 115f), new LevelProperties.Airplane.Main(3.8f, 1.5f, 0.4f, new MinMax(2f, 3.5f), "P,T"), new LevelProperties.Airplane.Rocket(235f, 1.6f, 5f, 7f, new string[]
					{
						"3,4,5,4"
					}, new string[]
					{
						"L,R,R,L,R,L,L,R,L,R"
					}), new LevelProperties.Airplane.Parachute(100f, -50f, -200f, new MinMax(2.5f, 2.7f), new MinMax(1.4f, 1.6f), new MinMax(0.1f, 0.3f), new string[]
					{
						"R,R,P,R,P"
					}, 300f, 200f, "L,R,R,L,R,L,L,R,L,R", 1000f, 50f, 900f, 50f), new LevelProperties.Airplane.Triple(-80f, 1205f, 0.6f, 0.3f, new MinMax(0f, 0.01f), new MinMax(0f, 0.01f), 0f, 0.5f, new MinMax(-1.5f, 1.5f)), new LevelProperties.Airplane.Terriers(1.25f, new string[]
					{
						"0,1,2,3",
						"0,1,2,3"
					}, new string[]
					{
						"R,R,R,P,R,R,R,R,P,R,R,R,P"
					}, 465f, new string[]
					{
						"1.2,0.9,1.3,1,1.2,1.4,1.3,1.5,1.8",
						"1,1.3,0.9,1.1,2,0.9,1.3,1.4,0.9,1"
					}, 0.08f, 0.21f, 350f), new LevelProperties.Airplane.Leader(new string[]
					{
						"L,L,L,L"
					}, 0.2f), new LevelProperties.Airplane.Dropshot(new string[]
					{
						"0.6,0.5,0.8,0.6,1.1,0.6",
						"0.6,0.7,0.7,0.9,0.6",
						"0.5,0.6,0.7,0.7,0.8,0.7",
						"0.7,0.6,0.9,0.6,0.7",
						"0.5,0.5,0.8,0.6,1,0.6",
						"0.6,0.6,0.7,0.6,0.9"
					}, new string[]
					{
						"Y,R,Y,R,R,Y",
						"R,R,Y,R,Y,R",
						"Y,R,Y,R,Y,R",
						"R,Y,Y,R,R,Y",
						"Y,R,R,Y,R,R",
						"Y,R,Y,Y,R,Y",
						"R,R,Y,R,Y,R",
						"R,Y,R,R,Y,R",
						"Y,R,Y,R,R,Y",
						"R,Y,R,Y,R,Y",
						"R,R,Y,R,Y,R",
						"Y,R,R,Y,R,R"
					}, 1.25f, 685f, false), new LevelProperties.Airplane.Laser(new string[]
					{
						"D,A:C,E",
						"A,B:C,E",
						"B:D,A,B:E",
						"C,A:D,E",
						"A,B:D,E",
						"A:C,B,D:E",
						"B,C:D,E",
						"D,A:B,E",
						"C:D,B,A:E",
						"A,B:C,E",
						"C,A:D,E",
						"A:B,D,C:E"
					}, 0f, 0.8f, 0.5f, 0.3f, false), new LevelProperties.Airplane.SecretLeader(0.4f, 0.8f, 295f, 1.7f, 5f, 7f, new string[]
					{
						"-400,0,400,100,-300,-50,350,-200,200",
						"-350,50,400,-100,-400,0,250,-300,300"
					}, 0.2f, 0.2f, 0.6f), new LevelProperties.Airplane.SecretTerriers(new string[]
					{
						"2,1.5,1.5,1,1.5,1,2,1,1.5,1,2,1.5,1"
					}, new string[]
					{
						"3,0,1,2,3,0,2,1,0,1,3,2,1,2,3,0,2,1,3,0"
					}, 0.5f, 5.5f, 0.6f, 400f, 3f, true, 50f, 585f, 15f, "N,N,P,N,N,N,P")));
				}
			}
			else
			{
				hp = 1100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Airplane.State(10f, new LevelProperties.Airplane.Pattern[][]
				{
					new LevelProperties.Airplane.Pattern[1]
				}, LevelProperties.Airplane.States.Main, new LevelProperties.Airplane.Plane(new MinMax(-5f, 5f), new MinMax(-280f, 280f), 300f, 0.5f, -235f, -370f, -480f), new LevelProperties.Airplane.Turrets(new string[]
				{
					"0,1,2,3"
				}, 0.5f, new MinMax(3.1f, 3.8f), 805f, 285f, 111f), new LevelProperties.Airplane.Main(3.8f, 1.5f, 0f, new MinMax(2.5f, 4f), "P,T"), new LevelProperties.Airplane.Rocket(225f, 1.7f, 5f, 4f, new string[]
				{
					"4,5,6,5"
				}, new string[]
				{
					"L,R,R,L,R,L,L,R,L,R"
				}), new LevelProperties.Airplane.Parachute(100f, -50f, -200f, new MinMax(0f, 0.3f), new MinMax(0.3f, 0.6f), new MinMax(0.6f, 0.9f), new string[]
				{
					"R,P,R,P"
				}, 300f, 200f, "L,R,R,L,R,L,L,R,L,R", 900f, 50f, 800f, 50f), new LevelProperties.Airplane.Triple(-80f, 1015f, 0.6f, 0.3f, new MinMax(0.05f, 0.05f), new MinMax(0f, 0.01f), 0f, 0.5f, new MinMax(-1.5f, 1.5f)), new LevelProperties.Airplane.Terriers(1.5f, new string[]
				{
					"0,2,1,3,2,1,3,0,2,1",
					"1,2,0,3,0,1,3,2,0,2"
				}, new string[]
				{
					"R,R,P,R,R,R,P,R,R,R,R,R,P,R,P"
				}, 485f, new string[]
				{
					"1,1.5,1,1.5,2,1,1.5,2"
				}, 0.11f, 0f, 350f), new LevelProperties.Airplane.Leader(new string[]
				{
					"L,L,L,L"
				}, 0.2f), new LevelProperties.Airplane.Dropshot(new string[]
				{
					"0.4,0.6,0.4,0.9,0.5,0.5,0.4,0.5,0.9",
					"0.7,1.2,0.7,0.6,1,1.3,0.7,1,0.6,1"
				}, new string[]
				{
					"R,R,Y,R,Y,Y,Y,R,Y,R,Y,Y,R,Y,Y,R,Y,Y,Y",
					"R,Y,R,R,Y,R,Y,Y,Y,R,Y,Y,R,Y,Y,Y,Y,R,R,Y"
				}, 700f, 750f, false), new LevelProperties.Airplane.Laser(new string[]
				{
					"A,B,C:D",
					"A,C,B:D",
					"E",
					"B,A,C:D",
					"B,C,A:B",
					"E",
					"A,D,B:C",
					"B,C,A:D",
					"E",
					"D,B,A:C",
					"C,A,B:D",
					"E"
				}, 0f, 0.9f, 0.5f, 0.3f, false), new LevelProperties.Airplane.SecretLeader(0f, 0f, 0f, 0f, 0f, 0f, new string[0], 0f, 0f, 0f), new LevelProperties.Airplane.SecretTerriers(new string[0], new string[0], 0f, 0f, 0f, 0f, 0f, false, 0f, 0f, 0f, string.Empty)));
				list.Add(new LevelProperties.Airplane.State(0.8f, new LevelProperties.Airplane.Pattern[][]
				{
					new LevelProperties.Airplane.Pattern[0]
				}, LevelProperties.Airplane.States.Rocket, new LevelProperties.Airplane.Plane(new MinMax(-5f, 5f), new MinMax(-280f, 280f), 300f, 0.5f, -235f, -370f, -480f), new LevelProperties.Airplane.Turrets(new string[]
				{
					"0,1,2,3"
				}, 0.5f, new MinMax(3.1f, 3.8f), 805f, 285f, 111f), new LevelProperties.Airplane.Main(3.8f, 1.5f, 0f, new MinMax(2.5f, 4f), "P,T"), new LevelProperties.Airplane.Rocket(225f, 1.7f, 5f, 4f, new string[]
				{
					"4,5,6,5"
				}, new string[]
				{
					"L,R,R,L,R,L,L,R,L,R"
				}), new LevelProperties.Airplane.Parachute(100f, -50f, -200f, new MinMax(0f, 0.3f), new MinMax(0.3f, 0.6f), new MinMax(0.6f, 0.9f), new string[]
				{
					"R,P,R,P"
				}, 300f, 200f, "L,R,R,L,R,L,L,R,L,R", 900f, 50f, 800f, 50f), new LevelProperties.Airplane.Triple(-80f, 1015f, 0.6f, 0.3f, new MinMax(0.05f, 0.05f), new MinMax(0f, 0.01f), 0f, 0.5f, new MinMax(-1.5f, 1.5f)), new LevelProperties.Airplane.Terriers(1.5f, new string[]
				{
					"0,2,1,3,2,1,3,0,2,1",
					"1,2,0,3,0,1,3,2,0,2"
				}, new string[]
				{
					"R,R,P,R,R,R,P,R,R,R,R,R,P,R,P"
				}, 485f, new string[]
				{
					"1,1.5,1,1.5,2,1,1.5,2"
				}, 0.11f, 0f, 350f), new LevelProperties.Airplane.Leader(new string[]
				{
					"L,L,L,L"
				}, 0.2f), new LevelProperties.Airplane.Dropshot(new string[]
				{
					"0.4,0.6,0.4,0.9,0.5,0.5,0.4,0.5,0.9",
					"0.7,1.2,0.7,0.6,1,1.3,0.7,1,0.6,1"
				}, new string[]
				{
					"R,R,Y,R,Y,Y,Y,R,Y,R,Y,Y,R,Y,Y,R,Y,Y,Y",
					"R,Y,R,R,Y,R,Y,Y,Y,R,Y,Y,R,Y,Y,Y,Y,R,R,Y"
				}, 700f, 750f, false), new LevelProperties.Airplane.Laser(new string[]
				{
					"A,B,C:D",
					"A,C,B:D",
					"E",
					"B,A,C:D",
					"B,C,A:B",
					"E",
					"A,D,B:C",
					"B,C,A:D",
					"E",
					"D,B,A:C",
					"C,A,B:D",
					"E"
				}, 0f, 0.9f, 0.5f, 0.3f, false), new LevelProperties.Airplane.SecretLeader(0f, 0f, 0f, 0f, 0f, 0f, new string[0], 0f, 0f, 0f), new LevelProperties.Airplane.SecretTerriers(new string[0], new string[0], 0f, 0f, 0f, 0f, 0f, false, 0f, 0f, 0f, string.Empty)));
				list.Add(new LevelProperties.Airplane.State(0.4f, new LevelProperties.Airplane.Pattern[][]
				{
					new LevelProperties.Airplane.Pattern[0]
				}, LevelProperties.Airplane.States.Leader, new LevelProperties.Airplane.Plane(new MinMax(-5f, 5f), new MinMax(-280f, 280f), 300f, 0.5f, -235f, -370f, -480f), new LevelProperties.Airplane.Turrets(new string[]
				{
					"0,1,2,3"
				}, 0.5f, new MinMax(3.1f, 3.8f), 805f, 285f, 111f), new LevelProperties.Airplane.Main(3.8f, 1.5f, 0f, new MinMax(2.5f, 4f), "P,T"), new LevelProperties.Airplane.Rocket(225f, 1.7f, 5f, 4f, new string[]
				{
					"4,5,6,5"
				}, new string[]
				{
					"L,R,R,L,R,L,L,R,L,R"
				}), new LevelProperties.Airplane.Parachute(100f, -50f, -200f, new MinMax(0f, 0.3f), new MinMax(0.3f, 0.6f), new MinMax(0.6f, 0.9f), new string[]
				{
					"R,P,R,P"
				}, 300f, 200f, "L,R,R,L,R,L,L,R,L,R", 900f, 50f, 800f, 50f), new LevelProperties.Airplane.Triple(-80f, 1015f, 0.6f, 0.3f, new MinMax(0.05f, 0.05f), new MinMax(0f, 0.01f), 0f, 0.5f, new MinMax(-1.5f, 1.5f)), new LevelProperties.Airplane.Terriers(1.5f, new string[]
				{
					"0,2,1,3,2,1,3,0,2,1",
					"1,2,0,3,0,1,3,2,0,2"
				}, new string[]
				{
					"R,R,P,R,R,R,P,R,R,R,R,R,P,R,P"
				}, 485f, new string[]
				{
					"1,1.5,1,1.5,2,1,1.5,2"
				}, 0.11f, 0f, 350f), new LevelProperties.Airplane.Leader(new string[]
				{
					"L,L,L,L"
				}, 0.2f), new LevelProperties.Airplane.Dropshot(new string[]
				{
					"0.4,0.6,0.4,0.9,0.5,0.5,0.4,0.5,0.9",
					"0.7,1.2,0.7,0.6,1,1.3,0.7,1,0.6,1"
				}, new string[]
				{
					"R,R,Y,R,Y,Y,Y,R,Y,R,Y,Y,R,Y,Y,R,Y,Y,Y",
					"R,Y,R,R,Y,R,Y,Y,Y,R,Y,Y,R,Y,Y,Y,Y,R,R,Y"
				}, 700f, 750f, false), new LevelProperties.Airplane.Laser(new string[]
				{
					"A,B,C:D",
					"A,C,B:D",
					"E",
					"B,A,C:D",
					"B,C,A:B",
					"E",
					"A,D,B:C",
					"B,C,A:D",
					"E",
					"D,B,A:C",
					"C,A,B:D",
					"E"
				}, 0f, 0.9f, 0.5f, 0.3f, false), new LevelProperties.Airplane.SecretLeader(0f, 0f, 0f, 0f, 0f, 0f, new string[0], 0f, 0f, 0f), new LevelProperties.Airplane.SecretTerriers(new string[0], new string[0], 0f, 0f, 0f, 0f, 0f, false, 0f, 0f, 0f, string.Empty)));
			}
			return new LevelProperties.Airplane(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000006 RID: 6
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000002 RID: 2
			// (get) Token: 0x0600000F RID: 15 RVA: 0x00008AA7 File Offset: 0x00006EA7
			// (set) Token: 0x06000010 RID: 16 RVA: 0x00008AAF File Offset: 0x00006EAF
			private protected LevelProperties.Airplane properties { protected get; private set; }

			// Token: 0x06000011 RID: 17 RVA: 0x00008AB8 File Offset: 0x00006EB8
			public virtual void LevelInit(LevelProperties.Airplane properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000012 RID: 18 RVA: 0x00008AC1 File Offset: 0x00006EC1
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000007 RID: 7
		public enum States
		{
			// Token: 0x0400003C RID: 60
			Main,
			// Token: 0x0400003D RID: 61
			Generic,
			// Token: 0x0400003E RID: 62
			Rocket,
			// Token: 0x0400003F RID: 63
			Terriers,
			// Token: 0x04000040 RID: 64
			Leader
		}

		// Token: 0x02000008 RID: 8
		public enum Pattern
		{
			// Token: 0x04000042 RID: 66
			Default,
			// Token: 0x04000043 RID: 67
			Uninitialized
		}

		// Token: 0x02000009 RID: 9
		public class State : AbstractLevelState<LevelProperties.Airplane.Pattern, LevelProperties.Airplane.States>
		{
			// Token: 0x06000013 RID: 19 RVA: 0x00008B9C File Offset: 0x00006F9C
			public State(float healthTrigger, LevelProperties.Airplane.Pattern[][] patterns, LevelProperties.Airplane.States stateName, LevelProperties.Airplane.Plane plane, LevelProperties.Airplane.Turrets turrets, LevelProperties.Airplane.Main main, LevelProperties.Airplane.Rocket rocket, LevelProperties.Airplane.Parachute parachute, LevelProperties.Airplane.Triple triple, LevelProperties.Airplane.Terriers terriers, LevelProperties.Airplane.Leader leader, LevelProperties.Airplane.Dropshot dropshot, LevelProperties.Airplane.Laser laser, LevelProperties.Airplane.SecretLeader secretLeader, LevelProperties.Airplane.SecretTerriers secretTerriers) : base(healthTrigger, patterns, stateName)
			{
				this.plane = plane;
				this.turrets = turrets;
				this.main = main;
				this.rocket = rocket;
				this.parachute = parachute;
				this.triple = triple;
				this.terriers = terriers;
				this.leader = leader;
				this.dropshot = dropshot;
				this.laser = laser;
				this.secretLeader = secretLeader;
				this.secretTerriers = secretTerriers;
			}

			// Token: 0x04000044 RID: 68
			public readonly LevelProperties.Airplane.Plane plane;

			// Token: 0x04000045 RID: 69
			public readonly LevelProperties.Airplane.Turrets turrets;

			// Token: 0x04000046 RID: 70
			public readonly LevelProperties.Airplane.Main main;

			// Token: 0x04000047 RID: 71
			public readonly LevelProperties.Airplane.Rocket rocket;

			// Token: 0x04000048 RID: 72
			public readonly LevelProperties.Airplane.Parachute parachute;

			// Token: 0x04000049 RID: 73
			public readonly LevelProperties.Airplane.Triple triple;

			// Token: 0x0400004A RID: 74
			public readonly LevelProperties.Airplane.Terriers terriers;

			// Token: 0x0400004B RID: 75
			public readonly LevelProperties.Airplane.Leader leader;

			// Token: 0x0400004C RID: 76
			public readonly LevelProperties.Airplane.Dropshot dropshot;

			// Token: 0x0400004D RID: 77
			public readonly LevelProperties.Airplane.Laser laser;

			// Token: 0x0400004E RID: 78
			public readonly LevelProperties.Airplane.SecretLeader secretLeader;

			// Token: 0x0400004F RID: 79
			public readonly LevelProperties.Airplane.SecretTerriers secretTerriers;
		}

		// Token: 0x0200000A RID: 10
		public class Plane : AbstractLevelPropertyGroup
		{
			// Token: 0x06000014 RID: 20 RVA: 0x00008C1A File Offset: 0x0000701A
			public Plane(MinMax tiltAngle, MinMax speedAtMaxTilt, float endScreenOffset, float decelerationAmount, float moveDown, float moveDownPhThree, float moveWhenRotate)
			{
				this.tiltAngle = tiltAngle;
				this.speedAtMaxTilt = speedAtMaxTilt;
				this.endScreenOffset = endScreenOffset;
				this.decelerationAmount = decelerationAmount;
				this.moveDown = moveDown;
				this.moveDownPhThree = moveDownPhThree;
				this.moveWhenRotate = moveWhenRotate;
			}

			// Token: 0x04000050 RID: 80
			public readonly MinMax tiltAngle;

			// Token: 0x04000051 RID: 81
			public readonly MinMax speedAtMaxTilt;

			// Token: 0x04000052 RID: 82
			public readonly float endScreenOffset;

			// Token: 0x04000053 RID: 83
			public readonly float decelerationAmount;

			// Token: 0x04000054 RID: 84
			public readonly float moveDown;

			// Token: 0x04000055 RID: 85
			public readonly float moveDownPhThree;

			// Token: 0x04000056 RID: 86
			public readonly float moveWhenRotate;
		}

		// Token: 0x0200000B RID: 11
		public class Turrets : AbstractLevelPropertyGroup
		{
			// Token: 0x06000015 RID: 21 RVA: 0x00008C57 File Offset: 0x00007057
			public Turrets(string[] positionString, float warningDuration, MinMax attackDelayRange, float gravity, float velocityX, float velocityY)
			{
				this.positionString = positionString;
				this.warningDuration = warningDuration;
				this.attackDelayRange = attackDelayRange;
				this.gravity = gravity;
				this.velocityX = velocityX;
				this.velocityY = velocityY;
			}

			// Token: 0x04000057 RID: 87
			public readonly string[] positionString;

			// Token: 0x04000058 RID: 88
			public readonly float warningDuration;

			// Token: 0x04000059 RID: 89
			public readonly MinMax attackDelayRange;

			// Token: 0x0400005A RID: 90
			public readonly float gravity;

			// Token: 0x0400005B RID: 91
			public readonly float velocityX;

			// Token: 0x0400005C RID: 92
			public readonly float velocityY;
		}

		// Token: 0x0200000C RID: 12
		public class Main : AbstractLevelPropertyGroup
		{
			// Token: 0x06000016 RID: 22 RVA: 0x00008C8C File Offset: 0x0000708C
			public Main(float moveTime, float introTime, float firstAttackDelay, MinMax attackDelayRange, string attackType)
			{
				this.moveTime = moveTime;
				this.introTime = introTime;
				this.firstAttackDelay = firstAttackDelay;
				this.attackDelayRange = attackDelayRange;
				this.attackType = attackType;
			}

			// Token: 0x0400005D RID: 93
			public readonly float moveTime;

			// Token: 0x0400005E RID: 94
			public readonly float introTime;

			// Token: 0x0400005F RID: 95
			public readonly float firstAttackDelay;

			// Token: 0x04000060 RID: 96
			public readonly MinMax attackDelayRange;

			// Token: 0x04000061 RID: 97
			public readonly string attackType;
		}

		// Token: 0x0200000D RID: 13
		public class Rocket : AbstractLevelPropertyGroup
		{
			// Token: 0x06000017 RID: 23 RVA: 0x00008CB9 File Offset: 0x000070B9
			public Rocket(float homingSpeed, float homingRotation, float homingHP, float homingTime, string[] attackDelayString, string[] attackOrderString)
			{
				this.homingSpeed = homingSpeed;
				this.homingRotation = homingRotation;
				this.homingHP = homingHP;
				this.homingTime = homingTime;
				this.attackDelayString = attackDelayString;
				this.attackOrderString = attackOrderString;
			}

			// Token: 0x04000062 RID: 98
			public readonly float homingSpeed;

			// Token: 0x04000063 RID: 99
			public readonly float homingRotation;

			// Token: 0x04000064 RID: 100
			public readonly float homingHP;

			// Token: 0x04000065 RID: 101
			public readonly float homingTime;

			// Token: 0x04000066 RID: 102
			public readonly string[] attackDelayString;

			// Token: 0x04000067 RID: 103
			public readonly string[] attackOrderString;
		}

		// Token: 0x0200000E RID: 14
		public class Parachute : AbstractLevelPropertyGroup
		{
			// Token: 0x06000018 RID: 24 RVA: 0x00008CF0 File Offset: 0x000070F0
			public Parachute(float shotACoordY, float shotBCoordY, float shotCCoordY, MinMax shotAReturnDelay, MinMax shotBReturnDelay, MinMax shotCReturnDelay, string[] pinkString, float dogDropSpeed, float dogDropSpeedAfter, string sideString, float speedForward, float easeDistanceForward, float speedReturn, float easeDistanceReturn)
			{
				this.shotACoordY = shotACoordY;
				this.shotBCoordY = shotBCoordY;
				this.shotCCoordY = shotCCoordY;
				this.shotAReturnDelay = shotAReturnDelay;
				this.shotBReturnDelay = shotBReturnDelay;
				this.shotCReturnDelay = shotCReturnDelay;
				this.pinkString = pinkString;
				this.dogDropSpeed = dogDropSpeed;
				this.dogDropSpeedAfter = dogDropSpeedAfter;
				this.sideString = sideString;
				this.speedForward = speedForward;
				this.easeDistanceForward = easeDistanceForward;
				this.speedReturn = speedReturn;
				this.easeDistanceReturn = easeDistanceReturn;
			}

			// Token: 0x04000068 RID: 104
			public readonly float shotACoordY;

			// Token: 0x04000069 RID: 105
			public readonly float shotBCoordY;

			// Token: 0x0400006A RID: 106
			public readonly float shotCCoordY;

			// Token: 0x0400006B RID: 107
			public readonly MinMax shotAReturnDelay;

			// Token: 0x0400006C RID: 108
			public readonly MinMax shotBReturnDelay;

			// Token: 0x0400006D RID: 109
			public readonly MinMax shotCReturnDelay;

			// Token: 0x0400006E RID: 110
			public readonly string[] pinkString;

			// Token: 0x0400006F RID: 111
			public readonly float dogDropSpeed;

			// Token: 0x04000070 RID: 112
			public readonly float dogDropSpeedAfter;

			// Token: 0x04000071 RID: 113
			public readonly string sideString;

			// Token: 0x04000072 RID: 114
			public readonly float speedForward;

			// Token: 0x04000073 RID: 115
			public readonly float easeDistanceForward;

			// Token: 0x04000074 RID: 116
			public readonly float speedReturn;

			// Token: 0x04000075 RID: 117
			public readonly float easeDistanceReturn;
		}

		// Token: 0x0200000F RID: 15
		public class Triple : AbstractLevelPropertyGroup
		{
			// Token: 0x06000019 RID: 25 RVA: 0x00008D70 File Offset: 0x00007170
			public Triple(float yHeight, float bulletSpeed, float initialDelay, float shootWarning, MinMax delayAfterFirst, MinMax delayAfterSecond, float shootRecovery, float returnDelay, MinMax attackAngleRange)
			{
				this.yHeight = yHeight;
				this.bulletSpeed = bulletSpeed;
				this.initialDelay = initialDelay;
				this.shootWarning = shootWarning;
				this.delayAfterFirst = delayAfterFirst;
				this.delayAfterSecond = delayAfterSecond;
				this.shootRecovery = shootRecovery;
				this.returnDelay = returnDelay;
				this.attackAngleRange = attackAngleRange;
			}

			// Token: 0x04000076 RID: 118
			public readonly float yHeight;

			// Token: 0x04000077 RID: 119
			public readonly float bulletSpeed;

			// Token: 0x04000078 RID: 120
			public readonly float initialDelay;

			// Token: 0x04000079 RID: 121
			public readonly float shootWarning;

			// Token: 0x0400007A RID: 122
			public readonly MinMax delayAfterFirst;

			// Token: 0x0400007B RID: 123
			public readonly MinMax delayAfterSecond;

			// Token: 0x0400007C RID: 124
			public readonly float shootRecovery;

			// Token: 0x0400007D RID: 125
			public readonly float returnDelay;

			// Token: 0x0400007E RID: 126
			public readonly MinMax attackAngleRange;
		}

		// Token: 0x02000010 RID: 16
		public class Terriers : AbstractLevelPropertyGroup
		{
			// Token: 0x0600001A RID: 26 RVA: 0x00008DC8 File Offset: 0x000071C8
			public Terriers(float rotationTime, string[] shotOrder, string[] shotTypeString, float shotSpeed, string[] shotDelayString, float shotMinus, float secretHPPercentage, float minAttackDistance)
			{
				this.rotationTime = rotationTime;
				this.shotOrder = shotOrder;
				this.shotTypeString = shotTypeString;
				this.shotSpeed = shotSpeed;
				this.shotDelayString = shotDelayString;
				this.shotMinus = shotMinus;
				this.secretHPPercentage = secretHPPercentage;
				this.minAttackDistance = minAttackDistance;
			}

			// Token: 0x0400007F RID: 127
			public readonly float rotationTime;

			// Token: 0x04000080 RID: 128
			public readonly string[] shotOrder;

			// Token: 0x04000081 RID: 129
			public readonly string[] shotTypeString;

			// Token: 0x04000082 RID: 130
			public readonly float shotSpeed;

			// Token: 0x04000083 RID: 131
			public readonly string[] shotDelayString;

			// Token: 0x04000084 RID: 132
			public readonly float shotMinus;

			// Token: 0x04000085 RID: 133
			public readonly float secretHPPercentage;

			// Token: 0x04000086 RID: 134
			public readonly float minAttackDistance;
		}

		// Token: 0x02000011 RID: 17
		public class Leader : AbstractLevelPropertyGroup
		{
			// Token: 0x0600001B RID: 27 RVA: 0x00008E18 File Offset: 0x00007218
			public Leader(string[] attackString, float attackDelay)
			{
				this.attackString = attackString;
				this.attackDelay = attackDelay;
			}

			// Token: 0x04000087 RID: 135
			public readonly string[] attackString;

			// Token: 0x04000088 RID: 136
			public readonly float attackDelay;
		}

		// Token: 0x02000012 RID: 18
		public class Dropshot : AbstractLevelPropertyGroup
		{
			// Token: 0x0600001C RID: 28 RVA: 0x00008E2E File Offset: 0x0000722E
			public Dropshot(string[] bulletDelayStrings, string[] bulletColorString, float bulletDropSpeed, float bulletShootSpeed, bool rocketsOn)
			{
				this.bulletDelayStrings = bulletDelayStrings;
				this.bulletColorString = bulletColorString;
				this.bulletDropSpeed = bulletDropSpeed;
				this.bulletShootSpeed = bulletShootSpeed;
				this.rocketsOn = rocketsOn;
			}

			// Token: 0x04000089 RID: 137
			public readonly string[] bulletDelayStrings;

			// Token: 0x0400008A RID: 138
			public readonly string[] bulletColorString;

			// Token: 0x0400008B RID: 139
			public readonly float bulletDropSpeed;

			// Token: 0x0400008C RID: 140
			public readonly float bulletShootSpeed;

			// Token: 0x0400008D RID: 141
			public readonly bool rocketsOn;
		}

		// Token: 0x02000013 RID: 19
		public class Laser : AbstractLevelPropertyGroup
		{
			// Token: 0x0600001D RID: 29 RVA: 0x00008E5B File Offset: 0x0000725B
			public Laser(string[] laserPositionStrings, float laserHesitation, float warningTime, float laserDuration, float laserDelay, bool forceHide)
			{
				this.laserPositionStrings = laserPositionStrings;
				this.laserHesitation = laserHesitation;
				this.warningTime = warningTime;
				this.laserDuration = laserDuration;
				this.laserDelay = laserDelay;
				this.forceHide = forceHide;
			}

			// Token: 0x0400008E RID: 142
			public readonly string[] laserPositionStrings;

			// Token: 0x0400008F RID: 143
			public readonly float laserHesitation;

			// Token: 0x04000090 RID: 144
			public readonly float warningTime;

			// Token: 0x04000091 RID: 145
			public readonly float laserDuration;

			// Token: 0x04000092 RID: 146
			public readonly float laserDelay;

			// Token: 0x04000093 RID: 147
			public readonly bool forceHide;
		}

		// Token: 0x02000014 RID: 20
		public class SecretLeader : AbstractLevelPropertyGroup
		{
			// Token: 0x0600001E RID: 30 RVA: 0x00008E90 File Offset: 0x00007290
			public SecretLeader(float leaderPreAttackDelay, float leaderPostAttackDelay, float rocketHomingSpeed, float rocketHomingRotation, float rocketHomingHP, float rocketHomingTime, string[] rocketHomingSpawnLocation, float attackAnticipationHold, float attackRecoveryHold, float hideTime)
			{
				this.leaderPreAttackDelay = leaderPreAttackDelay;
				this.leaderPostAttackDelay = leaderPostAttackDelay;
				this.rocketHomingSpeed = rocketHomingSpeed;
				this.rocketHomingRotation = rocketHomingRotation;
				this.rocketHomingHP = rocketHomingHP;
				this.rocketHomingTime = rocketHomingTime;
				this.rocketHomingSpawnLocation = rocketHomingSpawnLocation;
				this.attackAnticipationHold = attackAnticipationHold;
				this.attackRecoveryHold = attackRecoveryHold;
				this.hideTime = hideTime;
			}

			// Token: 0x04000094 RID: 148
			public readonly float leaderPreAttackDelay;

			// Token: 0x04000095 RID: 149
			public readonly float leaderPostAttackDelay;

			// Token: 0x04000096 RID: 150
			public readonly float rocketHomingSpeed;

			// Token: 0x04000097 RID: 151
			public readonly float rocketHomingRotation;

			// Token: 0x04000098 RID: 152
			public readonly float rocketHomingHP;

			// Token: 0x04000099 RID: 153
			public readonly float rocketHomingTime;

			// Token: 0x0400009A RID: 154
			public readonly string[] rocketHomingSpawnLocation;

			// Token: 0x0400009B RID: 155
			public readonly float attackAnticipationHold;

			// Token: 0x0400009C RID: 156
			public readonly float attackRecoveryHold;

			// Token: 0x0400009D RID: 157
			public readonly float hideTime;
		}

		// Token: 0x02000015 RID: 21
		public class SecretTerriers : AbstractLevelPropertyGroup
		{
			// Token: 0x0600001F RID: 31 RVA: 0x00008EF0 File Offset: 0x000072F0
			public SecretTerriers(string[] dogAttackDelayString, string[] dogAttackOrderString, float dogPostAttackDelay, float dogTimeOut, float dogBulletArcSpeed, float dogBulletArcHeight, float dogBulletHealth, bool dogBulletWillSplit, float dogBulletSplitAngle, float dogBulletSplitSpeed, float dogRetreatDamage, string dogBulletParryString)
			{
				this.dogAttackDelayString = dogAttackDelayString;
				this.dogAttackOrderString = dogAttackOrderString;
				this.dogPostAttackDelay = dogPostAttackDelay;
				this.dogTimeOut = dogTimeOut;
				this.dogBulletArcSpeed = dogBulletArcSpeed;
				this.dogBulletArcHeight = dogBulletArcHeight;
				this.dogBulletHealth = dogBulletHealth;
				this.dogBulletWillSplit = dogBulletWillSplit;
				this.dogBulletSplitAngle = dogBulletSplitAngle;
				this.dogBulletSplitSpeed = dogBulletSplitSpeed;
				this.dogRetreatDamage = dogRetreatDamage;
				this.dogBulletParryString = dogBulletParryString;
			}

			// Token: 0x0400009E RID: 158
			public readonly string[] dogAttackDelayString;

			// Token: 0x0400009F RID: 159
			public readonly string[] dogAttackOrderString;

			// Token: 0x040000A0 RID: 160
			public readonly float dogPostAttackDelay;

			// Token: 0x040000A1 RID: 161
			public readonly float dogTimeOut;

			// Token: 0x040000A2 RID: 162
			public readonly float dogBulletArcSpeed;

			// Token: 0x040000A3 RID: 163
			public readonly float dogBulletArcHeight;

			// Token: 0x040000A4 RID: 164
			public readonly float dogBulletHealth;

			// Token: 0x040000A5 RID: 165
			public readonly bool dogBulletWillSplit;

			// Token: 0x040000A6 RID: 166
			public readonly float dogBulletSplitAngle;

			// Token: 0x040000A7 RID: 167
			public readonly float dogBulletSplitSpeed;

			// Token: 0x040000A8 RID: 168
			public readonly float dogRetreatDamage;

			// Token: 0x040000A9 RID: 169
			public readonly string dogBulletParryString;
		}
	}

	// Token: 0x02000017 RID: 23
	public class AirshipClam : AbstractLevelProperties<LevelProperties.AirshipClam.State, LevelProperties.AirshipClam.Pattern, LevelProperties.AirshipClam.States>
	{
		// Token: 0x0600004D RID: 77 RVA: 0x00008F60 File Offset: 0x00007360
		public AirshipClam(int hp, Level.GoalTimes goalTimes, LevelProperties.AirshipClam.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600004E RID: 78 RVA: 0x00008F6C File Offset: 0x0000736C
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 200f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x0600004F RID: 79 RVA: 0x00008FC8 File Offset: 0x000073C8
		public static LevelProperties.AirshipClam.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "S")
				{
					return LevelProperties.AirshipClam.Pattern.Spit;
				}
				if (id == "B")
				{
					return LevelProperties.AirshipClam.Pattern.Barnacles;
				}
			}
			Debug.LogError("Pattern AirshipClam.Pattern for  " + id + " not found.", null);
			return LevelProperties.AirshipClam.Pattern.Uninitialized;
		}

		// Token: 0x06000050 RID: 80 RVA: 0x00009024 File Offset: 0x00007424
		public static LevelProperties.AirshipClam GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.AirshipClam.State> list = new List<LevelProperties.AirshipClam.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.AirshipClam.State(10f, new LevelProperties.AirshipClam.Pattern[][]
						{
							new LevelProperties.AirshipClam.Pattern[0]
						}, LevelProperties.AirshipClam.States.Main, new LevelProperties.AirshipClam.Spit(0f, 0f, 0f, string.Empty, 0f), new LevelProperties.AirshipClam.Barnacles(0f, 0f, 0f, 0f, 0f, 0f, 0f, string.Empty, string.Empty, 0f, new MinMax(0f, 1f)), new LevelProperties.AirshipClam.ClamOut(0f, 0f, string.Empty, 0f, 0f)));
					}
				}
				else
				{
					hp = 200;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.AirshipClam.State(10f, new LevelProperties.AirshipClam.Pattern[][]
					{
						new LevelProperties.AirshipClam.Pattern[]
						{
							LevelProperties.AirshipClam.Pattern.Barnacles
						}
					}, LevelProperties.AirshipClam.States.Main, new LevelProperties.AirshipClam.Spit(1.3f, 450f, 1f, "10,5,8,7,15", 2f), new LevelProperties.AirshipClam.Barnacles(140f, 650f, -24f, 130f, 850f, -20f, 300f, "R,P,R,P,P,R,R,P", "3.5,3.8,3.7,4.2,3.7", 2f, new MinMax(3f, 4f)), new LevelProperties.AirshipClam.ClamOut(800f, 1f, "4,3,5,4,3,4,2", 1.5f, 0.5f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.AirshipClam.State(10f, new LevelProperties.AirshipClam.Pattern[][]
				{
					new LevelProperties.AirshipClam.Pattern[0]
				}, LevelProperties.AirshipClam.States.Main, new LevelProperties.AirshipClam.Spit(0f, 0f, 0f, string.Empty, 0f), new LevelProperties.AirshipClam.Barnacles(0f, 0f, 0f, 0f, 0f, 0f, 0f, string.Empty, string.Empty, 0f, new MinMax(0f, 1f)), new LevelProperties.AirshipClam.ClamOut(0f, 0f, string.Empty, 0f, 0f)));
			}
			return new LevelProperties.AirshipClam(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000018 RID: 24
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000008 RID: 8
			// (get) Token: 0x06000052 RID: 82 RVA: 0x000092AD File Offset: 0x000076AD
			// (set) Token: 0x06000053 RID: 83 RVA: 0x000092B5 File Offset: 0x000076B5
			private protected LevelProperties.AirshipClam properties { protected get; private set; }

			// Token: 0x06000054 RID: 84 RVA: 0x000092BE File Offset: 0x000076BE
			public virtual void LevelInit(LevelProperties.AirshipClam properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000055 RID: 85 RVA: 0x000092C7 File Offset: 0x000076C7
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000019 RID: 25
		public enum States
		{
			// Token: 0x040000E2 RID: 226
			Main,
			// Token: 0x040000E3 RID: 227
			Generic
		}

		// Token: 0x0200001A RID: 26
		public enum Pattern
		{
			// Token: 0x040000E5 RID: 229
			Spit,
			// Token: 0x040000E6 RID: 230
			Barnacles,
			// Token: 0x040000E7 RID: 231
			Uninitialized
		}

		// Token: 0x0200001B RID: 27
		public class State : AbstractLevelState<LevelProperties.AirshipClam.Pattern, LevelProperties.AirshipClam.States>
		{
			// Token: 0x06000056 RID: 86 RVA: 0x000092C9 File Offset: 0x000076C9
			public State(float healthTrigger, LevelProperties.AirshipClam.Pattern[][] patterns, LevelProperties.AirshipClam.States stateName, LevelProperties.AirshipClam.Spit spit, LevelProperties.AirshipClam.Barnacles barnacles, LevelProperties.AirshipClam.ClamOut clamOut) : base(healthTrigger, patterns, stateName)
			{
				this.spit = spit;
				this.barnacles = barnacles;
				this.clamOut = clamOut;
			}

			// Token: 0x040000E8 RID: 232
			public readonly LevelProperties.AirshipClam.Spit spit;

			// Token: 0x040000E9 RID: 233
			public readonly LevelProperties.AirshipClam.Barnacles barnacles;

			// Token: 0x040000EA RID: 234
			public readonly LevelProperties.AirshipClam.ClamOut clamOut;
		}

		// Token: 0x0200001C RID: 28
		public class Spit : AbstractLevelPropertyGroup
		{
			// Token: 0x06000057 RID: 87 RVA: 0x000092EC File Offset: 0x000076EC
			public Spit(float movementSpeedScale, float bulletSpeed, float preShotDelay, string attackDelayString, float initialShotDelay)
			{
				this.movementSpeedScale = movementSpeedScale;
				this.bulletSpeed = bulletSpeed;
				this.preShotDelay = preShotDelay;
				this.attackDelayString = attackDelayString;
				this.initialShotDelay = initialShotDelay;
			}

			// Token: 0x040000EB RID: 235
			public readonly float movementSpeedScale;

			// Token: 0x040000EC RID: 236
			public readonly float bulletSpeed;

			// Token: 0x040000ED RID: 237
			public readonly float preShotDelay;

			// Token: 0x040000EE RID: 238
			public readonly string attackDelayString;

			// Token: 0x040000EF RID: 239
			public readonly float initialShotDelay;
		}

		// Token: 0x0200001D RID: 29
		public class Barnacles : AbstractLevelPropertyGroup
		{
			// Token: 0x06000058 RID: 88 RVA: 0x0000931C File Offset: 0x0000771C
			public Barnacles(float initialArcMovementX, float initialArcMovementY, float initialGravity, float parryArcMovementX, float parryArcMovementY, float parryGravity, float rollingSpeed, string typeString, string attackDelayString, float barnacleScale, MinMax attackDuration)
			{
				this.initialArcMovementX = initialArcMovementX;
				this.initialArcMovementY = initialArcMovementY;
				this.initialGravity = initialGravity;
				this.parryArcMovementX = parryArcMovementX;
				this.parryArcMovementY = parryArcMovementY;
				this.parryGravity = parryGravity;
				this.rollingSpeed = rollingSpeed;
				this.typeString = typeString;
				this.attackDelayString = attackDelayString;
				this.barnacleScale = barnacleScale;
				this.attackDuration = attackDuration;
			}

			// Token: 0x040000F0 RID: 240
			public readonly float initialArcMovementX;

			// Token: 0x040000F1 RID: 241
			public readonly float initialArcMovementY;

			// Token: 0x040000F2 RID: 242
			public readonly float initialGravity;

			// Token: 0x040000F3 RID: 243
			public readonly float parryArcMovementX;

			// Token: 0x040000F4 RID: 244
			public readonly float parryArcMovementY;

			// Token: 0x040000F5 RID: 245
			public readonly float parryGravity;

			// Token: 0x040000F6 RID: 246
			public readonly float rollingSpeed;

			// Token: 0x040000F7 RID: 247
			public readonly string typeString;

			// Token: 0x040000F8 RID: 248
			public readonly string attackDelayString;

			// Token: 0x040000F9 RID: 249
			public readonly float barnacleScale;

			// Token: 0x040000FA RID: 250
			public readonly MinMax attackDuration;
		}

		// Token: 0x0200001E RID: 30
		public class ClamOut : AbstractLevelPropertyGroup
		{
			// Token: 0x06000059 RID: 89 RVA: 0x00009384 File Offset: 0x00007784
			public ClamOut(float bulletSpeed, float bulletRepeatDelay, string shotString, float bulletMainDelay, float preShotDelay)
			{
				this.bulletSpeed = bulletSpeed;
				this.bulletRepeatDelay = bulletRepeatDelay;
				this.shotString = shotString;
				this.bulletMainDelay = bulletMainDelay;
				this.preShotDelay = preShotDelay;
			}

			// Token: 0x040000FB RID: 251
			public readonly float bulletSpeed;

			// Token: 0x040000FC RID: 252
			public readonly float bulletRepeatDelay;

			// Token: 0x040000FD RID: 253
			public readonly string shotString;

			// Token: 0x040000FE RID: 254
			public readonly float bulletMainDelay;

			// Token: 0x040000FF RID: 255
			public readonly float preShotDelay;
		}
	}

	// Token: 0x02000020 RID: 32
	public class AirshipCrab : AbstractLevelProperties<LevelProperties.AirshipCrab.State, LevelProperties.AirshipCrab.Pattern, LevelProperties.AirshipCrab.States>
	{
		// Token: 0x06000067 RID: 103 RVA: 0x000093B1 File Offset: 0x000077B1
		public AirshipCrab(int hp, Level.GoalTimes goalTimes, LevelProperties.AirshipCrab.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000068 RID: 104 RVA: 0x000093C0 File Offset: 0x000077C0
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 800f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.83f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.63f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.38f));
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000069 RID: 105 RVA: 0x00009469 File Offset: 0x00007869
		public static LevelProperties.AirshipCrab.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.AirshipCrab.Pattern.Default;
				}
			}
			Debug.LogError("Pattern AirshipCrab.Pattern for  " + id + " not found.", null);
			return LevelProperties.AirshipCrab.Pattern.Uninitialized;
		}

		// Token: 0x0600006A RID: 106 RVA: 0x000094A8 File Offset: 0x000078A8
		public static LevelProperties.AirshipCrab GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.AirshipCrab.State> list = new List<LevelProperties.AirshipCrab.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.AirshipCrab.State(10f, new LevelProperties.AirshipCrab.Pattern[][]
						{
							new LevelProperties.AirshipCrab.Pattern[1]
						}, LevelProperties.AirshipCrab.States.Main, new LevelProperties.AirshipCrab.Main(0f), new LevelProperties.AirshipCrab.Barnicles(0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.AirshipCrab.Gems(0f, new string[0], new string[0], 0f, 0f, 0f, 0f, 0f), new LevelProperties.AirshipCrab.Bubbles(0f, new string[0], 0f, 0f, 0f, 0f)));
					}
				}
				else
				{
					hp = 800;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.AirshipCrab.State(10f, new LevelProperties.AirshipCrab.Pattern[][]
					{
						new LevelProperties.AirshipCrab.Pattern[1]
					}, LevelProperties.AirshipCrab.States.Main, new LevelProperties.AirshipCrab.Main(120f), new LevelProperties.AirshipCrab.Barnicles(400f, 1.2f, 2.2f, 4f, 50f, 90f), new LevelProperties.AirshipCrab.Gems(600f, new string[]
					{
						"50,205,315,64,235,185",
						"190,35,300,60,190,215",
						"55,245,145,155,335,35",
						"240,35,115,300,55,330"
					}, new string[]
					{
						"1.2"
					}, 4f, 1f, 0f, 100f, 3.8f), new LevelProperties.AirshipCrab.Bubbles(320f, new string[]
					{
						"2,1,2,3,2,3,1",
						"1,2,1,3,2,2",
						"2,1,3,2,1",
						"3,1,1,2,2"
					}, 1f, 1.8f, 10f, 0.35f)));
					list.Add(new LevelProperties.AirshipCrab.State(0.83f, new LevelProperties.AirshipCrab.Pattern[][]
					{
						new LevelProperties.AirshipCrab.Pattern[0]
					}, LevelProperties.AirshipCrab.States.Generic, new LevelProperties.AirshipCrab.Main(120f), new LevelProperties.AirshipCrab.Barnicles(400f, 1.2f, 2.2f, 4f, 50f, 90f), new LevelProperties.AirshipCrab.Gems(600f, new string[]
					{
						"43,190,305,64,235,185"
					}, new string[]
					{
						"1"
					}, 4f, 2f, 0f, 90f, 4f), new LevelProperties.AirshipCrab.Bubbles(320f, new string[]
					{
						"2,1,2,3,2,3,1",
						"1,2,1,3,2,2",
						"2,1,3,2,1",
						"3,1,1,2,2"
					}, 1f, 1.8f, 10f, 0.35f)));
					list.Add(new LevelProperties.AirshipCrab.State(0.63f, new LevelProperties.AirshipCrab.Pattern[][]
					{
						new LevelProperties.AirshipCrab.Pattern[0]
					}, LevelProperties.AirshipCrab.States.Generic, new LevelProperties.AirshipCrab.Main(120f), new LevelProperties.AirshipCrab.Barnicles(400f, 1.2f, 2.2f, 4f, 50f, 90f), new LevelProperties.AirshipCrab.Gems(650f, new string[]
					{
						"60,220,299,74,265,30"
					}, new string[]
					{
						"0.8"
					}, 4f, 3f, 0f, 90f, 4.2f), new LevelProperties.AirshipCrab.Bubbles(320f, new string[]
					{
						"2,1,2,3,2,3,1",
						"1,2,1,3,2,2",
						"2,1,3,2,1",
						"3,1,1,2,2"
					}, 1f, 1.8f, 10f, 0.35f)));
					list.Add(new LevelProperties.AirshipCrab.State(0.38f, new LevelProperties.AirshipCrab.Pattern[][]
					{
						new LevelProperties.AirshipCrab.Pattern[0]
					}, LevelProperties.AirshipCrab.States.Generic, new LevelProperties.AirshipCrab.Main(120f), new LevelProperties.AirshipCrab.Barnicles(400f, 1.2f, 2.2f, 4f, 50f, 90f), new LevelProperties.AirshipCrab.Gems(660f, new string[]
					{
						"50,205,315,64,235,35"
					}, new string[]
					{
						"0.6"
					}, 4f, 4f, 0f, 90f, 4.2f), new LevelProperties.AirshipCrab.Bubbles(320f, new string[]
					{
						"2,1,2,3,2,3,1",
						"1,2,1,3,2,2",
						"2,1,3,2,1",
						"3,1,1,2,2"
					}, 1f, 1.8f, 10f, 0.35f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.AirshipCrab.State(10f, new LevelProperties.AirshipCrab.Pattern[][]
				{
					new LevelProperties.AirshipCrab.Pattern[1]
				}, LevelProperties.AirshipCrab.States.Main, new LevelProperties.AirshipCrab.Main(0f), new LevelProperties.AirshipCrab.Barnicles(0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.AirshipCrab.Gems(0f, new string[0], new string[0], 0f, 0f, 0f, 0f, 0f), new LevelProperties.AirshipCrab.Bubbles(0f, new string[0], 0f, 0f, 0f, 0f)));
			}
			return new LevelProperties.AirshipCrab(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000021 RID: 33
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700000D RID: 13
			// (get) Token: 0x0600006C RID: 108 RVA: 0x000099DF File Offset: 0x00007DDF
			// (set) Token: 0x0600006D RID: 109 RVA: 0x000099E7 File Offset: 0x00007DE7
			private protected LevelProperties.AirshipCrab properties { protected get; private set; }

			// Token: 0x0600006E RID: 110 RVA: 0x000099F0 File Offset: 0x00007DF0
			public virtual void LevelInit(LevelProperties.AirshipCrab properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600006F RID: 111 RVA: 0x000099F9 File Offset: 0x00007DF9
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000022 RID: 34
		public enum States
		{
			// Token: 0x04000107 RID: 263
			Main,
			// Token: 0x04000108 RID: 264
			Generic
		}

		// Token: 0x02000023 RID: 35
		public enum Pattern
		{
			// Token: 0x0400010A RID: 266
			Default,
			// Token: 0x0400010B RID: 267
			Uninitialized
		}

		// Token: 0x02000024 RID: 36
		public class State : AbstractLevelState<LevelProperties.AirshipCrab.Pattern, LevelProperties.AirshipCrab.States>
		{
			// Token: 0x06000070 RID: 112 RVA: 0x000099FB File Offset: 0x00007DFB
			public State(float healthTrigger, LevelProperties.AirshipCrab.Pattern[][] patterns, LevelProperties.AirshipCrab.States stateName, LevelProperties.AirshipCrab.Main main, LevelProperties.AirshipCrab.Barnicles barnicles, LevelProperties.AirshipCrab.Gems gems, LevelProperties.AirshipCrab.Bubbles bubbles) : base(healthTrigger, patterns, stateName)
			{
				this.main = main;
				this.barnicles = barnicles;
				this.gems = gems;
				this.bubbles = bubbles;
			}

			// Token: 0x0400010C RID: 268
			public readonly LevelProperties.AirshipCrab.Main main;

			// Token: 0x0400010D RID: 269
			public readonly LevelProperties.AirshipCrab.Barnicles barnicles;

			// Token: 0x0400010E RID: 270
			public readonly LevelProperties.AirshipCrab.Gems gems;

			// Token: 0x0400010F RID: 271
			public readonly LevelProperties.AirshipCrab.Bubbles bubbles;
		}

		// Token: 0x02000025 RID: 37
		public class Main : AbstractLevelPropertyGroup
		{
			// Token: 0x06000071 RID: 113 RVA: 0x00009A26 File Offset: 0x00007E26
			public Main(float openCrabOffsetY)
			{
				this.openCrabOffsetY = openCrabOffsetY;
			}

			// Token: 0x04000110 RID: 272
			public readonly float openCrabOffsetY;
		}

		// Token: 0x02000026 RID: 38
		public class Barnicles : AbstractLevelPropertyGroup
		{
			// Token: 0x06000072 RID: 114 RVA: 0x00009A35 File Offset: 0x00007E35
			public Barnicles(float bulletSpeed, float shotDelay, float hesitate, float barnicleAmount, float barnicleOffsetX, float barnicleOffsetY)
			{
				this.bulletSpeed = bulletSpeed;
				this.shotDelay = shotDelay;
				this.hesitate = hesitate;
				this.barnicleAmount = barnicleAmount;
				this.barnicleOffsetX = barnicleOffsetX;
				this.barnicleOffsetY = barnicleOffsetY;
			}

			// Token: 0x04000111 RID: 273
			public readonly float bulletSpeed;

			// Token: 0x04000112 RID: 274
			public readonly float shotDelay;

			// Token: 0x04000113 RID: 275
			public readonly float hesitate;

			// Token: 0x04000114 RID: 276
			public readonly float barnicleAmount;

			// Token: 0x04000115 RID: 277
			public readonly float barnicleOffsetX;

			// Token: 0x04000116 RID: 278
			public readonly float barnicleOffsetY;
		}

		// Token: 0x02000027 RID: 39
		public class Gems : AbstractLevelPropertyGroup
		{
			// Token: 0x06000073 RID: 115 RVA: 0x00009A6C File Offset: 0x00007E6C
			public Gems(float bulletSpeed, string[] angleString, string[] gemReleaseDelay, float gemAmount, float gemATKAmount, float gemOffsetX, float gemOffsetY, float gemHoldDuration)
			{
				this.bulletSpeed = bulletSpeed;
				this.angleString = angleString;
				this.gemReleaseDelay = gemReleaseDelay;
				this.gemAmount = gemAmount;
				this.gemATKAmount = gemATKAmount;
				this.gemOffsetX = gemOffsetX;
				this.gemOffsetY = gemOffsetY;
				this.gemHoldDuration = gemHoldDuration;
			}

			// Token: 0x04000117 RID: 279
			public readonly float bulletSpeed;

			// Token: 0x04000118 RID: 280
			public readonly string[] angleString;

			// Token: 0x04000119 RID: 281
			public readonly string[] gemReleaseDelay;

			// Token: 0x0400011A RID: 282
			public readonly float gemAmount;

			// Token: 0x0400011B RID: 283
			public readonly float gemATKAmount;

			// Token: 0x0400011C RID: 284
			public readonly float gemOffsetX;

			// Token: 0x0400011D RID: 285
			public readonly float gemOffsetY;

			// Token: 0x0400011E RID: 286
			public readonly float gemHoldDuration;
		}

		// Token: 0x02000028 RID: 40
		public class Bubbles : AbstractLevelPropertyGroup
		{
			// Token: 0x06000074 RID: 116 RVA: 0x00009ABC File Offset: 0x00007EBC
			public Bubbles(float bubbleSpeed, string[] bubbleCount, float bubbleRepeatDelay, float bubbleMainDelay, float openTimer, float sinWaveStrength)
			{
				this.bubbleSpeed = bubbleSpeed;
				this.bubbleCount = bubbleCount;
				this.bubbleRepeatDelay = bubbleRepeatDelay;
				this.bubbleMainDelay = bubbleMainDelay;
				this.openTimer = openTimer;
				this.sinWaveStrength = sinWaveStrength;
			}

			// Token: 0x0400011F RID: 287
			public readonly float bubbleSpeed;

			// Token: 0x04000120 RID: 288
			public readonly string[] bubbleCount;

			// Token: 0x04000121 RID: 289
			public readonly float bubbleRepeatDelay;

			// Token: 0x04000122 RID: 290
			public readonly float bubbleMainDelay;

			// Token: 0x04000123 RID: 291
			public readonly float openTimer;

			// Token: 0x04000124 RID: 292
			public readonly float sinWaveStrength;
		}
	}

	// Token: 0x0200002A RID: 42
	public class AirshipJelly : AbstractLevelProperties<LevelProperties.AirshipJelly.State, LevelProperties.AirshipJelly.Pattern, LevelProperties.AirshipJelly.States>
	{
		// Token: 0x0600007F RID: 127 RVA: 0x00009AF1 File Offset: 0x00007EF1
		public AirshipJelly(int hp, Level.GoalTimes goalTimes, LevelProperties.AirshipJelly.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000080 RID: 128 RVA: 0x00009B00 File Offset: 0x00007F00
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 2000f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000081 RID: 129 RVA: 0x00009B5B File Offset: 0x00007F5B
		public static LevelProperties.AirshipJelly.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "M")
				{
					return LevelProperties.AirshipJelly.Pattern.Main;
				}
			}
			Debug.LogError("Pattern AirshipJelly.Pattern for  " + id + " not found.", null);
			return LevelProperties.AirshipJelly.Pattern.Uninitialized;
		}

		// Token: 0x06000082 RID: 130 RVA: 0x00009B9C File Offset: 0x00007F9C
		public static LevelProperties.AirshipJelly GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.AirshipJelly.State> list = new List<LevelProperties.AirshipJelly.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.AirshipJelly.State(10f, new LevelProperties.AirshipJelly.Pattern[][]
						{
							new LevelProperties.AirshipJelly.Pattern[0]
						}, LevelProperties.AirshipJelly.States.Main, new LevelProperties.AirshipJelly.Main(0f, 0f, 0f, 0f, new MinMax(0f, 1f))));
					}
				}
				else
				{
					hp = 2000;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.AirshipJelly.State(10f, new LevelProperties.AirshipJelly.Pattern[][]
					{
						new LevelProperties.AirshipJelly.Pattern[1]
					}, LevelProperties.AirshipJelly.States.Main, new LevelProperties.AirshipJelly.Main(2f, 3f, 2f, 380f, new MinMax(400f, 860f))));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.AirshipJelly.State(10f, new LevelProperties.AirshipJelly.Pattern[][]
				{
					new LevelProperties.AirshipJelly.Pattern[0]
				}, LevelProperties.AirshipJelly.States.Main, new LevelProperties.AirshipJelly.Main(0f, 0f, 0f, 0f, new MinMax(0f, 1f))));
			}
			return new LevelProperties.AirshipJelly(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200002B RID: 43
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000012 RID: 18
			// (get) Token: 0x06000084 RID: 132 RVA: 0x00009D13 File Offset: 0x00008113
			// (set) Token: 0x06000085 RID: 133 RVA: 0x00009D1B File Offset: 0x0000811B
			private protected LevelProperties.AirshipJelly properties { protected get; private set; }

			// Token: 0x06000086 RID: 134 RVA: 0x00009D24 File Offset: 0x00008124
			public virtual void LevelInit(LevelProperties.AirshipJelly properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000087 RID: 135 RVA: 0x00009D2D File Offset: 0x0000812D
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200002C RID: 44
		public enum States
		{
			// Token: 0x0400012B RID: 299
			Main,
			// Token: 0x0400012C RID: 300
			Generic
		}

		// Token: 0x0200002D RID: 45
		public enum Pattern
		{
			// Token: 0x0400012E RID: 302
			Main,
			// Token: 0x0400012F RID: 303
			Uninitialized
		}

		// Token: 0x0200002E RID: 46
		public class State : AbstractLevelState<LevelProperties.AirshipJelly.Pattern, LevelProperties.AirshipJelly.States>
		{
			// Token: 0x06000088 RID: 136 RVA: 0x00009D2F File Offset: 0x0000812F
			public State(float healthTrigger, LevelProperties.AirshipJelly.Pattern[][] patterns, LevelProperties.AirshipJelly.States stateName, LevelProperties.AirshipJelly.Main main) : base(healthTrigger, patterns, stateName)
			{
				this.main = main;
			}

			// Token: 0x04000130 RID: 304
			public readonly LevelProperties.AirshipJelly.Main main;
		}

		// Token: 0x0200002F RID: 47
		public class Main : AbstractLevelPropertyGroup
		{
			// Token: 0x06000089 RID: 137 RVA: 0x00009D42 File Offset: 0x00008142
			public Main(float time, float orbDelay, float hurtDelay, float parryDamage, MinMax speed)
			{
				this.time = time;
				this.orbDelay = orbDelay;
				this.hurtDelay = hurtDelay;
				this.parryDamage = parryDamage;
				this.speed = speed;
			}

			// Token: 0x04000131 RID: 305
			public readonly float time;

			// Token: 0x04000132 RID: 306
			public readonly float orbDelay;

			// Token: 0x04000133 RID: 307
			public readonly float hurtDelay;

			// Token: 0x04000134 RID: 308
			public readonly float parryDamage;

			// Token: 0x04000135 RID: 309
			public readonly MinMax speed;
		}
	}

	// Token: 0x02000031 RID: 49
	public class AirshipStork : AbstractLevelProperties<LevelProperties.AirshipStork.State, LevelProperties.AirshipStork.Pattern, LevelProperties.AirshipStork.States>
	{
		// Token: 0x06000094 RID: 148 RVA: 0x00009D6F File Offset: 0x0000816F
		public AirshipStork(int hp, Level.GoalTimes goalTimes, LevelProperties.AirshipStork.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000095 RID: 149 RVA: 0x00009D7C File Offset: 0x0000817C
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 2000f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000096 RID: 150 RVA: 0x00009DD7 File Offset: 0x000081D7
		public static LevelProperties.AirshipStork.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.AirshipStork.Pattern.Default;
				}
			}
			Debug.LogError("Pattern AirshipStork.Pattern for  " + id + " not found.", null);
			return LevelProperties.AirshipStork.Pattern.Uninitialized;
		}

		// Token: 0x06000097 RID: 151 RVA: 0x00009E18 File Offset: 0x00008218
		public static LevelProperties.AirshipStork GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.AirshipStork.State> list = new List<LevelProperties.AirshipStork.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.AirshipStork.State(10f, new LevelProperties.AirshipStork.Pattern[][]
						{
							new LevelProperties.AirshipStork.Pattern[1]
						}, LevelProperties.AirshipStork.States.Main, new LevelProperties.AirshipStork.Main(0f, 0f, new string[0], 0f, 0f), new LevelProperties.AirshipStork.SpiralShot(0f, 0f, new string[0], new string[0], new string[0]), new LevelProperties.AirshipStork.Babies(0f, new string[0], new string[0], 0f, 0f, 0f, 0f, 0f, 0f, new string[0])));
					}
				}
				else
				{
					hp = 2000;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.AirshipStork.State(10f, new LevelProperties.AirshipStork.Pattern[][]
					{
						new LevelProperties.AirshipStork.Pattern[1]
					}, LevelProperties.AirshipStork.States.Main, new LevelProperties.AirshipStork.Main(400f, 180f, new string[]
					{
						".5,.4,.6,.7"
					}, 65f, 3f), new LevelProperties.AirshipStork.SpiralShot(95f, 0.36f, new string[]
					{
						"P,P,R,R,R,P,P,P,R,P,P"
					}, new string[]
					{
						"3.4,4,3,5,4,3,2.5"
					}, new string[]
					{
						"1,1,2,1,2,2,1,2"
					}), new LevelProperties.AirshipStork.Babies(12f, new string[]
					{
						"200,600,400,500,100"
					}, new string[]
					{
						"3,4,5,4"
					}, 3400f, 600f, 7000f, 2600f, 450f, 7000f, new string[]
					{
						"HJ,HJ,LJ,D0.5,LJ"
					})));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.AirshipStork.State(10f, new LevelProperties.AirshipStork.Pattern[][]
				{
					new LevelProperties.AirshipStork.Pattern[1]
				}, LevelProperties.AirshipStork.States.Main, new LevelProperties.AirshipStork.Main(0f, 0f, new string[0], 0f, 0f), new LevelProperties.AirshipStork.SpiralShot(0f, 0f, new string[0], new string[0], new string[0]), new LevelProperties.AirshipStork.Babies(0f, new string[0], new string[0], 0f, 0f, 0f, 0f, 0f, 0f, new string[0])));
			}
			return new LevelProperties.AirshipStork(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000032 RID: 50
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000017 RID: 23
			// (get) Token: 0x06000099 RID: 153 RVA: 0x0000A0BD File Offset: 0x000084BD
			// (set) Token: 0x0600009A RID: 154 RVA: 0x0000A0C5 File Offset: 0x000084C5
			private protected LevelProperties.AirshipStork properties { protected get; private set; }

			// Token: 0x0600009B RID: 155 RVA: 0x0000A0CE File Offset: 0x000084CE
			public virtual void LevelInit(LevelProperties.AirshipStork properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600009C RID: 156 RVA: 0x0000A0D7 File Offset: 0x000084D7
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000033 RID: 51
		public enum States
		{
			// Token: 0x0400013C RID: 316
			Main,
			// Token: 0x0400013D RID: 317
			Generic
		}

		// Token: 0x02000034 RID: 52
		public enum Pattern
		{
			// Token: 0x0400013F RID: 319
			Default,
			// Token: 0x04000140 RID: 320
			Uninitialized
		}

		// Token: 0x02000035 RID: 53
		public class State : AbstractLevelState<LevelProperties.AirshipStork.Pattern, LevelProperties.AirshipStork.States>
		{
			// Token: 0x0600009D RID: 157 RVA: 0x0000A0D9 File Offset: 0x000084D9
			public State(float healthTrigger, LevelProperties.AirshipStork.Pattern[][] patterns, LevelProperties.AirshipStork.States stateName, LevelProperties.AirshipStork.Main main, LevelProperties.AirshipStork.SpiralShot spiralShot, LevelProperties.AirshipStork.Babies babies) : base(healthTrigger, patterns, stateName)
			{
				this.main = main;
				this.spiralShot = spiralShot;
				this.babies = babies;
			}

			// Token: 0x04000141 RID: 321
			public readonly LevelProperties.AirshipStork.Main main;

			// Token: 0x04000142 RID: 322
			public readonly LevelProperties.AirshipStork.SpiralShot spiralShot;

			// Token: 0x04000143 RID: 323
			public readonly LevelProperties.AirshipStork.Babies babies;
		}

		// Token: 0x02000036 RID: 54
		public class Main : AbstractLevelPropertyGroup
		{
			// Token: 0x0600009E RID: 158 RVA: 0x0000A0FC File Offset: 0x000084FC
			public Main(float parryDamage, float movementSpeed, string[] leftMovementTime, float headHeight, float pinkDurationOff)
			{
				this.parryDamage = parryDamage;
				this.movementSpeed = movementSpeed;
				this.leftMovementTime = leftMovementTime;
				this.headHeight = headHeight;
				this.pinkDurationOff = pinkDurationOff;
			}

			// Token: 0x04000144 RID: 324
			public readonly float parryDamage;

			// Token: 0x04000145 RID: 325
			public readonly float movementSpeed;

			// Token: 0x04000146 RID: 326
			public readonly string[] leftMovementTime;

			// Token: 0x04000147 RID: 327
			public readonly float headHeight;

			// Token: 0x04000148 RID: 328
			public readonly float pinkDurationOff;
		}

		// Token: 0x02000037 RID: 55
		public class SpiralShot : AbstractLevelPropertyGroup
		{
			// Token: 0x0600009F RID: 159 RVA: 0x0000A129 File Offset: 0x00008529
			public SpiralShot(float movementSpeed, float spiralRate, string[] pinkString, string[] shotDelayString, string[] spiralDirection)
			{
				this.movementSpeed = movementSpeed;
				this.spiralRate = spiralRate;
				this.pinkString = pinkString;
				this.shotDelayString = shotDelayString;
				this.spiralDirection = spiralDirection;
			}

			// Token: 0x04000149 RID: 329
			public readonly float movementSpeed;

			// Token: 0x0400014A RID: 330
			public readonly float spiralRate;

			// Token: 0x0400014B RID: 331
			public readonly string[] pinkString;

			// Token: 0x0400014C RID: 332
			public readonly string[] shotDelayString;

			// Token: 0x0400014D RID: 333
			public readonly string[] spiralDirection;
		}

		// Token: 0x02000038 RID: 56
		public class Babies : AbstractLevelPropertyGroup
		{
			// Token: 0x060000A0 RID: 160 RVA: 0x0000A158 File Offset: 0x00008558
			public Babies(float HP, string[] YVelocityRange, string[] babyDelayString, float highVerticalSpeed, float highHorizontalSpeed, float highGravity, float lowVerticalSpeed, float lowHorizontalSpeed, float lowGravity, string[] patternString)
			{
				this.HP = HP;
				this.YVelocityRange = YVelocityRange;
				this.babyDelayString = babyDelayString;
				this.highVerticalSpeed = highVerticalSpeed;
				this.highHorizontalSpeed = highHorizontalSpeed;
				this.highGravity = highGravity;
				this.lowVerticalSpeed = lowVerticalSpeed;
				this.lowHorizontalSpeed = lowHorizontalSpeed;
				this.lowGravity = lowGravity;
				this.patternString = patternString;
			}

			// Token: 0x0400014E RID: 334
			public readonly float HP;

			// Token: 0x0400014F RID: 335
			public readonly string[] YVelocityRange;

			// Token: 0x04000150 RID: 336
			public readonly string[] babyDelayString;

			// Token: 0x04000151 RID: 337
			public readonly float highVerticalSpeed;

			// Token: 0x04000152 RID: 338
			public readonly float highHorizontalSpeed;

			// Token: 0x04000153 RID: 339
			public readonly float highGravity;

			// Token: 0x04000154 RID: 340
			public readonly float lowVerticalSpeed;

			// Token: 0x04000155 RID: 341
			public readonly float lowHorizontalSpeed;

			// Token: 0x04000156 RID: 342
			public readonly float lowGravity;

			// Token: 0x04000157 RID: 343
			public readonly string[] patternString;
		}
	}

	// Token: 0x0200003A RID: 58
	public class Baroness : AbstractLevelProperties<LevelProperties.Baroness.State, LevelProperties.Baroness.Pattern, LevelProperties.Baroness.States>
	{
		// Token: 0x060000AB RID: 171 RVA: 0x0000A1B8 File Offset: 0x000085B8
		public Baroness(int hp, Level.GoalTimes goalTimes, LevelProperties.Baroness.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060000AC RID: 172 RVA: 0x0000A1C4 File Offset: 0x000085C4
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 400f;
				break;
			case Level.Mode.Normal:
				timeline.health = 430f;
				break;
			case Level.Mode.Hard:
				timeline.health = 530f;
				break;
			}
			return timeline;
		}

		// Token: 0x060000AD RID: 173 RVA: 0x0000A21F File Offset: 0x0000861F
		public static LevelProperties.Baroness.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.Baroness.Pattern.Default;
				}
			}
			Debug.LogError("Pattern Baroness.Pattern for  " + id + " not found.", null);
			return LevelProperties.Baroness.Pattern.Uninitialized;
		}

		// Token: 0x060000AE RID: 174 RVA: 0x0000A260 File Offset: 0x00008660
		public static LevelProperties.Baroness GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Baroness.State> list = new List<LevelProperties.Baroness.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 530;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Baroness.State(10f, new LevelProperties.Baroness.Pattern[][]
						{
							new LevelProperties.Baroness.Pattern[1]
						}, LevelProperties.Baroness.States.Main, new LevelProperties.Baroness.BaronessVonBonbon(0, 3f, new string[]
						{
							"5,7,9,7,8,6,7"
						}, new MinMax(2f, 3.2f), new MinMax(1f, 1f), 3, 100f, 300, 620f, 0.61f, 0.45f, 6f, new MinMax(4.3f, 6.7f), 1.5f, "H,H,D:2.4,H,H,D:2.7,H,H,D:3"), new LevelProperties.Baroness.Open(3, new string[]
						{
							"1,2,3,4,5"
						}), new LevelProperties.Baroness.Jellybeans(7, 315f, 60f, 550f, new MinMax(-101f, -100f), 1f, new string[]
						{
							"R,R,P,R,P,P,R,R,P",
							"R,P,R,P,R,R,P",
							"P,P,R,R,P,R,R,P"
						}, new MinMax(5f, 6.8f), 1f, 5f), new LevelProperties.Baroness.Gumball(320, 1.85f, 500f, new MinMax(2f, 3.5f), new MinMax(4.3f, 5.7f), 950f, new MinMax(-260f, 450f), 0.16f, new MinMax(600f, 850f), new MinMax(330f, 600f)), new LevelProperties.Baroness.Waffle(305, 1.8f, 1f, new MinMax(2f, 5f), 3f, 1f, 450f, 4f, 130f, 380f), new LevelProperties.Baroness.CandyCorn(250, 535f, new string[]
						{
							"Y,N,Y,Y,N,N,Y,Y,Y,N,Y,N,N",
							"Y,Y,Y,N,Y,N,N,Y,N,N,Y,Y,Y"
						}, -150f, 600f, 2f, new MinMax(1.3f, 2f), 10, 80f, true), new LevelProperties.Baroness.Cupcake(235, new string[]
						{
							"1000, 1200, 1500, 1300,1100,1050,1400",
							"950,1150,1400,1300,1000,1000,1500"
						}, 0.85f, 200f, 75f, true), new LevelProperties.Baroness.Jawbreaker(2, 230f, 5f, 220, 265f, 1.8f), new LevelProperties.Baroness.Peppermint(340f, new MinMax(3.5f, 6.7f)), new LevelProperties.Baroness.Platform(180f, 400f, -15f)));
					}
				}
				else
				{
					hp = 430;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Baroness.State(10f, new LevelProperties.Baroness.Pattern[][]
					{
						new LevelProperties.Baroness.Pattern[1]
					}, LevelProperties.Baroness.States.Main, new LevelProperties.Baroness.BaronessVonBonbon(0, 3f, new string[]
					{
						"6,5,7,5.5,7.5,6,6,5",
						"5,8,5.5,7,5,6,8"
					}, new MinMax(4f, 6.5f), new MinMax(1f, 1f), 3, 100f, 250, 565f, 0.7f, 0.5f, 5f, new MinMax(7.5f, 8.1f), 0.2f, "H,H,D:2,H,H,D:2.5,H,H,D:1.5"), new LevelProperties.Baroness.Open(3, new string[]
					{
						"1,2,3,4,5",
						"1,3,5,2,4",
						"5,4,2,3,1"
					}), new LevelProperties.Baroness.Jellybeans(7, 300f, 60f, 550f, new MinMax(-101f, -100f), 1f, new string[]
					{
						"R,R,P,R,P,R,P,P",
						"P,R,P,R,R,P,R,P"
					}, new MinMax(4.8f, 6.6f), 2f, 5f), new LevelProperties.Baroness.Gumball(270, 2.3f, 500f, new MinMax(2f, 3.5f), new MinMax(3.5f, 5f), 950f, new MinMax(-255f, 450f), 0.23f, new MinMax(600f, 800f), new MinMax(330f, 600f)), new LevelProperties.Baroness.Waffle(250, 1.8f, 1f, new MinMax(2f, 5f), 3f, 0.001f, 425f, 4f, 110f, 380f), new LevelProperties.Baroness.CandyCorn(225, 465f, new string[]
					{
						"Y,N,Y,Y,N,Y,N,Y,Y,N,N,Y,N,Y,Y"
					}, -150f, 600f, 2f, new MinMax(1.5f, 2.3f), 10, 80f, true), new LevelProperties.Baroness.Cupcake(185, new string[]
					{
						"1000, 1200, 1500, 1300,1100,1050,1400",
						"1150,1400,1300,1000,1200,1100"
					}, 1.25f, 200f, 75f, true), new LevelProperties.Baroness.Jawbreaker(1, 245f, 5f, 180, 265f, 2.1f), new LevelProperties.Baroness.Peppermint(325f, new MinMax(4f, 7.7f)), new LevelProperties.Baroness.Platform(180f, 400f, -15f)));
				}
			}
			else
			{
				hp = 400;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Baroness.State(10f, new LevelProperties.Baroness.Pattern[][]
				{
					new LevelProperties.Baroness.Pattern[1]
				}, LevelProperties.Baroness.States.Main, new LevelProperties.Baroness.BaronessVonBonbon(0, 5f, new string[]
				{
					"4,6,8,4,9"
				}, new MinMax(2.4f, 3.7f), new MinMax(1f, 1f), 3, 100f, 480, 650f, 0.7f, 0.5f, 5f, new MinMax(4.5f, 7.5f), 1.5f, "H,H,D:2,H,H,D:2.5,H,H,D:1.5"), new LevelProperties.Baroness.Open(3, new string[]
				{
					"2,5,1,3",
					"5,1,3,2"
				}), new LevelProperties.Baroness.Jellybeans(7, 300f, 60f, 550f, new MinMax(-101f, -100f), 1f, new string[]
				{
					"P,P,P,R,P,P,P,P,R"
				}, new MinMax(4.6f, 6.4f), 2f, 5f), new LevelProperties.Baroness.Gumball(270, 3.7f, 600f, new MinMax(9000f, 9005f), new MinMax(0f, 0f), 850f, new MinMax(-290f, 290f), 0.5f, new MinMax(-150f, 150f), new MinMax(0f, 205f)), new LevelProperties.Baroness.Waffle(250, 1.8f, 1f, new MinMax(9000f, 9005f), 3f, 0f, 400f, 4f, 150f, 430f), new LevelProperties.Baroness.CandyCorn(225, 505f, new string[]
				{
					"Y,Y,N,Y,Y,N,Y,N,Y,N",
					"N,Y,N,N,Y,Y,Y,Y,N"
				}, -150f, 600f, 2f, new MinMax(2000f, 2002f), 10, 70f, false), new LevelProperties.Baroness.Cupcake(185, new string[]
				{
					"1000, 1200, 1500, 1300,1100,1050,1400"
				}, 0.7f, 200f, 75f, false), new LevelProperties.Baroness.Jawbreaker(0, 235f, 5f, 180, 300f, 1.9f), new LevelProperties.Baroness.Peppermint(330f, new MinMax(4f, 7.7f)), new LevelProperties.Baroness.Platform(180f, 400f, -15f)));
			}
			return new LevelProperties.Baroness(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200003B RID: 59
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700001C RID: 28
			// (get) Token: 0x060000B0 RID: 176 RVA: 0x0000AA59 File Offset: 0x00008E59
			// (set) Token: 0x060000B1 RID: 177 RVA: 0x0000AA61 File Offset: 0x00008E61
			private protected LevelProperties.Baroness properties { protected get; private set; }

			// Token: 0x060000B2 RID: 178 RVA: 0x0000AA6A File Offset: 0x00008E6A
			public virtual void LevelInit(LevelProperties.Baroness properties)
			{
				this.properties = properties;
			}

			// Token: 0x060000B3 RID: 179 RVA: 0x0000AA73 File Offset: 0x00008E73
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200003C RID: 60
		public enum States
		{
			// Token: 0x0400015E RID: 350
			Main,
			// Token: 0x0400015F RID: 351
			Generic,
			// Token: 0x04000160 RID: 352
			Chase
		}

		// Token: 0x0200003D RID: 61
		public enum Pattern
		{
			// Token: 0x04000162 RID: 354
			Default,
			// Token: 0x04000163 RID: 355
			Uninitialized
		}

		// Token: 0x0200003E RID: 62
		public class State : AbstractLevelState<LevelProperties.Baroness.Pattern, LevelProperties.Baroness.States>
		{
			// Token: 0x060000B4 RID: 180 RVA: 0x0000AA78 File Offset: 0x00008E78
			public State(float healthTrigger, LevelProperties.Baroness.Pattern[][] patterns, LevelProperties.Baroness.States stateName, LevelProperties.Baroness.BaronessVonBonbon baronessVonBonbon, LevelProperties.Baroness.Open open, LevelProperties.Baroness.Jellybeans jellybeans, LevelProperties.Baroness.Gumball gumball, LevelProperties.Baroness.Waffle waffle, LevelProperties.Baroness.CandyCorn candyCorn, LevelProperties.Baroness.Cupcake cupcake, LevelProperties.Baroness.Jawbreaker jawbreaker, LevelProperties.Baroness.Peppermint peppermint, LevelProperties.Baroness.Platform platform) : base(healthTrigger, patterns, stateName)
			{
				this.baronessVonBonbon = baronessVonBonbon;
				this.open = open;
				this.jellybeans = jellybeans;
				this.gumball = gumball;
				this.waffle = waffle;
				this.candyCorn = candyCorn;
				this.cupcake = cupcake;
				this.jawbreaker = jawbreaker;
				this.peppermint = peppermint;
				this.platform = platform;
			}

			// Token: 0x04000164 RID: 356
			public readonly LevelProperties.Baroness.BaronessVonBonbon baronessVonBonbon;

			// Token: 0x04000165 RID: 357
			public readonly LevelProperties.Baroness.Open open;

			// Token: 0x04000166 RID: 358
			public readonly LevelProperties.Baroness.Jellybeans jellybeans;

			// Token: 0x04000167 RID: 359
			public readonly LevelProperties.Baroness.Gumball gumball;

			// Token: 0x04000168 RID: 360
			public readonly LevelProperties.Baroness.Waffle waffle;

			// Token: 0x04000169 RID: 361
			public readonly LevelProperties.Baroness.CandyCorn candyCorn;

			// Token: 0x0400016A RID: 362
			public readonly LevelProperties.Baroness.Cupcake cupcake;

			// Token: 0x0400016B RID: 363
			public readonly LevelProperties.Baroness.Jawbreaker jawbreaker;

			// Token: 0x0400016C RID: 364
			public readonly LevelProperties.Baroness.Peppermint peppermint;

			// Token: 0x0400016D RID: 365
			public readonly LevelProperties.Baroness.Platform platform;
		}

		// Token: 0x0200003F RID: 63
		public class BaronessVonBonbon : AbstractLevelPropertyGroup
		{
			// Token: 0x060000B5 RID: 181 RVA: 0x0000AAE0 File Offset: 0x00008EE0
			public BaronessVonBonbon(int HP, float miniBossStart, string[] timeString, MinMax attackDelay, MinMax attackCount, int projectileHP, float projectileRotationSpeed, int projectileSpeed, float finalProjectileSpeed, float finalProjectileMoveDuration, float finalProjectileRedirectDelay, float finalProjectileRedirectCount, MinMax finalProjectileAttackDelayRange, float finalProjectileInitialDelay, string finalProjectileHeadToss)
			{
				this.HP = HP;
				this.miniBossStart = miniBossStart;
				this.timeString = timeString;
				this.attackDelay = attackDelay;
				this.attackCount = attackCount;
				this.projectileHP = projectileHP;
				this.projectileRotationSpeed = projectileRotationSpeed;
				this.projectileSpeed = projectileSpeed;
				this.finalProjectileSpeed = finalProjectileSpeed;
				this.finalProjectileMoveDuration = finalProjectileMoveDuration;
				this.finalProjectileRedirectDelay = finalProjectileRedirectDelay;
				this.finalProjectileRedirectCount = finalProjectileRedirectCount;
				this.finalProjectileAttackDelayRange = finalProjectileAttackDelayRange;
				this.finalProjectileInitialDelay = finalProjectileInitialDelay;
				this.finalProjectileHeadToss = finalProjectileHeadToss;
			}

			// Token: 0x0400016E RID: 366
			public readonly int HP;

			// Token: 0x0400016F RID: 367
			public readonly float miniBossStart;

			// Token: 0x04000170 RID: 368
			public readonly string[] timeString;

			// Token: 0x04000171 RID: 369
			public readonly MinMax attackDelay;

			// Token: 0x04000172 RID: 370
			public readonly MinMax attackCount;

			// Token: 0x04000173 RID: 371
			public readonly int projectileHP;

			// Token: 0x04000174 RID: 372
			public readonly float projectileRotationSpeed;

			// Token: 0x04000175 RID: 373
			public readonly int projectileSpeed;

			// Token: 0x04000176 RID: 374
			public readonly float finalProjectileSpeed;

			// Token: 0x04000177 RID: 375
			public readonly float finalProjectileMoveDuration;

			// Token: 0x04000178 RID: 376
			public readonly float finalProjectileRedirectDelay;

			// Token: 0x04000179 RID: 377
			public readonly float finalProjectileRedirectCount;

			// Token: 0x0400017A RID: 378
			public readonly MinMax finalProjectileAttackDelayRange;

			// Token: 0x0400017B RID: 379
			public readonly float finalProjectileInitialDelay;

			// Token: 0x0400017C RID: 380
			public readonly string finalProjectileHeadToss;
		}

		// Token: 0x02000040 RID: 64
		public class Open : AbstractLevelPropertyGroup
		{
			// Token: 0x060000B6 RID: 182 RVA: 0x0000AB68 File Offset: 0x00008F68
			public Open(int miniBossAmount, string[] miniBossString)
			{
				this.miniBossAmount = miniBossAmount;
				this.miniBossString = miniBossString;
			}

			// Token: 0x0400017D RID: 381
			public readonly int miniBossAmount;

			// Token: 0x0400017E RID: 382
			public readonly string[] miniBossString;
		}

		// Token: 0x02000041 RID: 65
		public class Jellybeans : AbstractLevelPropertyGroup
		{
			// Token: 0x060000B7 RID: 183 RVA: 0x0000AB80 File Offset: 0x00008F80
			public Jellybeans(int HP, float movementSpeed, float heightDefault, float jumpSpeed, MinMax jumpHeight, float afterJumpDuration, string[] typeArray, MinMax spawnDelay, float startingPoint, float spawnDelayChangePercentage)
			{
				this.HP = HP;
				this.movementSpeed = movementSpeed;
				this.heightDefault = heightDefault;
				this.jumpSpeed = jumpSpeed;
				this.jumpHeight = jumpHeight;
				this.afterJumpDuration = afterJumpDuration;
				this.typeArray = typeArray;
				this.spawnDelay = spawnDelay;
				this.startingPoint = startingPoint;
				this.spawnDelayChangePercentage = spawnDelayChangePercentage;
			}

			// Token: 0x0400017F RID: 383
			public readonly int HP;

			// Token: 0x04000180 RID: 384
			public readonly float movementSpeed;

			// Token: 0x04000181 RID: 385
			public readonly float heightDefault;

			// Token: 0x04000182 RID: 386
			public readonly float jumpSpeed;

			// Token: 0x04000183 RID: 387
			public readonly MinMax jumpHeight;

			// Token: 0x04000184 RID: 388
			public readonly float afterJumpDuration;

			// Token: 0x04000185 RID: 389
			public readonly string[] typeArray;

			// Token: 0x04000186 RID: 390
			public readonly MinMax spawnDelay;

			// Token: 0x04000187 RID: 391
			public readonly float startingPoint;

			// Token: 0x04000188 RID: 392
			public readonly float spawnDelayChangePercentage;
		}

		// Token: 0x02000042 RID: 66
		public class Gumball : AbstractLevelPropertyGroup
		{
			// Token: 0x060000B8 RID: 184 RVA: 0x0000ABE0 File Offset: 0x00008FE0
			public Gumball(int HP, float gumballMovementSpeed, float gumballDeathSpeed, MinMax gumballAttackDurationOffRange, MinMax gumballAttackDurationOnRange, float gravity, MinMax velocityX, float rateOfFire, MinMax velocityY, MinMax offsetX)
			{
				this.HP = HP;
				this.gumballMovementSpeed = gumballMovementSpeed;
				this.gumballDeathSpeed = gumballDeathSpeed;
				this.gumballAttackDurationOffRange = gumballAttackDurationOffRange;
				this.gumballAttackDurationOnRange = gumballAttackDurationOnRange;
				this.gravity = gravity;
				this.velocityX = velocityX;
				this.rateOfFire = rateOfFire;
				this.velocityY = velocityY;
				this.offsetX = offsetX;
			}

			// Token: 0x04000189 RID: 393
			public readonly int HP;

			// Token: 0x0400018A RID: 394
			public readonly float gumballMovementSpeed;

			// Token: 0x0400018B RID: 395
			public readonly float gumballDeathSpeed;

			// Token: 0x0400018C RID: 396
			public readonly MinMax gumballAttackDurationOffRange;

			// Token: 0x0400018D RID: 397
			public readonly MinMax gumballAttackDurationOnRange;

			// Token: 0x0400018E RID: 398
			public readonly float gravity;

			// Token: 0x0400018F RID: 399
			public readonly MinMax velocityX;

			// Token: 0x04000190 RID: 400
			public readonly float rateOfFire;

			// Token: 0x04000191 RID: 401
			public readonly MinMax velocityY;

			// Token: 0x04000192 RID: 402
			public readonly MinMax offsetX;
		}

		// Token: 0x02000043 RID: 67
		public class Waffle : AbstractLevelPropertyGroup
		{
			// Token: 0x060000B9 RID: 185 RVA: 0x0000AC40 File Offset: 0x00009040
			public Waffle(int HP, float movementSpeed, float anticipation, MinMax attackDelayRange, float explodeSpeed, float explodeTwoDuration, float explodeDistance, float explodeReturnSpeed, float XAxisSpeed, float pivotPointMoveAmount)
			{
				this.HP = HP;
				this.movementSpeed = movementSpeed;
				this.anticipation = anticipation;
				this.attackDelayRange = attackDelayRange;
				this.explodeSpeed = explodeSpeed;
				this.explodeTwoDuration = explodeTwoDuration;
				this.explodeDistance = explodeDistance;
				this.explodeReturnSpeed = explodeReturnSpeed;
				this.XAxisSpeed = XAxisSpeed;
				this.pivotPointMoveAmount = pivotPointMoveAmount;
			}

			// Token: 0x04000193 RID: 403
			public readonly int HP;

			// Token: 0x04000194 RID: 404
			public readonly float movementSpeed;

			// Token: 0x04000195 RID: 405
			public readonly float anticipation;

			// Token: 0x04000196 RID: 406
			public readonly MinMax attackDelayRange;

			// Token: 0x04000197 RID: 407
			public readonly float explodeSpeed;

			// Token: 0x04000198 RID: 408
			public readonly float explodeTwoDuration;

			// Token: 0x04000199 RID: 409
			public readonly float explodeDistance;

			// Token: 0x0400019A RID: 410
			public readonly float explodeReturnSpeed;

			// Token: 0x0400019B RID: 411
			public readonly float XAxisSpeed;

			// Token: 0x0400019C RID: 412
			public readonly float pivotPointMoveAmount;
		}

		// Token: 0x02000044 RID: 68
		public class CandyCorn : AbstractLevelPropertyGroup
		{
			// Token: 0x060000BA RID: 186 RVA: 0x0000ACA0 File Offset: 0x000090A0
			public CandyCorn(int HP, float movementSpeed, string[] changeLevelString, float centerPosition, float deathMoveSpeed, float deathAcceleration, MinMax miniCornSpawnDelay, int miniCornHP, float miniCornMovementSpeed, bool spawnMinis)
			{
				this.HP = HP;
				this.movementSpeed = movementSpeed;
				this.changeLevelString = changeLevelString;
				this.centerPosition = centerPosition;
				this.deathMoveSpeed = deathMoveSpeed;
				this.deathAcceleration = deathAcceleration;
				this.miniCornSpawnDelay = miniCornSpawnDelay;
				this.miniCornHP = miniCornHP;
				this.miniCornMovementSpeed = miniCornMovementSpeed;
				this.spawnMinis = spawnMinis;
			}

			// Token: 0x0400019D RID: 413
			public readonly int HP;

			// Token: 0x0400019E RID: 414
			public readonly float movementSpeed;

			// Token: 0x0400019F RID: 415
			public readonly string[] changeLevelString;

			// Token: 0x040001A0 RID: 416
			public readonly float centerPosition;

			// Token: 0x040001A1 RID: 417
			public readonly float deathMoveSpeed;

			// Token: 0x040001A2 RID: 418
			public readonly float deathAcceleration;

			// Token: 0x040001A3 RID: 419
			public readonly MinMax miniCornSpawnDelay;

			// Token: 0x040001A4 RID: 420
			public readonly int miniCornHP;

			// Token: 0x040001A5 RID: 421
			public readonly float miniCornMovementSpeed;

			// Token: 0x040001A6 RID: 422
			public readonly bool spawnMinis;
		}

		// Token: 0x02000045 RID: 69
		public class Cupcake : AbstractLevelPropertyGroup
		{
			// Token: 0x060000BB RID: 187 RVA: 0x0000AD00 File Offset: 0x00009100
			public Cupcake(int HP, string[] XSpeedString, float hold, float splashOriginalOffset, float splashOffset, bool projectileOn)
			{
				this.HP = HP;
				this.XSpeedString = XSpeedString;
				this.hold = hold;
				this.splashOriginalOffset = splashOriginalOffset;
				this.splashOffset = splashOffset;
				this.projectileOn = projectileOn;
			}

			// Token: 0x040001A7 RID: 423
			public readonly int HP;

			// Token: 0x040001A8 RID: 424
			public readonly string[] XSpeedString;

			// Token: 0x040001A9 RID: 425
			public readonly float hold;

			// Token: 0x040001AA RID: 426
			public readonly float splashOriginalOffset;

			// Token: 0x040001AB RID: 427
			public readonly float splashOffset;

			// Token: 0x040001AC RID: 428
			public readonly bool projectileOn;
		}

		// Token: 0x02000046 RID: 70
		public class Jawbreaker : AbstractLevelPropertyGroup
		{
			// Token: 0x060000BC RID: 188 RVA: 0x0000AD35 File Offset: 0x00009135
			public Jawbreaker(int jawbreakerMinis, float jawbreakerMiniSpace, float jawbreakerHomeDuration, int jawbreakerHomingHP, float jawbreakerHomingSpeed, float jawbreakerHomingRotation)
			{
				this.jawbreakerMinis = jawbreakerMinis;
				this.jawbreakerMiniSpace = jawbreakerMiniSpace;
				this.jawbreakerHomeDuration = jawbreakerHomeDuration;
				this.jawbreakerHomingHP = jawbreakerHomingHP;
				this.jawbreakerHomingSpeed = jawbreakerHomingSpeed;
				this.jawbreakerHomingRotation = jawbreakerHomingRotation;
			}

			// Token: 0x040001AD RID: 429
			public readonly int jawbreakerMinis;

			// Token: 0x040001AE RID: 430
			public readonly float jawbreakerMiniSpace;

			// Token: 0x040001AF RID: 431
			public readonly float jawbreakerHomeDuration;

			// Token: 0x040001B0 RID: 432
			public readonly int jawbreakerHomingHP;

			// Token: 0x040001B1 RID: 433
			public readonly float jawbreakerHomingSpeed;

			// Token: 0x040001B2 RID: 434
			public readonly float jawbreakerHomingRotation;
		}

		// Token: 0x02000047 RID: 71
		public class Peppermint : AbstractLevelPropertyGroup
		{
			// Token: 0x060000BD RID: 189 RVA: 0x0000AD6A File Offset: 0x0000916A
			public Peppermint(float peppermintSpeed, MinMax peppermintSpawnDurationRange)
			{
				this.peppermintSpeed = peppermintSpeed;
				this.peppermintSpawnDurationRange = peppermintSpawnDurationRange;
			}

			// Token: 0x040001B3 RID: 435
			public readonly float peppermintSpeed;

			// Token: 0x040001B4 RID: 436
			public readonly MinMax peppermintSpawnDurationRange;
		}

		// Token: 0x02000048 RID: 72
		public class Platform : AbstractLevelPropertyGroup
		{
			// Token: 0x060000BE RID: 190 RVA: 0x0000AD80 File Offset: 0x00009180
			public Platform(float LeftBoundaryOffset, float RightBoundaryOffset, float YPosition)
			{
				this.LeftBoundaryOffset = LeftBoundaryOffset;
				this.RightBoundaryOffset = RightBoundaryOffset;
				this.YPosition = YPosition;
			}

			// Token: 0x040001B5 RID: 437
			public readonly float LeftBoundaryOffset;

			// Token: 0x040001B6 RID: 438
			public readonly float RightBoundaryOffset;

			// Token: 0x040001B7 RID: 439
			public readonly float YPosition;
		}
	}

	// Token: 0x0200004A RID: 74
	public class Bat : AbstractLevelProperties<LevelProperties.Bat.State, LevelProperties.Bat.Pattern, LevelProperties.Bat.States>
	{
		// Token: 0x060000D2 RID: 210 RVA: 0x0000AD9D File Offset: 0x0000919D
		public Bat(int hp, Level.GoalTimes goalTimes, LevelProperties.Bat.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060000D3 RID: 211 RVA: 0x0000ADAC File Offset: 0x000091AC
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 800f;
				timeline.events.Add(new Level.Timeline.Event("Coffin", 0.53f));
				timeline.events.Add(new Level.Timeline.Event("Wolf", 0.2f));
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x060000D4 RID: 212 RVA: 0x0000AE3C File Offset: 0x0000923C
		public static LevelProperties.Bat.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "B")
				{
					return LevelProperties.Bat.Pattern.Bouncer;
				}
				if (id == "L")
				{
					return LevelProperties.Bat.Pattern.Lightning;
				}
			}
			Debug.LogError("Pattern Bat.Pattern for  " + id + " not found.", null);
			return LevelProperties.Bat.Pattern.Uninitialized;
		}

		// Token: 0x060000D5 RID: 213 RVA: 0x0000AE98 File Offset: 0x00009298
		public static LevelProperties.Bat GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Bat.State> list = new List<LevelProperties.Bat.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Bat.State(10f, new LevelProperties.Bat.Pattern[][]
						{
							new LevelProperties.Bat.Pattern[1]
						}, LevelProperties.Bat.States.Main, new LevelProperties.Bat.Movement(300f, 0f), new LevelProperties.Bat.BatBouncer(400f, 600f, 1f, 6f, new string[]
						{
							"3,5,4,2,3.3"
						}, 1f, new string[]
						{
							"45,53,37,42"
						}, 5f), new LevelProperties.Bat.Goblins(true, 20f, 200f, new string[]
						{
							"4,3,5,6,4"
						}, new string[]
						{
							"R,R,L,R,L"
						}, new MinMax(6f, 10f), 2f, 1f, 100f, 1f), new LevelProperties.Bat.BatLightning(0f, 0f, new string[0], new string[0], 0f, 0f, 0f, 0f), new LevelProperties.Bat.MiniBats(0f, 0f, 0f, 0f, 0f, new string[0], 0f), new LevelProperties.Bat.Pentagrams(0f, 0f, new string[0], 0f), new LevelProperties.Bat.CrossToss(0f, new string[0], new string[0]), new LevelProperties.Bat.WolfFire(0f, 0f, 0f), new LevelProperties.Bat.WolfSoul(0f, 0f, 0f, new string[0], 0f, 0f, 0f, 0f)));
					}
				}
				else
				{
					hp = 800;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					List<LevelProperties.Bat.State> list2 = list;
					float healthTrigger = 10f;
					LevelProperties.Bat.Pattern[][] array = new LevelProperties.Bat.Pattern[1][];
					int num = 0;
					LevelProperties.Bat.Pattern[] array2 = new LevelProperties.Bat.Pattern[3];
					array2[1] = LevelProperties.Bat.Pattern.Lightning;
					array[num] = array2;
					list2.Add(new LevelProperties.Bat.State(healthTrigger, array, LevelProperties.Bat.States.Main, new LevelProperties.Bat.Movement(300f, 160f), new LevelProperties.Bat.BatBouncer(500f, 700f, 1f, 6f, new string[]
					{
						"3,5,4,2,3.3"
					}, 1f, new string[]
					{
						"240,228,215,230,236"
					}, 5f), new LevelProperties.Bat.Goblins(true, 10f, 300f, new string[]
					{
						"6,5,6,7,6,7,5,7"
					}, new string[]
					{
						"R,R,L,R,L"
					}, new MinMax(1f, 1f), 2f, 1f, 300f, 1f), new LevelProperties.Bat.BatLightning(4f, 330f, new string[]
					{
						"50,0,100,-70"
					}, new string[]
					{
						"7,8,9"
					}, 1f, 2f, 170f, 2f), new LevelProperties.Bat.MiniBats(7f, 2f, 200f, 15f, 1.5f, new string[]
					{
						"0,20,35,5,0,50,350"
					}, 1.3f), new LevelProperties.Bat.Pentagrams(200f, 300f, new string[]
					{
						"4,6,5,4.3,5.5,6.4"
					}, 0.5f), new LevelProperties.Bat.CrossToss(400f, new string[]
					{
						"2,3,2"
					}, new string[]
					{
						"5,7,6,8"
					}), new LevelProperties.Bat.WolfFire(330f, 0.8f, 5f), new LevelProperties.Bat.WolfSoul(1f, 1.5f, 1f, new string[]
					{
						"3,5,6,7"
					}, 100f, 1f, 230f, 1.6f)));
					list.Add(new LevelProperties.Bat.State(0.53f, new LevelProperties.Bat.Pattern[][]
					{
						new LevelProperties.Bat.Pattern[0]
					}, LevelProperties.Bat.States.Coffin, new LevelProperties.Bat.Movement(300f, 160f), new LevelProperties.Bat.BatBouncer(500f, 700f, 1f, 6f, new string[]
					{
						"3,5,4,2,3.3"
					}, 1f, new string[]
					{
						"240,228,215,230,236"
					}, 5f), new LevelProperties.Bat.Goblins(true, 1f, 300f, new string[]
					{
						"1000,9000"
					}, new string[]
					{
						"R,R,R,R,R,R,L"
					}, new MinMax(1f, 5f), 1f, 1f, 300f, 1f), new LevelProperties.Bat.BatLightning(4f, 330f, new string[]
					{
						"50,0,100,-70"
					}, new string[]
					{
						"7,8,9"
					}, 1f, 2f, 170f, 2f), new LevelProperties.Bat.MiniBats(7f, 2f, 200f, 15f, 1.5f, new string[]
					{
						"0,20,35,5,0,50,350"
					}, 1.3f), new LevelProperties.Bat.Pentagrams(200f, 300f, new string[]
					{
						"4,6,5,4.3,5.5,6.4"
					}, 0.5f), new LevelProperties.Bat.CrossToss(400f, new string[]
					{
						"2,3,2"
					}, new string[]
					{
						"5,7,6,8"
					}), new LevelProperties.Bat.WolfFire(330f, 0.8f, 5f), new LevelProperties.Bat.WolfSoul(1f, 1.5f, 1f, new string[]
					{
						"3,5,6,7"
					}, 100f, 1f, 230f, 1.6f)));
					list.Add(new LevelProperties.Bat.State(0.2f, new LevelProperties.Bat.Pattern[][]
					{
						new LevelProperties.Bat.Pattern[0]
					}, LevelProperties.Bat.States.Wolf, new LevelProperties.Bat.Movement(300f, 160f), new LevelProperties.Bat.BatBouncer(500f, 700f, 1f, 6f, new string[]
					{
						"3,5,4,2,3.3"
					}, 1f, new string[]
					{
						"240,228,215,230,236"
					}, 5f), new LevelProperties.Bat.Goblins(true, 1f, 300f, new string[]
					{
						"1000,9000"
					}, new string[]
					{
						"R,R,R,R,R,R,L"
					}, new MinMax(1f, 5f), 1f, 1f, 300f, 1f), new LevelProperties.Bat.BatLightning(4f, 330f, new string[]
					{
						"50,0,100,-70"
					}, new string[]
					{
						"7,8,9"
					}, 1f, 2f, 170f, 2f), new LevelProperties.Bat.MiniBats(7f, 2f, 200f, 15f, 1.5f, new string[]
					{
						"0,20,35,5,0,50,350"
					}, 1.3f), new LevelProperties.Bat.Pentagrams(200f, 300f, new string[]
					{
						"4,6,5,4.3,5.5,6.4"
					}, 0.5f), new LevelProperties.Bat.CrossToss(400f, new string[]
					{
						"2,3,2"
					}, new string[]
					{
						"5,7,6,8"
					}), new LevelProperties.Bat.WolfFire(330f, 0.8f, 5f), new LevelProperties.Bat.WolfSoul(1f, 1.5f, 1f, new string[]
					{
						"3,5,6,7"
					}, 100f, 1f, 230f, 1.6f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Bat.State(10f, new LevelProperties.Bat.Pattern[][]
				{
					new LevelProperties.Bat.Pattern[1]
				}, LevelProperties.Bat.States.Main, new LevelProperties.Bat.Movement(0f, 0f), new LevelProperties.Bat.BatBouncer(0f, 0f, 0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.Bat.Goblins(false, 0f, 0f, new string[0], new string[0], new MinMax(0f, 1f), 0f, 0f, 0f, 0f), new LevelProperties.Bat.BatLightning(0f, 0f, new string[0], new string[0], 0f, 0f, 0f, 0f), new LevelProperties.Bat.MiniBats(0f, 0f, 0f, 0f, 0f, new string[0], 0f), new LevelProperties.Bat.Pentagrams(0f, 0f, new string[0], 0f), new LevelProperties.Bat.CrossToss(0f, new string[0], new string[0]), new LevelProperties.Bat.WolfFire(0f, 0f, 0f), new LevelProperties.Bat.WolfSoul(0f, 0f, 0f, new string[0], 0f, 0f, 0f, 0f)));
			}
			return new LevelProperties.Bat(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200004B RID: 75
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000022 RID: 34
			// (get) Token: 0x060000D7 RID: 215 RVA: 0x0000B766 File Offset: 0x00009B66
			// (set) Token: 0x060000D8 RID: 216 RVA: 0x0000B76E File Offset: 0x00009B6E
			private protected LevelProperties.Bat properties { protected get; private set; }

			// Token: 0x060000D9 RID: 217 RVA: 0x0000B777 File Offset: 0x00009B77
			public virtual void LevelInit(LevelProperties.Bat properties)
			{
				this.properties = properties;
			}

			// Token: 0x060000DA RID: 218 RVA: 0x0000B780 File Offset: 0x00009B80
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200004C RID: 76
		public enum States
		{
			// Token: 0x040001CA RID: 458
			Main,
			// Token: 0x040001CB RID: 459
			Generic,
			// Token: 0x040001CC RID: 460
			Coffin,
			// Token: 0x040001CD RID: 461
			Wolf
		}

		// Token: 0x0200004D RID: 77
		public enum Pattern
		{
			// Token: 0x040001CF RID: 463
			Bouncer,
			// Token: 0x040001D0 RID: 464
			Lightning,
			// Token: 0x040001D1 RID: 465
			Uninitialized
		}

		// Token: 0x0200004E RID: 78
		public class State : AbstractLevelState<LevelProperties.Bat.Pattern, LevelProperties.Bat.States>
		{
			// Token: 0x060000DB RID: 219 RVA: 0x0000B784 File Offset: 0x00009B84
			public State(float healthTrigger, LevelProperties.Bat.Pattern[][] patterns, LevelProperties.Bat.States stateName, LevelProperties.Bat.Movement movement, LevelProperties.Bat.BatBouncer batBouncer, LevelProperties.Bat.Goblins goblins, LevelProperties.Bat.BatLightning batLightning, LevelProperties.Bat.MiniBats miniBats, LevelProperties.Bat.Pentagrams pentagrams, LevelProperties.Bat.CrossToss crossToss, LevelProperties.Bat.WolfFire wolfFire, LevelProperties.Bat.WolfSoul wolfSoul) : base(healthTrigger, patterns, stateName)
			{
				this.movement = movement;
				this.batBouncer = batBouncer;
				this.goblins = goblins;
				this.batLightning = batLightning;
				this.miniBats = miniBats;
				this.pentagrams = pentagrams;
				this.crossToss = crossToss;
				this.wolfFire = wolfFire;
				this.wolfSoul = wolfSoul;
			}

			// Token: 0x040001D2 RID: 466
			public readonly LevelProperties.Bat.Movement movement;

			// Token: 0x040001D3 RID: 467
			public readonly LevelProperties.Bat.BatBouncer batBouncer;

			// Token: 0x040001D4 RID: 468
			public readonly LevelProperties.Bat.Goblins goblins;

			// Token: 0x040001D5 RID: 469
			public readonly LevelProperties.Bat.BatLightning batLightning;

			// Token: 0x040001D6 RID: 470
			public readonly LevelProperties.Bat.MiniBats miniBats;

			// Token: 0x040001D7 RID: 471
			public readonly LevelProperties.Bat.Pentagrams pentagrams;

			// Token: 0x040001D8 RID: 472
			public readonly LevelProperties.Bat.CrossToss crossToss;

			// Token: 0x040001D9 RID: 473
			public readonly LevelProperties.Bat.WolfFire wolfFire;

			// Token: 0x040001DA RID: 474
			public readonly LevelProperties.Bat.WolfSoul wolfSoul;
		}

		// Token: 0x0200004F RID: 79
		public class Movement : AbstractLevelPropertyGroup
		{
			// Token: 0x060000DC RID: 220 RVA: 0x0000B7E2 File Offset: 0x00009BE2
			public Movement(float movementSpeed, float startPosY)
			{
				this.movementSpeed = movementSpeed;
				this.startPosY = startPosY;
			}

			// Token: 0x040001DB RID: 475
			public readonly float movementSpeed;

			// Token: 0x040001DC RID: 476
			public readonly float startPosY;
		}

		// Token: 0x02000050 RID: 80
		public class BatBouncer : AbstractLevelPropertyGroup
		{
			// Token: 0x060000DD RID: 221 RVA: 0x0000B7F8 File Offset: 0x00009BF8
			public BatBouncer(float mainBounceSpeed, float pinkBounceSpeed, float acceleration, float breakCounter, string[] delayBeforeAttackString, float stopDelay, string[] bounceAngleString, float hesitate)
			{
				this.mainBounceSpeed = mainBounceSpeed;
				this.pinkBounceSpeed = pinkBounceSpeed;
				this.acceleration = acceleration;
				this.breakCounter = breakCounter;
				this.delayBeforeAttackString = delayBeforeAttackString;
				this.stopDelay = stopDelay;
				this.bounceAngleString = bounceAngleString;
				this.hesitate = hesitate;
			}

			// Token: 0x040001DD RID: 477
			public readonly float mainBounceSpeed;

			// Token: 0x040001DE RID: 478
			public readonly float pinkBounceSpeed;

			// Token: 0x040001DF RID: 479
			public readonly float acceleration;

			// Token: 0x040001E0 RID: 480
			public readonly float breakCounter;

			// Token: 0x040001E1 RID: 481
			public readonly string[] delayBeforeAttackString;

			// Token: 0x040001E2 RID: 482
			public readonly float stopDelay;

			// Token: 0x040001E3 RID: 483
			public readonly string[] bounceAngleString;

			// Token: 0x040001E4 RID: 484
			public readonly float hesitate;
		}

		// Token: 0x02000051 RID: 81
		public class Goblins : AbstractLevelPropertyGroup
		{
			// Token: 0x060000DE RID: 222 RVA: 0x0000B848 File Offset: 0x00009C48
			public Goblins(bool Enabled, float HP, float runSpeed, string[] appearDelayString, string[] entranceString, MinMax shooterOccuranceRange, float timeBeforeShoot, float initalShotDelay, float bulletSpeed, float shooterHold)
			{
				this.Enabled = Enabled;
				this.HP = HP;
				this.runSpeed = runSpeed;
				this.appearDelayString = appearDelayString;
				this.entranceString = entranceString;
				this.shooterOccuranceRange = shooterOccuranceRange;
				this.timeBeforeShoot = timeBeforeShoot;
				this.initalShotDelay = initalShotDelay;
				this.bulletSpeed = bulletSpeed;
				this.shooterHold = shooterHold;
			}

			// Token: 0x040001E5 RID: 485
			public readonly bool Enabled;

			// Token: 0x040001E6 RID: 486
			public readonly float HP;

			// Token: 0x040001E7 RID: 487
			public readonly float runSpeed;

			// Token: 0x040001E8 RID: 488
			public readonly string[] appearDelayString;

			// Token: 0x040001E9 RID: 489
			public readonly string[] entranceString;

			// Token: 0x040001EA RID: 490
			public readonly MinMax shooterOccuranceRange;

			// Token: 0x040001EB RID: 491
			public readonly float timeBeforeShoot;

			// Token: 0x040001EC RID: 492
			public readonly float initalShotDelay;

			// Token: 0x040001ED RID: 493
			public readonly float bulletSpeed;

			// Token: 0x040001EE RID: 494
			public readonly float shooterHold;
		}

		// Token: 0x02000052 RID: 82
		public class BatLightning : AbstractLevelPropertyGroup
		{
			// Token: 0x060000DF RID: 223 RVA: 0x0000B8A8 File Offset: 0x00009CA8
			public BatLightning(float cloudCount, float cloudDistance, string[] centerOffset, string[] initialAttackDelayString, float cloudWarning, float lightningOnDuration, float cloudHeight, float hesitate)
			{
				this.cloudCount = cloudCount;
				this.cloudDistance = cloudDistance;
				this.centerOffset = centerOffset;
				this.initialAttackDelayString = initialAttackDelayString;
				this.cloudWarning = cloudWarning;
				this.lightningOnDuration = lightningOnDuration;
				this.cloudHeight = cloudHeight;
				this.hesitate = hesitate;
			}

			// Token: 0x040001EF RID: 495
			public readonly float cloudCount;

			// Token: 0x040001F0 RID: 496
			public readonly float cloudDistance;

			// Token: 0x040001F1 RID: 497
			public readonly string[] centerOffset;

			// Token: 0x040001F2 RID: 498
			public readonly string[] initialAttackDelayString;

			// Token: 0x040001F3 RID: 499
			public readonly float cloudWarning;

			// Token: 0x040001F4 RID: 500
			public readonly float lightningOnDuration;

			// Token: 0x040001F5 RID: 501
			public readonly float cloudHeight;

			// Token: 0x040001F6 RID: 502
			public readonly float hesitate;
		}

		// Token: 0x02000053 RID: 83
		public class MiniBats : AbstractLevelPropertyGroup
		{
			// Token: 0x060000E0 RID: 224 RVA: 0x0000B8F8 File Offset: 0x00009CF8
			public MiniBats(float HP, float initialAttackDelay, float speedX, float speedY, float yMinMax, string[] batAngleString, float delay)
			{
				this.HP = HP;
				this.initialAttackDelay = initialAttackDelay;
				this.speedX = speedX;
				this.speedY = speedY;
				this.yMinMax = yMinMax;
				this.batAngleString = batAngleString;
				this.delay = delay;
			}

			// Token: 0x040001F7 RID: 503
			public readonly float HP;

			// Token: 0x040001F8 RID: 504
			public readonly float initialAttackDelay;

			// Token: 0x040001F9 RID: 505
			public readonly float speedX;

			// Token: 0x040001FA RID: 506
			public readonly float speedY;

			// Token: 0x040001FB RID: 507
			public readonly float yMinMax;

			// Token: 0x040001FC RID: 508
			public readonly string[] batAngleString;

			// Token: 0x040001FD RID: 509
			public readonly float delay;
		}

		// Token: 0x02000054 RID: 84
		public class Pentagrams : AbstractLevelPropertyGroup
		{
			// Token: 0x060000E1 RID: 225 RVA: 0x0000B935 File Offset: 0x00009D35
			public Pentagrams(float xSpeed, float ySpeed, string[] pentagramDelayString, float pentagramSize)
			{
				this.xSpeed = xSpeed;
				this.ySpeed = ySpeed;
				this.pentagramDelayString = pentagramDelayString;
				this.pentagramSize = pentagramSize;
			}

			// Token: 0x040001FE RID: 510
			public readonly float xSpeed;

			// Token: 0x040001FF RID: 511
			public readonly float ySpeed;

			// Token: 0x04000200 RID: 512
			public readonly string[] pentagramDelayString;

			// Token: 0x04000201 RID: 513
			public readonly float pentagramSize;
		}

		// Token: 0x02000055 RID: 85
		public class CrossToss : AbstractLevelPropertyGroup
		{
			// Token: 0x060000E2 RID: 226 RVA: 0x0000B95A File Offset: 0x00009D5A
			public CrossToss(float projectileSpeed, string[] attackCount, string[] crossDelayString)
			{
				this.projectileSpeed = projectileSpeed;
				this.attackCount = attackCount;
				this.crossDelayString = crossDelayString;
			}

			// Token: 0x04000202 RID: 514
			public readonly float projectileSpeed;

			// Token: 0x04000203 RID: 515
			public readonly string[] attackCount;

			// Token: 0x04000204 RID: 516
			public readonly string[] crossDelayString;
		}

		// Token: 0x02000056 RID: 86
		public class WolfFire : AbstractLevelPropertyGroup
		{
			// Token: 0x060000E3 RID: 227 RVA: 0x0000B977 File Offset: 0x00009D77
			public WolfFire(float bulletSpeed, float bulletDelay, float bulletAimCount)
			{
				this.bulletSpeed = bulletSpeed;
				this.bulletDelay = bulletDelay;
				this.bulletAimCount = bulletAimCount;
			}

			// Token: 0x04000205 RID: 517
			public readonly float bulletSpeed;

			// Token: 0x04000206 RID: 518
			public readonly float bulletDelay;

			// Token: 0x04000207 RID: 519
			public readonly float bulletAimCount;
		}

		// Token: 0x02000057 RID: 87
		public class WolfSoul : AbstractLevelPropertyGroup
		{
			// Token: 0x060000E4 RID: 228 RVA: 0x0000B994 File Offset: 0x00009D94
			public WolfSoul(float regularSize, float attackSize, float attackDuration, string[] floatUpDuration, float floatSpeed, float floatWarningDuration, float homingSpeed, float homingRotation)
			{
				this.regularSize = regularSize;
				this.attackSize = attackSize;
				this.attackDuration = attackDuration;
				this.floatUpDuration = floatUpDuration;
				this.floatSpeed = floatSpeed;
				this.floatWarningDuration = floatWarningDuration;
				this.homingSpeed = homingSpeed;
				this.homingRotation = homingRotation;
			}

			// Token: 0x04000208 RID: 520
			public readonly float regularSize;

			// Token: 0x04000209 RID: 521
			public readonly float attackSize;

			// Token: 0x0400020A RID: 522
			public readonly float attackDuration;

			// Token: 0x0400020B RID: 523
			public readonly string[] floatUpDuration;

			// Token: 0x0400020C RID: 524
			public readonly float floatSpeed;

			// Token: 0x0400020D RID: 525
			public readonly float floatWarningDuration;

			// Token: 0x0400020E RID: 526
			public readonly float homingSpeed;

			// Token: 0x0400020F RID: 527
			public readonly float homingRotation;
		}
	}

	// Token: 0x02000059 RID: 89
	public class Bee : AbstractLevelProperties<LevelProperties.Bee.State, LevelProperties.Bee.Pattern, LevelProperties.Bee.States>
	{
		// Token: 0x060000F5 RID: 245 RVA: 0x0000B9E4 File Offset: 0x00009DE4
		public Bee(int hp, Level.GoalTimes goalTimes, LevelProperties.Bee.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060000F6 RID: 246 RVA: 0x0000B9F0 File Offset: 0x00009DF0
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1000f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.75f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.45f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1200f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.78f));
				timeline.events.Add(new Level.Timeline.Event("Airplane", 0.42f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1400f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.76f));
				timeline.events.Add(new Level.Timeline.Event("Airplane", 0.41f));
				break;
			}
			return timeline;
		}

		// Token: 0x060000F7 RID: 247 RVA: 0x0000BAE8 File Offset: 0x00009EE8
		public static LevelProperties.Bee.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			switch (id)
			{
			case "B":
				return LevelProperties.Bee.Pattern.BlackHole;
			case "C":
				return LevelProperties.Bee.Pattern.Chain;
			case "T":
				return LevelProperties.Bee.Pattern.Triangle;
			case "F":
				return LevelProperties.Bee.Pattern.Follower;
			case "S":
				return LevelProperties.Bee.Pattern.SecurityGuard;
			case "W":
				return LevelProperties.Bee.Pattern.Wing;
			case "U":
				return LevelProperties.Bee.Pattern.Turbine;
			}
			Debug.LogError("Pattern Bee.Pattern for  " + id + " not found.", null);
			return LevelProperties.Bee.Pattern.Uninitialized;
		}

		// Token: 0x060000F8 RID: 248 RVA: 0x0000BBD0 File Offset: 0x00009FD0
		public static LevelProperties.Bee GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Bee.State> list = new List<LevelProperties.Bee.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1400;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Bee.State(10f, new LevelProperties.Bee.Pattern[][]
						{
							new LevelProperties.Bee.Pattern[]
							{
								LevelProperties.Bee.Pattern.SecurityGuard
							}
						}, LevelProperties.Bee.States.Main, new LevelProperties.Bee.Movement(true, 135f, 1), new LevelProperties.Bee.Grunts(true, 8, new string[]
						{
							"0,1,2,3,2,1"
						}, 320f, 3.5f), new LevelProperties.Bee.BlackHole(new string[]
						{
							"2,0",
							"0,2"
						}, 4f, 1f, 200f, 1000000f, 3f, 0.8f, 550, 1f, true), new LevelProperties.Bee.Triangle(1, 2f, 1.5f, 1f, 180f, 60f, 100000f, 2.5f, 550f, 1f, 1f, 3, false), new LevelProperties.Bee.Follower(1, 2f, 1.5f, 1f, 330f, 2.5f, 2.5f, 10000f, 2.5f, 0f, 0f, false, true), new LevelProperties.Bee.Chain(4, 1.4f, 0.55f, 0.05f, 700f, 1f, false), new LevelProperties.Bee.SecurityGuard(325f, new MinMax(1.4f, 2.7f), 1f, 2f, 450f, 8), new LevelProperties.Bee.General(180f, 120f, 500f), new LevelProperties.Bee.WingSwipe(480f, new string[]
						{
							"1,2,1,1,2,1,1,2,1,1,1,2"
						}, 0.1f, 225f, 0.9f, 370f, 400f, new MinMax(1.5f, 3.5f)), new LevelProperties.Bee.TurbineBlasters(550f, 1.6f, new string[]
						{
							"L,R,D:0.1,B",
							"R,L,R",
							"R,L,D:0.1,B",
							"L,R,L"
						}, 3.1f, new MinMax(1f, 2f))));
						list.Add(new LevelProperties.Bee.State(0.76f, new LevelProperties.Bee.Pattern[][]
						{
							new LevelProperties.Bee.Pattern[]
							{
								LevelProperties.Bee.Pattern.Follower,
								LevelProperties.Bee.Pattern.Chain,
								LevelProperties.Bee.Pattern.Triangle,
								LevelProperties.Bee.Pattern.Chain
							}
						}, LevelProperties.Bee.States.Generic, new LevelProperties.Bee.Movement(true, 135f, 1), new LevelProperties.Bee.Grunts(false, 8, new string[]
						{
							"0,1,2,3"
						}, 300f, 40000f), new LevelProperties.Bee.BlackHole(new string[]
						{
							"2,0",
							"0,2"
						}, 4f, 1f, 200f, 1000000f, 3f, 0.8f, 550, 1f, true), new LevelProperties.Bee.Triangle(1, 2f, 1.5f, 1f, 180f, 60f, 100000f, 2.5f, 550f, 1f, 1f, 3, false), new LevelProperties.Bee.Follower(1, 2f, 1.5f, 1f, 330f, 2.5f, 2.5f, 10000f, 2.5f, 0f, 0f, false, true), new LevelProperties.Bee.Chain(4, 1.4f, 0.55f, 0.05f, 700f, 1f, false), new LevelProperties.Bee.SecurityGuard(325f, new MinMax(1.4f, 2.7f), 1f, 2f, 450f, 8), new LevelProperties.Bee.General(180f, 120f, 500f), new LevelProperties.Bee.WingSwipe(480f, new string[]
						{
							"1,2,1,1,2,1,1,2,1,1,1,2"
						}, 0.1f, 225f, 0.9f, 370f, 400f, new MinMax(1.5f, 3.5f)), new LevelProperties.Bee.TurbineBlasters(550f, 1.6f, new string[]
						{
							"L,R,D:0.1,B",
							"R,L,R",
							"R,L,D:0.1,B",
							"L,R,L"
						}, 3.1f, new MinMax(1f, 2f))));
						list.Add(new LevelProperties.Bee.State(0.41f, new LevelProperties.Bee.Pattern[][]
						{
							new LevelProperties.Bee.Pattern[]
							{
								LevelProperties.Bee.Pattern.Wing,
								LevelProperties.Bee.Pattern.Turbine
							}
						}, LevelProperties.Bee.States.Airplane, new LevelProperties.Bee.Movement(true, 135f, 1), new LevelProperties.Bee.Grunts(false, 8, new string[]
						{
							"0,1,2,3"
						}, 300f, 40000f), new LevelProperties.Bee.BlackHole(new string[]
						{
							"2,0",
							"0,2"
						}, 4f, 1f, 200f, 1000000f, 3f, 0.8f, 550, 1f, true), new LevelProperties.Bee.Triangle(1, 2f, 1.5f, 1f, 180f, 60f, 100000f, 2.5f, 550f, 1f, 1f, 3, false), new LevelProperties.Bee.Follower(1, 2f, 1.5f, 1f, 330f, 2.5f, 2.5f, 10000f, 2.5f, 0f, 0f, false, true), new LevelProperties.Bee.Chain(4, 1.4f, 0.55f, 0.05f, 700f, 1f, false), new LevelProperties.Bee.SecurityGuard(325f, new MinMax(1.4f, 2.7f), 1f, 2f, 450f, 8), new LevelProperties.Bee.General(180f, 120f, 500f), new LevelProperties.Bee.WingSwipe(480f, new string[]
						{
							"1,2,1,1,2,1,1,2,1,1,1,2"
						}, 0.1f, 225f, 0.9f, 370f, 400f, new MinMax(1.5f, 3.5f)), new LevelProperties.Bee.TurbineBlasters(550f, 1.6f, new string[]
						{
							"L,R,D:0.1,B",
							"R,L,R",
							"R,L,D:0.1,B",
							"L,R,L"
						}, 3.1f, new MinMax(1f, 2f))));
					}
				}
				else
				{
					hp = 1200;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Bee.State(10f, new LevelProperties.Bee.Pattern[][]
					{
						new LevelProperties.Bee.Pattern[]
						{
							LevelProperties.Bee.Pattern.SecurityGuard
						}
					}, LevelProperties.Bee.States.Main, new LevelProperties.Bee.Movement(true, 100f, 1), new LevelProperties.Bee.Grunts(true, 8, new string[]
					{
						"0,1,2,3,2,1"
					}, 320f, 4f), new LevelProperties.Bee.BlackHole(new string[]
					{
						"2,0",
						"0,2"
					}, 4f, 1f, 200f, 10000f, 3f, 0.8f, 550, 1f, true), new LevelProperties.Bee.Triangle(2, 2.7f, 1.5f, 1f, 160f, 50f, 10000f, 3.5f, 550f, 1.4f, 1f, 3, false), new LevelProperties.Bee.Follower(2, 2.7f, 1.5f, 1f, 250f, 1.5f, 2.6f, 10000f, 3f, 1f, 2f, false, true), new LevelProperties.Bee.Chain(6, 1.5f, 0.6f, 0.06f, 620f, 1f, false), new LevelProperties.Bee.SecurityGuard(300f, new MinMax(1.8f, 3f), 1f, 2f, 450f, 6), new LevelProperties.Bee.General(150f, 100f, 500f), new LevelProperties.Bee.WingSwipe(435f, new string[]
					{
						"1,2,1,1,2,1,1,2,1,1,1,2,1,1,2"
					}, 0.5f, 300f, 0.9f, 345f, 400f, new MinMax(1.5f, 3.5f)), new LevelProperties.Bee.TurbineBlasters(500f, 1.5f, new string[]
					{
						"L,R,L",
						"R,L,R,L",
						"L,R",
						"L,R,L,R",
						"R,L,R",
						"R,L"
					}, 3.3f, new MinMax(1f, 2f))));
					list.Add(new LevelProperties.Bee.State(0.78f, new LevelProperties.Bee.Pattern[][]
					{
						new LevelProperties.Bee.Pattern[]
						{
							LevelProperties.Bee.Pattern.Follower,
							LevelProperties.Bee.Pattern.Triangle,
							LevelProperties.Bee.Pattern.Chain
						}
					}, LevelProperties.Bee.States.Generic, new LevelProperties.Bee.Movement(true, 100f, 1), new LevelProperties.Bee.Grunts(false, 2, new string[]
					{
						"0,1,2,3,2,1"
					}, 320f, 10000f), new LevelProperties.Bee.BlackHole(new string[]
					{
						"2,0",
						"0,2"
					}, 4f, 1f, 200f, 10000f, 3f, 0.8f, 550, 1f, true), new LevelProperties.Bee.Triangle(2, 2.7f, 1.5f, 1f, 160f, 50f, 10000f, 3.5f, 550f, 1.4f, 1f, 3, false), new LevelProperties.Bee.Follower(2, 2.7f, 1.5f, 1f, 250f, 1.5f, 2.6f, 10000f, 3f, 1f, 2f, false, true), new LevelProperties.Bee.Chain(6, 1.5f, 0.6f, 0.06f, 620f, 1f, false), new LevelProperties.Bee.SecurityGuard(300f, new MinMax(1.8f, 3f), 1f, 2f, 450f, 6), new LevelProperties.Bee.General(150f, 100f, 500f), new LevelProperties.Bee.WingSwipe(435f, new string[]
					{
						"1,2,1,1,2,1,1,2,1,1,1,2,1,1,2"
					}, 0.5f, 300f, 0.9f, 345f, 400f, new MinMax(1.5f, 3.5f)), new LevelProperties.Bee.TurbineBlasters(500f, 1.5f, new string[]
					{
						"L,R,L",
						"R,L,R,L",
						"L,R",
						"L,R,L,R",
						"R,L,R",
						"R,L"
					}, 3.3f, new MinMax(1f, 2f))));
					list.Add(new LevelProperties.Bee.State(0.42f, new LevelProperties.Bee.Pattern[][]
					{
						new LevelProperties.Bee.Pattern[]
						{
							LevelProperties.Bee.Pattern.Wing,
							LevelProperties.Bee.Pattern.Turbine
						}
					}, LevelProperties.Bee.States.Airplane, new LevelProperties.Bee.Movement(true, 100f, 1), new LevelProperties.Bee.Grunts(false, 2, new string[]
					{
						"0,1,2,3,2,1"
					}, 320f, 10000f), new LevelProperties.Bee.BlackHole(new string[]
					{
						"2,0",
						"0,2"
					}, 4f, 1f, 200f, 10000f, 3f, 0.8f, 550, 1f, true), new LevelProperties.Bee.Triangle(2, 2.7f, 1.5f, 1f, 160f, 50f, 10000f, 3.5f, 550f, 1.4f, 1f, 3, false), new LevelProperties.Bee.Follower(2, 2.7f, 1.5f, 1f, 250f, 1.5f, 2.6f, 10000f, 3f, 1f, 2f, false, true), new LevelProperties.Bee.Chain(6, 1.5f, 0.6f, 0.06f, 620f, 1f, false), new LevelProperties.Bee.SecurityGuard(300f, new MinMax(1.8f, 3f), 1f, 2f, 450f, 6), new LevelProperties.Bee.General(150f, 100f, 500f), new LevelProperties.Bee.WingSwipe(435f, new string[]
					{
						"1,2,1,1,2,1,1,2,1,1,1,2,1,1,2"
					}, 0.5f, 300f, 0.9f, 345f, 400f, new MinMax(1.5f, 3.5f)), new LevelProperties.Bee.TurbineBlasters(500f, 1.5f, new string[]
					{
						"L,R,L",
						"R,L,R,L",
						"L,R",
						"L,R,L,R",
						"R,L,R",
						"R,L"
					}, 3.3f, new MinMax(1f, 2f))));
				}
			}
			else
			{
				hp = 1000;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Bee.State(10f, new LevelProperties.Bee.Pattern[][]
				{
					new LevelProperties.Bee.Pattern[]
					{
						LevelProperties.Bee.Pattern.SecurityGuard
					}
				}, LevelProperties.Bee.States.Main, new LevelProperties.Bee.Movement(true, 25f, 0), new LevelProperties.Bee.Grunts(true, 8, new string[]
				{
					"0,1,2,3,2,1"
				}, 290f, 4f), new LevelProperties.Bee.BlackHole(new string[]
				{
					"2,0",
					"0,2"
				}, 3f, 1.5f, 450f, 1000000f, 3f, 0.1f, 500, 1f, true), new LevelProperties.Bee.Triangle(1, 2.7f, 1.5f, 1f, 160f, 50f, 100000f, 3.5f, 480f, 1.8f, 1f, 2, false), new LevelProperties.Bee.Follower(1, 2.7f, 1.5f, 1f, 270f, 1.4f, 3f, 10000f, 3.5f, 0f, 0f, false, true), new LevelProperties.Bee.Chain(100000, 2.2f, 0.74f, 0.06f, 560f, 1f, true), new LevelProperties.Bee.SecurityGuard(330f, new MinMax(1.5f, 3.3f), 1f, 2f, 360f, 8), new LevelProperties.Bee.General(25f, 100f, 500f), new LevelProperties.Bee.WingSwipe(0f, new string[0], 0f, 0f, 0f, 0f, 0f, new MinMax(0f, 0f)), new LevelProperties.Bee.TurbineBlasters(0f, 0f, new string[0], 0f, new MinMax(0f, 0f))));
				list.Add(new LevelProperties.Bee.State(0.75f, new LevelProperties.Bee.Pattern[][]
				{
					new LevelProperties.Bee.Pattern[]
					{
						LevelProperties.Bee.Pattern.Follower,
						LevelProperties.Bee.Pattern.Triangle,
						LevelProperties.Bee.Pattern.Follower,
						LevelProperties.Bee.Pattern.Triangle,
						LevelProperties.Bee.Pattern.Triangle,
						LevelProperties.Bee.Pattern.Follower,
						LevelProperties.Bee.Pattern.Triangle,
						LevelProperties.Bee.Pattern.Follower,
						LevelProperties.Bee.Pattern.Triangle,
						LevelProperties.Bee.Pattern.Follower,
						LevelProperties.Bee.Pattern.Follower
					}
				}, LevelProperties.Bee.States.Generic, new LevelProperties.Bee.Movement(true, 50f, 0), new LevelProperties.Bee.Grunts(false, 1, new string[]
				{
					"1,2,3,0"
				}, 300f, 5f), new LevelProperties.Bee.BlackHole(new string[]
				{
					"2,0",
					"0,2"
				}, 3f, 1.5f, 450f, 1000000f, 3f, 0.1f, 500, 1f, true), new LevelProperties.Bee.Triangle(1, 2.7f, 1.5f, 1f, 160f, 50f, 100000f, 3.5f, 480f, 1.8f, 1f, 2, false), new LevelProperties.Bee.Follower(1, 2.7f, 1.5f, 1f, 270f, 1.4f, 3f, 10000f, 3.5f, 0f, 0f, false, true), new LevelProperties.Bee.Chain(100000, 2.2f, 0.74f, 0.06f, 560f, 1f, true), new LevelProperties.Bee.SecurityGuard(330f, new MinMax(1.5f, 3.3f), 1f, 2f, 360f, 8), new LevelProperties.Bee.General(25f, 100f, 500f), new LevelProperties.Bee.WingSwipe(0f, new string[0], 0f, 0f, 0f, 0f, 0f, new MinMax(0f, 0f)), new LevelProperties.Bee.TurbineBlasters(0f, 0f, new string[0], 0f, new MinMax(0f, 0f))));
				list.Add(new LevelProperties.Bee.State(0.45f, new LevelProperties.Bee.Pattern[][]
				{
					new LevelProperties.Bee.Pattern[]
					{
						LevelProperties.Bee.Pattern.Chain
					}
				}, LevelProperties.Bee.States.Generic, new LevelProperties.Bee.Movement(true, 200f, 0), new LevelProperties.Bee.Grunts(false, 1, new string[]
				{
					"0,1,2,3"
				}, 400f, 9999f), new LevelProperties.Bee.BlackHole(new string[]
				{
					"2,0",
					"0,2"
				}, 3f, 1.5f, 450f, 1000000f, 3f, 0.1f, 500, 1f, true), new LevelProperties.Bee.Triangle(1, 2.7f, 1.5f, 1f, 160f, 50f, 100000f, 3.5f, 480f, 1.8f, 1f, 2, false), new LevelProperties.Bee.Follower(1, 2.7f, 1.5f, 1f, 270f, 1.4f, 3f, 10000f, 3.5f, 0f, 0f, false, true), new LevelProperties.Bee.Chain(100000, 2.2f, 0.74f, 0.06f, 560f, 1f, true), new LevelProperties.Bee.SecurityGuard(330f, new MinMax(1.5f, 3.3f), 1f, 2f, 360f, 8), new LevelProperties.Bee.General(25f, 100f, 500f), new LevelProperties.Bee.WingSwipe(0f, new string[0], 0f, 0f, 0f, 0f, 0f, new MinMax(0f, 0f)), new LevelProperties.Bee.TurbineBlasters(0f, 0f, new string[0], 0f, new MinMax(0f, 0f))));
			}
			return new LevelProperties.Bee(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200005A RID: 90
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000027 RID: 39
			// (get) Token: 0x060000FA RID: 250 RVA: 0x0000CDAC File Offset: 0x0000B1AC
			// (set) Token: 0x060000FB RID: 251 RVA: 0x0000CDB4 File Offset: 0x0000B1B4
			private protected LevelProperties.Bee properties { protected get; private set; }

			// Token: 0x060000FC RID: 252 RVA: 0x0000CDBD File Offset: 0x0000B1BD
			public virtual void LevelInit(LevelProperties.Bee properties)
			{
				this.properties = properties;
			}

			// Token: 0x060000FD RID: 253 RVA: 0x0000CDC6 File Offset: 0x0000B1C6
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200005B RID: 91
		public enum States
		{
			// Token: 0x04000217 RID: 535
			Main,
			// Token: 0x04000218 RID: 536
			Generic,
			// Token: 0x04000219 RID: 537
			Airplane
		}

		// Token: 0x0200005C RID: 92
		public enum Pattern
		{
			// Token: 0x0400021B RID: 539
			BlackHole,
			// Token: 0x0400021C RID: 540
			Chain,
			// Token: 0x0400021D RID: 541
			Triangle,
			// Token: 0x0400021E RID: 542
			Follower,
			// Token: 0x0400021F RID: 543
			SecurityGuard,
			// Token: 0x04000220 RID: 544
			Wing,
			// Token: 0x04000221 RID: 545
			Turbine,
			// Token: 0x04000222 RID: 546
			Uninitialized
		}

		// Token: 0x0200005D RID: 93
		public class State : AbstractLevelState<LevelProperties.Bee.Pattern, LevelProperties.Bee.States>
		{
			// Token: 0x060000FE RID: 254 RVA: 0x0000CDC8 File Offset: 0x0000B1C8
			public State(float healthTrigger, LevelProperties.Bee.Pattern[][] patterns, LevelProperties.Bee.States stateName, LevelProperties.Bee.Movement movement, LevelProperties.Bee.Grunts grunts, LevelProperties.Bee.BlackHole blackHole, LevelProperties.Bee.Triangle triangle, LevelProperties.Bee.Follower follower, LevelProperties.Bee.Chain chain, LevelProperties.Bee.SecurityGuard securityGuard, LevelProperties.Bee.General general, LevelProperties.Bee.WingSwipe wingSwipe, LevelProperties.Bee.TurbineBlasters turbineBlasters) : base(healthTrigger, patterns, stateName)
			{
				this.movement = movement;
				this.grunts = grunts;
				this.blackHole = blackHole;
				this.triangle = triangle;
				this.follower = follower;
				this.chain = chain;
				this.securityGuard = securityGuard;
				this.general = general;
				this.wingSwipe = wingSwipe;
				this.turbineBlasters = turbineBlasters;
			}

			// Token: 0x04000223 RID: 547
			public readonly LevelProperties.Bee.Movement movement;

			// Token: 0x04000224 RID: 548
			public readonly LevelProperties.Bee.Grunts grunts;

			// Token: 0x04000225 RID: 549
			public readonly LevelProperties.Bee.BlackHole blackHole;

			// Token: 0x04000226 RID: 550
			public readonly LevelProperties.Bee.Triangle triangle;

			// Token: 0x04000227 RID: 551
			public readonly LevelProperties.Bee.Follower follower;

			// Token: 0x04000228 RID: 552
			public readonly LevelProperties.Bee.Chain chain;

			// Token: 0x04000229 RID: 553
			public readonly LevelProperties.Bee.SecurityGuard securityGuard;

			// Token: 0x0400022A RID: 554
			public readonly LevelProperties.Bee.General general;

			// Token: 0x0400022B RID: 555
			public readonly LevelProperties.Bee.WingSwipe wingSwipe;

			// Token: 0x0400022C RID: 556
			public readonly LevelProperties.Bee.TurbineBlasters turbineBlasters;
		}

		// Token: 0x0200005E RID: 94
		public class Movement : AbstractLevelPropertyGroup
		{
			// Token: 0x060000FF RID: 255 RVA: 0x0000CE2E File Offset: 0x0000B22E
			public Movement(bool moving, float speed, int missingPlatforms)
			{
				this.moving = moving;
				this.speed = speed;
				this.missingPlatforms = missingPlatforms;
			}

			// Token: 0x0400022D RID: 557
			public readonly bool moving;

			// Token: 0x0400022E RID: 558
			public readonly float speed;

			// Token: 0x0400022F RID: 559
			public readonly int missingPlatforms;
		}

		// Token: 0x0200005F RID: 95
		public class Grunts : AbstractLevelPropertyGroup
		{
			// Token: 0x06000100 RID: 256 RVA: 0x0000CE4B File Offset: 0x0000B24B
			public Grunts(bool active, int health, string[] entrancePoints, float speed, float delay)
			{
				this.active = active;
				this.health = health;
				this.entrancePoints = entrancePoints;
				this.speed = speed;
				this.delay = delay;
			}

			// Token: 0x04000230 RID: 560
			public readonly bool active;

			// Token: 0x04000231 RID: 561
			public readonly int health;

			// Token: 0x04000232 RID: 562
			public readonly string[] entrancePoints;

			// Token: 0x04000233 RID: 563
			public readonly float speed;

			// Token: 0x04000234 RID: 564
			public readonly float delay;
		}

		// Token: 0x02000060 RID: 96
		public class BlackHole : AbstractLevelPropertyGroup
		{
			// Token: 0x06000101 RID: 257 RVA: 0x0000CE78 File Offset: 0x0000B278
			public BlackHole(string[] patterns, float chargeTime, float attackTime, float speed, float health, float hesitate, float childDelay, int childSpeed, float childHealth, bool damageable)
			{
				this.patterns = patterns;
				this.chargeTime = chargeTime;
				this.attackTime = attackTime;
				this.speed = speed;
				this.health = health;
				this.hesitate = hesitate;
				this.childDelay = childDelay;
				this.childSpeed = childSpeed;
				this.childHealth = childHealth;
				this.damageable = damageable;
			}

			// Token: 0x04000235 RID: 565
			public readonly string[] patterns;

			// Token: 0x04000236 RID: 566
			public readonly float chargeTime;

			// Token: 0x04000237 RID: 567
			public readonly float attackTime;

			// Token: 0x04000238 RID: 568
			public readonly float speed;

			// Token: 0x04000239 RID: 569
			public readonly float health;

			// Token: 0x0400023A RID: 570
			public readonly float hesitate;

			// Token: 0x0400023B RID: 571
			public readonly float childDelay;

			// Token: 0x0400023C RID: 572
			public readonly int childSpeed;

			// Token: 0x0400023D RID: 573
			public readonly float childHealth;

			// Token: 0x0400023E RID: 574
			public readonly bool damageable;
		}

		// Token: 0x02000061 RID: 97
		public class Triangle : AbstractLevelPropertyGroup
		{
			// Token: 0x06000102 RID: 258 RVA: 0x0000CED8 File Offset: 0x0000B2D8
			public Triangle(int count, float chargeTime, float attackTime, float introTime, float speed, float rotationSpeed, float health, float hesitate, float childSpeed, float childDelay, float childHealth, int childCount, bool damageable)
			{
				this.count = count;
				this.chargeTime = chargeTime;
				this.attackTime = attackTime;
				this.introTime = introTime;
				this.speed = speed;
				this.rotationSpeed = rotationSpeed;
				this.health = health;
				this.hesitate = hesitate;
				this.childSpeed = childSpeed;
				this.childDelay = childDelay;
				this.childHealth = childHealth;
				this.childCount = childCount;
				this.damageable = damageable;
			}

			// Token: 0x0400023F RID: 575
			public readonly int count;

			// Token: 0x04000240 RID: 576
			public readonly float chargeTime;

			// Token: 0x04000241 RID: 577
			public readonly float attackTime;

			// Token: 0x04000242 RID: 578
			public readonly float introTime;

			// Token: 0x04000243 RID: 579
			public readonly float speed;

			// Token: 0x04000244 RID: 580
			public readonly float rotationSpeed;

			// Token: 0x04000245 RID: 581
			public readonly float health;

			// Token: 0x04000246 RID: 582
			public readonly float hesitate;

			// Token: 0x04000247 RID: 583
			public readonly float childSpeed;

			// Token: 0x04000248 RID: 584
			public readonly float childDelay;

			// Token: 0x04000249 RID: 585
			public readonly float childHealth;

			// Token: 0x0400024A RID: 586
			public readonly int childCount;

			// Token: 0x0400024B RID: 587
			public readonly bool damageable;
		}

		// Token: 0x02000062 RID: 98
		public class Follower : AbstractLevelPropertyGroup
		{
			// Token: 0x06000103 RID: 259 RVA: 0x0000CF50 File Offset: 0x0000B350
			public Follower(int count, float chargeTime, float attackTime, float introTime, float homingSpeed, float homingRotation, float homingTime, float health, float hesitate, float childDelay, float childHealth, bool damageable, bool parryable)
			{
				this.count = count;
				this.chargeTime = chargeTime;
				this.attackTime = attackTime;
				this.introTime = introTime;
				this.homingSpeed = homingSpeed;
				this.homingRotation = homingRotation;
				this.homingTime = homingTime;
				this.health = health;
				this.hesitate = hesitate;
				this.childDelay = childDelay;
				this.childHealth = childHealth;
				this.damageable = damageable;
				this.parryable = parryable;
			}

			// Token: 0x0400024C RID: 588
			public readonly int count;

			// Token: 0x0400024D RID: 589
			public readonly float chargeTime;

			// Token: 0x0400024E RID: 590
			public readonly float attackTime;

			// Token: 0x0400024F RID: 591
			public readonly float introTime;

			// Token: 0x04000250 RID: 592
			public readonly float homingSpeed;

			// Token: 0x04000251 RID: 593
			public readonly float homingRotation;

			// Token: 0x04000252 RID: 594
			public readonly float homingTime;

			// Token: 0x04000253 RID: 595
			public readonly float health;

			// Token: 0x04000254 RID: 596
			public readonly float hesitate;

			// Token: 0x04000255 RID: 597
			public readonly float childDelay;

			// Token: 0x04000256 RID: 598
			public readonly float childHealth;

			// Token: 0x04000257 RID: 599
			public readonly bool damageable;

			// Token: 0x04000258 RID: 600
			public readonly bool parryable;
		}

		// Token: 0x02000063 RID: 99
		public class Chain : AbstractLevelPropertyGroup
		{
			// Token: 0x06000104 RID: 260 RVA: 0x0000CFC8 File Offset: 0x0000B3C8
			public Chain(int count, float delay, float timeX, float timeY, float speed, float hesitate, bool chainForever)
			{
				this.count = count;
				this.delay = delay;
				this.timeX = timeX;
				this.timeY = timeY;
				this.speed = speed;
				this.hesitate = hesitate;
				this.chainForever = chainForever;
			}

			// Token: 0x04000259 RID: 601
			public readonly int count;

			// Token: 0x0400025A RID: 602
			public readonly float delay;

			// Token: 0x0400025B RID: 603
			public readonly float timeX;

			// Token: 0x0400025C RID: 604
			public readonly float timeY;

			// Token: 0x0400025D RID: 605
			public readonly float speed;

			// Token: 0x0400025E RID: 606
			public readonly float hesitate;

			// Token: 0x0400025F RID: 607
			public readonly bool chainForever;
		}

		// Token: 0x02000064 RID: 100
		public class SecurityGuard : AbstractLevelPropertyGroup
		{
			// Token: 0x06000105 RID: 261 RVA: 0x0000D005 File Offset: 0x0000B405
			public SecurityGuard(float speed, MinMax attackDelay, float idleTime, float warningTime, float childSpeed, int childCount)
			{
				this.speed = speed;
				this.attackDelay = attackDelay;
				this.idleTime = idleTime;
				this.warningTime = warningTime;
				this.childSpeed = childSpeed;
				this.childCount = childCount;
			}

			// Token: 0x04000260 RID: 608
			public readonly float speed;

			// Token: 0x04000261 RID: 609
			public readonly MinMax attackDelay;

			// Token: 0x04000262 RID: 610
			public readonly float idleTime;

			// Token: 0x04000263 RID: 611
			public readonly float warningTime;

			// Token: 0x04000264 RID: 612
			public readonly float childSpeed;

			// Token: 0x04000265 RID: 613
			public readonly int childCount;
		}

		// Token: 0x02000065 RID: 101
		public class General : AbstractLevelPropertyGroup
		{
			// Token: 0x06000106 RID: 262 RVA: 0x0000D03A File Offset: 0x0000B43A
			public General(float screenScrollSpeed, float movementSpeed, float movementOffset)
			{
				this.screenScrollSpeed = screenScrollSpeed;
				this.movementSpeed = movementSpeed;
				this.movementOffset = movementOffset;
			}

			// Token: 0x04000266 RID: 614
			public readonly float screenScrollSpeed;

			// Token: 0x04000267 RID: 615
			public readonly float movementSpeed;

			// Token: 0x04000268 RID: 616
			public readonly float movementOffset;
		}

		// Token: 0x02000066 RID: 102
		public class WingSwipe : AbstractLevelPropertyGroup
		{
			// Token: 0x06000107 RID: 263 RVA: 0x0000D058 File Offset: 0x0000B458
			public WingSwipe(float movementSpeed, string[] attackCount, float attackDuration, float maxDistance, float warningDuration, float warningMovementSpeed, float warningMaxDistance, MinMax hesitateRange)
			{
				this.movementSpeed = movementSpeed;
				this.attackCount = attackCount;
				this.attackDuration = attackDuration;
				this.maxDistance = maxDistance;
				this.warningDuration = warningDuration;
				this.warningMovementSpeed = warningMovementSpeed;
				this.warningMaxDistance = warningMaxDistance;
				this.hesitateRange = hesitateRange;
			}

			// Token: 0x04000269 RID: 617
			public readonly float movementSpeed;

			// Token: 0x0400026A RID: 618
			public readonly string[] attackCount;

			// Token: 0x0400026B RID: 619
			public readonly float attackDuration;

			// Token: 0x0400026C RID: 620
			public readonly float maxDistance;

			// Token: 0x0400026D RID: 621
			public readonly float warningDuration;

			// Token: 0x0400026E RID: 622
			public readonly float warningMovementSpeed;

			// Token: 0x0400026F RID: 623
			public readonly float warningMaxDistance;

			// Token: 0x04000270 RID: 624
			public readonly MinMax hesitateRange;
		}

		// Token: 0x02000067 RID: 103
		public class TurbineBlasters : AbstractLevelPropertyGroup
		{
			// Token: 0x06000108 RID: 264 RVA: 0x0000D0A8 File Offset: 0x0000B4A8
			public TurbineBlasters(float bulletSpeed, float bulletCircleTime, string[] attackDirectionString, float repeatDealy, MinMax hesitateRange)
			{
				this.bulletSpeed = bulletSpeed;
				this.bulletCircleTime = bulletCircleTime;
				this.attackDirectionString = attackDirectionString;
				this.repeatDealy = repeatDealy;
				this.hesitateRange = hesitateRange;
			}

			// Token: 0x04000271 RID: 625
			public readonly float bulletSpeed;

			// Token: 0x04000272 RID: 626
			public readonly float bulletCircleTime;

			// Token: 0x04000273 RID: 627
			public readonly string[] attackDirectionString;

			// Token: 0x04000274 RID: 628
			public readonly float repeatDealy;

			// Token: 0x04000275 RID: 629
			public readonly MinMax hesitateRange;
		}
	}

	// Token: 0x02000069 RID: 105
	public class ChaliceTutorial : AbstractLevelProperties<LevelProperties.ChaliceTutorial.State, LevelProperties.ChaliceTutorial.Pattern, LevelProperties.ChaliceTutorial.States>
	{
		// Token: 0x06000125 RID: 293 RVA: 0x0000D0D5 File Offset: 0x0000B4D5
		public ChaliceTutorial(int hp, Level.GoalTimes goalTimes, LevelProperties.ChaliceTutorial.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000126 RID: 294 RVA: 0x0000D0E4 File Offset: 0x0000B4E4
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000127 RID: 295 RVA: 0x0000D13F File Offset: 0x0000B53F
		public static LevelProperties.ChaliceTutorial.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.ChaliceTutorial.Pattern.Default;
				}
			}
			Debug.LogError("Pattern ChaliceTutorial.Pattern for  " + id + " not found.", null);
			return LevelProperties.ChaliceTutorial.Pattern.Uninitialized;
		}

		// Token: 0x06000128 RID: 296 RVA: 0x0000D180 File Offset: 0x0000B580
		public static LevelProperties.ChaliceTutorial GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.ChaliceTutorial.State> list = new List<LevelProperties.ChaliceTutorial.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.ChaliceTutorial.State(10f, new LevelProperties.ChaliceTutorial.Pattern[][]
						{
							new LevelProperties.ChaliceTutorial.Pattern[1]
						}, LevelProperties.ChaliceTutorial.States.Main));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.ChaliceTutorial.State(10f, new LevelProperties.ChaliceTutorial.Pattern[][]
					{
						new LevelProperties.ChaliceTutorial.Pattern[1]
					}, LevelProperties.ChaliceTutorial.States.Main));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.ChaliceTutorial.State(10f, new LevelProperties.ChaliceTutorial.Pattern[][]
				{
					new LevelProperties.ChaliceTutorial.Pattern[1]
				}, LevelProperties.ChaliceTutorial.States.Main));
			}
			return new LevelProperties.ChaliceTutorial(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200006A RID: 106
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700002E RID: 46
			// (get) Token: 0x0600012A RID: 298 RVA: 0x0000D27C File Offset: 0x0000B67C
			// (set) Token: 0x0600012B RID: 299 RVA: 0x0000D284 File Offset: 0x0000B684
			private protected LevelProperties.ChaliceTutorial properties { protected get; private set; }

			// Token: 0x0600012C RID: 300 RVA: 0x0000D28D File Offset: 0x0000B68D
			public virtual void LevelInit(LevelProperties.ChaliceTutorial properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600012D RID: 301 RVA: 0x0000D296 File Offset: 0x0000B696
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200006B RID: 107
		public enum States
		{
			// Token: 0x0400028C RID: 652
			Main,
			// Token: 0x0400028D RID: 653
			Generic
		}

		// Token: 0x0200006C RID: 108
		public enum Pattern
		{
			// Token: 0x0400028F RID: 655
			Default,
			// Token: 0x04000290 RID: 656
			Uninitialized
		}

		// Token: 0x0200006D RID: 109
		public class State : AbstractLevelState<LevelProperties.ChaliceTutorial.Pattern, LevelProperties.ChaliceTutorial.States>
		{
			// Token: 0x0600012E RID: 302 RVA: 0x0000D298 File Offset: 0x0000B698
			public State(float healthTrigger, LevelProperties.ChaliceTutorial.Pattern[][] patterns, LevelProperties.ChaliceTutorial.States stateName) : base(healthTrigger, patterns, stateName)
			{
			}
		}
	}

	// Token: 0x0200006F RID: 111
	public class ChessBishop : AbstractLevelProperties<LevelProperties.ChessBishop.State, LevelProperties.ChessBishop.Pattern, LevelProperties.ChessBishop.States>
	{
		// Token: 0x0600013E RID: 318 RVA: 0x0000D2A3 File Offset: 0x0000B6A3
		public ChessBishop(int hp, Level.GoalTimes goalTimes, LevelProperties.ChessBishop.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600013F RID: 319 RVA: 0x0000D2B0 File Offset: 0x0000B6B0
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 90f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.8f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.45f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.15f));
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000140 RID: 320 RVA: 0x0000D359 File Offset: 0x0000B759
		public static LevelProperties.ChessBishop.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.ChessBishop.Pattern.Default;
				}
			}
			Debug.LogError("Pattern ChessBishop.Pattern for  " + id + " not found.", null);
			return LevelProperties.ChessBishop.Pattern.Uninitialized;
		}

		// Token: 0x06000141 RID: 321 RVA: 0x0000D398 File Offset: 0x0000B798
		public static LevelProperties.ChessBishop GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.ChessBishop.State> list = new List<LevelProperties.ChessBishop.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.ChessBishop.State(10f, new LevelProperties.ChessBishop.Pattern[][]
						{
							new LevelProperties.ChessBishop.Pattern[1]
						}, LevelProperties.ChessBishop.States.Main, new LevelProperties.ChessBishop.Main(), new LevelProperties.ChessBishop.Bishop(0f, 0f, new string[0], 0f, new MinMax(0f, 1f), 0f, 0f, 0f, string.Empty, 0f, 0f, 0f, 0f), new LevelProperties.ChessBishop.Candle(new string[0], 0f), new LevelProperties.ChessBishop.Lantern()));
					}
				}
				else
				{
					hp = 90;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.ChessBishop.State(10f, new LevelProperties.ChessBishop.Pattern[][]
					{
						new LevelProperties.ChessBishop.Pattern[1]
					}, LevelProperties.ChessBishop.States.Main, new LevelProperties.ChessBishop.Main(), new LevelProperties.ChessBishop.Bishop(100f, 1.6f, new string[]
					{
						"1.1,1.4,1.6,0.6,1.4,1.8,1.4,0.6,1.1,1.6"
					}, 325f, new MinMax(0.5f, 0.9f), 1f, 1f, 1f, "1.1,1.1", 1.3f, 305f, 280f, 700f), new LevelProperties.ChessBishop.Candle(new string[]
					{
						"0,3,4",
						"4,5,8",
						"2,5,6",
						"4,5,8",
						"0,1,4",
						"4,5,8",
						"1,2,5",
						"4,5,8",
						"1,4,5",
						"4,5,8"
					}, 75f), new LevelProperties.ChessBishop.Lantern()));
					list.Add(new LevelProperties.ChessBishop.State(0.8f, new LevelProperties.ChessBishop.Pattern[][]
					{
						new LevelProperties.ChessBishop.Pattern[0]
					}, LevelProperties.ChessBishop.States.Generic, new LevelProperties.ChessBishop.Main(), new LevelProperties.ChessBishop.Bishop(100f, 1.75f, new string[]
					{
						"1.5,1.3,1.8,0.5,1.1,1,1.5,0.6,1.3,1.4,1.3,0.5"
					}, 365f, new MinMax(0.6f, 1f), 1f, 1f, 1f, "1,1", 1.5f, 325f, 280f, 800f), new LevelProperties.ChessBishop.Candle(new string[]
					{
						"0,1,3,7",
						"1,4,5,8",
						"1,2,6,9",
						"1,4,5,8",
						"0,3,4,7",
						"1,4,5,8",
						"2,5,6,9",
						"1,4,5,8"
					}, 75f), new LevelProperties.ChessBishop.Lantern()));
					list.Add(new LevelProperties.ChessBishop.State(0.45f, new LevelProperties.ChessBishop.Pattern[][]
					{
						new LevelProperties.ChessBishop.Pattern[0]
					}, LevelProperties.ChessBishop.States.Generic, new LevelProperties.ChessBishop.Main(), new LevelProperties.ChessBishop.Bishop(100f, 1.9f, new string[]
					{
						"1.3,1.2,1.4,0.5,1.1,1.7,1.1,0.4,1.2,1.3"
					}, 385f, new MinMax(0.7f, 1.1f), 1f, 1f, 1f, "0.8,0.8", 1.7f, 345f, 280f, 700f), new LevelProperties.ChessBishop.Candle(new string[]
					{
						"0,1,2,7,9",
						"3,4,5,6,7,9",
						"0,2,4,5,8",
						"0,1,2,3,6,8",
						"1,3,4,5,6",
						"1,4,5,7,8,9",
						"3,6,7,8,9",
						"0,2,3,6,7,9"
					}, 75f), new LevelProperties.ChessBishop.Lantern()));
					list.Add(new LevelProperties.ChessBishop.State(0.15f, new LevelProperties.ChessBishop.Pattern[][]
					{
						new LevelProperties.ChessBishop.Pattern[0]
					}, LevelProperties.ChessBishop.States.Generic, new LevelProperties.ChessBishop.Main(), new LevelProperties.ChessBishop.Bishop(100f, 2.05f, new string[]
					{
						"1.1,0.9,0.5,0.8,1,0.4,1,1.1,0.5,0.9,1,0.8,0.4,1.2"
					}, 415f, new MinMax(0.8f, 1.2f), 1f, 1f, 1f, "0.6,0.6", 1.9f, 365f, 305f, 705f), new LevelProperties.ChessBishop.Candle(new string[]
					{
						"0,1,2,3,4,5,6,7,8,9"
					}, 75f), new LevelProperties.ChessBishop.Lantern()));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.ChessBishop.State(10f, new LevelProperties.ChessBishop.Pattern[][]
				{
					new LevelProperties.ChessBishop.Pattern[1]
				}, LevelProperties.ChessBishop.States.Main, new LevelProperties.ChessBishop.Main(), new LevelProperties.ChessBishop.Bishop(0f, 0f, new string[0], 0f, new MinMax(0f, 1f), 0f, 0f, 0f, string.Empty, 0f, 0f, 0f, 0f), new LevelProperties.ChessBishop.Candle(new string[0], 0f), new LevelProperties.ChessBishop.Lantern()));
			}
			return new LevelProperties.ChessBishop(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000070 RID: 112
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000033 RID: 51
			// (get) Token: 0x06000143 RID: 323 RVA: 0x0000D870 File Offset: 0x0000BC70
			// (set) Token: 0x06000144 RID: 324 RVA: 0x0000D878 File Offset: 0x0000BC78
			private protected LevelProperties.ChessBishop properties { protected get; private set; }

			// Token: 0x06000145 RID: 325 RVA: 0x0000D881 File Offset: 0x0000BC81
			public virtual void LevelInit(LevelProperties.ChessBishop properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000146 RID: 326 RVA: 0x0000D88A File Offset: 0x0000BC8A
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000071 RID: 113
		public enum States
		{
			// Token: 0x0400029B RID: 667
			Main,
			// Token: 0x0400029C RID: 668
			Generic
		}

		// Token: 0x02000072 RID: 114
		public enum Pattern
		{
			// Token: 0x0400029E RID: 670
			Default,
			// Token: 0x0400029F RID: 671
			Uninitialized
		}

		// Token: 0x02000073 RID: 115
		public class State : AbstractLevelState<LevelProperties.ChessBishop.Pattern, LevelProperties.ChessBishop.States>
		{
			// Token: 0x06000147 RID: 327 RVA: 0x0000D88C File Offset: 0x0000BC8C
			public State(float healthTrigger, LevelProperties.ChessBishop.Pattern[][] patterns, LevelProperties.ChessBishop.States stateName, LevelProperties.ChessBishop.Main main, LevelProperties.ChessBishop.Bishop bishop, LevelProperties.ChessBishop.Candle candle, LevelProperties.ChessBishop.Lantern lantern) : base(healthTrigger, patterns, stateName)
			{
				this.main = main;
				this.bishop = bishop;
				this.candle = candle;
				this.lantern = lantern;
			}

			// Token: 0x040002A0 RID: 672
			public readonly LevelProperties.ChessBishop.Main main;

			// Token: 0x040002A1 RID: 673
			public readonly LevelProperties.ChessBishop.Bishop bishop;

			// Token: 0x040002A2 RID: 674
			public readonly LevelProperties.ChessBishop.Candle candle;

			// Token: 0x040002A3 RID: 675
			public readonly LevelProperties.ChessBishop.Lantern lantern;
		}

		// Token: 0x02000074 RID: 116
		public class Main : AbstractLevelPropertyGroup
		{
		}

		// Token: 0x02000075 RID: 117
		public class Bishop : AbstractLevelPropertyGroup
		{
			// Token: 0x06000149 RID: 329 RVA: 0x0000D8C0 File Offset: 0x0000BCC0
			public Bishop(float hp, float movementSpeed, string[] attackDelayString, float projectileSpeed, MinMax projectileDelayRange, float colliderOffTime, float fadeInTime, float fadeOutTime, string invisibleTimeString, float freqMultiplier, float xSpeed, float amplitude, float maxDistance)
			{
				this.hp = hp;
				this.movementSpeed = movementSpeed;
				this.attackDelayString = attackDelayString;
				this.projectileSpeed = projectileSpeed;
				this.projectileDelayRange = projectileDelayRange;
				this.colliderOffTime = colliderOffTime;
				this.fadeInTime = fadeInTime;
				this.fadeOutTime = fadeOutTime;
				this.invisibleTimeString = invisibleTimeString;
				this.freqMultiplier = freqMultiplier;
				this.xSpeed = xSpeed;
				this.amplitude = amplitude;
				this.maxDistance = maxDistance;
			}

			// Token: 0x040002A4 RID: 676
			public readonly float hp;

			// Token: 0x040002A5 RID: 677
			public readonly float movementSpeed;

			// Token: 0x040002A6 RID: 678
			public readonly string[] attackDelayString;

			// Token: 0x040002A7 RID: 679
			public readonly float projectileSpeed;

			// Token: 0x040002A8 RID: 680
			public readonly MinMax projectileDelayRange;

			// Token: 0x040002A9 RID: 681
			public readonly float colliderOffTime;

			// Token: 0x040002AA RID: 682
			public readonly float fadeInTime;

			// Token: 0x040002AB RID: 683
			public readonly float fadeOutTime;

			// Token: 0x040002AC RID: 684
			public readonly string invisibleTimeString;

			// Token: 0x040002AD RID: 685
			public readonly float freqMultiplier;

			// Token: 0x040002AE RID: 686
			public readonly float xSpeed;

			// Token: 0x040002AF RID: 687
			public readonly float amplitude;

			// Token: 0x040002B0 RID: 688
			public readonly float maxDistance;
		}

		// Token: 0x02000076 RID: 118
		public class Candle : AbstractLevelPropertyGroup
		{
			// Token: 0x0600014A RID: 330 RVA: 0x0000D938 File Offset: 0x0000BD38
			public Candle(string[] candleOrder, float candleDistToBlowout)
			{
				this.candleOrder = candleOrder;
				this.candleDistToBlowout = candleDistToBlowout;
			}

			// Token: 0x040002B1 RID: 689
			public readonly string[] candleOrder;

			// Token: 0x040002B2 RID: 690
			public readonly float candleDistToBlowout;
		}

		// Token: 0x02000077 RID: 119
		public class Lantern : AbstractLevelPropertyGroup
		{
		}
	}

	// Token: 0x02000079 RID: 121
	public class ChessBOldA : AbstractLevelProperties<LevelProperties.ChessBOldA.State, LevelProperties.ChessBOldA.Pattern, LevelProperties.ChessBOldA.States>
	{
		// Token: 0x06000157 RID: 343 RVA: 0x0000D956 File Offset: 0x0000BD56
		public ChessBOldA(int hp, Level.GoalTimes goalTimes, LevelProperties.ChessBOldA.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000158 RID: 344 RVA: 0x0000D964 File Offset: 0x0000BD64
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000159 RID: 345 RVA: 0x0000D9BF File Offset: 0x0000BDBF
		public static LevelProperties.ChessBOldA.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.ChessBOldA.Pattern.Default;
				}
			}
			Debug.LogError("Pattern ChessBOldA.Pattern for  " + id + " not found.", null);
			return LevelProperties.ChessBOldA.Pattern.Uninitialized;
		}

		// Token: 0x0600015A RID: 346 RVA: 0x0000DA00 File Offset: 0x0000BE00
		public static LevelProperties.ChessBOldA GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.ChessBOldA.State> list = new List<LevelProperties.ChessBOldA.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.ChessBOldA.State(10f, new LevelProperties.ChessBOldA.Pattern[][]
						{
							new LevelProperties.ChessBOldA.Pattern[1]
						}, LevelProperties.ChessBOldA.States.Main, new LevelProperties.ChessBOldA.Stage(0f), new LevelProperties.ChessBOldA.Bishop(0, 0f, 0f, false), new LevelProperties.ChessBOldA.Pink(0f, 0f, string.Empty, string.Empty), new LevelProperties.ChessBOldA.Walls(0f, 0f, string.Empty, new string[0], string.Empty, string.Empty), new LevelProperties.ChessBOldA.BishopPath(string.Empty, string.Empty, string.Empty, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, string.Empty)));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.ChessBOldA.State(10f, new LevelProperties.ChessBOldA.Pattern[][]
					{
						new LevelProperties.ChessBOldA.Pattern[1]
					}, LevelProperties.ChessBOldA.States.Main, new LevelProperties.ChessBOldA.Stage(200f), new LevelProperties.ChessBOldA.Bishop(5, 1f, 1.5f, true), new LevelProperties.ChessBOldA.Pink(1f, 1f, "2,2.5,3,3.5,4", "L,R"), new LevelProperties.ChessBOldA.Walls(220f, 2f, "2,3,4,5,6", new string[]
					{
						"5"
					}, "1,2,3,4,5", "R,L"), new LevelProperties.ChessBOldA.BishopPath("S,S,S,S,S", "2,2,2,2,2", "L,R", 450f, 20f, 200f, 20f, 100f, 666f, 420f, 20f, 300f, "10,10,10,10,10")));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.ChessBOldA.State(10f, new LevelProperties.ChessBOldA.Pattern[][]
				{
					new LevelProperties.ChessBOldA.Pattern[1]
				}, LevelProperties.ChessBOldA.States.Main, new LevelProperties.ChessBOldA.Stage(0f), new LevelProperties.ChessBOldA.Bishop(0, 0f, 0f, false), new LevelProperties.ChessBOldA.Pink(0f, 0f, string.Empty, string.Empty), new LevelProperties.ChessBOldA.Walls(0f, 0f, string.Empty, new string[0], string.Empty, string.Empty), new LevelProperties.ChessBOldA.BishopPath(string.Empty, string.Empty, string.Empty, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, string.Empty)));
			}
			return new LevelProperties.ChessBOldA(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200007A RID: 122
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000038 RID: 56
			// (get) Token: 0x0600015C RID: 348 RVA: 0x0000DCDE File Offset: 0x0000C0DE
			// (set) Token: 0x0600015D RID: 349 RVA: 0x0000DCE6 File Offset: 0x0000C0E6
			private protected LevelProperties.ChessBOldA properties { protected get; private set; }

			// Token: 0x0600015E RID: 350 RVA: 0x0000DCEF File Offset: 0x0000C0EF
			public virtual void LevelInit(LevelProperties.ChessBOldA properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600015F RID: 351 RVA: 0x0000DCF8 File Offset: 0x0000C0F8
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200007B RID: 123
		public enum States
		{
			// Token: 0x040002B9 RID: 697
			Main,
			// Token: 0x040002BA RID: 698
			Generic
		}

		// Token: 0x0200007C RID: 124
		public enum Pattern
		{
			// Token: 0x040002BC RID: 700
			Default,
			// Token: 0x040002BD RID: 701
			Uninitialized
		}

		// Token: 0x0200007D RID: 125
		public class State : AbstractLevelState<LevelProperties.ChessBOldA.Pattern, LevelProperties.ChessBOldA.States>
		{
			// Token: 0x06000160 RID: 352 RVA: 0x0000DCFA File Offset: 0x0000C0FA
			public State(float healthTrigger, LevelProperties.ChessBOldA.Pattern[][] patterns, LevelProperties.ChessBOldA.States stateName, LevelProperties.ChessBOldA.Stage stage, LevelProperties.ChessBOldA.Bishop bishop, LevelProperties.ChessBOldA.Pink pink, LevelProperties.ChessBOldA.Walls walls, LevelProperties.ChessBOldA.BishopPath bishopPath) : base(healthTrigger, patterns, stateName)
			{
				this.stage = stage;
				this.bishop = bishop;
				this.pink = pink;
				this.walls = walls;
				this.bishopPath = bishopPath;
			}

			// Token: 0x040002BE RID: 702
			public readonly LevelProperties.ChessBOldA.Stage stage;

			// Token: 0x040002BF RID: 703
			public readonly LevelProperties.ChessBOldA.Bishop bishop;

			// Token: 0x040002C0 RID: 704
			public readonly LevelProperties.ChessBOldA.Pink pink;

			// Token: 0x040002C1 RID: 705
			public readonly LevelProperties.ChessBOldA.Walls walls;

			// Token: 0x040002C2 RID: 706
			public readonly LevelProperties.ChessBOldA.BishopPath bishopPath;
		}

		// Token: 0x0200007E RID: 126
		public class Stage : AbstractLevelPropertyGroup
		{
			// Token: 0x06000161 RID: 353 RVA: 0x0000DD2D File Offset: 0x0000C12D
			public Stage(float platformHeight)
			{
				this.platformHeight = platformHeight;
			}

			// Token: 0x040002C3 RID: 707
			public readonly float platformHeight;
		}

		// Token: 0x0200007F RID: 127
		public class Bishop : AbstractLevelPropertyGroup
		{
			// Token: 0x06000162 RID: 354 RVA: 0x0000DD3C File Offset: 0x0000C13C
			public Bishop(int bishopHealth, float bishopScale, float stunnedTime, bool canHurtPlayer)
			{
				this.bishopHealth = bishopHealth;
				this.bishopScale = bishopScale;
				this.stunnedTime = stunnedTime;
				this.canHurtPlayer = canHurtPlayer;
			}

			// Token: 0x040002C4 RID: 708
			public readonly int bishopHealth;

			// Token: 0x040002C5 RID: 709
			public readonly float bishopScale;

			// Token: 0x040002C6 RID: 710
			public readonly float stunnedTime;

			// Token: 0x040002C7 RID: 711
			public readonly bool canHurtPlayer;
		}

		// Token: 0x02000080 RID: 128
		public class Pink : AbstractLevelPropertyGroup
		{
			// Token: 0x06000163 RID: 355 RVA: 0x0000DD61 File Offset: 0x0000C161
			public Pink(float pinkScale, float pinkPathRadius, string pinkSpeedString, string pinkDirString)
			{
				this.pinkScale = pinkScale;
				this.pinkPathRadius = pinkPathRadius;
				this.pinkSpeedString = pinkSpeedString;
				this.pinkDirString = pinkDirString;
			}

			// Token: 0x040002C8 RID: 712
			public readonly float pinkScale;

			// Token: 0x040002C9 RID: 713
			public readonly float pinkPathRadius;

			// Token: 0x040002CA RID: 714
			public readonly string pinkSpeedString;

			// Token: 0x040002CB RID: 715
			public readonly string pinkDirString;
		}

		// Token: 0x02000081 RID: 129
		public class Walls : AbstractLevelPropertyGroup
		{
			// Token: 0x06000164 RID: 356 RVA: 0x0000DD86 File Offset: 0x0000C186
			public Walls(float wallPathRadius, float wallLength, string wallNumberString, string[] wallNullString, string wallSpeedString, string wallDirString)
			{
				this.wallPathRadius = wallPathRadius;
				this.wallLength = wallLength;
				this.wallNumberString = wallNumberString;
				this.wallNullString = wallNullString;
				this.wallSpeedString = wallSpeedString;
				this.wallDirString = wallDirString;
			}

			// Token: 0x040002CC RID: 716
			public readonly float wallPathRadius;

			// Token: 0x040002CD RID: 717
			public readonly float wallLength;

			// Token: 0x040002CE RID: 718
			public readonly string wallNumberString;

			// Token: 0x040002CF RID: 719
			public readonly string[] wallNullString;

			// Token: 0x040002D0 RID: 720
			public readonly string wallSpeedString;

			// Token: 0x040002D1 RID: 721
			public readonly string wallDirString;
		}

		// Token: 0x02000082 RID: 130
		public class BishopPath : AbstractLevelPropertyGroup
		{
			// Token: 0x06000165 RID: 357 RVA: 0x0000DDBC File Offset: 0x0000C1BC
			public BishopPath(string pathTypeString, string pathSpeedString, string pathDirString, float straightPathLength, float straightPathHeight, float infinitePathLength, float infinitePathHeight, float infinitePathWidth, float squarePathLength, float squarePathWidth, float squarePathHeight, float turretShotSpeed, string turretShotDelayString)
			{
				this.pathTypeString = pathTypeString;
				this.pathSpeedString = pathSpeedString;
				this.pathDirString = pathDirString;
				this.straightPathLength = straightPathLength;
				this.straightPathHeight = straightPathHeight;
				this.infinitePathLength = infinitePathLength;
				this.infinitePathHeight = infinitePathHeight;
				this.infinitePathWidth = infinitePathWidth;
				this.squarePathLength = squarePathLength;
				this.squarePathWidth = squarePathWidth;
				this.squarePathHeight = squarePathHeight;
				this.turretShotSpeed = turretShotSpeed;
				this.turretShotDelayString = turretShotDelayString;
			}

			// Token: 0x040002D2 RID: 722
			public readonly string pathTypeString;

			// Token: 0x040002D3 RID: 723
			public readonly string pathSpeedString;

			// Token: 0x040002D4 RID: 724
			public readonly string pathDirString;

			// Token: 0x040002D5 RID: 725
			public readonly float straightPathLength;

			// Token: 0x040002D6 RID: 726
			public readonly float straightPathHeight;

			// Token: 0x040002D7 RID: 727
			public readonly float infinitePathLength;

			// Token: 0x040002D8 RID: 728
			public readonly float infinitePathHeight;

			// Token: 0x040002D9 RID: 729
			public readonly float infinitePathWidth;

			// Token: 0x040002DA RID: 730
			public readonly float squarePathLength;

			// Token: 0x040002DB RID: 731
			public readonly float squarePathWidth;

			// Token: 0x040002DC RID: 732
			public readonly float squarePathHeight;

			// Token: 0x040002DD RID: 733
			public readonly float turretShotSpeed;

			// Token: 0x040002DE RID: 734
			public readonly string turretShotDelayString;
		}
	}

	// Token: 0x02000084 RID: 132
	public class ChessBOldB : AbstractLevelProperties<LevelProperties.ChessBOldB.State, LevelProperties.ChessBOldB.Pattern, LevelProperties.ChessBOldB.States>
	{
		// Token: 0x06000171 RID: 369 RVA: 0x0000DE34 File Offset: 0x0000C234
		public ChessBOldB(int hp, Level.GoalTimes goalTimes, LevelProperties.ChessBOldB.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000172 RID: 370 RVA: 0x0000DE40 File Offset: 0x0000C240
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 9f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.78f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.39f));
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000173 RID: 371 RVA: 0x0000DECF File Offset: 0x0000C2CF
		public static LevelProperties.ChessBOldB.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.ChessBOldB.Pattern.Default;
				}
			}
			Debug.LogError("Pattern ChessBOldB.Pattern for  " + id + " not found.", null);
			return LevelProperties.ChessBOldB.Pattern.Uninitialized;
		}

		// Token: 0x06000174 RID: 372 RVA: 0x0000DF10 File Offset: 0x0000C310
		public static LevelProperties.ChessBOldB GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.ChessBOldB.State> list = new List<LevelProperties.ChessBOldB.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.ChessBOldB.State(10f, new LevelProperties.ChessBOldB.Pattern[][]
						{
							new LevelProperties.ChessBOldB.Pattern[1]
						}, LevelProperties.ChessBOldB.States.Main, new LevelProperties.ChessBOldB.Boss(0f, new string[0], 0f), new LevelProperties.ChessBOldB.Birdie(0f, new string[0], new string[0], 0f, 0f, 0f, new string[0], new string[0], new string[0], new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f)));
					}
				}
				else
				{
					hp = 9;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.ChessBOldB.State(10f, new LevelProperties.ChessBOldB.Pattern[][]
					{
						new LevelProperties.ChessBOldB.Pattern[1]
					}, LevelProperties.ChessBOldB.States.Main, new LevelProperties.ChessBOldB.Boss(3f, new string[]
					{
						"2.1,2.8,3,2.9,2.5"
					}, 425f), new LevelProperties.ChessBOldB.Birdie(0.5f, new string[]
					{
						"4.5,5.2,4.9,5.4"
					}, new string[]
					{
						"2.6,2.2,3.1,2.1"
					}, 1f, 0.3f, 1f, new string[]
					{
						"0,2,4,1,5,3"
					}, new string[]
					{
						"L,R,L,L,R"
					}, new string[]
					{
						"2.1,1.9,1.8"
					}, new MinMax(-1500f, 3300f), new MinMax(0f, 600f), 0.7f, 0.21f)));
					list.Add(new LevelProperties.ChessBOldB.State(0.78f, new LevelProperties.ChessBOldB.Pattern[][]
					{
						new LevelProperties.ChessBOldB.Pattern[1]
					}, LevelProperties.ChessBOldB.States.Generic, new LevelProperties.ChessBOldB.Boss(3f, new string[]
					{
						"1.8,2,1.7,1.9,1.5,1.7,2.2"
					}, 480f), new LevelProperties.ChessBOldB.Birdie(0.3f, new string[]
					{
						"7.2,7.8,8.5,7,7.9,7.5"
					}, new string[]
					{
						"2.1,3,2.3,1.9,2.7"
					}, 1f, 0.3f, 1f, new string[]
					{
						"0,2,4,1,5,3"
					}, new string[]
					{
						"L,L,R"
					}, new string[]
					{
						"3,1,2"
					}, new MinMax(-1500f, 3300f), new MinMax(0f, 600f), 0.7f, 0.21f)));
					list.Add(new LevelProperties.ChessBOldB.State(0.39f, new LevelProperties.ChessBOldB.Pattern[][]
					{
						new LevelProperties.ChessBOldB.Pattern[1]
					}, LevelProperties.ChessBOldB.States.Generic, new LevelProperties.ChessBOldB.Boss(3f, new string[]
					{
						"1.6,1.5,1.2,1.5,1.3,1.1"
					}, 500f), new LevelProperties.ChessBOldB.Birdie(0.3f, new string[]
					{
						"8.6,9,8.7,8.3,9.3"
					}, new string[]
					{
						"2.3,3.1,2.7,2,3.5,1.9"
					}, 1f, 0.3f, 1f, new string[]
					{
						"0,2,4,1,5,3"
					}, new string[]
					{
						"L,L,R"
					}, new string[]
					{
						"3,1,2"
					}, new MinMax(-1500f, 3300f), new MinMax(0f, 600f), 0.7f, 0.21f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.ChessBOldB.State(10f, new LevelProperties.ChessBOldB.Pattern[][]
				{
					new LevelProperties.ChessBOldB.Pattern[1]
				}, LevelProperties.ChessBOldB.States.Main, new LevelProperties.ChessBOldB.Boss(0f, new string[0], 0f), new LevelProperties.ChessBOldB.Birdie(0f, new string[0], new string[0], 0f, 0f, 0f, new string[0], new string[0], new string[0], new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f)));
			}
			return new LevelProperties.ChessBOldB(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000085 RID: 133
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700003D RID: 61
			// (get) Token: 0x06000176 RID: 374 RVA: 0x0000E320 File Offset: 0x0000C720
			// (set) Token: 0x06000177 RID: 375 RVA: 0x0000E328 File Offset: 0x0000C728
			private protected LevelProperties.ChessBOldB properties { protected get; private set; }

			// Token: 0x06000178 RID: 376 RVA: 0x0000E331 File Offset: 0x0000C731
			public virtual void LevelInit(LevelProperties.ChessBOldB properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000179 RID: 377 RVA: 0x0000E33A File Offset: 0x0000C73A
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000086 RID: 134
		public enum States
		{
			// Token: 0x040002E7 RID: 743
			Main,
			// Token: 0x040002E8 RID: 744
			Generic
		}

		// Token: 0x02000087 RID: 135
		public enum Pattern
		{
			// Token: 0x040002EA RID: 746
			Default,
			// Token: 0x040002EB RID: 747
			Uninitialized
		}

		// Token: 0x02000088 RID: 136
		public class State : AbstractLevelState<LevelProperties.ChessBOldB.Pattern, LevelProperties.ChessBOldB.States>
		{
			// Token: 0x0600017A RID: 378 RVA: 0x0000E33C File Offset: 0x0000C73C
			public State(float healthTrigger, LevelProperties.ChessBOldB.Pattern[][] patterns, LevelProperties.ChessBOldB.States stateName, LevelProperties.ChessBOldB.Boss boss, LevelProperties.ChessBOldB.Birdie birdie) : base(healthTrigger, patterns, stateName)
			{
				this.boss = boss;
				this.birdie = birdie;
			}

			// Token: 0x040002EC RID: 748
			public readonly LevelProperties.ChessBOldB.Boss boss;

			// Token: 0x040002ED RID: 749
			public readonly LevelProperties.ChessBOldB.Birdie birdie;
		}

		// Token: 0x02000089 RID: 137
		public class Boss : AbstractLevelPropertyGroup
		{
			// Token: 0x0600017B RID: 379 RVA: 0x0000E357 File Offset: 0x0000C757
			public Boss(float bossTime, string[] bulletDelayString, float bulletSpeed)
			{
				this.bossTime = bossTime;
				this.bulletDelayString = bulletDelayString;
				this.bulletSpeed = bulletSpeed;
			}

			// Token: 0x040002EE RID: 750
			public readonly float bossTime;

			// Token: 0x040002EF RID: 751
			public readonly string[] bulletDelayString;

			// Token: 0x040002F0 RID: 752
			public readonly float bulletSpeed;
		}

		// Token: 0x0200008A RID: 138
		public class Birdie : AbstractLevelPropertyGroup
		{
			// Token: 0x0600017C RID: 380 RVA: 0x0000E374 File Offset: 0x0000C774
			public Birdie(float flashTime, string[] spinSpeedString, string[] spinTimeString, float fadeInTime, float colliderOffTime, float prePinkTime, string[] chosenString, string[] initialDirectionString, string[] changeDirectionString, MinMax xSpeed, MinMax ySpeed, float timeToMaxSpeed, float timeToStraight)
			{
				this.flashTime = flashTime;
				this.spinSpeedString = spinSpeedString;
				this.spinTimeString = spinTimeString;
				this.fadeInTime = fadeInTime;
				this.colliderOffTime = colliderOffTime;
				this.prePinkTime = prePinkTime;
				this.chosenString = chosenString;
				this.initialDirectionString = initialDirectionString;
				this.changeDirectionString = changeDirectionString;
				this.xSpeed = xSpeed;
				this.ySpeed = ySpeed;
				this.timeToMaxSpeed = timeToMaxSpeed;
				this.timeToStraight = timeToStraight;
			}

			// Token: 0x040002F1 RID: 753
			public readonly float flashTime;

			// Token: 0x040002F2 RID: 754
			public readonly string[] spinSpeedString;

			// Token: 0x040002F3 RID: 755
			public readonly string[] spinTimeString;

			// Token: 0x040002F4 RID: 756
			public readonly float fadeInTime;

			// Token: 0x040002F5 RID: 757
			public readonly float colliderOffTime;

			// Token: 0x040002F6 RID: 758
			public readonly float prePinkTime;

			// Token: 0x040002F7 RID: 759
			public readonly string[] chosenString;

			// Token: 0x040002F8 RID: 760
			public readonly string[] initialDirectionString;

			// Token: 0x040002F9 RID: 761
			public readonly string[] changeDirectionString;

			// Token: 0x040002FA RID: 762
			public readonly MinMax xSpeed;

			// Token: 0x040002FB RID: 763
			public readonly MinMax ySpeed;

			// Token: 0x040002FC RID: 764
			public readonly float timeToMaxSpeed;

			// Token: 0x040002FD RID: 765
			public readonly float timeToStraight;
		}
	}

	// Token: 0x0200008C RID: 140
	public class ChessCastle : AbstractLevelProperties<LevelProperties.ChessCastle.State, LevelProperties.ChessCastle.Pattern, LevelProperties.ChessCastle.States>
	{
		// Token: 0x06000188 RID: 392 RVA: 0x0000E3EC File Offset: 0x0000C7EC
		public ChessCastle(int hp, Level.GoalTimes goalTimes, LevelProperties.ChessCastle.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000189 RID: 393 RVA: 0x0000E3F8 File Offset: 0x0000C7F8
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x0600018A RID: 394 RVA: 0x0000E453 File Offset: 0x0000C853
		public static LevelProperties.ChessCastle.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.ChessCastle.Pattern.Default;
				}
			}
			Debug.LogError("Pattern ChessCastle.Pattern for  " + id + " not found.", null);
			return LevelProperties.ChessCastle.Pattern.Uninitialized;
		}

		// Token: 0x0600018B RID: 395 RVA: 0x0000E494 File Offset: 0x0000C894
		public static LevelProperties.ChessCastle GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.ChessCastle.State> list = new List<LevelProperties.ChessCastle.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.ChessCastle.State(10f, new LevelProperties.ChessCastle.Pattern[][]
						{
							new LevelProperties.ChessCastle.Pattern[1]
						}, LevelProperties.ChessCastle.States.Main));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.ChessCastle.State(10f, new LevelProperties.ChessCastle.Pattern[][]
					{
						new LevelProperties.ChessCastle.Pattern[1]
					}, LevelProperties.ChessCastle.States.Main));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.ChessCastle.State(10f, new LevelProperties.ChessCastle.Pattern[][]
				{
					new LevelProperties.ChessCastle.Pattern[1]
				}, LevelProperties.ChessCastle.States.Main));
			}
			return new LevelProperties.ChessCastle(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200008D RID: 141
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000042 RID: 66
			// (get) Token: 0x0600018D RID: 397 RVA: 0x0000E590 File Offset: 0x0000C990
			// (set) Token: 0x0600018E RID: 398 RVA: 0x0000E598 File Offset: 0x0000C998
			private protected LevelProperties.ChessCastle properties { protected get; private set; }

			// Token: 0x0600018F RID: 399 RVA: 0x0000E5A1 File Offset: 0x0000C9A1
			public virtual void LevelInit(LevelProperties.ChessCastle properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000190 RID: 400 RVA: 0x0000E5AA File Offset: 0x0000C9AA
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200008E RID: 142
		public enum States
		{
			// Token: 0x04000305 RID: 773
			Main,
			// Token: 0x04000306 RID: 774
			Generic
		}

		// Token: 0x0200008F RID: 143
		public enum Pattern
		{
			// Token: 0x04000308 RID: 776
			Default,
			// Token: 0x04000309 RID: 777
			Uninitialized
		}

		// Token: 0x02000090 RID: 144
		public class State : AbstractLevelState<LevelProperties.ChessCastle.Pattern, LevelProperties.ChessCastle.States>
		{
			// Token: 0x06000191 RID: 401 RVA: 0x0000E5AC File Offset: 0x0000C9AC
			public State(float healthTrigger, LevelProperties.ChessCastle.Pattern[][] patterns, LevelProperties.ChessCastle.States stateName) : base(healthTrigger, patterns, stateName)
			{
			}
		}
	}

	// Token: 0x02000092 RID: 146
	public class ChessKing : AbstractLevelProperties<LevelProperties.ChessKing.State, LevelProperties.ChessKing.Pattern, LevelProperties.ChessKing.States>
	{
		// Token: 0x060001C1 RID: 449 RVA: 0x0000E5B7 File Offset: 0x0000C9B7
		public ChessKing(int hp, Level.GoalTimes goalTimes, LevelProperties.ChessKing.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060001C2 RID: 450 RVA: 0x0000E5C4 File Offset: 0x0000C9C4
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 40f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.76f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.5f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.25f));
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x060001C3 RID: 451 RVA: 0x0000E66D File Offset: 0x0000CA6D
		public static LevelProperties.ChessKing.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.ChessKing.Pattern.Default;
				}
			}
			Debug.LogError("Pattern ChessKing.Pattern for  " + id + " not found.", null);
			return LevelProperties.ChessKing.Pattern.Uninitialized;
		}

		// Token: 0x060001C4 RID: 452 RVA: 0x0000E6AC File Offset: 0x0000CAAC
		public static LevelProperties.ChessKing GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.ChessKing.State> list = new List<LevelProperties.ChessKing.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.ChessKing.State(10f, new LevelProperties.ChessKing.Pattern[][]
						{
							new LevelProperties.ChessKing.Pattern[1]
						}, LevelProperties.ChessKing.States.Main, new LevelProperties.ChessKing.King(new string[0], 0f, 0f, new string[0]), new LevelProperties.ChessKing.Full(0f, 0f, 0f), new LevelProperties.ChessKing.Beam(0f, 0f, 0f), new LevelProperties.ChessKing.Rat(0f, 0f, 0f, 0, 0f)));
					}
				}
				else
				{
					hp = 40;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.ChessKing.State(10f, new LevelProperties.ChessKing.Pattern[][]
					{
						new LevelProperties.ChessKing.Pattern[1]
					}, LevelProperties.ChessKing.States.Main, new LevelProperties.ChessKing.King(new string[]
					{
						"600:300,400:400,600:500,800:400,600:600,800:600,1000:700",
						"600:300,800:400,600:500,400:400,600:600,800:600,1000:700",
						"600:300,600:500,800:400,400:400,600:600,800:600,1000:700",
						"600:300,400:400,600:500,800:400,600:600,800:600,1000:700",
						"600:300,600:500,800:400,400:400,600:600,800:600,1000:700"
					}, 400f, 4f, new string[]
					{
						"R,R,R"
					}), new LevelProperties.ChessKing.Full(1f, 1f, 0.5f), new LevelProperties.ChessKing.Beam(1f, 1f, 0.5f), new LevelProperties.ChessKing.Rat(1f, 0.5f, 1.5f, 3, 200f)));
					list.Add(new LevelProperties.ChessKing.State(0.76f, new LevelProperties.ChessKing.Pattern[][]
					{
						new LevelProperties.ChessKing.Pattern[1]
					}, LevelProperties.ChessKing.States.Generic, new LevelProperties.ChessKing.King(new string[]
					{
						"600:300,400:400,600:500,800:400,600:600,800:600,1000:700",
						"600:300,800:400,600:500,400:400,600:600,800:600,1000:700",
						"600:300,600:500,800:400,400:400,600:600,800:600,1000:700",
						"600:300,400:400,600:500,800:400,600:600,800:600,1000:700",
						"600:300,600:500,800:400,400:400,600:600,800:600,1000:700"
					}, 400f, 4f, new string[]
					{
						"R,R,R"
					}), new LevelProperties.ChessKing.Full(1f, 1f, 0.5f), new LevelProperties.ChessKing.Beam(1f, 1f, 0.5f), new LevelProperties.ChessKing.Rat(1f, 0.5f, 1.5f, 3, 200f)));
					list.Add(new LevelProperties.ChessKing.State(0.5f, new LevelProperties.ChessKing.Pattern[][]
					{
						new LevelProperties.ChessKing.Pattern[1]
					}, LevelProperties.ChessKing.States.Generic, new LevelProperties.ChessKing.King(new string[]
					{
						"600:300,400:400,600:500,800:400,600:600,800:600,1000:700",
						"600:300,800:400,600:500,400:400,600:600,800:600,1000:700",
						"600:300,600:500,800:400,400:400,600:600,800:600,1000:700",
						"600:300,400:400,600:500,800:400,600:600,800:600,1000:700",
						"600:300,600:500,800:400,400:400,600:600,800:600,1000:700"
					}, 400f, 4f, new string[]
					{
						"R,R,R"
					}), new LevelProperties.ChessKing.Full(1f, 1f, 0.5f), new LevelProperties.ChessKing.Beam(1f, 1f, 0.5f), new LevelProperties.ChessKing.Rat(1f, 0.5f, 1.5f, 3, 200f)));
					list.Add(new LevelProperties.ChessKing.State(0.25f, new LevelProperties.ChessKing.Pattern[][]
					{
						new LevelProperties.ChessKing.Pattern[1]
					}, LevelProperties.ChessKing.States.Generic, new LevelProperties.ChessKing.King(new string[]
					{
						"600:300,400:400,600:500,800:400,600:600,800:600,1000:700",
						"600:300,800:400,600:500,400:400,600:600,800:600,1000:700",
						"600:300,600:500,800:400,400:400,600:600,800:600,1000:700",
						"600:300,400:400,600:500,800:400,600:600,800:600,1000:700",
						"600:300,600:500,800:400,400:400,600:600,800:600,1000:700"
					}, 400f, 4f, new string[]
					{
						"R,R,R"
					}), new LevelProperties.ChessKing.Full(1f, 1f, 0.5f), new LevelProperties.ChessKing.Beam(1f, 1f, 0.5f), new LevelProperties.ChessKing.Rat(1f, 0.5f, 1.5f, 3, 200f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.ChessKing.State(10f, new LevelProperties.ChessKing.Pattern[][]
				{
					new LevelProperties.ChessKing.Pattern[1]
				}, LevelProperties.ChessKing.States.Main, new LevelProperties.ChessKing.King(new string[0], 0f, 0f, new string[0]), new LevelProperties.ChessKing.Full(0f, 0f, 0f), new LevelProperties.ChessKing.Beam(0f, 0f, 0f), new LevelProperties.ChessKing.Rat(0f, 0f, 0f, 0, 0f)));
			}
			return new LevelProperties.ChessKing(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000093 RID: 147
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000049 RID: 73
			// (get) Token: 0x060001C6 RID: 454 RVA: 0x0000EAF6 File Offset: 0x0000CEF6
			// (set) Token: 0x060001C7 RID: 455 RVA: 0x0000EAFE File Offset: 0x0000CEFE
			private protected LevelProperties.ChessKing properties { protected get; private set; }

			// Token: 0x060001C8 RID: 456 RVA: 0x0000EB07 File Offset: 0x0000CF07
			public virtual void LevelInit(LevelProperties.ChessKing properties)
			{
				this.properties = properties;
			}

			// Token: 0x060001C9 RID: 457 RVA: 0x0000EB10 File Offset: 0x0000CF10
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000094 RID: 148
		public enum States
		{
			// Token: 0x0400033A RID: 826
			Main,
			// Token: 0x0400033B RID: 827
			Generic
		}

		// Token: 0x02000095 RID: 149
		public enum Pattern
		{
			// Token: 0x0400033D RID: 829
			Default,
			// Token: 0x0400033E RID: 830
			Uninitialized
		}

		// Token: 0x02000096 RID: 150
		public class State : AbstractLevelState<LevelProperties.ChessKing.Pattern, LevelProperties.ChessKing.States>
		{
			// Token: 0x060001CA RID: 458 RVA: 0x0000EB12 File Offset: 0x0000CF12
			public State(float healthTrigger, LevelProperties.ChessKing.Pattern[][] patterns, LevelProperties.ChessKing.States stateName, LevelProperties.ChessKing.King king, LevelProperties.ChessKing.Full full, LevelProperties.ChessKing.Beam beam, LevelProperties.ChessKing.Rat rat) : base(healthTrigger, patterns, stateName)
			{
				this.king = king;
				this.full = full;
				this.beam = beam;
				this.rat = rat;
			}

			// Token: 0x0400033F RID: 831
			public readonly LevelProperties.ChessKing.King king;

			// Token: 0x04000340 RID: 832
			public readonly LevelProperties.ChessKing.Full full;

			// Token: 0x04000341 RID: 833
			public readonly LevelProperties.ChessKing.Beam beam;

			// Token: 0x04000342 RID: 834
			public readonly LevelProperties.ChessKing.Rat rat;
		}

		// Token: 0x02000097 RID: 151
		public class King : AbstractLevelPropertyGroup
		{
			// Token: 0x060001CB RID: 459 RVA: 0x0000EB3D File Offset: 0x0000CF3D
			public King(string[] trialPool, float bluePointSpeed, float kingAttackTimer, string[] kingAttackString)
			{
				this.trialPool = trialPool;
				this.bluePointSpeed = bluePointSpeed;
				this.kingAttackTimer = kingAttackTimer;
				this.kingAttackString = kingAttackString;
			}

			// Token: 0x04000343 RID: 835
			public readonly string[] trialPool;

			// Token: 0x04000344 RID: 836
			public readonly float bluePointSpeed;

			// Token: 0x04000345 RID: 837
			public readonly float kingAttackTimer;

			// Token: 0x04000346 RID: 838
			public readonly string[] kingAttackString;
		}

		// Token: 0x02000098 RID: 152
		public class Full : AbstractLevelPropertyGroup
		{
			// Token: 0x060001CC RID: 460 RVA: 0x0000EB62 File Offset: 0x0000CF62
			public Full(float fullAttackAnti, float fullAttackDuration, float fullAttackRecovery)
			{
				this.fullAttackAnti = fullAttackAnti;
				this.fullAttackDuration = fullAttackDuration;
				this.fullAttackRecovery = fullAttackRecovery;
			}

			// Token: 0x04000347 RID: 839
			public readonly float fullAttackAnti;

			// Token: 0x04000348 RID: 840
			public readonly float fullAttackDuration;

			// Token: 0x04000349 RID: 841
			public readonly float fullAttackRecovery;
		}

		// Token: 0x02000099 RID: 153
		public class Beam : AbstractLevelPropertyGroup
		{
			// Token: 0x060001CD RID: 461 RVA: 0x0000EB7F File Offset: 0x0000CF7F
			public Beam(float beamAttackAnti, float beamAttackDuration, float beamAttackRecovery)
			{
				this.beamAttackAnti = beamAttackAnti;
				this.beamAttackDuration = beamAttackDuration;
				this.beamAttackRecovery = beamAttackRecovery;
			}

			// Token: 0x0400034A RID: 842
			public readonly float beamAttackAnti;

			// Token: 0x0400034B RID: 843
			public readonly float beamAttackDuration;

			// Token: 0x0400034C RID: 844
			public readonly float beamAttackRecovery;
		}

		// Token: 0x0200009A RID: 154
		public class Rat : AbstractLevelPropertyGroup
		{
			// Token: 0x060001CE RID: 462 RVA: 0x0000EB9C File Offset: 0x0000CF9C
			public Rat(float ratSummonAnti, float ratSummonDuration, float ratSummonRecovery, int maxRatNumber, float ratSpeed)
			{
				this.ratSummonAnti = ratSummonAnti;
				this.ratSummonDuration = ratSummonDuration;
				this.ratSummonRecovery = ratSummonRecovery;
				this.maxRatNumber = maxRatNumber;
				this.ratSpeed = ratSpeed;
			}

			// Token: 0x0400034D RID: 845
			public readonly float ratSummonAnti;

			// Token: 0x0400034E RID: 846
			public readonly float ratSummonDuration;

			// Token: 0x0400034F RID: 847
			public readonly float ratSummonRecovery;

			// Token: 0x04000350 RID: 848
			public readonly int maxRatNumber;

			// Token: 0x04000351 RID: 849
			public readonly float ratSpeed;
		}
	}

	// Token: 0x0200009C RID: 156
	public class ChessKnight : AbstractLevelProperties<LevelProperties.ChessKnight.State, LevelProperties.ChessKnight.Pattern, LevelProperties.ChessKnight.States>
	{
		// Token: 0x060001DA RID: 474 RVA: 0x0000EBC9 File Offset: 0x0000CFC9
		public ChessKnight(int hp, Level.GoalTimes goalTimes, LevelProperties.ChessKnight.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060001DB RID: 475 RVA: 0x0000EBD8 File Offset: 0x0000CFD8
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 200f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x060001DC RID: 476 RVA: 0x0000EC34 File Offset: 0x0000D034
		public static LevelProperties.ChessKnight.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.ChessKnight.Pattern.Default;
				}
				if (id == "L")
				{
					return LevelProperties.ChessKnight.Pattern.Long;
				}
				if (id == "S")
				{
					return LevelProperties.ChessKnight.Pattern.Short;
				}
				if (id == "U")
				{
					return LevelProperties.ChessKnight.Pattern.Up;
				}
			}
			Debug.LogError("Pattern ChessKnight.Pattern for  " + id + " not found.", null);
			return LevelProperties.ChessKnight.Pattern.Uninitialized;
		}

		// Token: 0x060001DD RID: 477 RVA: 0x0000ECB4 File Offset: 0x0000D0B4
		public static LevelProperties.ChessKnight GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.ChessKnight.State> list = new List<LevelProperties.ChessKnight.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.ChessKnight.State(10f, new LevelProperties.ChessKnight.Pattern[][]
						{
							new LevelProperties.ChessKnight.Pattern[1]
						}, LevelProperties.ChessKnight.States.Main, new LevelProperties.ChessKnight.Knight(0, new string[0], 0f), new LevelProperties.ChessKnight.Movement(new string[0], 0f, false), new LevelProperties.ChessKnight.Taunt(0f, 0f), new LevelProperties.ChessKnight.ShortAttack(0f, 0f, 0f), new LevelProperties.ChessKnight.LongAttack(0f, 0f, 0f, 0f, 0f), new LevelProperties.ChessKnight.TauntAttack(string.Empty, 0f, 0f, 0f, 0f, 0f), new LevelProperties.ChessKnight.UpAttack(0f, 0f, 0f)));
					}
				}
				else
				{
					hp = 200;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.ChessKnight.State(10f, new LevelProperties.ChessKnight.Pattern[][]
					{
						new LevelProperties.ChessKnight.Pattern[]
						{
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Long
						},
						new LevelProperties.ChessKnight.Pattern[]
						{
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Short,
							LevelProperties.ChessKnight.Pattern.Up,
							LevelProperties.ChessKnight.Pattern.Long,
							LevelProperties.ChessKnight.Pattern.Long
						}
					}, LevelProperties.ChessKnight.States.Main, new LevelProperties.ChessKnight.Knight(21, new string[]
					{
						"2.2,1.0,1.5,0.9,1,1.5",
						"2,1.2,1.4,0.8,1.1,1.6"
					}, 0.3f), new LevelProperties.ChessKnight.Movement(new string[]
					{
						"100,102,98,105,100,95",
						"102,96,104,100,106,99"
					}, 175f, true), new LevelProperties.ChessKnight.Taunt(400f, 1.5f), new LevelProperties.ChessKnight.ShortAttack(0.8f, 0.4f, 0.1f), new LevelProperties.ChessKnight.LongAttack(1f, 725f, 0.5f, 1f, 650f), new LevelProperties.ChessKnight.TauntAttack("2,3,5,4,5,3,2,5", 0.2f, 725f, 0.4f, 0f, 650f), new LevelProperties.ChessKnight.UpAttack(0.8f, 0.65f, 0.85f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.ChessKnight.State(10f, new LevelProperties.ChessKnight.Pattern[][]
				{
					new LevelProperties.ChessKnight.Pattern[1]
				}, LevelProperties.ChessKnight.States.Main, new LevelProperties.ChessKnight.Knight(0, new string[0], 0f), new LevelProperties.ChessKnight.Movement(new string[0], 0f, false), new LevelProperties.ChessKnight.Taunt(0f, 0f), new LevelProperties.ChessKnight.ShortAttack(0f, 0f, 0f), new LevelProperties.ChessKnight.LongAttack(0f, 0f, 0f, 0f, 0f), new LevelProperties.ChessKnight.TauntAttack(string.Empty, 0f, 0f, 0f, 0f, 0f), new LevelProperties.ChessKnight.UpAttack(0f, 0f, 0f)));
			}
			return new LevelProperties.ChessKnight(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200009D RID: 157
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700004E RID: 78
			// (get) Token: 0x060001DF RID: 479 RVA: 0x0000EFC3 File Offset: 0x0000D3C3
			// (set) Token: 0x060001E0 RID: 480 RVA: 0x0000EFCB File Offset: 0x0000D3CB
			private protected LevelProperties.ChessKnight properties { protected get; private set; }

			// Token: 0x060001E1 RID: 481 RVA: 0x0000EFD4 File Offset: 0x0000D3D4
			public virtual void LevelInit(LevelProperties.ChessKnight properties)
			{
				this.properties = properties;
			}

			// Token: 0x060001E2 RID: 482 RVA: 0x0000EFDD File Offset: 0x0000D3DD
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200009E RID: 158
		public enum States
		{
			// Token: 0x04000358 RID: 856
			Main,
			// Token: 0x04000359 RID: 857
			Generic
		}

		// Token: 0x0200009F RID: 159
		public enum Pattern
		{
			// Token: 0x0400035B RID: 859
			Default,
			// Token: 0x0400035C RID: 860
			Long,
			// Token: 0x0400035D RID: 861
			Short,
			// Token: 0x0400035E RID: 862
			Up,
			// Token: 0x0400035F RID: 863
			Uninitialized
		}

		// Token: 0x020000A0 RID: 160
		public class State : AbstractLevelState<LevelProperties.ChessKnight.Pattern, LevelProperties.ChessKnight.States>
		{
			// Token: 0x060001E3 RID: 483 RVA: 0x0000EFE0 File Offset: 0x0000D3E0
			public State(float healthTrigger, LevelProperties.ChessKnight.Pattern[][] patterns, LevelProperties.ChessKnight.States stateName, LevelProperties.ChessKnight.Knight knight, LevelProperties.ChessKnight.Movement movement, LevelProperties.ChessKnight.Taunt taunt, LevelProperties.ChessKnight.ShortAttack shortAttack, LevelProperties.ChessKnight.LongAttack longAttack, LevelProperties.ChessKnight.TauntAttack tauntAttack, LevelProperties.ChessKnight.UpAttack upAttack) : base(healthTrigger, patterns, stateName)
			{
				this.knight = knight;
				this.movement = movement;
				this.taunt = taunt;
				this.shortAttack = shortAttack;
				this.longAttack = longAttack;
				this.tauntAttack = tauntAttack;
				this.upAttack = upAttack;
			}

			// Token: 0x04000360 RID: 864
			public readonly LevelProperties.ChessKnight.Knight knight;

			// Token: 0x04000361 RID: 865
			public readonly LevelProperties.ChessKnight.Movement movement;

			// Token: 0x04000362 RID: 866
			public readonly LevelProperties.ChessKnight.Taunt taunt;

			// Token: 0x04000363 RID: 867
			public readonly LevelProperties.ChessKnight.ShortAttack shortAttack;

			// Token: 0x04000364 RID: 868
			public readonly LevelProperties.ChessKnight.LongAttack longAttack;

			// Token: 0x04000365 RID: 869
			public readonly LevelProperties.ChessKnight.TauntAttack tauntAttack;

			// Token: 0x04000366 RID: 870
			public readonly LevelProperties.ChessKnight.UpAttack upAttack;
		}

		// Token: 0x020000A1 RID: 161
		public class Knight : AbstractLevelPropertyGroup
		{
			// Token: 0x060001E4 RID: 484 RVA: 0x0000F02E File Offset: 0x0000D42E
			public Knight(int knightHealth, string[] attackIntervalString, float parryCooldown)
			{
				this.knightHealth = knightHealth;
				this.attackIntervalString = attackIntervalString;
				this.parryCooldown = parryCooldown;
			}

			// Token: 0x04000367 RID: 871
			public readonly int knightHealth;

			// Token: 0x04000368 RID: 872
			public readonly string[] attackIntervalString;

			// Token: 0x04000369 RID: 873
			public readonly float parryCooldown;
		}

		// Token: 0x020000A2 RID: 162
		public class Movement : AbstractLevelPropertyGroup
		{
			// Token: 0x060001E5 RID: 485 RVA: 0x0000F04B File Offset: 0x0000D44B
			public Movement(string[] movementString, float movementSpeed, bool hasEasing)
			{
				this.movementString = movementString;
				this.movementSpeed = movementSpeed;
				this.hasEasing = hasEasing;
			}

			// Token: 0x0400036A RID: 874
			public readonly string[] movementString;

			// Token: 0x0400036B RID: 875
			public readonly float movementSpeed;

			// Token: 0x0400036C RID: 876
			public readonly bool hasEasing;
		}

		// Token: 0x020000A3 RID: 163
		public class Taunt : AbstractLevelPropertyGroup
		{
			// Token: 0x060001E6 RID: 486 RVA: 0x0000F068 File Offset: 0x0000D468
			public Taunt(float tauntDistance, float tauntDuration)
			{
				this.tauntDistance = tauntDistance;
				this.tauntDuration = tauntDuration;
			}

			// Token: 0x0400036D RID: 877
			public readonly float tauntDistance;

			// Token: 0x0400036E RID: 878
			public readonly float tauntDuration;
		}

		// Token: 0x020000A4 RID: 164
		public class ShortAttack : AbstractLevelPropertyGroup
		{
			// Token: 0x060001E7 RID: 487 RVA: 0x0000F07E File Offset: 0x0000D47E
			public ShortAttack(float shortAntiDuration, float shortAttackDuration, float shortRecoveryDuration)
			{
				this.shortAntiDuration = shortAntiDuration;
				this.shortAttackDuration = shortAttackDuration;
				this.shortRecoveryDuration = shortRecoveryDuration;
			}

			// Token: 0x0400036F RID: 879
			public readonly float shortAntiDuration;

			// Token: 0x04000370 RID: 880
			public readonly float shortAttackDuration;

			// Token: 0x04000371 RID: 881
			public readonly float shortRecoveryDuration;
		}

		// Token: 0x020000A5 RID: 165
		public class LongAttack : AbstractLevelPropertyGroup
		{
			// Token: 0x060001E8 RID: 488 RVA: 0x0000F09B File Offset: 0x0000D49B
			public LongAttack(float longAntiDuration, float longAttackDist, float longAttackTime, float longRecoveryDuration, float longReturnSpeed)
			{
				this.longAntiDuration = longAntiDuration;
				this.longAttackDist = longAttackDist;
				this.longAttackTime = longAttackTime;
				this.longRecoveryDuration = longRecoveryDuration;
				this.longReturnSpeed = longReturnSpeed;
			}

			// Token: 0x04000372 RID: 882
			public readonly float longAntiDuration;

			// Token: 0x04000373 RID: 883
			public readonly float longAttackDist;

			// Token: 0x04000374 RID: 884
			public readonly float longAttackTime;

			// Token: 0x04000375 RID: 885
			public readonly float longRecoveryDuration;

			// Token: 0x04000376 RID: 886
			public readonly float longReturnSpeed;
		}

		// Token: 0x020000A6 RID: 166
		public class TauntAttack : AbstractLevelPropertyGroup
		{
			// Token: 0x060001E9 RID: 489 RVA: 0x0000F0C8 File Offset: 0x0000D4C8
			public TauntAttack(string numberTauntString, float tauntAttackAntiDuration, float tauntAttackDist, float tauntAttackTime, float tauntAttackRecoveryDuration, float tauntAttackReturnSpeed)
			{
				this.numberTauntString = numberTauntString;
				this.tauntAttackAntiDuration = tauntAttackAntiDuration;
				this.tauntAttackDist = tauntAttackDist;
				this.tauntAttackTime = tauntAttackTime;
				this.tauntAttackRecoveryDuration = tauntAttackRecoveryDuration;
				this.tauntAttackReturnSpeed = tauntAttackReturnSpeed;
			}

			// Token: 0x04000377 RID: 887
			public readonly string numberTauntString;

			// Token: 0x04000378 RID: 888
			public readonly float tauntAttackAntiDuration;

			// Token: 0x04000379 RID: 889
			public readonly float tauntAttackDist;

			// Token: 0x0400037A RID: 890
			public readonly float tauntAttackTime;

			// Token: 0x0400037B RID: 891
			public readonly float tauntAttackRecoveryDuration;

			// Token: 0x0400037C RID: 892
			public readonly float tauntAttackReturnSpeed;
		}

		// Token: 0x020000A7 RID: 167
		public class UpAttack : AbstractLevelPropertyGroup
		{
			// Token: 0x060001EA RID: 490 RVA: 0x0000F0FD File Offset: 0x0000D4FD
			public UpAttack(float upAntiDuration, float upAttackDuration, float upRecoveryDuration)
			{
				this.upAntiDuration = upAntiDuration;
				this.upAttackDuration = upAttackDuration;
				this.upRecoveryDuration = upRecoveryDuration;
			}

			// Token: 0x0400037D RID: 893
			public readonly float upAntiDuration;

			// Token: 0x0400037E RID: 894
			public readonly float upAttackDuration;

			// Token: 0x0400037F RID: 895
			public readonly float upRecoveryDuration;
		}
	}

	// Token: 0x020000A9 RID: 169
	public class ChessPawn : AbstractLevelProperties<LevelProperties.ChessPawn.State, LevelProperties.ChessPawn.Pattern, LevelProperties.ChessPawn.States>
	{
		// Token: 0x060001FA RID: 506 RVA: 0x0000F11A File Offset: 0x0000D51A
		public ChessPawn(int hp, Level.GoalTimes goalTimes, LevelProperties.ChessPawn.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060001FB RID: 507 RVA: 0x0000F128 File Offset: 0x0000D528
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 80f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x060001FC RID: 508 RVA: 0x0000F183 File Offset: 0x0000D583
		public static LevelProperties.ChessPawn.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.ChessPawn.Pattern.Default;
				}
			}
			Debug.LogError("Pattern ChessPawn.Pattern for  " + id + " not found.", null);
			return LevelProperties.ChessPawn.Pattern.Uninitialized;
		}

		// Token: 0x060001FD RID: 509 RVA: 0x0000F1C4 File Offset: 0x0000D5C4
		public static LevelProperties.ChessPawn GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.ChessPawn.State> list = new List<LevelProperties.ChessPawn.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.ChessPawn.State(10f, new LevelProperties.ChessPawn.Pattern[][]
						{
							new LevelProperties.ChessPawn.Pattern[1]
						}, LevelProperties.ChessPawn.States.Main, new LevelProperties.ChessPawn.Pawn(string.Empty, 0f, string.Empty, string.Empty, 0f, 0f, 0f, 0f, 0f, 0f)));
					}
				}
				else
				{
					hp = 80;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.ChessPawn.State(10f, new LevelProperties.ChessPawn.Pattern[][]
					{
						new LevelProperties.ChessPawn.Pattern[1]
					}, LevelProperties.ChessPawn.States.Main, new LevelProperties.ChessPawn.Pawn("0.95,1.45,1.25,1,1.5,1.35,0.95,1.25,1.05,1.55,0.95,1.45,1,1.2", 0.07f, "L,L,R,L,R,L,R,R,L,R,L,L,R,R,L,R,R,R", "P,B,B,B,P,B,B,B,P,B,B,B,B,B,B,P,P,B,B,B,B,B,P,B,B,B,B,B", 1f, 1.55f, 300f, 845f, 0f, 0.8f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.ChessPawn.State(10f, new LevelProperties.ChessPawn.Pattern[][]
				{
					new LevelProperties.ChessPawn.Pattern[1]
				}, LevelProperties.ChessPawn.States.Main, new LevelProperties.ChessPawn.Pawn(string.Empty, 0f, string.Empty, string.Empty, 0f, 0f, 0f, 0f, 0f, 0f)));
			}
			return new LevelProperties.ChessPawn(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020000AA RID: 170
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000053 RID: 83
			// (get) Token: 0x060001FF RID: 511 RVA: 0x0000F365 File Offset: 0x0000D765
			// (set) Token: 0x06000200 RID: 512 RVA: 0x0000F36D File Offset: 0x0000D76D
			private protected LevelProperties.ChessPawn properties { protected get; private set; }

			// Token: 0x06000201 RID: 513 RVA: 0x0000F376 File Offset: 0x0000D776
			public virtual void LevelInit(LevelProperties.ChessPawn properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000202 RID: 514 RVA: 0x0000F37F File Offset: 0x0000D77F
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020000AB RID: 171
		public enum States
		{
			// Token: 0x04000386 RID: 902
			Main,
			// Token: 0x04000387 RID: 903
			Generic
		}

		// Token: 0x020000AC RID: 172
		public enum Pattern
		{
			// Token: 0x04000389 RID: 905
			Default,
			// Token: 0x0400038A RID: 906
			Uninitialized
		}

		// Token: 0x020000AD RID: 173
		public class State : AbstractLevelState<LevelProperties.ChessPawn.Pattern, LevelProperties.ChessPawn.States>
		{
			// Token: 0x06000203 RID: 515 RVA: 0x0000F381 File Offset: 0x0000D781
			public State(float healthTrigger, LevelProperties.ChessPawn.Pattern[][] patterns, LevelProperties.ChessPawn.States stateName, LevelProperties.ChessPawn.Pawn pawn) : base(healthTrigger, patterns, stateName)
			{
				this.pawn = pawn;
			}

			// Token: 0x0400038B RID: 907
			public readonly LevelProperties.ChessPawn.Pawn pawn;
		}

		// Token: 0x020000AE RID: 174
		public class Pawn : AbstractLevelPropertyGroup
		{
			// Token: 0x06000204 RID: 516 RVA: 0x0000F394 File Offset: 0x0000D794
			public Pawn(string pawnAttackDelayString, float pawnDelayReduction, string pawnDirectionString, string pawnOrderString, float pawnWarningTime, float pawnDropSpeed, float pawnDropDistance, float pawnRunSpeed, float pawnRunHesitation, float pawnReturnDelay)
			{
				this.pawnAttackDelayString = pawnAttackDelayString;
				this.pawnDelayReduction = pawnDelayReduction;
				this.pawnDirectionString = pawnDirectionString;
				this.pawnOrderString = pawnOrderString;
				this.pawnWarningTime = pawnWarningTime;
				this.pawnDropSpeed = pawnDropSpeed;
				this.pawnDropDistance = pawnDropDistance;
				this.pawnRunSpeed = pawnRunSpeed;
				this.pawnRunHesitation = pawnRunHesitation;
				this.pawnReturnDelay = pawnReturnDelay;
			}

			// Token: 0x0400038C RID: 908
			public readonly string pawnAttackDelayString;

			// Token: 0x0400038D RID: 909
			public readonly float pawnDelayReduction;

			// Token: 0x0400038E RID: 910
			public readonly string pawnDirectionString;

			// Token: 0x0400038F RID: 911
			public readonly string pawnOrderString;

			// Token: 0x04000390 RID: 912
			public readonly float pawnWarningTime;

			// Token: 0x04000391 RID: 913
			public readonly float pawnDropSpeed;

			// Token: 0x04000392 RID: 914
			public readonly float pawnDropDistance;

			// Token: 0x04000393 RID: 915
			public readonly float pawnRunSpeed;

			// Token: 0x04000394 RID: 916
			public readonly float pawnRunHesitation;

			// Token: 0x04000395 RID: 917
			public readonly float pawnReturnDelay;
		}
	}

	// Token: 0x020000B0 RID: 176
	public class ChessQueen : AbstractLevelProperties<LevelProperties.ChessQueen.State, LevelProperties.ChessQueen.Pattern, LevelProperties.ChessQueen.States>
	{
		// Token: 0x06000218 RID: 536 RVA: 0x0000F3F4 File Offset: 0x0000D7F4
		public ChessQueen(int hp, Level.GoalTimes goalTimes, LevelProperties.ChessQueen.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000219 RID: 537 RVA: 0x0000F400 File Offset: 0x0000D800
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 80f;
				timeline.events.Add(new Level.Timeline.Event("PhaseTwo", 0.9f));
				timeline.events.Add(new Level.Timeline.Event("PhaseThree", 0.3f));
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x0600021A RID: 538 RVA: 0x0000F490 File Offset: 0x0000D890
		public static LevelProperties.ChessQueen.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.ChessQueen.Pattern.Default;
				}
				if (id == "E")
				{
					return LevelProperties.ChessQueen.Pattern.Egg;
				}
				if (id == "L")
				{
					return LevelProperties.ChessQueen.Pattern.Lightning;
				}
			}
			Debug.LogError("Pattern ChessQueen.Pattern for  " + id + " not found.", null);
			return LevelProperties.ChessQueen.Pattern.Uninitialized;
		}

		// Token: 0x0600021B RID: 539 RVA: 0x0000F500 File Offset: 0x0000D900
		public static LevelProperties.ChessQueen GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.ChessQueen.State> list = new List<LevelProperties.ChessQueen.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.ChessQueen.State(10f, new LevelProperties.ChessQueen.Pattern[][]
						{
							new LevelProperties.ChessQueen.Pattern[1]
						}, LevelProperties.ChessQueen.States.Main, new LevelProperties.ChessQueen.Turret(0f, 0f, 0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), new MinMax(0f, 1f)), new LevelProperties.ChessQueen.Queen(0f, new string[0]), new LevelProperties.ChessQueen.Egg(0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), 0f, 0f), new LevelProperties.ChessQueen.Lightning(new string[0], 0f, 0f, 0f, 0f), new LevelProperties.ChessQueen.Movement(string.Empty)));
					}
				}
				else
				{
					hp = 80;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.ChessQueen.State(10f, new LevelProperties.ChessQueen.Pattern[][]
					{
						new LevelProperties.ChessQueen.Pattern[]
						{
							LevelProperties.ChessQueen.Pattern.Lightning,
							LevelProperties.ChessQueen.Pattern.Lightning,
							LevelProperties.ChessQueen.Pattern.Lightning
						}
					}, LevelProperties.ChessQueen.States.Main, new LevelProperties.ChessQueen.Turret(1.4f, 1.4f, 0.85f, 1050f, new MinMax(0f, -65f), new MinMax(0f, -45f), new MinMax(0f, 65f)), new LevelProperties.ChessQueen.Queen(345f, new string[]
					{
						"3,2.5,3,2.5,3.5,2.5"
					}), new LevelProperties.ChessQueen.Egg(975f, new MinMax(-421f, 421f), new MinMax(550f, 875f), 0.25f, new MinMax(1f, 1.5f), 1f, 0.3f), new LevelProperties.ChessQueen.Lightning(new string[]
					{
						"-720,720"
					}, 0.8f, 0.15f, 0.32f, 1450f), new LevelProperties.ChessQueen.Movement("0.5,-1,0.6,0,0.7,-0.5,1,-0.8")));
					list.Add(new LevelProperties.ChessQueen.State(0.9f, new LevelProperties.ChessQueen.Pattern[][]
					{
						new LevelProperties.ChessQueen.Pattern[]
						{
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Lightning,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Lightning,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Lightning,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Lightning
						}
					}, LevelProperties.ChessQueen.States.PhaseTwo, new LevelProperties.ChessQueen.Turret(1.4f, 1.4f, 0.85f, 1050f, new MinMax(0f, -65f), new MinMax(0f, -45f), new MinMax(0f, 65f)), new LevelProperties.ChessQueen.Queen(345f, new string[]
					{
						"0.8,0.5"
					}), new LevelProperties.ChessQueen.Egg(975f, new MinMax(-400f, 400f), new MinMax(550f, 845f), 0.215f, new MinMax(1f, 1.5f), 1f, 0f), new LevelProperties.ChessQueen.Lightning(new string[]
					{
						"-750,750"
					}, 0.8f, 0.15f, 0.32f, 1600f), new LevelProperties.ChessQueen.Movement("0.5,-1,0.6,0,0.7,-0.5,1,-0.8")));
					list.Add(new LevelProperties.ChessQueen.State(0.3f, new LevelProperties.ChessQueen.Pattern[][]
					{
						new LevelProperties.ChessQueen.Pattern[]
						{
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Lightning,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Lightning,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Egg,
							LevelProperties.ChessQueen.Pattern.Lightning
						}
					}, LevelProperties.ChessQueen.States.PhaseThree, new LevelProperties.ChessQueen.Turret(1.4f, 1.4f, 0.85f, 1050f, new MinMax(0f, -65f), new MinMax(0f, -45f), new MinMax(0f, 65f)), new LevelProperties.ChessQueen.Queen(345f, new string[]
					{
						"0.5,0.4"
					}), new LevelProperties.ChessQueen.Egg(975f, new MinMax(-380f, 380f), new MinMax(575f, 835f), 0.16f, new MinMax(1.1f, 1.7f), 1f, 0f), new LevelProperties.ChessQueen.Lightning(new string[]
					{
						"-750,750"
					}, 0.8f, 0.15f, 0.32f, 1750f), new LevelProperties.ChessQueen.Movement("0.5,-1,0.6,0,0.7,-0.5,1,-0.8")));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.ChessQueen.State(10f, new LevelProperties.ChessQueen.Pattern[][]
				{
					new LevelProperties.ChessQueen.Pattern[1]
				}, LevelProperties.ChessQueen.States.Main, new LevelProperties.ChessQueen.Turret(0f, 0f, 0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), new MinMax(0f, 1f)), new LevelProperties.ChessQueen.Queen(0f, new string[0]), new LevelProperties.ChessQueen.Egg(0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), 0f, 0f), new LevelProperties.ChessQueen.Lightning(new string[0], 0f, 0f, 0f, 0f), new LevelProperties.ChessQueen.Movement(string.Empty)));
			}
			return new LevelProperties.ChessQueen(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020000B1 RID: 177
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000058 RID: 88
			// (get) Token: 0x0600021D RID: 541 RVA: 0x0000FA68 File Offset: 0x0000DE68
			// (set) Token: 0x0600021E RID: 542 RVA: 0x0000FA70 File Offset: 0x0000DE70
			private protected LevelProperties.ChessQueen properties { protected get; private set; }

			// Token: 0x0600021F RID: 543 RVA: 0x0000FA79 File Offset: 0x0000DE79
			public virtual void LevelInit(LevelProperties.ChessQueen properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000220 RID: 544 RVA: 0x0000FA82 File Offset: 0x0000DE82
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020000B2 RID: 178
		public enum States
		{
			// Token: 0x040003A1 RID: 929
			Main,
			// Token: 0x040003A2 RID: 930
			Generic,
			// Token: 0x040003A3 RID: 931
			PhaseTwo,
			// Token: 0x040003A4 RID: 932
			PhaseThree
		}

		// Token: 0x020000B3 RID: 179
		public enum Pattern
		{
			// Token: 0x040003A6 RID: 934
			Default,
			// Token: 0x040003A7 RID: 935
			Egg,
			// Token: 0x040003A8 RID: 936
			Lightning,
			// Token: 0x040003A9 RID: 937
			Uninitialized
		}

		// Token: 0x020000B4 RID: 180
		public class State : AbstractLevelState<LevelProperties.ChessQueen.Pattern, LevelProperties.ChessQueen.States>
		{
			// Token: 0x06000221 RID: 545 RVA: 0x0000FA84 File Offset: 0x0000DE84
			public State(float healthTrigger, LevelProperties.ChessQueen.Pattern[][] patterns, LevelProperties.ChessQueen.States stateName, LevelProperties.ChessQueen.Turret turret, LevelProperties.ChessQueen.Queen queen, LevelProperties.ChessQueen.Egg egg, LevelProperties.ChessQueen.Lightning lightning, LevelProperties.ChessQueen.Movement movement) : base(healthTrigger, patterns, stateName)
			{
				this.turret = turret;
				this.queen = queen;
				this.egg = egg;
				this.lightning = lightning;
				this.movement = movement;
			}

			// Token: 0x040003AA RID: 938
			public readonly LevelProperties.ChessQueen.Turret turret;

			// Token: 0x040003AB RID: 939
			public readonly LevelProperties.ChessQueen.Queen queen;

			// Token: 0x040003AC RID: 940
			public readonly LevelProperties.ChessQueen.Egg egg;

			// Token: 0x040003AD RID: 941
			public readonly LevelProperties.ChessQueen.Lightning lightning;

			// Token: 0x040003AE RID: 942
			public readonly LevelProperties.ChessQueen.Movement movement;
		}

		// Token: 0x020000B5 RID: 181
		public class Turret : AbstractLevelPropertyGroup
		{
			// Token: 0x06000222 RID: 546 RVA: 0x0000FAB7 File Offset: 0x0000DEB7
			public Turret(float leftTurretRotationTime, float rightTurretRotationTime, float middleTurretRotationTime, float turretCannonballSpeed, MinMax leftTurretRange, MinMax middleTurretRange, MinMax rightTurretRange)
			{
				this.leftTurretRotationTime = leftTurretRotationTime;
				this.rightTurretRotationTime = rightTurretRotationTime;
				this.middleTurretRotationTime = middleTurretRotationTime;
				this.turretCannonballSpeed = turretCannonballSpeed;
				this.leftTurretRange = leftTurretRange;
				this.middleTurretRange = middleTurretRange;
				this.rightTurretRange = rightTurretRange;
			}

			// Token: 0x040003AF RID: 943
			public readonly float leftTurretRotationTime;

			// Token: 0x040003B0 RID: 944
			public readonly float rightTurretRotationTime;

			// Token: 0x040003B1 RID: 945
			public readonly float middleTurretRotationTime;

			// Token: 0x040003B2 RID: 946
			public readonly float turretCannonballSpeed;

			// Token: 0x040003B3 RID: 947
			public readonly MinMax leftTurretRange;

			// Token: 0x040003B4 RID: 948
			public readonly MinMax middleTurretRange;

			// Token: 0x040003B5 RID: 949
			public readonly MinMax rightTurretRange;
		}

		// Token: 0x020000B6 RID: 182
		public class Queen : AbstractLevelPropertyGroup
		{
			// Token: 0x06000223 RID: 547 RVA: 0x0000FAF4 File Offset: 0x0000DEF4
			public Queen(float queenMovementSpeed, string[] queenAttackDelayString)
			{
				this.queenMovementSpeed = queenMovementSpeed;
				this.queenAttackDelayString = queenAttackDelayString;
			}

			// Token: 0x040003B6 RID: 950
			public readonly float queenMovementSpeed;

			// Token: 0x040003B7 RID: 951
			public readonly string[] queenAttackDelayString;
		}

		// Token: 0x020000B7 RID: 183
		public class Egg : AbstractLevelPropertyGroup
		{
			// Token: 0x06000224 RID: 548 RVA: 0x0000FB0A File Offset: 0x0000DF0A
			public Egg(float eggGravity, MinMax eggVelocityX, MinMax eggVelocityY, float eggFireRate, MinMax eggAttackDuration, float eggSpawnCollisionTimer, float eggCooldownDuration)
			{
				this.eggGravity = eggGravity;
				this.eggVelocityX = eggVelocityX;
				this.eggVelocityY = eggVelocityY;
				this.eggFireRate = eggFireRate;
				this.eggAttackDuration = eggAttackDuration;
				this.eggSpawnCollisionTimer = eggSpawnCollisionTimer;
				this.eggCooldownDuration = eggCooldownDuration;
			}

			// Token: 0x040003B8 RID: 952
			public readonly float eggGravity;

			// Token: 0x040003B9 RID: 953
			public readonly MinMax eggVelocityX;

			// Token: 0x040003BA RID: 954
			public readonly MinMax eggVelocityY;

			// Token: 0x040003BB RID: 955
			public readonly float eggFireRate;

			// Token: 0x040003BC RID: 956
			public readonly MinMax eggAttackDuration;

			// Token: 0x040003BD RID: 957
			public readonly float eggSpawnCollisionTimer;

			// Token: 0x040003BE RID: 958
			public readonly float eggCooldownDuration;
		}

		// Token: 0x020000B8 RID: 184
		public class Lightning : AbstractLevelPropertyGroup
		{
			// Token: 0x06000225 RID: 549 RVA: 0x0000FB47 File Offset: 0x0000DF47
			public Lightning(string[] lightningPositionString, float lightningAnticipationTime, float lightningDescentTime, float lightningDelayTime, float lightningSweepSpeed)
			{
				this.lightningPositionString = lightningPositionString;
				this.lightningAnticipationTime = lightningAnticipationTime;
				this.lightningDescentTime = lightningDescentTime;
				this.lightningDelayTime = lightningDelayTime;
				this.lightningSweepSpeed = lightningSweepSpeed;
			}

			// Token: 0x040003BF RID: 959
			public readonly string[] lightningPositionString;

			// Token: 0x040003C0 RID: 960
			public readonly float lightningAnticipationTime;

			// Token: 0x040003C1 RID: 961
			public readonly float lightningDescentTime;

			// Token: 0x040003C2 RID: 962
			public readonly float lightningDelayTime;

			// Token: 0x040003C3 RID: 963
			public readonly float lightningSweepSpeed;
		}

		// Token: 0x020000B9 RID: 185
		public class Movement : AbstractLevelPropertyGroup
		{
			// Token: 0x06000226 RID: 550 RVA: 0x0000FB74 File Offset: 0x0000DF74
			public Movement(string queenPositionString)
			{
				this.queenPositionString = queenPositionString;
			}

			// Token: 0x040003C4 RID: 964
			public readonly string queenPositionString;
		}
	}

	// Token: 0x020000BB RID: 187
	public class ChessRook : AbstractLevelProperties<LevelProperties.ChessRook.State, LevelProperties.ChessRook.Pattern, LevelProperties.ChessRook.States>
	{
		// Token: 0x06000237 RID: 567 RVA: 0x0000FB83 File Offset: 0x0000DF83
		public ChessRook(int hp, Level.GoalTimes goalTimes, LevelProperties.ChessRook.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000238 RID: 568 RVA: 0x0000FB90 File Offset: 0x0000DF90
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 160f;
				timeline.events.Add(new Level.Timeline.Event("PhaseTwo", 0.9f));
				timeline.events.Add(new Level.Timeline.Event("PhaseThree", 0.65f));
				timeline.events.Add(new Level.Timeline.Event("PhaseFour", 0.25f));
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000239 RID: 569 RVA: 0x0000FC39 File Offset: 0x0000E039
		public static LevelProperties.ChessRook.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.ChessRook.Pattern.Default;
				}
			}
			Debug.LogError("Pattern ChessRook.Pattern for  " + id + " not found.", null);
			return LevelProperties.ChessRook.Pattern.Uninitialized;
		}

		// Token: 0x0600023A RID: 570 RVA: 0x0000FC78 File Offset: 0x0000E078
		public static LevelProperties.ChessRook GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.ChessRook.State> list = new List<LevelProperties.ChessRook.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.ChessRook.State(10f, new LevelProperties.ChessRook.Pattern[][]
						{
							new LevelProperties.ChessRook.Pattern[1]
						}, LevelProperties.ChessRook.States.Main, new LevelProperties.ChessRook.PinkCannonBall(0f, 0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f, new string[0], new string[0], new string[0], 0f, 0f, 0f), new LevelProperties.ChessRook.RegularCannonBall(new string[0], new string[0], new string[0], 0f), new LevelProperties.ChessRook.StraightShooters(false, new string[0], new string[0], 0f)));
					}
				}
				else
				{
					hp = 160;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.ChessRook.State(10f, new LevelProperties.ChessRook.Pattern[][]
					{
						new LevelProperties.ChessRook.Pattern[1]
					}, LevelProperties.ChessRook.States.Main, new LevelProperties.ChessRook.PinkCannonBall(235f, 200f, 0.5f, new MinMax(35f, 275f), new MinMax(50f, 275f), new MinMax(10f, 20f), new MinMax(50f, 275f), -700f, -600f, -500f, 20f, 30f, new string[]
					{
						"1.6,1.2,1.7,1.1,1.8,1"
					}, new string[]
					{
						"500,600,550,600,525"
					}, new string[]
					{
						"1200,400,900,1100,600,1000,800"
					}, 1f, 0.4f, -800f), new LevelProperties.ChessRook.RegularCannonBall(new string[]
					{
						"4,5"
					}, new string[]
					{
						"400,450,500"
					}, new string[]
					{
						"900,800,700,600"
					}, -650f), new LevelProperties.ChessRook.StraightShooters(false, new string[]
					{
						"1.7"
					}, new string[]
					{
						"M,B"
					}, 325f)));
					list.Add(new LevelProperties.ChessRook.State(0.9f, new LevelProperties.ChessRook.Pattern[][]
					{
						new LevelProperties.ChessRook.Pattern[1]
					}, LevelProperties.ChessRook.States.PhaseTwo, new LevelProperties.ChessRook.PinkCannonBall(235f, 200f, 0.5f, new MinMax(35f, 275f), new MinMax(50f, 275f), new MinMax(10f, 20f), new MinMax(50f, 275f), -700f, -600f, -500f, 20f, 30f, new string[]
					{
						"1.6,1.7,1.4,1.5,1.7,1.5,1.4,1.9,1.5"
					}, new string[]
					{
						"500,575,550,575,525,575"
					}, new string[]
					{
						"1100,900,700,900"
					}, 1f, 0.4f, -800f), new LevelProperties.ChessRook.RegularCannonBall(new string[]
					{
						"3.5,4,3.5,4,3.5,4.5"
					}, new string[]
					{
						"450,400,425"
					}, new string[]
					{
						"1000,800,600,400,600,800"
					}, -650f), new LevelProperties.ChessRook.StraightShooters(true, new string[]
					{
						"2.1,2.2"
					}, new string[]
					{
						"M,M,M"
					}, 355f)));
					list.Add(new LevelProperties.ChessRook.State(0.65f, new LevelProperties.ChessRook.Pattern[][]
					{
						new LevelProperties.ChessRook.Pattern[1]
					}, LevelProperties.ChessRook.States.PhaseThree, new LevelProperties.ChessRook.PinkCannonBall(235f, 200f, 0.5f, new MinMax(35f, 275f), new MinMax(50f, 275f), new MinMax(10f, 20f), new MinMax(50f, 275f), -700f, -600f, -500f, 20f, 30f, new string[]
					{
						"1.6,1.4,2,1.5,1.5,2,1.7,1.3,2"
					}, new string[]
					{
						"500,600,550,600"
					}, new string[]
					{
						"1200,1000,800,1100,900"
					}, 1f, 0.4f, -800f), new LevelProperties.ChessRook.RegularCannonBall(new string[]
					{
						"3,4,3,4,5"
					}, new string[]
					{
						"450,400,425"
					}, new string[]
					{
						"700,600,400,600,500"
					}, -650f), new LevelProperties.ChessRook.StraightShooters(true, new string[]
					{
						"1.6,1.7"
					}, new string[]
					{
						"M,B"
					}, 365f)));
					list.Add(new LevelProperties.ChessRook.State(0.25f, new LevelProperties.ChessRook.Pattern[][]
					{
						new LevelProperties.ChessRook.Pattern[1]
					}, LevelProperties.ChessRook.States.PhaseFour, new LevelProperties.ChessRook.PinkCannonBall(235f, 200f, 0.5f, new MinMax(35f, 275f), new MinMax(50f, 275f), new MinMax(10f, 20f), new MinMax(50f, 275f), -700f, -600f, -500f, 20f, 30f, new string[]
					{
						"1,1,1.5,1,1,1.5,1,1,1,1.5"
					}, new string[]
					{
						"550,575,525,550,500,535,565,510"
					}, new string[]
					{
						"1200,800,1000,800,1100,800"
					}, 1f, 0.4f, -800f), new LevelProperties.ChessRook.RegularCannonBall(new string[]
					{
						"3,4,3,4,3.5,4"
					}, new string[]
					{
						"450,400,425"
					}, new string[]
					{
						"500,700,900"
					}, -650f), new LevelProperties.ChessRook.StraightShooters(true, new string[]
					{
						"1.1,1.2"
					}, new string[]
					{
						"M,B"
					}, 375f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.ChessRook.State(10f, new LevelProperties.ChessRook.Pattern[][]
				{
					new LevelProperties.ChessRook.Pattern[1]
				}, LevelProperties.ChessRook.States.Main, new LevelProperties.ChessRook.PinkCannonBall(0f, 0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f, new string[0], new string[0], new string[0], 0f, 0f, 0f), new LevelProperties.ChessRook.RegularCannonBall(new string[0], new string[0], new string[0], 0f), new LevelProperties.ChessRook.StraightShooters(false, new string[0], new string[0], 0f)));
			}
			return new LevelProperties.ChessRook(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020000BC RID: 188
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700005D RID: 93
			// (get) Token: 0x0600023C RID: 572 RVA: 0x00010345 File Offset: 0x0000E745
			// (set) Token: 0x0600023D RID: 573 RVA: 0x0001034D File Offset: 0x0000E74D
			private protected LevelProperties.ChessRook properties { protected get; private set; }

			// Token: 0x0600023E RID: 574 RVA: 0x00010356 File Offset: 0x0000E756
			public virtual void LevelInit(LevelProperties.ChessRook properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600023F RID: 575 RVA: 0x0001035F File Offset: 0x0000E75F
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020000BD RID: 189
		public enum States
		{
			// Token: 0x040003CD RID: 973
			Main,
			// Token: 0x040003CE RID: 974
			Generic,
			// Token: 0x040003CF RID: 975
			PhaseTwo,
			// Token: 0x040003D0 RID: 976
			PhaseThree,
			// Token: 0x040003D1 RID: 977
			PhaseFour,
			// Token: 0x040003D2 RID: 978
			PhaseFive,
			// Token: 0x040003D3 RID: 979
			PhaseSix
		}

		// Token: 0x020000BE RID: 190
		public enum Pattern
		{
			// Token: 0x040003D5 RID: 981
			Default,
			// Token: 0x040003D6 RID: 982
			Uninitialized
		}

		// Token: 0x020000BF RID: 191
		public class State : AbstractLevelState<LevelProperties.ChessRook.Pattern, LevelProperties.ChessRook.States>
		{
			// Token: 0x06000240 RID: 576 RVA: 0x00010361 File Offset: 0x0000E761
			public State(float healthTrigger, LevelProperties.ChessRook.Pattern[][] patterns, LevelProperties.ChessRook.States stateName, LevelProperties.ChessRook.PinkCannonBall pinkCannonBall, LevelProperties.ChessRook.RegularCannonBall regularCannonBall, LevelProperties.ChessRook.StraightShooters straightShooters) : base(healthTrigger, patterns, stateName)
			{
				this.pinkCannonBall = pinkCannonBall;
				this.regularCannonBall = regularCannonBall;
				this.straightShooters = straightShooters;
			}

			// Token: 0x040003D7 RID: 983
			public readonly LevelProperties.ChessRook.PinkCannonBall pinkCannonBall;

			// Token: 0x040003D8 RID: 984
			public readonly LevelProperties.ChessRook.RegularCannonBall regularCannonBall;

			// Token: 0x040003D9 RID: 985
			public readonly LevelProperties.ChessRook.StraightShooters straightShooters;
		}

		// Token: 0x020000C0 RID: 192
		public class PinkCannonBall : AbstractLevelPropertyGroup
		{
			// Token: 0x06000241 RID: 577 RVA: 0x00010384 File Offset: 0x0000E784
			public PinkCannonBall(float bounceUpApexHeight, float bounceUpTargetDist, float bounceCollisionOffTimer, MinMax distanceAddition, MinMax heightAddition, MinMax distanceAdditionBack, MinMax heightAdditionBack, float pinkReactionGravity, float velocityAfterSlam, float gravityAfterSlam, float goodQuadrantClemencyLeft, float goodQuadrantClemencyBottom, string[] pinkShotDelayString, string[] pinkShotApexHeightString, string[] pinkShotTargetString, float explosionRadius, float explosionDuration, float pinkGravity)
			{
				this.bounceUpApexHeight = bounceUpApexHeight;
				this.bounceUpTargetDist = bounceUpTargetDist;
				this.bounceCollisionOffTimer = bounceCollisionOffTimer;
				this.distanceAddition = distanceAddition;
				this.heightAddition = heightAddition;
				this.distanceAdditionBack = distanceAdditionBack;
				this.heightAdditionBack = heightAdditionBack;
				this.pinkReactionGravity = pinkReactionGravity;
				this.velocityAfterSlam = velocityAfterSlam;
				this.gravityAfterSlam = gravityAfterSlam;
				this.goodQuadrantClemencyLeft = goodQuadrantClemencyLeft;
				this.goodQuadrantClemencyBottom = goodQuadrantClemencyBottom;
				this.pinkShotDelayString = pinkShotDelayString;
				this.pinkShotApexHeightString = pinkShotApexHeightString;
				this.pinkShotTargetString = pinkShotTargetString;
				this.explosionRadius = explosionRadius;
				this.explosionDuration = explosionDuration;
				this.pinkGravity = pinkGravity;
			}

			// Token: 0x040003DA RID: 986
			public readonly float bounceUpApexHeight;

			// Token: 0x040003DB RID: 987
			public readonly float bounceUpTargetDist;

			// Token: 0x040003DC RID: 988
			public readonly float bounceCollisionOffTimer;

			// Token: 0x040003DD RID: 989
			public readonly MinMax distanceAddition;

			// Token: 0x040003DE RID: 990
			public readonly MinMax heightAddition;

			// Token: 0x040003DF RID: 991
			public readonly MinMax distanceAdditionBack;

			// Token: 0x040003E0 RID: 992
			public readonly MinMax heightAdditionBack;

			// Token: 0x040003E1 RID: 993
			public readonly float pinkReactionGravity;

			// Token: 0x040003E2 RID: 994
			public readonly float velocityAfterSlam;

			// Token: 0x040003E3 RID: 995
			public readonly float gravityAfterSlam;

			// Token: 0x040003E4 RID: 996
			public readonly float goodQuadrantClemencyLeft;

			// Token: 0x040003E5 RID: 997
			public readonly float goodQuadrantClemencyBottom;

			// Token: 0x040003E6 RID: 998
			public readonly string[] pinkShotDelayString;

			// Token: 0x040003E7 RID: 999
			public readonly string[] pinkShotApexHeightString;

			// Token: 0x040003E8 RID: 1000
			public readonly string[] pinkShotTargetString;

			// Token: 0x040003E9 RID: 1001
			public readonly float explosionRadius;

			// Token: 0x040003EA RID: 1002
			public readonly float explosionDuration;

			// Token: 0x040003EB RID: 1003
			public readonly float pinkGravity;
		}

		// Token: 0x020000C1 RID: 193
		public class RegularCannonBall : AbstractLevelPropertyGroup
		{
			// Token: 0x06000242 RID: 578 RVA: 0x00010424 File Offset: 0x0000E824
			public RegularCannonBall(string[] cannonDelayString, string[] cannonApexHeightString, string[] cannonTargetString, float cannonGravity)
			{
				this.cannonDelayString = cannonDelayString;
				this.cannonApexHeightString = cannonApexHeightString;
				this.cannonTargetString = cannonTargetString;
				this.cannonGravity = cannonGravity;
			}

			// Token: 0x040003EC RID: 1004
			public readonly string[] cannonDelayString;

			// Token: 0x040003ED RID: 1005
			public readonly string[] cannonApexHeightString;

			// Token: 0x040003EE RID: 1006
			public readonly string[] cannonTargetString;

			// Token: 0x040003EF RID: 1007
			public readonly float cannonGravity;
		}

		// Token: 0x020000C2 RID: 194
		public class StraightShooters : AbstractLevelPropertyGroup
		{
			// Token: 0x06000243 RID: 579 RVA: 0x00010449 File Offset: 0x0000E849
			public StraightShooters(bool straightShotOn, string[] straightShotDelayString, string[] straightShotSeqString, float straightShotBulletSpeed)
			{
				this.straightShotOn = straightShotOn;
				this.straightShotDelayString = straightShotDelayString;
				this.straightShotSeqString = straightShotSeqString;
				this.straightShotBulletSpeed = straightShotBulletSpeed;
			}

			// Token: 0x040003F0 RID: 1008
			public readonly bool straightShotOn;

			// Token: 0x040003F1 RID: 1009
			public readonly string[] straightShotDelayString;

			// Token: 0x040003F2 RID: 1010
			public readonly string[] straightShotSeqString;

			// Token: 0x040003F3 RID: 1011
			public readonly float straightShotBulletSpeed;
		}
	}

	// Token: 0x020000C4 RID: 196
	public class Clown : AbstractLevelProperties<LevelProperties.Clown.State, LevelProperties.Clown.Pattern, LevelProperties.Clown.States>
	{
		// Token: 0x06000250 RID: 592 RVA: 0x0001046E File Offset: 0x0000E86E
		public Clown(int hp, Level.GoalTimes goalTimes, LevelProperties.Clown.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000251 RID: 593 RVA: 0x0001047C File Offset: 0x0000E87C
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1200f;
				timeline.events.Add(new Level.Timeline.Event("HeliumTank", 0.7f));
				timeline.events.Add(new Level.Timeline.Event("CarouselHorse", 0.35f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1550f;
				timeline.events.Add(new Level.Timeline.Event("HeliumTank", 0.83f));
				timeline.events.Add(new Level.Timeline.Event("CarouselHorse", 0.63f));
				timeline.events.Add(new Level.Timeline.Event("Swing", 0.45f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1850f;
				timeline.events.Add(new Level.Timeline.Event("HeliumTank", 0.83f));
				timeline.events.Add(new Level.Timeline.Event("CarouselHorse", 0.63f));
				timeline.events.Add(new Level.Timeline.Event("Swing", 0.45f));
				break;
			}
			return timeline;
		}

		// Token: 0x06000252 RID: 594 RVA: 0x000105A7 File Offset: 0x0000E9A7
		public static LevelProperties.Clown.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.Clown.Pattern.Default;
				}
			}
			Debug.LogError("Pattern Clown.Pattern for  " + id + " not found.", null);
			return LevelProperties.Clown.Pattern.Uninitialized;
		}

		// Token: 0x06000253 RID: 595 RVA: 0x000105E8 File Offset: 0x0000E9E8
		public static LevelProperties.Clown GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Clown.State> list = new List<LevelProperties.Clown.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1850;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Clown.State(10f, new LevelProperties.Clown.Pattern[][]
						{
							new LevelProperties.Clown.Pattern[1]
						}, LevelProperties.Clown.States.Main, new LevelProperties.Clown.BumperCar(525f, 1400f, new string[]
						{
							"3.3,3.6,2.2,3.5,3,1.5,3.5,2,3.8,2,1.5"
						}, 0.6f, new string[]
						{
							"F,F,B,B,F,B,F,B,B,F,B,F,F,B,F,B"
						}, 0.8f, 0.3f), new LevelProperties.Clown.Duck(new MinMax(120f, 160f), new string[]
						{
							"0,10,20,30,40"
						}, 210f, 420f, new string[]
						{
							"R,B,R,R,B,R,P,B",
							"R,R,B,P,R,B,R,B"
						}, 2.6f, 12f, 350f), new LevelProperties.Clown.HeliumClown(true, 7f, 300f, new string[]
						{
							"2.5,2.5,2.8,2.5,2.5,2.5,2.8",
							"2.5,2.5,2.6,2.7,2.5,2.5,2.8"
						}, new string[]
						{
							"R,R,R,R,P,R,R,R,R,R,P,R,R,R,P",
							"R,R,R,R,P,R,R,R,R,P,R,R,R,R,R,P",
							"R,R,R,R,R,R,P,R,R,R,R,P,R,R,R,R,R,P"
						}, new string[]
						{
							"1-2-3,3-4,4-5-6,1-3,3-4,4-6",
							"2-3,4-5,3-4,1-2,5-6,2-3,4-5,3-4,1-2,5-6,1-3-4-6",
							"1-2,5-6,2-3,4-5,3-4,1-2,5-6,2-3,4-5,3-4,1-3-4-6",
							"3-6,4-1,2-5,3-6,4-1,2-5,1-3-4-6",
							"4-1,3-6,5-2,4-1,3-6,5-2,1-3-4-6",
							"1-6,2-5,3-4,1-6,2-5,3-4,1-3-4-6",
							"3-4,2-5,1-6,3-4,2-5,1-6,1-3-4-6"
						}, 200f, 15f, true), new LevelProperties.Clown.Horse(true, 400f, new string[]
						{
							"W,D,D,W,D,W,W,D"
						}, 200f, 3, 320f, 30f, 4f, 0.3f, 3f, 2f, new string[]
						{
							"105,115,110",
							"100,110,105"
						}, new string[]
						{
							"P,R,R",
							"R,R,R",
							"R,R,P",
							"R,R,R"
						}, 1f, 1600f, 0.9f, new MinMax(0.1f, 0.2f), new MinMax(0.1f, 0.2f), 1000f, 2.5f, new string[]
						{
							"75"
						}, new string[]
						{
							"400-800-900-1000-1100-1200-1300",
							"400-500-600-700-800-900-1300",
							"400-500-600-700-800-1200-1300",
							"400-500-900-1000-1100-1200-1300",
							"400-500-600-700-1100-1200-1300",
							"400-800-900-1000-1100-1200-1300",
							"400-500-600-700-800-1200-1300",
							"400-500-600-700-800-900-1300",
							"400-800-900-1000-1100-1200-1300",
							"400-500-600-1000-1100-1200-1300"
						}, 1f, 1f, 0.5f), new LevelProperties.Clown.Coaster(new MinMax(2f, 3f), 1f, 450f, 1.25f, new MinMax(0.8f, 1.6f), new string[]
						{
							"E,F,E,E,F,E,E,F,E"
						}, 1f), new LevelProperties.Clown.Swing(360f, 200f, 0.5f, 0.7f, false, 500f, new MinMax(1.5f, 3.5f), 13f, 800f, new string[]
						{
							"0,200,1000,1200",
							"100-500-1100",
							"1200,800,400,0",
							"0,150,1050,1200",
							"50,500,700,1150",
							"1100-700-100",
							"1150-775-375-50",
							"0,400,800,1200",
							"0,150,1050,1200"
						}, 0.8f, 0f)));
						list.Add(new LevelProperties.Clown.State(0.83f, new LevelProperties.Clown.Pattern[][]
						{
							new LevelProperties.Clown.Pattern[0]
						}, LevelProperties.Clown.States.HeliumTank, new LevelProperties.Clown.BumperCar(525f, 1400f, new string[]
						{
							"3.3,3.6,2.2,3.5,3,1.5,3.5,2,3.8,2,1.5"
						}, 0.6f, new string[]
						{
							"F,F,B,B,F,B,F,B,B,F,B,F,F,B,F,B"
						}, 0.8f, 0.3f), new LevelProperties.Clown.Duck(new MinMax(120f, 160f), new string[]
						{
							"0,10,20,30,40"
						}, 210f, 420f, new string[]
						{
							"R,B,R,R,B,R,P,B",
							"R,R,B,P,R,B,R,B"
						}, 2.6f, 12f, 350f), new LevelProperties.Clown.HeliumClown(true, 7f, 300f, new string[]
						{
							"2.5,2.5,2.8,2.5,2.5,2.5,2.8",
							"2.5,2.5,2.6,2.7,2.5,2.5,2.8"
						}, new string[]
						{
							"R,R,R,R,P,R,R,R,R,R,P,R,R,R,P",
							"R,R,R,R,P,R,R,R,R,P,R,R,R,R,R,P",
							"R,R,R,R,R,R,P,R,R,R,R,P,R,R,R,R,R,P"
						}, new string[]
						{
							"1-2-3,3-4,4-5-6,1-3,3-4,4-6",
							"2-3,4-5,3-4,1-2,5-6,2-3,4-5,3-4,1-2,5-6,1-3-4-6",
							"1-2,5-6,2-3,4-5,3-4,1-2,5-6,2-3,4-5,3-4,1-3-4-6",
							"3-6,4-1,2-5,3-6,4-1,2-5,1-3-4-6",
							"4-1,3-6,5-2,4-1,3-6,5-2,1-3-4-6",
							"1-6,2-5,3-4,1-6,2-5,3-4,1-3-4-6",
							"3-4,2-5,1-6,3-4,2-5,1-6,1-3-4-6"
						}, 200f, 15f, true), new LevelProperties.Clown.Horse(true, 400f, new string[]
						{
							"W,D,D,W,D,W,W,D"
						}, 200f, 3, 320f, 30f, 4f, 0.3f, 3f, 2f, new string[]
						{
							"105,115,110",
							"100,110,105"
						}, new string[]
						{
							"P,R,R",
							"R,R,R",
							"R,R,P",
							"R,R,R"
						}, 1f, 1600f, 0.9f, new MinMax(0.1f, 0.2f), new MinMax(0.1f, 0.2f), 1000f, 2.5f, new string[]
						{
							"75"
						}, new string[]
						{
							"400-800-900-1000-1100-1200-1300",
							"400-500-600-700-800-900-1300",
							"400-500-600-700-800-1200-1300",
							"400-500-900-1000-1100-1200-1300",
							"400-500-600-700-1100-1200-1300",
							"400-800-900-1000-1100-1200-1300",
							"400-500-600-700-800-1200-1300",
							"400-500-600-700-800-900-1300",
							"400-800-900-1000-1100-1200-1300",
							"400-500-600-1000-1100-1200-1300"
						}, 1f, 1f, 0.5f), new LevelProperties.Clown.Coaster(new MinMax(2f, 3f), 1f, 450f, 1.25f, new MinMax(0.8f, 1.6f), new string[]
						{
							"E,F,E,E,F,E,E,F,E"
						}, 1f), new LevelProperties.Clown.Swing(360f, 200f, 0.5f, 0.7f, false, 500f, new MinMax(1.5f, 3.5f), 13f, 800f, new string[]
						{
							"0,200,1000,1200",
							"100-500-1100",
							"1200,800,400,0",
							"0,150,1050,1200",
							"50,500,700,1150",
							"1100-700-100",
							"1150-775-375-50",
							"0,400,800,1200",
							"0,150,1050,1200"
						}, 0.8f, 0f)));
						list.Add(new LevelProperties.Clown.State(0.63f, new LevelProperties.Clown.Pattern[][]
						{
							new LevelProperties.Clown.Pattern[0]
						}, LevelProperties.Clown.States.CarouselHorse, new LevelProperties.Clown.BumperCar(525f, 1400f, new string[]
						{
							"3.3,3.6,2.2,3.5,3,1.5,3.5,2,3.8,2,1.5"
						}, 0.6f, new string[]
						{
							"F,F,B,B,F,B,F,B,B,F,B,F,F,B,F,B"
						}, 0.8f, 0.3f), new LevelProperties.Clown.Duck(new MinMax(120f, 160f), new string[]
						{
							"0,10,20,30,40"
						}, 210f, 420f, new string[]
						{
							"R,B,R,R,B,R,P,B",
							"R,R,B,P,R,B,R,B"
						}, 2.6f, 12f, 350f), new LevelProperties.Clown.HeliumClown(true, 7f, 300f, new string[]
						{
							"2.5,2.5,2.8,2.5,2.5,2.5,2.8",
							"2.5,2.5,2.6,2.7,2.5,2.5,2.8"
						}, new string[]
						{
							"R,R,R,R,P,R,R,R,R,R,P,R,R,R,P",
							"R,R,R,R,P,R,R,R,R,P,R,R,R,R,R,P",
							"R,R,R,R,R,R,P,R,R,R,R,P,R,R,R,R,R,P"
						}, new string[]
						{
							"1-2-3,3-4,4-5-6,1-3,3-4,4-6",
							"2-3,4-5,3-4,1-2,5-6,2-3,4-5,3-4,1-2,5-6,1-3-4-6",
							"1-2,5-6,2-3,4-5,3-4,1-2,5-6,2-3,4-5,3-4,1-3-4-6",
							"3-6,4-1,2-5,3-6,4-1,2-5,1-3-4-6",
							"4-1,3-6,5-2,4-1,3-6,5-2,1-3-4-6",
							"1-6,2-5,3-4,1-6,2-5,3-4,1-3-4-6",
							"3-4,2-5,1-6,3-4,2-5,1-6,1-3-4-6"
						}, 200f, 15f, true), new LevelProperties.Clown.Horse(true, 400f, new string[]
						{
							"W,D,D,W,D,W,W,D"
						}, 200f, 3, 320f, 30f, 4f, 0.3f, 3f, 2f, new string[]
						{
							"105,115,110",
							"100,110,105"
						}, new string[]
						{
							"P,R,R",
							"R,R,R",
							"R,R,P",
							"R,R,R"
						}, 1f, 1600f, 0.9f, new MinMax(0.1f, 0.2f), new MinMax(0.1f, 0.2f), 1000f, 2.5f, new string[]
						{
							"75"
						}, new string[]
						{
							"400-800-900-1000-1100-1200-1300",
							"400-500-600-700-800-900-1300",
							"400-500-600-700-800-1200-1300",
							"400-500-900-1000-1100-1200-1300",
							"400-500-600-700-1100-1200-1300",
							"400-800-900-1000-1100-1200-1300",
							"400-500-600-700-800-1200-1300",
							"400-500-600-700-800-900-1300",
							"400-800-900-1000-1100-1200-1300",
							"400-500-600-1000-1100-1200-1300"
						}, 1f, 1f, 0.5f), new LevelProperties.Clown.Coaster(new MinMax(1.5f, 2.5f), 1f, 500f, 1.75f, new MinMax(1f, 1.6f), new string[]
						{
							"E,F,E,E,F,E,E,F,E"
						}, 0.8f), new LevelProperties.Clown.Swing(360f, 200f, 0.5f, 0.7f, false, 500f, new MinMax(1.5f, 3.5f), 13f, 800f, new string[]
						{
							"0,200,1000,1200",
							"100-500-1100",
							"1200,800,400,0",
							"0,150,1050,1200",
							"50,500,700,1150",
							"1100-700-100",
							"1150-775-375-50",
							"0,400,800,1200",
							"0,150,1050,1200"
						}, 0.8f, 0f)));
						list.Add(new LevelProperties.Clown.State(0.45f, new LevelProperties.Clown.Pattern[][]
						{
							new LevelProperties.Clown.Pattern[0]
						}, LevelProperties.Clown.States.Swing, new LevelProperties.Clown.BumperCar(525f, 1400f, new string[]
						{
							"3.3,3.6,2.2,3.5,3,1.5,3.5,2,3.8,2,1.5"
						}, 0.6f, new string[]
						{
							"F,F,B,B,F,B,F,B,B,F,B,F,F,B,F,B"
						}, 0.8f, 0.3f), new LevelProperties.Clown.Duck(new MinMax(120f, 160f), new string[]
						{
							"0,10,20,30,40"
						}, 210f, 420f, new string[]
						{
							"R,B,R,R,B,R,P,B",
							"R,R,B,P,R,B,R,B"
						}, 2.6f, 12f, 350f), new LevelProperties.Clown.HeliumClown(true, 7f, 300f, new string[]
						{
							"2.5,2.5,2.8,2.5,2.5,2.5,2.8",
							"2.5,2.5,2.6,2.7,2.5,2.5,2.8"
						}, new string[]
						{
							"R,R,R,R,P,R,R,R,R,R,P,R,R,R,P",
							"R,R,R,R,P,R,R,R,R,P,R,R,R,R,R,P",
							"R,R,R,R,R,R,P,R,R,R,R,P,R,R,R,R,R,P"
						}, new string[]
						{
							"1-2-3,3-4,4-5-6,1-3,3-4,4-6",
							"2-3,4-5,3-4,1-2,5-6,2-3,4-5,3-4,1-2,5-6,1-3-4-6",
							"1-2,5-6,2-3,4-5,3-4,1-2,5-6,2-3,4-5,3-4,1-3-4-6",
							"3-6,4-1,2-5,3-6,4-1,2-5,1-3-4-6",
							"4-1,3-6,5-2,4-1,3-6,5-2,1-3-4-6",
							"1-6,2-5,3-4,1-6,2-5,3-4,1-3-4-6",
							"3-4,2-5,1-6,3-4,2-5,1-6,1-3-4-6"
						}, 200f, 15f, true), new LevelProperties.Clown.Horse(true, 400f, new string[]
						{
							"W,D,D,W,D,W,W,D"
						}, 200f, 3, 320f, 30f, 4f, 0.3f, 3f, 2f, new string[]
						{
							"105,115,110",
							"100,110,105"
						}, new string[]
						{
							"P,R,R",
							"R,R,R",
							"R,R,P",
							"R,R,R"
						}, 1f, 1600f, 0.9f, new MinMax(0.1f, 0.2f), new MinMax(0.1f, 0.2f), 1000f, 2.5f, new string[]
						{
							"75"
						}, new string[]
						{
							"400-800-900-1000-1100-1200-1300",
							"400-500-600-700-800-900-1300",
							"400-500-600-700-800-1200-1300",
							"400-500-900-1000-1100-1200-1300",
							"400-500-600-700-1100-1200-1300",
							"400-800-900-1000-1100-1200-1300",
							"400-500-600-700-800-1200-1300",
							"400-500-600-700-800-900-1300",
							"400-800-900-1000-1100-1200-1300",
							"400-500-600-1000-1100-1200-1300"
						}, 1f, 1f, 0.5f), new LevelProperties.Clown.Coaster(new MinMax(0.01f, 0.01f), 1f, 1200f, 2.25f, new MinMax(6f, 8f), new string[]
						{
							"F,E,F,E,F,E,F,E,F"
						}, 0.3f), new LevelProperties.Clown.Swing(360f, 200f, 0.5f, 0.7f, false, 500f, new MinMax(1.5f, 3.5f), 13f, 800f, new string[]
						{
							"0,200,1000,1200",
							"100-500-1100",
							"1200,800,400,0",
							"0,150,1050,1200",
							"50,500,700,1150",
							"1100-700-100",
							"1150-775-375-50",
							"0,400,800,1200",
							"0,150,1050,1200"
						}, 0.8f, 0f)));
					}
				}
				else
				{
					hp = 1550;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Clown.State(10f, new LevelProperties.Clown.Pattern[][]
					{
						new LevelProperties.Clown.Pattern[1]
					}, LevelProperties.Clown.States.Main, new LevelProperties.Clown.BumperCar(500f, 1300f, new string[]
					{
						"3.3,2.4,3.5,3,1.5,3.5,3,3.8,2,1.5"
					}, 0.6f, new string[]
					{
						"F,F,B,B,F,B,F,B,B,F,B,F,F,B,F,B"
					}, 1f, 0.3f), new LevelProperties.Clown.Duck(new MinMax(110f, 160f), new string[]
					{
						"0,10,20,30,40,50"
					}, 210f, 420f, new string[]
					{
						"R,B,R,R,R,B,R,P",
						"R,R,B,P,R,R,B,R"
					}, 2.8f, 12f, 350f), new LevelProperties.Clown.HeliumClown(true, 5.3f, 300f, new string[]
					{
						"0.7,1,0.9,2,1.4,0.8,1.3,1.5,0.9,1.4,1.2"
					}, new string[]
					{
						"R,R,R,R,P,R,R,R,R,R,P"
					}, new string[]
					{
						"1,3,5,6,4,3,1,6,2,4,1,5,6,2,1,3,6,1,4,2,6,4,3,5,2",
						"1,2,4,3,5,6,3,4,1,3,2,5,6,1,3,4,2,1,3,5,2,6"
					}, 200f, 15f, true), new LevelProperties.Clown.Horse(true, 375f, new string[]
					{
						"W,D,D,W,D,W,W,D"
					}, 200f, 2, 320f, 30f, 4f, 0.3f, 3f, 2f, new string[]
					{
						"105,115,110",
						"100,110,105"
					}, new string[]
					{
						"P,R",
						"R,R",
						"R,P",
						"R,R"
					}, 1f, 1600f, 1.1f, new MinMax(0.1f, 0.2f), new MinMax(0.1f, 0.2f), 1000f, 2.5f, new string[]
					{
						"75"
					}, new string[]
					{
						"400-800-900-1000-1100-1200-1300",
						"400-500-600-700-800-1200-1300",
						"400-500-600-1000-1100-1200-1300",
						"400-500-600-700-800-900-1300",
						"400-500-900-1000-1100-1200-1300",
						"400-500-600-700-1100-1200-1300",
						"400-500-600-700-800-900-1300",
						"400-800-900-1000-1100-1200-1300",
						"400-500-600-700-1100-1200-1300"
					}, 1f, 1f, 0.5f), new LevelProperties.Clown.Coaster(new MinMax(4f, 6f), 1f, 425f, 1.25f, new MinMax(1f, 2f), new string[]
					{
						"E,E,F,E,E,E,F,E,E"
					}, 1f), new LevelProperties.Clown.Swing(300f, 200f, 0.5f, 0.7f, false, 500f, new MinMax(2.4f, 4.8f), 13f, 700f, new string[]
					{
						"0,400,800,1200",
						"1150-775-375-50",
						"100-500-1100",
						"0,150,1050,1200",
						"50,500,700,1150",
						"1200,800,400,0",
						"1100-700-100",
						"0,200,1000,1200"
					}, 0.8f, 0.01f)));
					list.Add(new LevelProperties.Clown.State(0.83f, new LevelProperties.Clown.Pattern[][]
					{
						new LevelProperties.Clown.Pattern[0]
					}, LevelProperties.Clown.States.HeliumTank, new LevelProperties.Clown.BumperCar(500f, 1300f, new string[]
					{
						"3.3,2.4,3.5,3,1.5,3.5,3,3.8,2,1.5"
					}, 0.6f, new string[]
					{
						"F,F,B,B,F,B,F,B,B,F,B,F,F,B,F,B"
					}, 1f, 0.3f), new LevelProperties.Clown.Duck(new MinMax(110f, 160f), new string[]
					{
						"0,10,20,30,40,50"
					}, 210f, 420f, new string[]
					{
						"R,B,R,R,R,B,R,P",
						"R,R,B,P,R,R,B,R"
					}, 2.8f, 12f, 350f), new LevelProperties.Clown.HeliumClown(true, 5.3f, 300f, new string[]
					{
						"0.7,1,0.9,2,1.4,0.8,1.3,1.5,0.9,1.4,1.2"
					}, new string[]
					{
						"R,R,R,R,P,R,R,R,R,R,P"
					}, new string[]
					{
						"1,3,5,6,4,3,1,6,2,4,1,5,6,2,1,3,6,1,4,2,6,4,3,5,2",
						"1,2,4,3,5,6,3,4,1,3,2,5,6,1,3,4,2,1,3,5,2,6"
					}, 200f, 15f, true), new LevelProperties.Clown.Horse(true, 375f, new string[]
					{
						"W,D,D,W,D,W,W,D"
					}, 200f, 2, 320f, 30f, 4f, 0.3f, 3f, 2f, new string[]
					{
						"105,115,110",
						"100,110,105"
					}, new string[]
					{
						"P,R",
						"R,R",
						"R,P",
						"R,R"
					}, 1f, 1600f, 1.1f, new MinMax(0.1f, 0.2f), new MinMax(0.1f, 0.2f), 1000f, 2.5f, new string[]
					{
						"75"
					}, new string[]
					{
						"400-800-900-1000-1100-1200-1300",
						"400-500-600-700-800-1200-1300",
						"400-500-600-1000-1100-1200-1300",
						"400-500-600-700-800-900-1300",
						"400-500-900-1000-1100-1200-1300",
						"400-500-600-700-1100-1200-1300",
						"400-500-600-700-800-900-1300",
						"400-800-900-1000-1100-1200-1300",
						"400-500-600-700-1100-1200-1300"
					}, 1f, 1f, 0.5f), new LevelProperties.Clown.Coaster(new MinMax(4f, 6f), 1f, 425f, 1.25f, new MinMax(1f, 2f), new string[]
					{
						"E,E,F,E,E,E,F,E,E"
					}, 1f), new LevelProperties.Clown.Swing(300f, 200f, 0.5f, 0.7f, false, 500f, new MinMax(2.4f, 4.8f), 13f, 700f, new string[]
					{
						"0,400,800,1200",
						"1150-775-375-50",
						"100-500-1100",
						"0,150,1050,1200",
						"50,500,700,1150",
						"1200,800,400,0",
						"1100-700-100",
						"0,200,1000,1200"
					}, 0.8f, 0.01f)));
					list.Add(new LevelProperties.Clown.State(0.63f, new LevelProperties.Clown.Pattern[][]
					{
						new LevelProperties.Clown.Pattern[0]
					}, LevelProperties.Clown.States.CarouselHorse, new LevelProperties.Clown.BumperCar(500f, 1300f, new string[]
					{
						"3.3,2.4,3.5,3,1.5,3.5,3,3.8,2,1.5"
					}, 0.6f, new string[]
					{
						"F,F,B,B,F,B,F,B,B,F,B,F,F,B,F,B"
					}, 1f, 0.3f), new LevelProperties.Clown.Duck(new MinMax(110f, 160f), new string[]
					{
						"0,10,20,30,40,50"
					}, 210f, 420f, new string[]
					{
						"R,B,R,R,R,B,R,P",
						"R,R,B,P,R,R,B,R"
					}, 2.8f, 12f, 350f), new LevelProperties.Clown.HeliumClown(true, 5.3f, 300f, new string[]
					{
						"0.7,1,0.9,2,1.4,0.8,1.3,1.5,0.9,1.4,1.2"
					}, new string[]
					{
						"R,R,R,R,P,R,R,R,R,R,P"
					}, new string[]
					{
						"1,3,5,6,4,3,1,6,2,4,1,5,6,2,1,3,6,1,4,2,6,4,3,5,2",
						"1,2,4,3,5,6,3,4,1,3,2,5,6,1,3,4,2,1,3,5,2,6"
					}, 200f, 15f, true), new LevelProperties.Clown.Horse(true, 375f, new string[]
					{
						"W,D,D,W,D,W,W,D"
					}, 200f, 2, 320f, 30f, 4f, 0.3f, 3f, 2f, new string[]
					{
						"105,115,110",
						"100,110,105"
					}, new string[]
					{
						"P,R",
						"R,R",
						"R,P",
						"R,R"
					}, 1f, 1600f, 1.1f, new MinMax(0.1f, 0.2f), new MinMax(0.1f, 0.2f), 1000f, 2.5f, new string[]
					{
						"75"
					}, new string[]
					{
						"400-800-900-1000-1100-1200-1300",
						"400-500-600-700-800-1200-1300",
						"400-500-600-1000-1100-1200-1300",
						"400-500-600-700-800-900-1300",
						"400-500-900-1000-1100-1200-1300",
						"400-500-600-700-1100-1200-1300",
						"400-500-600-700-800-900-1300",
						"400-800-900-1000-1100-1200-1300",
						"400-500-600-700-1100-1200-1300"
					}, 1f, 1f, 0.5f), new LevelProperties.Clown.Coaster(new MinMax(1.5f, 3f), 1f, 475f, 1.75f, new MinMax(1f, 2f), new string[]
					{
						"E,E,F,E,E,E,F,E,E"
					}, 0.8f), new LevelProperties.Clown.Swing(300f, 200f, 0.5f, 0.7f, false, 500f, new MinMax(2.4f, 4.8f), 13f, 700f, new string[]
					{
						"0,400,800,1200",
						"1150-775-375-50",
						"100-500-1100",
						"0,150,1050,1200",
						"50,500,700,1150",
						"1200,800,400,0",
						"1100-700-100",
						"0,200,1000,1200"
					}, 0.8f, 0.01f)));
					list.Add(new LevelProperties.Clown.State(0.45f, new LevelProperties.Clown.Pattern[][]
					{
						new LevelProperties.Clown.Pattern[0]
					}, LevelProperties.Clown.States.Swing, new LevelProperties.Clown.BumperCar(500f, 1300f, new string[]
					{
						"3.3,2.4,3.5,3,1.5,3.5,3,3.8,2,1.5"
					}, 0.6f, new string[]
					{
						"F,F,B,B,F,B,F,B,B,F,B,F,F,B,F,B"
					}, 1f, 0.3f), new LevelProperties.Clown.Duck(new MinMax(110f, 160f), new string[]
					{
						"0,10,20,30,40,50"
					}, 210f, 420f, new string[]
					{
						"R,B,R,R,R,B,R,P",
						"R,R,B,P,R,R,B,R"
					}, 2.8f, 12f, 350f), new LevelProperties.Clown.HeliumClown(true, 5.3f, 300f, new string[]
					{
						"0.7,1,0.9,2,1.4,0.8,1.3,1.5,0.9,1.4,1.2"
					}, new string[]
					{
						"R,R,R,R,P,R,R,R,R,R,P"
					}, new string[]
					{
						"1,3,5,6,4,3,1,6,2,4,1,5,6,2,1,3,6,1,4,2,6,4,3,5,2",
						"1,2,4,3,5,6,3,4,1,3,2,5,6,1,3,4,2,1,3,5,2,6"
					}, 200f, 15f, true), new LevelProperties.Clown.Horse(true, 375f, new string[]
					{
						"W,D,D,W,D,W,W,D"
					}, 200f, 2, 320f, 30f, 4f, 0.3f, 3f, 2f, new string[]
					{
						"105,115,110",
						"100,110,105"
					}, new string[]
					{
						"P,R",
						"R,R",
						"R,P",
						"R,R"
					}, 1f, 1600f, 1.1f, new MinMax(0.1f, 0.2f), new MinMax(0.1f, 0.2f), 1000f, 2.5f, new string[]
					{
						"75"
					}, new string[]
					{
						"400-800-900-1000-1100-1200-1300",
						"400-500-600-700-800-1200-1300",
						"400-500-600-1000-1100-1200-1300",
						"400-500-600-700-800-900-1300",
						"400-500-900-1000-1100-1200-1300",
						"400-500-600-700-1100-1200-1300",
						"400-500-600-700-800-900-1300",
						"400-800-900-1000-1100-1200-1300",
						"400-500-600-700-1100-1200-1300"
					}, 1f, 1f, 0.5f), new LevelProperties.Clown.Coaster(new MinMax(0.01f, 0.1f), 1f, 1050f, 2.25f, new MinMax(6f, 8f), new string[]
					{
						"F,E,F,E,F,E,F,E,F"
					}, 0.3f), new LevelProperties.Clown.Swing(300f, 200f, 0.5f, 0.7f, false, 500f, new MinMax(2.4f, 4.8f), 13f, 700f, new string[]
					{
						"0,400,800,1200",
						"1150-775-375-50",
						"100-500-1100",
						"0,150,1050,1200",
						"50,500,700,1150",
						"1200,800,400,0",
						"1100-700-100",
						"0,200,1000,1200"
					}, 0.8f, 0.01f)));
				}
			}
			else
			{
				hp = 1200;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Clown.State(10f, new LevelProperties.Clown.Pattern[][]
				{
					new LevelProperties.Clown.Pattern[1]
				}, LevelProperties.Clown.States.Main, new LevelProperties.Clown.BumperCar(475f, 1200f, new string[]
				{
					"3.3,1.8,3.5,3,1.5,2.7,3,2,1.5"
				}, 0.6f, new string[]
				{
					"F,F,B,B,F,B,F,B,B,F,B,F,F,B,F,B"
				}, 1f, 0.3f), new LevelProperties.Clown.Duck(new MinMax(90f, 140f), new string[]
				{
					"0,10,20,30,40,50"
				}, 210f, 420f, new string[]
				{
					"R,R,P,R,R,R,R,P"
				}, 3f, 10f, 350f), new LevelProperties.Clown.HeliumClown(false, 10f, 430f, new string[]
				{
					"1,1.3,1,1.5,0.8,0.9,1.6,1.8,1.5,1,1.7,1.8"
				}, new string[]
				{
					"R,R,R,R,P,R,R,R,R,R,P"
				}, new string[]
				{
					"6,4,3,1,5,2",
					"1,3,4,6,2,5",
					"1,2,3,4,5,6",
					"1,3,2,5,3,4",
					"3,4,5,2,6,1",
					"6,5,4,3,2,1"
				}, 200f, 15f, true), new LevelProperties.Clown.Horse(false, 450f, new string[]
				{
					"W,D,D,W,D,W,W,D"
				}, 200f, 1, 350f, 30f, 4.6f, 0.3f, 1.4f, 3f, new string[]
				{
					"205"
				}, new string[]
				{
					"P",
					"R",
					"R",
					"P",
					"R"
				}, 1f, 1200f, 1f, new MinMax(0.1f, 0.2f), new MinMax(0.1f, 0.2f), 800f, 2f, new string[]
				{
					"235"
				}, new string[]
				{
					"400-500-800-900-1000-1100-1200-1300",
					"400-500-600-700-800-900-1200-1300",
					"400-700-800-900-1000-1100-1200-1300",
					"400-500-600-700-1000-1100-1200-1300",
					"400-500-600-900-1000-1100-1200-1300",
					"400-500-600-700-800-900-1000-1300",
					"400-500-800-900-1000-1100-1200-1300",
					"400-500-600-700-800-1100-1200-1300"
				}, 0.5f, 1f, 0.3f), new LevelProperties.Clown.Coaster(new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], 0f), new LevelProperties.Clown.Swing(0f, 0f, 0f, 0f, false, 0f, new MinMax(0f, 1f), 0f, 0f, new string[0], 0f, 0f)));
				list.Add(new LevelProperties.Clown.State(0.7f, new LevelProperties.Clown.Pattern[][]
				{
					new LevelProperties.Clown.Pattern[0]
				}, LevelProperties.Clown.States.HeliumTank, new LevelProperties.Clown.BumperCar(475f, 1200f, new string[]
				{
					"3.3,1.8,3.5,3,1.5,2.7,3,2,1.5"
				}, 0.6f, new string[]
				{
					"F,F,B,B,F,B,F,B,B,F,B,F,F,B,F,B"
				}, 1f, 0.3f), new LevelProperties.Clown.Duck(new MinMax(90f, 140f), new string[]
				{
					"0,10,20,30,40,50"
				}, 210f, 420f, new string[]
				{
					"R,R,P,R,R,R,R,P"
				}, 3f, 10f, 350f), new LevelProperties.Clown.HeliumClown(false, 10f, 430f, new string[]
				{
					"1,1.3,1,1.5,0.8,0.9,1.6,1.8,1.5,1,1.7,1.8"
				}, new string[]
				{
					"R,R,R,R,P,R,R,R,R,R,P"
				}, new string[]
				{
					"6,4,3,1,5,2",
					"1,3,4,6,2,5",
					"1,2,3,4,5,6",
					"1,3,2,5,3,4",
					"3,4,5,2,6,1",
					"6,5,4,3,2,1"
				}, 200f, 15f, true), new LevelProperties.Clown.Horse(false, 450f, new string[]
				{
					"W,D,D,W,D,W,W,D"
				}, 200f, 1, 350f, 30f, 4.6f, 0.3f, 1.4f, 3f, new string[]
				{
					"205"
				}, new string[]
				{
					"P",
					"R",
					"R",
					"P",
					"R"
				}, 1f, 1200f, 1f, new MinMax(0.1f, 0.2f), new MinMax(0.1f, 0.2f), 800f, 2f, new string[]
				{
					"235"
				}, new string[]
				{
					"400-500-800-900-1000-1100-1200-1300",
					"400-500-600-700-800-900-1200-1300",
					"400-700-800-900-1000-1100-1200-1300",
					"400-500-600-700-1000-1100-1200-1300",
					"400-500-600-900-1000-1100-1200-1300",
					"400-500-600-700-800-900-1000-1300",
					"400-500-800-900-1000-1100-1200-1300",
					"400-500-600-700-800-1100-1200-1300"
				}, 0.5f, 1f, 0.3f), new LevelProperties.Clown.Coaster(new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], 0f), new LevelProperties.Clown.Swing(0f, 0f, 0f, 0f, false, 0f, new MinMax(0f, 1f), 0f, 0f, new string[0], 0f, 0f)));
				list.Add(new LevelProperties.Clown.State(0.35f, new LevelProperties.Clown.Pattern[][]
				{
					new LevelProperties.Clown.Pattern[0]
				}, LevelProperties.Clown.States.CarouselHorse, new LevelProperties.Clown.BumperCar(475f, 1200f, new string[]
				{
					"3.3,1.8,3.5,3,1.5,2.7,3,2,1.5"
				}, 0.6f, new string[]
				{
					"F,F,B,B,F,B,F,B,B,F,B,F,F,B,F,B"
				}, 1f, 0.3f), new LevelProperties.Clown.Duck(new MinMax(90f, 140f), new string[]
				{
					"0,10,20,30,40,50"
				}, 210f, 420f, new string[]
				{
					"R,R,P,R,R,R,R,P"
				}, 3f, 10f, 350f), new LevelProperties.Clown.HeliumClown(false, 10f, 430f, new string[]
				{
					"1,1.3,1,1.5,0.8,0.9,1.6,1.8,1.5,1,1.7,1.8"
				}, new string[]
				{
					"R,R,R,R,P,R,R,R,R,R,P"
				}, new string[]
				{
					"6,4,3,1,5,2",
					"1,3,4,6,2,5",
					"1,2,3,4,5,6",
					"1,3,2,5,3,4",
					"3,4,5,2,6,1",
					"6,5,4,3,2,1"
				}, 200f, 15f, true), new LevelProperties.Clown.Horse(false, 450f, new string[]
				{
					"W,D,D,W,D,W,W,D"
				}, 200f, 1, 350f, 30f, 4.6f, 0.3f, 1.4f, 3f, new string[]
				{
					"205"
				}, new string[]
				{
					"P",
					"R",
					"R",
					"P",
					"R"
				}, 1f, 1200f, 1f, new MinMax(0.1f, 0.2f), new MinMax(0.1f, 0.2f), 800f, 2f, new string[]
				{
					"235"
				}, new string[]
				{
					"400-500-800-900-1000-1100-1200-1300",
					"400-500-600-700-800-900-1200-1300",
					"400-700-800-900-1000-1100-1200-1300",
					"400-500-600-700-1000-1100-1200-1300",
					"400-500-600-900-1000-1100-1200-1300",
					"400-500-600-700-800-900-1000-1300",
					"400-500-800-900-1000-1100-1200-1300",
					"400-500-600-700-800-1100-1200-1300"
				}, 0.5f, 1f, 0.3f), new LevelProperties.Clown.Coaster(new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], 0f), new LevelProperties.Clown.Swing(0f, 0f, 0f, 0f, false, 0f, new MinMax(0f, 1f), 0f, 0f, new string[0], 0f, 0f)));
			}
			return new LevelProperties.Clown(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020000C5 RID: 197
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000062 RID: 98
			// (get) Token: 0x06000255 RID: 597 RVA: 0x000126D5 File Offset: 0x00010AD5
			// (set) Token: 0x06000256 RID: 598 RVA: 0x000126DD File Offset: 0x00010ADD
			private protected LevelProperties.Clown properties { protected get; private set; }

			// Token: 0x06000257 RID: 599 RVA: 0x000126E6 File Offset: 0x00010AE6
			public virtual void LevelInit(LevelProperties.Clown properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000258 RID: 600 RVA: 0x000126EF File Offset: 0x00010AEF
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020000C6 RID: 198
		public enum States
		{
			// Token: 0x040003FA RID: 1018
			Main,
			// Token: 0x040003FB RID: 1019
			Generic,
			// Token: 0x040003FC RID: 1020
			HeliumTank,
			// Token: 0x040003FD RID: 1021
			CarouselHorse,
			// Token: 0x040003FE RID: 1022
			Swing
		}

		// Token: 0x020000C7 RID: 199
		public enum Pattern
		{
			// Token: 0x04000400 RID: 1024
			Default,
			// Token: 0x04000401 RID: 1025
			Uninitialized
		}

		// Token: 0x020000C8 RID: 200
		public class State : AbstractLevelState<LevelProperties.Clown.Pattern, LevelProperties.Clown.States>
		{
			// Token: 0x06000259 RID: 601 RVA: 0x000126F1 File Offset: 0x00010AF1
			public State(float healthTrigger, LevelProperties.Clown.Pattern[][] patterns, LevelProperties.Clown.States stateName, LevelProperties.Clown.BumperCar bumperCar, LevelProperties.Clown.Duck duck, LevelProperties.Clown.HeliumClown heliumClown, LevelProperties.Clown.Horse horse, LevelProperties.Clown.Coaster coaster, LevelProperties.Clown.Swing swing) : base(healthTrigger, patterns, stateName)
			{
				this.bumperCar = bumperCar;
				this.duck = duck;
				this.heliumClown = heliumClown;
				this.horse = horse;
				this.coaster = coaster;
				this.swing = swing;
			}

			// Token: 0x04000402 RID: 1026
			public readonly LevelProperties.Clown.BumperCar bumperCar;

			// Token: 0x04000403 RID: 1027
			public readonly LevelProperties.Clown.Duck duck;

			// Token: 0x04000404 RID: 1028
			public readonly LevelProperties.Clown.HeliumClown heliumClown;

			// Token: 0x04000405 RID: 1029
			public readonly LevelProperties.Clown.Horse horse;

			// Token: 0x04000406 RID: 1030
			public readonly LevelProperties.Clown.Coaster coaster;

			// Token: 0x04000407 RID: 1031
			public readonly LevelProperties.Clown.Swing swing;
		}

		// Token: 0x020000C9 RID: 201
		public class BumperCar : AbstractLevelPropertyGroup
		{
			// Token: 0x0600025A RID: 602 RVA: 0x0001272C File Offset: 0x00010B2C
			public BumperCar(float movementSpeed, float dashSpeed, string[] attackDelayString, float movementDuration, string[] movementStrings, float bumperDashWarning, float movementDelay)
			{
				this.movementSpeed = movementSpeed;
				this.dashSpeed = dashSpeed;
				this.attackDelayString = attackDelayString;
				this.movementDuration = movementDuration;
				this.movementStrings = movementStrings;
				this.bumperDashWarning = bumperDashWarning;
				this.movementDelay = movementDelay;
			}

			// Token: 0x04000408 RID: 1032
			public readonly float movementSpeed;

			// Token: 0x04000409 RID: 1033
			public readonly float dashSpeed;

			// Token: 0x0400040A RID: 1034
			public readonly string[] attackDelayString;

			// Token: 0x0400040B RID: 1035
			public readonly float movementDuration;

			// Token: 0x0400040C RID: 1036
			public readonly string[] movementStrings;

			// Token: 0x0400040D RID: 1037
			public readonly float bumperDashWarning;

			// Token: 0x0400040E RID: 1038
			public readonly float movementDelay;
		}

		// Token: 0x020000CA RID: 202
		public class Duck : AbstractLevelPropertyGroup
		{
			// Token: 0x0600025B RID: 603 RVA: 0x0001276C File Offset: 0x00010B6C
			public Duck(MinMax duckYHeightRange, string[] duckYStartPercentString, float duckXMovementSpeed, float duckYMovementSpeed, string[] duckTypeString, float duckDelay, float spinDuration, float bombSpeed)
			{
				this.duckYHeightRange = duckYHeightRange;
				this.duckYStartPercentString = duckYStartPercentString;
				this.duckXMovementSpeed = duckXMovementSpeed;
				this.duckYMovementSpeed = duckYMovementSpeed;
				this.duckTypeString = duckTypeString;
				this.duckDelay = duckDelay;
				this.spinDuration = spinDuration;
				this.bombSpeed = bombSpeed;
			}

			// Token: 0x0400040F RID: 1039
			public readonly MinMax duckYHeightRange;

			// Token: 0x04000410 RID: 1040
			public readonly string[] duckYStartPercentString;

			// Token: 0x04000411 RID: 1041
			public readonly float duckXMovementSpeed;

			// Token: 0x04000412 RID: 1042
			public readonly float duckYMovementSpeed;

			// Token: 0x04000413 RID: 1043
			public readonly string[] duckTypeString;

			// Token: 0x04000414 RID: 1044
			public readonly float duckDelay;

			// Token: 0x04000415 RID: 1045
			public readonly float spinDuration;

			// Token: 0x04000416 RID: 1046
			public readonly float bombSpeed;
		}

		// Token: 0x020000CB RID: 203
		public class HeliumClown : AbstractLevelPropertyGroup
		{
			// Token: 0x0600025C RID: 604 RVA: 0x000127BC File Offset: 0x00010BBC
			public HeliumClown(bool coasterOn, float dogHP, float dogSpeed, string[] dogDelayString, string[] dogTypeString, string[] dogSpawnOrder, float heliumMoveSpeed, float heliumAcceleration, bool dogDieOnGround)
			{
				this.coasterOn = coasterOn;
				this.dogHP = dogHP;
				this.dogSpeed = dogSpeed;
				this.dogDelayString = dogDelayString;
				this.dogTypeString = dogTypeString;
				this.dogSpawnOrder = dogSpawnOrder;
				this.heliumMoveSpeed = heliumMoveSpeed;
				this.heliumAcceleration = heliumAcceleration;
				this.dogDieOnGround = dogDieOnGround;
			}

			// Token: 0x04000417 RID: 1047
			public readonly bool coasterOn;

			// Token: 0x04000418 RID: 1048
			public readonly float dogHP;

			// Token: 0x04000419 RID: 1049
			public readonly float dogSpeed;

			// Token: 0x0400041A RID: 1050
			public readonly string[] dogDelayString;

			// Token: 0x0400041B RID: 1051
			public readonly string[] dogTypeString;

			// Token: 0x0400041C RID: 1052
			public readonly string[] dogSpawnOrder;

			// Token: 0x0400041D RID: 1053
			public readonly float heliumMoveSpeed;

			// Token: 0x0400041E RID: 1054
			public readonly float heliumAcceleration;

			// Token: 0x0400041F RID: 1055
			public readonly bool dogDieOnGround;
		}

		// Token: 0x020000CC RID: 204
		public class Horse : AbstractLevelPropertyGroup
		{
			// Token: 0x0600025D RID: 605 RVA: 0x00012814 File Offset: 0x00010C14
			public Horse(bool coasterOn, float HorseSpeed, string[] HorseString, float HorseXPosOffset, int WaveBulletCount, float WaveBulletSpeed, float WaveBulletAmount, float WaveBulletWaveSpeed, float WaveBulletDelay, float WaveATKDelay, float WaveATKRepeat, string[] WavePosString, string[] WavePinkString, float WaveHesitate, float DropBulletInitalSpeed, float DropBulletDelay, MinMax DropBulletOneDelay, MinMax DropBulletTwoDelay, float DropBulletSpeedDown, float DropATKDelay, string[] DropHorsePositionString, string[] DropBulletPositionString, float DropHesitate, float DropATKRepeat, float DropBulletReturnDelay)
			{
				this.coasterOn = coasterOn;
				this.HorseSpeed = HorseSpeed;
				this.HorseString = HorseString;
				this.HorseXPosOffset = HorseXPosOffset;
				this.WaveBulletCount = WaveBulletCount;
				this.WaveBulletSpeed = WaveBulletSpeed;
				this.WaveBulletAmount = WaveBulletAmount;
				this.WaveBulletWaveSpeed = WaveBulletWaveSpeed;
				this.WaveBulletDelay = WaveBulletDelay;
				this.WaveATKDelay = WaveATKDelay;
				this.WaveATKRepeat = WaveATKRepeat;
				this.WavePosString = WavePosString;
				this.WavePinkString = WavePinkString;
				this.WaveHesitate = WaveHesitate;
				this.DropBulletInitalSpeed = DropBulletInitalSpeed;
				this.DropBulletDelay = DropBulletDelay;
				this.DropBulletOneDelay = DropBulletOneDelay;
				this.DropBulletTwoDelay = DropBulletTwoDelay;
				this.DropBulletSpeedDown = DropBulletSpeedDown;
				this.DropATKDelay = DropATKDelay;
				this.DropHorsePositionString = DropHorsePositionString;
				this.DropBulletPositionString = DropBulletPositionString;
				this.DropHesitate = DropHesitate;
				this.DropATKRepeat = DropATKRepeat;
				this.DropBulletReturnDelay = DropBulletReturnDelay;
			}

			// Token: 0x04000420 RID: 1056
			public readonly bool coasterOn;

			// Token: 0x04000421 RID: 1057
			public readonly float HorseSpeed;

			// Token: 0x04000422 RID: 1058
			public readonly string[] HorseString;

			// Token: 0x04000423 RID: 1059
			public readonly float HorseXPosOffset;

			// Token: 0x04000424 RID: 1060
			public readonly int WaveBulletCount;

			// Token: 0x04000425 RID: 1061
			public readonly float WaveBulletSpeed;

			// Token: 0x04000426 RID: 1062
			public readonly float WaveBulletAmount;

			// Token: 0x04000427 RID: 1063
			public readonly float WaveBulletWaveSpeed;

			// Token: 0x04000428 RID: 1064
			public readonly float WaveBulletDelay;

			// Token: 0x04000429 RID: 1065
			public readonly float WaveATKDelay;

			// Token: 0x0400042A RID: 1066
			public readonly float WaveATKRepeat;

			// Token: 0x0400042B RID: 1067
			public readonly string[] WavePosString;

			// Token: 0x0400042C RID: 1068
			public readonly string[] WavePinkString;

			// Token: 0x0400042D RID: 1069
			public readonly float WaveHesitate;

			// Token: 0x0400042E RID: 1070
			public readonly float DropBulletInitalSpeed;

			// Token: 0x0400042F RID: 1071
			public readonly float DropBulletDelay;

			// Token: 0x04000430 RID: 1072
			public readonly MinMax DropBulletOneDelay;

			// Token: 0x04000431 RID: 1073
			public readonly MinMax DropBulletTwoDelay;

			// Token: 0x04000432 RID: 1074
			public readonly float DropBulletSpeedDown;

			// Token: 0x04000433 RID: 1075
			public readonly float DropATKDelay;

			// Token: 0x04000434 RID: 1076
			public readonly string[] DropHorsePositionString;

			// Token: 0x04000435 RID: 1077
			public readonly string[] DropBulletPositionString;

			// Token: 0x04000436 RID: 1078
			public readonly float DropHesitate;

			// Token: 0x04000437 RID: 1079
			public readonly float DropATKRepeat;

			// Token: 0x04000438 RID: 1080
			public readonly float DropBulletReturnDelay;
		}

		// Token: 0x020000CD RID: 205
		public class Coaster : AbstractLevelPropertyGroup
		{
			// Token: 0x0600025E RID: 606 RVA: 0x000128EC File Offset: 0x00010CEC
			public Coaster(MinMax initialDelay, float noseParrySuperGain, float coasterSpeed, float coasterBackSpeedMultipler, MinMax mainLoopDelay, string[] coasterTypeString, float coasterBackToFrontDelay)
			{
				this.initialDelay = initialDelay;
				this.noseParrySuperGain = noseParrySuperGain;
				this.coasterSpeed = coasterSpeed;
				this.coasterBackSpeedMultipler = coasterBackSpeedMultipler;
				this.mainLoopDelay = mainLoopDelay;
				this.coasterTypeString = coasterTypeString;
				this.coasterBackToFrontDelay = coasterBackToFrontDelay;
			}

			// Token: 0x04000439 RID: 1081
			public readonly MinMax initialDelay;

			// Token: 0x0400043A RID: 1082
			public readonly float noseParrySuperGain;

			// Token: 0x0400043B RID: 1083
			public readonly float coasterSpeed;

			// Token: 0x0400043C RID: 1084
			public readonly float coasterBackSpeedMultipler;

			// Token: 0x0400043D RID: 1085
			public readonly MinMax mainLoopDelay;

			// Token: 0x0400043E RID: 1086
			public readonly string[] coasterTypeString;

			// Token: 0x0400043F RID: 1087
			public readonly float coasterBackToFrontDelay;
		}

		// Token: 0x020000CE RID: 206
		public class Swing : AbstractLevelPropertyGroup
		{
			// Token: 0x0600025F RID: 607 RVA: 0x0001292C File Offset: 0x00010D2C
			public Swing(float swingSpeed, float swingSpacing, float swingDropWarningDuration, float swingfullDropDuration, bool swingDropOn, float bulletSpeed, MinMax attackDelayRange, float HP, float movementSpeed, string[] positionString, float spawnDelay, float initialAttackDelay)
			{
				this.swingSpeed = swingSpeed;
				this.swingSpacing = swingSpacing;
				this.swingDropWarningDuration = swingDropWarningDuration;
				this.swingfullDropDuration = swingfullDropDuration;
				this.swingDropOn = swingDropOn;
				this.bulletSpeed = bulletSpeed;
				this.attackDelayRange = attackDelayRange;
				this.HP = HP;
				this.movementSpeed = movementSpeed;
				this.positionString = positionString;
				this.spawnDelay = spawnDelay;
				this.initialAttackDelay = initialAttackDelay;
			}

			// Token: 0x04000440 RID: 1088
			public readonly float swingSpeed;

			// Token: 0x04000441 RID: 1089
			public readonly float swingSpacing;

			// Token: 0x04000442 RID: 1090
			public readonly float swingDropWarningDuration;

			// Token: 0x04000443 RID: 1091
			public readonly float swingfullDropDuration;

			// Token: 0x04000444 RID: 1092
			public readonly bool swingDropOn;

			// Token: 0x04000445 RID: 1093
			public readonly float bulletSpeed;

			// Token: 0x04000446 RID: 1094
			public readonly MinMax attackDelayRange;

			// Token: 0x04000447 RID: 1095
			public readonly float HP;

			// Token: 0x04000448 RID: 1096
			public readonly float movementSpeed;

			// Token: 0x04000449 RID: 1097
			public readonly string[] positionString;

			// Token: 0x0400044A RID: 1098
			public readonly float spawnDelay;

			// Token: 0x0400044B RID: 1099
			public readonly float initialAttackDelay;
		}
	}

	// Token: 0x020000D0 RID: 208
	public class Devil : AbstractLevelProperties<LevelProperties.Devil.State, LevelProperties.Devil.Pattern, LevelProperties.Devil.States>
	{
		// Token: 0x06000270 RID: 624 RVA: 0x0001299C File Offset: 0x00010D9C
		public Devil(int hp, Level.GoalTimes goalTimes, LevelProperties.Devil.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000271 RID: 625 RVA: 0x000129A8 File Offset: 0x00010DA8
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1250f;
				break;
			case Level.Mode.Normal:
				timeline.health = 1900f;
				timeline.events.Add(new Level.Timeline.Event("GiantHead", 0.65f));
				timeline.events.Add(new Level.Timeline.Event("Hands", 0.35f));
				timeline.events.Add(new Level.Timeline.Event("Tears", 0.1f));
				break;
			case Level.Mode.Hard:
				timeline.health = 2100f;
				timeline.events.Add(new Level.Timeline.Event("GiantHead", 0.65f));
				timeline.events.Add(new Level.Timeline.Event("Hands", 0.35f));
				timeline.events.Add(new Level.Timeline.Event("Tears", 0.1f));
				break;
			}
			return timeline;
		}

		// Token: 0x06000272 RID: 626 RVA: 0x00012AA0 File Offset: 0x00010EA0
		public static LevelProperties.Devil.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			switch (id)
			{
			case "D":
				return LevelProperties.Devil.Pattern.Default;
			case "P":
				return LevelProperties.Devil.Pattern.SplitDevilProjectileAttack;
			case "W":
				return LevelProperties.Devil.Pattern.SplitDevilWallAttack;
			case "C":
				return LevelProperties.Devil.Pattern.Clap;
			case "H":
				return LevelProperties.Devil.Pattern.Head;
			case "F":
				return LevelProperties.Devil.Pattern.Pitchfork;
			case "B":
				return LevelProperties.Devil.Pattern.BombEye;
			case "S":
				return LevelProperties.Devil.Pattern.SkullEye;
			}
			Debug.LogError("Pattern Devil.Pattern for  " + id + " not found.", null);
			return LevelProperties.Devil.Pattern.Uninitialized;
		}

		// Token: 0x06000273 RID: 627 RVA: 0x00012B9C File Offset: 0x00010F9C
		public static LevelProperties.Devil GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Devil.State> list = new List<LevelProperties.Devil.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 2100;
						goalTimes = new Level.GoalTimes(180f, 180f, 180f);
						list.Add(new LevelProperties.Devil.State(10f, new LevelProperties.Devil.Pattern[][]
						{
							new LevelProperties.Devil.Pattern[]
							{
								LevelProperties.Devil.Pattern.Head,
								LevelProperties.Devil.Pattern.Clap,
								LevelProperties.Devil.Pattern.Pitchfork,
								LevelProperties.Devil.Pattern.Clap,
								LevelProperties.Devil.Pattern.Head,
								LevelProperties.Devil.Pattern.Clap,
								LevelProperties.Devil.Pattern.Pitchfork
							}
						}, LevelProperties.Devil.States.Main, new LevelProperties.Devil.SplitDevilWall(new MinMax(-350f, 350f), new MinMax(315f, 345f), new MinMax(1.8f, 2.2f)), new LevelProperties.Devil.SplitDevilProjectiles(new MinMax(3f, 7f), new MinMax(0.4f, 0.5f), 606f, new MinMax(0.5f, 1.5f)), new LevelProperties.Devil.Demons(5f, 575f, 3.5f), new LevelProperties.Devil.Clap(new MinMax(0.1f, 0.5f), 0.5f, 0.2f, 1.5f), new LevelProperties.Devil.Spider(950f, 1150f, "-150, 50, -50, 300, -200, 50, 150, -300, 0, 100, -50, 200, 50, 0, 100, -150, 50, -250, 200, 0", new MinMax(3f, 6f), new MinMax(0.3f, 0.7f), 1.5f), new LevelProperties.Devil.Dragon(1f, 300f, 6f, "0, 150, 50, 200, 0, 100, 200, 50", 1600f, 0.5f, 1.5f), new LevelProperties.Devil.Pitchfork(new string[]
						{
							"4, 5, 6",
							"6, 5, 4, 5",
							"4, 6, 5"
						}, 50f, 300f, 1f), new LevelProperties.Devil.PitchforkTwoFlameWheel(string.Empty, 0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f), new LevelProperties.Devil.PitchforkThreeFlameJumper(string.Empty, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), 0f, 0, 0f), new LevelProperties.Devil.PitchforkFourFlameBouncer("55, 30, 35, 60, 40, 70, 20, 35, 50, 100, 200, 35, 60, 35, 55, 100, 70, 20, 30, 50, 40, 200", new MinMax(1f, 1.5f), 885f, 6, 1.5f), new LevelProperties.Devil.PitchforkFiveFlameSpinner("0, 10, -10, 0, 5, -5, -20, 20, 0, 30, -30", 115f, 275f, 415f, 5.5f, 1.5f), new LevelProperties.Devil.PitchforkSixFlameRing("0, 10, -10, 25, 5, 30, -25, 15, 35, 20, -20", new MinMax(1f, 1.5f), 0.55f, 635f, 0f, 1.5f), new LevelProperties.Devil.GiantHeadPlatforms(185f, 125f, "1,3,2,5,4,1,5,4,2,3,1,3,5,4,2", 150f, 1f, new MinMax(1.5f, 2.8f), 200f, false), new LevelProperties.Devil.Fireballs(2f, 240f, 550f, 2.8f, 220f), new LevelProperties.Devil.BombEye(200f, 100f, 2f, 5f, 1.6f, new MinMax(6f, 7.5f)), new LevelProperties.Devil.SkullEye(0.75f, 335f, 180f, 216f, new MinMax(4.8f, 6f)), new LevelProperties.Devil.Hands(50f, new MinMax(-180f, 100f), 175f, new MinMax(2.5f, 3.8f), 435f, new MinMax(1f, 2f), new MinMax(6f, 7.3f), "R,R,P"), new LevelProperties.Devil.Swoopers("0,300,600,200,800,1000,500,1100,100,900,400,700,1200", new MinMax(3f, 4f), 7, 3.5f, new MinMax(1.8f, 2.9f), new MinMax(45f, 90f), new MinMax(1200f, 800f), 1000f, new MinMax(2f, 3f), new MinMax(4.5f, 6f), new MinMax(220f, 300f)), new LevelProperties.Devil.Tears(485f, 0.4f), new LevelProperties.Devil.Firewall(300f)));
						list.Add(new LevelProperties.Devil.State(0.65f, new LevelProperties.Devil.Pattern[][]
						{
							new LevelProperties.Devil.Pattern[]
							{
								LevelProperties.Devil.Pattern.BombEye,
								LevelProperties.Devil.Pattern.SkullEye,
								LevelProperties.Devil.Pattern.BombEye,
								LevelProperties.Devil.Pattern.BombEye,
								LevelProperties.Devil.Pattern.SkullEye,
								LevelProperties.Devil.Pattern.BombEye,
								LevelProperties.Devil.Pattern.SkullEye,
								LevelProperties.Devil.Pattern.SkullEye,
								LevelProperties.Devil.Pattern.BombEye,
								LevelProperties.Devil.Pattern.SkullEye,
								LevelProperties.Devil.Pattern.BombEye,
								LevelProperties.Devil.Pattern.BombEye,
								LevelProperties.Devil.Pattern.SkullEye,
								LevelProperties.Devil.Pattern.BombEye,
								LevelProperties.Devil.Pattern.SkullEye,
								LevelProperties.Devil.Pattern.BombEye,
								LevelProperties.Devil.Pattern.SkullEye,
								LevelProperties.Devil.Pattern.SkullEye
							}
						}, LevelProperties.Devil.States.GiantHead, new LevelProperties.Devil.SplitDevilWall(new MinMax(-350f, 350f), new MinMax(315f, 345f), new MinMax(1.8f, 2.2f)), new LevelProperties.Devil.SplitDevilProjectiles(new MinMax(3f, 7f), new MinMax(0.4f, 0.5f), 606f, new MinMax(0.5f, 1.5f)), new LevelProperties.Devil.Demons(5f, 575f, 3.5f), new LevelProperties.Devil.Clap(new MinMax(0.1f, 0.5f), 0.5f, 0.2f, 1.5f), new LevelProperties.Devil.Spider(950f, 1150f, "-150, 50, -50, 300, -200, 50, 150, -300, 0, 100, -50, 200, 50, 0, 100, -150, 50, -250, 200, 0", new MinMax(3f, 6f), new MinMax(0.3f, 0.7f), 1.5f), new LevelProperties.Devil.Dragon(1f, 300f, 6f, "0, 150, 50, 200, 0, 100, 200, 50", 1600f, 0.5f, 1.5f), new LevelProperties.Devil.Pitchfork(new string[]
						{
							"4, 5, 6",
							"6, 5, 4, 5",
							"4, 6, 5"
						}, 50f, 300f, 1f), new LevelProperties.Devil.PitchforkTwoFlameWheel(string.Empty, 0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f), new LevelProperties.Devil.PitchforkThreeFlameJumper(string.Empty, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), 0f, 0, 0f), new LevelProperties.Devil.PitchforkFourFlameBouncer("55, 30, 35, 60, 40, 70, 20, 35, 50, 100, 200, 35, 60, 35, 55, 100, 70, 20, 30, 50, 40, 200", new MinMax(1f, 1.5f), 885f, 6, 1.5f), new LevelProperties.Devil.PitchforkFiveFlameSpinner("0, 10, -10, 0, 5, -5, -20, 20, 0, 30, -30", 115f, 275f, 415f, 5.5f, 1.5f), new LevelProperties.Devil.PitchforkSixFlameRing("0, 10, -10, 25, 5, 30, -25, 15, 35, 20, -20", new MinMax(1f, 1.5f), 0.55f, 635f, 0f, 1.5f), new LevelProperties.Devil.GiantHeadPlatforms(185f, 125f, "1,3,2,5,4,1,5,4,2,3,1,3,5,4,2", 150f, 1f, new MinMax(1.5f, 2.8f), 200f, false), new LevelProperties.Devil.Fireballs(2f, 240f, 550f, 2.8f, 220f), new LevelProperties.Devil.BombEye(200f, 100f, 2f, 5f, 1.6f, new MinMax(6f, 7.5f)), new LevelProperties.Devil.SkullEye(0.75f, 335f, 180f, 216f, new MinMax(4.8f, 6f)), new LevelProperties.Devil.Hands(50f, new MinMax(-180f, 100f), 175f, new MinMax(2.5f, 3.8f), 435f, new MinMax(1f, 2f), new MinMax(6f, 7.3f), "R,R,P"), new LevelProperties.Devil.Swoopers("0,300,600,200,800,1000,500,1100,100,900,400,700,1200", new MinMax(3f, 4f), 7, 3.5f, new MinMax(1.8f, 2.9f), new MinMax(45f, 90f), new MinMax(1200f, 800f), 1000f, new MinMax(2f, 3f), new MinMax(4.5f, 6f), new MinMax(220f, 300f)), new LevelProperties.Devil.Tears(485f, 0.4f), new LevelProperties.Devil.Firewall(300f)));
						list.Add(new LevelProperties.Devil.State(0.35f, new LevelProperties.Devil.Pattern[][]
						{
							new LevelProperties.Devil.Pattern[0]
						}, LevelProperties.Devil.States.Hands, new LevelProperties.Devil.SplitDevilWall(new MinMax(-350f, 350f), new MinMax(315f, 345f), new MinMax(1.8f, 2.2f)), new LevelProperties.Devil.SplitDevilProjectiles(new MinMax(3f, 7f), new MinMax(0.4f, 0.5f), 606f, new MinMax(0.5f, 1.5f)), new LevelProperties.Devil.Demons(5f, 575f, 3.5f), new LevelProperties.Devil.Clap(new MinMax(0.1f, 0.5f), 0.5f, 0.2f, 1.5f), new LevelProperties.Devil.Spider(950f, 1150f, "-150, 50, -50, 300, -200, 50, 150, -300, 0, 100, -50, 200, 50, 0, 100, -150, 50, -250, 200, 0", new MinMax(3f, 6f), new MinMax(0.3f, 0.7f), 1.5f), new LevelProperties.Devil.Dragon(1f, 300f, 6f, "0, 150, 50, 200, 0, 100, 200, 50", 1600f, 0.5f, 1.5f), new LevelProperties.Devil.Pitchfork(new string[]
						{
							"4, 5, 6",
							"6, 5, 4, 5",
							"4, 6, 5"
						}, 50f, 300f, 1f), new LevelProperties.Devil.PitchforkTwoFlameWheel(string.Empty, 0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f), new LevelProperties.Devil.PitchforkThreeFlameJumper(string.Empty, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), 0f, 0, 0f), new LevelProperties.Devil.PitchforkFourFlameBouncer("55, 30, 35, 60, 40, 70, 20, 35, 50, 100, 200, 35, 60, 35, 55, 100, 70, 20, 30, 50, 40, 200", new MinMax(1f, 1.5f), 885f, 6, 1.5f), new LevelProperties.Devil.PitchforkFiveFlameSpinner("0, 10, -10, 0, 5, -5, -20, 20, 0, 30, -30", 115f, 275f, 415f, 5.5f, 1.5f), new LevelProperties.Devil.PitchforkSixFlameRing("0, 10, -10, 25, 5, 30, -25, 15, 35, 20, -20", new MinMax(1f, 1.5f), 0.55f, 635f, 0f, 1.5f), new LevelProperties.Devil.GiantHeadPlatforms(185f, 125f, "1,3,2,5,4,1,5,4,2,3,1,3,5,4,2", 150f, 1f, new MinMax(1.5f, 2.8f), 200f, false), new LevelProperties.Devil.Fireballs(2f, 240f, 550f, 2.8f, 220f), new LevelProperties.Devil.BombEye(200f, 100f, 2f, 5f, 1.6f, new MinMax(6f, 7.5f)), new LevelProperties.Devil.SkullEye(0.75f, 335f, 180f, 216f, new MinMax(4.8f, 6f)), new LevelProperties.Devil.Hands(50f, new MinMax(-180f, 100f), 175f, new MinMax(2.5f, 3.8f), 435f, new MinMax(1f, 2f), new MinMax(6f, 7.3f), "R,R,P"), new LevelProperties.Devil.Swoopers("0,300,600,200,800,1000,500,1100,100,900,400,700,1200", new MinMax(3f, 4f), 7, 3.5f, new MinMax(1.8f, 2.9f), new MinMax(45f, 90f), new MinMax(1200f, 800f), 1000f, new MinMax(2f, 3f), new MinMax(4.5f, 6f), new MinMax(220f, 300f)), new LevelProperties.Devil.Tears(485f, 0.4f), new LevelProperties.Devil.Firewall(300f)));
						list.Add(new LevelProperties.Devil.State(0.1f, new LevelProperties.Devil.Pattern[][]
						{
							new LevelProperties.Devil.Pattern[0]
						}, LevelProperties.Devil.States.Tears, new LevelProperties.Devil.SplitDevilWall(new MinMax(-350f, 350f), new MinMax(315f, 345f), new MinMax(1.8f, 2.2f)), new LevelProperties.Devil.SplitDevilProjectiles(new MinMax(3f, 7f), new MinMax(0.4f, 0.5f), 606f, new MinMax(0.5f, 1.5f)), new LevelProperties.Devil.Demons(5f, 575f, 3.5f), new LevelProperties.Devil.Clap(new MinMax(0.1f, 0.5f), 0.5f, 0.2f, 1.5f), new LevelProperties.Devil.Spider(950f, 1150f, "-150, 50, -50, 300, -200, 50, 150, -300, 0, 100, -50, 200, 50, 0, 100, -150, 50, -250, 200, 0", new MinMax(3f, 6f), new MinMax(0.3f, 0.7f), 1.5f), new LevelProperties.Devil.Dragon(1f, 300f, 6f, "0, 150, 50, 200, 0, 100, 200, 50", 1600f, 0.5f, 1.5f), new LevelProperties.Devil.Pitchfork(new string[]
						{
							"4, 5, 6",
							"6, 5, 4, 5",
							"4, 6, 5"
						}, 50f, 300f, 1f), new LevelProperties.Devil.PitchforkTwoFlameWheel(string.Empty, 0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f), new LevelProperties.Devil.PitchforkThreeFlameJumper(string.Empty, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), 0f, 0, 0f), new LevelProperties.Devil.PitchforkFourFlameBouncer("55, 30, 35, 60, 40, 70, 20, 35, 50, 100, 200, 35, 60, 35, 55, 100, 70, 20, 30, 50, 40, 200", new MinMax(1f, 1.5f), 885f, 6, 1.5f), new LevelProperties.Devil.PitchforkFiveFlameSpinner("0, 10, -10, 0, 5, -5, -20, 20, 0, 30, -30", 115f, 275f, 415f, 5.5f, 1.5f), new LevelProperties.Devil.PitchforkSixFlameRing("0, 10, -10, 25, 5, 30, -25, 15, 35, 20, -20", new MinMax(1f, 1.5f), 0.55f, 635f, 0f, 1.5f), new LevelProperties.Devil.GiantHeadPlatforms(185f, 125f, "1,3,2,5,4,1,5,4,2,3,1,3,5,4,2", 150f, 1f, new MinMax(1.5f, 2.8f), 200f, false), new LevelProperties.Devil.Fireballs(2f, 240f, 550f, 2.8f, 220f), new LevelProperties.Devil.BombEye(200f, 100f, 2f, 5f, 1.6f, new MinMax(6f, 7.5f)), new LevelProperties.Devil.SkullEye(0.75f, 335f, 180f, 216f, new MinMax(4.8f, 6f)), new LevelProperties.Devil.Hands(50f, new MinMax(-180f, 100f), 175f, new MinMax(2.5f, 3.8f), 435f, new MinMax(1f, 2f), new MinMax(6f, 7.3f), "R,R,P"), new LevelProperties.Devil.Swoopers("0,300,600,200,800,1000,500,1100,100,900,400,700,1200", new MinMax(3f, 4f), 7, 3.5f, new MinMax(1.8f, 2.9f), new MinMax(45f, 90f), new MinMax(1200f, 800f), 1000f, new MinMax(2f, 3f), new MinMax(4.5f, 6f), new MinMax(220f, 300f)), new LevelProperties.Devil.Tears(485f, 0.4f), new LevelProperties.Devil.Firewall(300f)));
					}
				}
				else
				{
					hp = 1900;
					goalTimes = new Level.GoalTimes(180f, 180f, 180f);
					list.Add(new LevelProperties.Devil.State(10f, new LevelProperties.Devil.Pattern[][]
					{
						new LevelProperties.Devil.Pattern[]
						{
							LevelProperties.Devil.Pattern.Head,
							LevelProperties.Devil.Pattern.Clap,
							LevelProperties.Devil.Pattern.Pitchfork,
							LevelProperties.Devil.Pattern.Clap,
							LevelProperties.Devil.Pattern.Head,
							LevelProperties.Devil.Pattern.Clap,
							LevelProperties.Devil.Pattern.Pitchfork
						}
					}, LevelProperties.Devil.States.Main, new LevelProperties.Devil.SplitDevilWall(new MinMax(-350f, 350f), new MinMax(275f, 315f), new MinMax(2f, 2.5f)), new LevelProperties.Devil.SplitDevilProjectiles(new MinMax(3f, 6f), new MinMax(0.55f, 0.65f), 586f, new MinMax(0.5f, 1.5f)), new LevelProperties.Devil.Demons(4.5f, 550f, 4.5f), new LevelProperties.Devil.Clap(new MinMax(0.1f, 0.5f), 0.5f, 0.2f, 1.5f), new LevelProperties.Devil.Spider(805f, 1050f, "-150, 50, -50, 300, -200, 50, 150, -300, 0, 100, -50, 200, 50, 0, 100, -150, 50, -250, 200, 0", new MinMax(3f, 6f), new MinMax(0.3f, 0.7f), 1.5f), new LevelProperties.Devil.Dragon(1f, 300f, 6f, "0, 150, 50, 200, 0, 100, 200, 50", 1600f, 0.5f, 1.5f), new LevelProperties.Devil.Pitchfork(new string[]
					{
						"4, 6, 5",
						"5, 4, 6, 4",
						"4, 5, 6"
					}, 50f, 300f, 1f), new LevelProperties.Devil.PitchforkTwoFlameWheel("90, 100, 80", 360f, 600f, new MinMax(1f, 1.5f), new MinMax(1.5f, 2.5f), 1.5f), new LevelProperties.Devil.PitchforkThreeFlameJumper("0, 10, -10, 50, -50, 100, -100, 75, -75", new MinMax(45f, 90f), new MinMax(1200f, 1250f), 1500f, new MinMax(1f, 1.5f), 0.8f, 3, 1.5f), new LevelProperties.Devil.PitchforkFourFlameBouncer("55, 30, 35, 60, 40, 70, 20, 35, 50, 100, 200", new MinMax(1f, 1.5f), 725f, 6, 1.5f), new LevelProperties.Devil.PitchforkFiveFlameSpinner("0, 10, -10, 0, 5, -5, -20, 20, 0, 30, -30", 85f, 275f, 350f, 5f, 1.5f), new LevelProperties.Devil.PitchforkSixFlameRing("0, 10, -10, 25, 5, 30, -25, 15, 35, 20, -20", new MinMax(1f, 1.5f), 0.7f, 565f, 0f, 1.5f), new LevelProperties.Devil.GiantHeadPlatforms(185f, 115f, "1,3,2,5,4,1,5,4,2,3,1,3,5,4,2", 165f, 1f, new MinMax(2f, 3.5f), 200f, false), new LevelProperties.Devil.Fireballs(2f, 215f, 515f, 3.5f, 220f), new LevelProperties.Devil.BombEye(200f, 100f, 2f, 5f, 2.2f, new MinMax(6.5f, 8f)), new LevelProperties.Devil.SkullEye(0.75f, 315f, 165f, 198f, new MinMax(5f, 6.5f)), new LevelProperties.Devil.Hands(42f, new MinMax(-180f, 100f), 175f, new MinMax(2.75f, 4.25f), 415f, new MinMax(1f, 2f), new MinMax(6.5f, 7.8f), "R,R,P"), new LevelProperties.Devil.Swoopers("0,300,600,200,800,1000,500,1100,100,900,400,700,1200", new MinMax(3f, 4f), 5, 3.5f, new MinMax(1.8f, 2.9f), new MinMax(45f, 90f), new MinMax(1200f, 800f), 1000f, new MinMax(2f, 3f), new MinMax(6f, 8f), new MinMax(220f, 300f)), new LevelProperties.Devil.Tears(465f, 1f), new LevelProperties.Devil.Firewall(300f)));
					list.Add(new LevelProperties.Devil.State(0.65f, new LevelProperties.Devil.Pattern[][]
					{
						new LevelProperties.Devil.Pattern[]
						{
							LevelProperties.Devil.Pattern.BombEye,
							LevelProperties.Devil.Pattern.SkullEye,
							LevelProperties.Devil.Pattern.BombEye,
							LevelProperties.Devil.Pattern.SkullEye,
							LevelProperties.Devil.Pattern.BombEye,
							LevelProperties.Devil.Pattern.SkullEye,
							LevelProperties.Devil.Pattern.SkullEye,
							LevelProperties.Devil.Pattern.BombEye,
							LevelProperties.Devil.Pattern.SkullEye,
							LevelProperties.Devil.Pattern.SkullEye,
							LevelProperties.Devil.Pattern.SkullEye,
							LevelProperties.Devil.Pattern.BombEye,
							LevelProperties.Devil.Pattern.SkullEye,
							LevelProperties.Devil.Pattern.BombEye,
							LevelProperties.Devil.Pattern.SkullEye,
							LevelProperties.Devil.Pattern.BombEye,
							LevelProperties.Devil.Pattern.SkullEye,
							LevelProperties.Devil.Pattern.SkullEye
						}
					}, LevelProperties.Devil.States.GiantHead, new LevelProperties.Devil.SplitDevilWall(new MinMax(-350f, 350f), new MinMax(275f, 315f), new MinMax(2f, 2.5f)), new LevelProperties.Devil.SplitDevilProjectiles(new MinMax(3f, 6f), new MinMax(0.55f, 0.65f), 586f, new MinMax(0.5f, 1.5f)), new LevelProperties.Devil.Demons(4.5f, 550f, 4.5f), new LevelProperties.Devil.Clap(new MinMax(0.1f, 0.5f), 0.5f, 0.2f, 1.5f), new LevelProperties.Devil.Spider(805f, 1050f, "-150, 50, -50, 300, -200, 50, 150, -300, 0, 100, -50, 200, 50, 0, 100, -150, 50, -250, 200, 0", new MinMax(3f, 6f), new MinMax(0.3f, 0.7f), 1.5f), new LevelProperties.Devil.Dragon(1f, 300f, 6f, "0, 150, 50, 200, 0, 100, 200, 50", 1600f, 0.5f, 1.5f), new LevelProperties.Devil.Pitchfork(new string[]
					{
						"4, 6, 5",
						"5, 4, 6, 4",
						"4, 5, 6"
					}, 50f, 300f, 1f), new LevelProperties.Devil.PitchforkTwoFlameWheel("90, 100, 80", 360f, 600f, new MinMax(1f, 1.5f), new MinMax(1.5f, 2.5f), 1.5f), new LevelProperties.Devil.PitchforkThreeFlameJumper("0, 10, -10, 50, -50, 100, -100, 75, -75", new MinMax(45f, 90f), new MinMax(1200f, 1250f), 1500f, new MinMax(1f, 1.5f), 0.8f, 3, 1.5f), new LevelProperties.Devil.PitchforkFourFlameBouncer("55, 30, 35, 60, 40, 70, 20, 35, 50, 100, 200", new MinMax(1f, 1.5f), 725f, 6, 1.5f), new LevelProperties.Devil.PitchforkFiveFlameSpinner("0, 10, -10, 0, 5, -5, -20, 20, 0, 30, -30", 85f, 275f, 350f, 5f, 1.5f), new LevelProperties.Devil.PitchforkSixFlameRing("0, 10, -10, 25, 5, 30, -25, 15, 35, 20, -20", new MinMax(1f, 1.5f), 0.7f, 565f, 0f, 1.5f), new LevelProperties.Devil.GiantHeadPlatforms(185f, 115f, "1,3,2,5,4,1,5,4,2,3,1,3,5,4,2", 165f, 1f, new MinMax(2f, 3.5f), 200f, false), new LevelProperties.Devil.Fireballs(2f, 215f, 515f, 3.5f, 220f), new LevelProperties.Devil.BombEye(200f, 100f, 2f, 5f, 2.2f, new MinMax(6.5f, 8f)), new LevelProperties.Devil.SkullEye(0.75f, 315f, 165f, 198f, new MinMax(5f, 6.5f)), new LevelProperties.Devil.Hands(42f, new MinMax(-180f, 100f), 175f, new MinMax(2.75f, 4.25f), 415f, new MinMax(1f, 2f), new MinMax(6.5f, 7.8f), "R,R,P"), new LevelProperties.Devil.Swoopers("0,300,600,200,800,1000,500,1100,100,900,400,700,1200", new MinMax(3f, 4f), 5, 3.5f, new MinMax(1.8f, 2.9f), new MinMax(45f, 90f), new MinMax(1200f, 800f), 1000f, new MinMax(2f, 3f), new MinMax(6f, 8f), new MinMax(220f, 300f)), new LevelProperties.Devil.Tears(465f, 1f), new LevelProperties.Devil.Firewall(300f)));
					list.Add(new LevelProperties.Devil.State(0.35f, new LevelProperties.Devil.Pattern[][]
					{
						new LevelProperties.Devil.Pattern[0]
					}, LevelProperties.Devil.States.Hands, new LevelProperties.Devil.SplitDevilWall(new MinMax(-350f, 350f), new MinMax(275f, 315f), new MinMax(2f, 2.5f)), new LevelProperties.Devil.SplitDevilProjectiles(new MinMax(3f, 6f), new MinMax(0.55f, 0.65f), 586f, new MinMax(0.5f, 1.5f)), new LevelProperties.Devil.Demons(4.5f, 550f, 4.5f), new LevelProperties.Devil.Clap(new MinMax(0.1f, 0.5f), 0.5f, 0.2f, 1.5f), new LevelProperties.Devil.Spider(805f, 1050f, "-150, 50, -50, 300, -200, 50, 150, -300, 0, 100, -50, 200, 50, 0, 100, -150, 50, -250, 200, 0", new MinMax(3f, 6f), new MinMax(0.3f, 0.7f), 1.5f), new LevelProperties.Devil.Dragon(1f, 300f, 6f, "0, 150, 50, 200, 0, 100, 200, 50", 1600f, 0.5f, 1.5f), new LevelProperties.Devil.Pitchfork(new string[]
					{
						"4, 6, 5",
						"5, 4, 6, 4",
						"4, 5, 6"
					}, 50f, 300f, 1f), new LevelProperties.Devil.PitchforkTwoFlameWheel("90, 100, 80", 360f, 600f, new MinMax(1f, 1.5f), new MinMax(1.5f, 2.5f), 1.5f), new LevelProperties.Devil.PitchforkThreeFlameJumper("0, 10, -10, 50, -50, 100, -100, 75, -75", new MinMax(45f, 90f), new MinMax(1200f, 1250f), 1500f, new MinMax(1f, 1.5f), 0.8f, 3, 1.5f), new LevelProperties.Devil.PitchforkFourFlameBouncer("55, 30, 35, 60, 40, 70, 20, 35, 50, 100, 200", new MinMax(1f, 1.5f), 725f, 6, 1.5f), new LevelProperties.Devil.PitchforkFiveFlameSpinner("0, 10, -10, 0, 5, -5, -20, 20, 0, 30, -30", 85f, 275f, 350f, 5f, 1.5f), new LevelProperties.Devil.PitchforkSixFlameRing("0, 10, -10, 25, 5, 30, -25, 15, 35, 20, -20", new MinMax(1f, 1.5f), 0.7f, 565f, 0f, 1.5f), new LevelProperties.Devil.GiantHeadPlatforms(185f, 115f, "1,3,2,5,4,1,5,4,2,3,1,3,5,4,2", 165f, 1f, new MinMax(2f, 3.5f), 200f, false), new LevelProperties.Devil.Fireballs(2f, 215f, 515f, 3.5f, 220f), new LevelProperties.Devil.BombEye(200f, 100f, 2f, 5f, 2.2f, new MinMax(6.5f, 8f)), new LevelProperties.Devil.SkullEye(0.75f, 315f, 165f, 198f, new MinMax(5f, 6.5f)), new LevelProperties.Devil.Hands(42f, new MinMax(-180f, 100f), 175f, new MinMax(2.75f, 4.25f), 415f, new MinMax(1f, 2f), new MinMax(6.5f, 7.8f), "R,R,P"), new LevelProperties.Devil.Swoopers("0,300,600,200,800,1000,500,1100,100,900,400,700,1200", new MinMax(3f, 4f), 5, 3.5f, new MinMax(1.8f, 2.9f), new MinMax(45f, 90f), new MinMax(1200f, 800f), 1000f, new MinMax(2f, 3f), new MinMax(6f, 8f), new MinMax(220f, 300f)), new LevelProperties.Devil.Tears(465f, 1f), new LevelProperties.Devil.Firewall(300f)));
					list.Add(new LevelProperties.Devil.State(0.1f, new LevelProperties.Devil.Pattern[][]
					{
						new LevelProperties.Devil.Pattern[0]
					}, LevelProperties.Devil.States.Tears, new LevelProperties.Devil.SplitDevilWall(new MinMax(-350f, 350f), new MinMax(275f, 315f), new MinMax(2f, 2.5f)), new LevelProperties.Devil.SplitDevilProjectiles(new MinMax(3f, 6f), new MinMax(0.55f, 0.65f), 586f, new MinMax(0.5f, 1.5f)), new LevelProperties.Devil.Demons(4.5f, 550f, 4.5f), new LevelProperties.Devil.Clap(new MinMax(0.1f, 0.5f), 0.5f, 0.2f, 1.5f), new LevelProperties.Devil.Spider(805f, 1050f, "-150, 50, -50, 300, -200, 50, 150, -300, 0, 100, -50, 200, 50, 0, 100, -150, 50, -250, 200, 0", new MinMax(3f, 6f), new MinMax(0.3f, 0.7f), 1.5f), new LevelProperties.Devil.Dragon(1f, 300f, 6f, "0, 150, 50, 200, 0, 100, 200, 50", 1600f, 0.5f, 1.5f), new LevelProperties.Devil.Pitchfork(new string[]
					{
						"4, 6, 5",
						"5, 4, 6, 4",
						"4, 5, 6"
					}, 50f, 300f, 1f), new LevelProperties.Devil.PitchforkTwoFlameWheel("90, 100, 80", 360f, 600f, new MinMax(1f, 1.5f), new MinMax(1.5f, 2.5f), 1.5f), new LevelProperties.Devil.PitchforkThreeFlameJumper("0, 10, -10, 50, -50, 100, -100, 75, -75", new MinMax(45f, 90f), new MinMax(1200f, 1250f), 1500f, new MinMax(1f, 1.5f), 0.8f, 3, 1.5f), new LevelProperties.Devil.PitchforkFourFlameBouncer("55, 30, 35, 60, 40, 70, 20, 35, 50, 100, 200", new MinMax(1f, 1.5f), 725f, 6, 1.5f), new LevelProperties.Devil.PitchforkFiveFlameSpinner("0, 10, -10, 0, 5, -5, -20, 20, 0, 30, -30", 85f, 275f, 350f, 5f, 1.5f), new LevelProperties.Devil.PitchforkSixFlameRing("0, 10, -10, 25, 5, 30, -25, 15, 35, 20, -20", new MinMax(1f, 1.5f), 0.7f, 565f, 0f, 1.5f), new LevelProperties.Devil.GiantHeadPlatforms(185f, 115f, "1,3,2,5,4,1,5,4,2,3,1,3,5,4,2", 165f, 1f, new MinMax(2f, 3.5f), 200f, false), new LevelProperties.Devil.Fireballs(2f, 215f, 515f, 3.5f, 220f), new LevelProperties.Devil.BombEye(200f, 100f, 2f, 5f, 2.2f, new MinMax(6.5f, 8f)), new LevelProperties.Devil.SkullEye(0.75f, 315f, 165f, 198f, new MinMax(5f, 6.5f)), new LevelProperties.Devil.Hands(42f, new MinMax(-180f, 100f), 175f, new MinMax(2.75f, 4.25f), 415f, new MinMax(1f, 2f), new MinMax(6.5f, 7.8f), "R,R,P"), new LevelProperties.Devil.Swoopers("0,300,600,200,800,1000,500,1100,100,900,400,700,1200", new MinMax(3f, 4f), 5, 3.5f, new MinMax(1.8f, 2.9f), new MinMax(45f, 90f), new MinMax(1200f, 800f), 1000f, new MinMax(2f, 3f), new MinMax(6f, 8f), new MinMax(220f, 300f)), new LevelProperties.Devil.Tears(465f, 1f), new LevelProperties.Devil.Firewall(300f)));
				}
			}
			else
			{
				hp = 1250;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Devil.State(10f, new LevelProperties.Devil.Pattern[][]
				{
					new LevelProperties.Devil.Pattern[]
					{
						LevelProperties.Devil.Pattern.Head,
						LevelProperties.Devil.Pattern.Clap,
						LevelProperties.Devil.Pattern.Pitchfork,
						LevelProperties.Devil.Pattern.Clap,
						LevelProperties.Devil.Pattern.Head,
						LevelProperties.Devil.Pattern.Clap,
						LevelProperties.Devil.Pattern.Pitchfork
					}
				}, LevelProperties.Devil.States.Main, new LevelProperties.Devil.SplitDevilWall(new MinMax(-350f, 350f), new MinMax(275f, 315f), new MinMax(2f, 2.5f)), new LevelProperties.Devil.SplitDevilProjectiles(new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f)), new LevelProperties.Devil.Demons(3.5f, 550f, 4.5f), new LevelProperties.Devil.Clap(new MinMax(0.1f, 0.5f), 0.5f, 0.2f, 1.5f), new LevelProperties.Devil.Spider(805f, 1050f, "-150, 50, -50, 300, -200, 50, 150, -300, 0, 100, -50, 200, 50, 0, 100, -150, 50, -250, 200, 0", new MinMax(3f, 6f), new MinMax(0.3f, 0.7f), 1.5f), new LevelProperties.Devil.Dragon(500f, 300f, 6f, "0, 150, 50, 200, 0, 100, 200, 50", 1600f, 0.5f, 1.5f), new LevelProperties.Devil.Pitchfork(new string[]
				{
					"4, 6, 5",
					"5, 4, 6, 4",
					"4, 5, 6"
				}, 50f, 300f, 1f), new LevelProperties.Devil.PitchforkTwoFlameWheel(string.Empty, 0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f), new LevelProperties.Devil.PitchforkThreeFlameJumper(string.Empty, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), 0f, 0, 0f), new LevelProperties.Devil.PitchforkFourFlameBouncer("55, 30, 35, 60, 40, 70, 20, 35, 50, 100, 200", new MinMax(1f, 1.5f), 850f, 6, 1.5f), new LevelProperties.Devil.PitchforkFiveFlameSpinner("0, 10, -10, 0, 5, -5, -20, 20, 0, 30, -30", 85f, 275f, 350f, 5f, 1.5f), new LevelProperties.Devil.PitchforkSixFlameRing("0, 10, -10, 25, 5, 30, -25, 15, 35, 20, -20", new MinMax(1f, 1.5f), 0.7f, 600f, 0f, 1.5f), new LevelProperties.Devil.GiantHeadPlatforms(0f, 0f, string.Empty, 0f, 0f, new MinMax(0f, 1f), 0f, false), new LevelProperties.Devil.Fireballs(0f, 0f, 0f, 0f, 0f), new LevelProperties.Devil.BombEye(0f, 0f, 0f, 0f, 0f, new MinMax(0f, 1f)), new LevelProperties.Devil.SkullEye(0f, 0f, 0f, 0f, new MinMax(0f, 1f)), new LevelProperties.Devil.Hands(0f, new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), string.Empty), new LevelProperties.Devil.Swoopers(string.Empty, new MinMax(0f, 1f), 0, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), new MinMax(0f, 1f)), new LevelProperties.Devil.Tears(0f, 0f), new LevelProperties.Devil.Firewall(0f)));
			}
			return new LevelProperties.Devil(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020000D1 RID: 209
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000067 RID: 103
			// (get) Token: 0x06000275 RID: 629 RVA: 0x00014EF7 File Offset: 0x000132F7
			// (set) Token: 0x06000276 RID: 630 RVA: 0x00014EFF File Offset: 0x000132FF
			private protected LevelProperties.Devil properties { protected get; private set; }

			// Token: 0x06000277 RID: 631 RVA: 0x00014F08 File Offset: 0x00013308
			public virtual void LevelInit(LevelProperties.Devil properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000278 RID: 632 RVA: 0x00014F11 File Offset: 0x00013311
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020000D2 RID: 210
		public enum States
		{
			// Token: 0x0400045D RID: 1117
			Main,
			// Token: 0x0400045E RID: 1118
			Generic,
			// Token: 0x0400045F RID: 1119
			Split,
			// Token: 0x04000460 RID: 1120
			GiantHead,
			// Token: 0x04000461 RID: 1121
			Hands,
			// Token: 0x04000462 RID: 1122
			Tears
		}

		// Token: 0x020000D3 RID: 211
		public enum Pattern
		{
			// Token: 0x04000464 RID: 1124
			Default,
			// Token: 0x04000465 RID: 1125
			SplitDevilProjectileAttack,
			// Token: 0x04000466 RID: 1126
			SplitDevilWallAttack,
			// Token: 0x04000467 RID: 1127
			Clap,
			// Token: 0x04000468 RID: 1128
			Head,
			// Token: 0x04000469 RID: 1129
			Pitchfork,
			// Token: 0x0400046A RID: 1130
			BombEye,
			// Token: 0x0400046B RID: 1131
			SkullEye,
			// Token: 0x0400046C RID: 1132
			Uninitialized
		}

		// Token: 0x020000D4 RID: 212
		public class State : AbstractLevelState<LevelProperties.Devil.Pattern, LevelProperties.Devil.States>
		{
			// Token: 0x06000279 RID: 633 RVA: 0x00014F14 File Offset: 0x00013314
			public State(float healthTrigger, LevelProperties.Devil.Pattern[][] patterns, LevelProperties.Devil.States stateName, LevelProperties.Devil.SplitDevilWall splitDevilWall, LevelProperties.Devil.SplitDevilProjectiles splitDevilProjectiles, LevelProperties.Devil.Demons demons, LevelProperties.Devil.Clap clap, LevelProperties.Devil.Spider spider, LevelProperties.Devil.Dragon dragon, LevelProperties.Devil.Pitchfork pitchfork, LevelProperties.Devil.PitchforkTwoFlameWheel pitchforkTwoFlameWheel, LevelProperties.Devil.PitchforkThreeFlameJumper pitchforkThreeFlameJumper, LevelProperties.Devil.PitchforkFourFlameBouncer pitchforkFourFlameBouncer, LevelProperties.Devil.PitchforkFiveFlameSpinner pitchforkFiveFlameSpinner, LevelProperties.Devil.PitchforkSixFlameRing pitchforkSixFlameRing, LevelProperties.Devil.GiantHeadPlatforms giantHeadPlatforms, LevelProperties.Devil.Fireballs fireballs, LevelProperties.Devil.BombEye bombEye, LevelProperties.Devil.SkullEye skullEye, LevelProperties.Devil.Hands hands, LevelProperties.Devil.Swoopers swoopers, LevelProperties.Devil.Tears tears, LevelProperties.Devil.Firewall firewall) : base(healthTrigger, patterns, stateName)
			{
				this.splitDevilWall = splitDevilWall;
				this.splitDevilProjectiles = splitDevilProjectiles;
				this.demons = demons;
				this.clap = clap;
				this.spider = spider;
				this.dragon = dragon;
				this.pitchfork = pitchfork;
				this.pitchforkTwoFlameWheel = pitchforkTwoFlameWheel;
				this.pitchforkThreeFlameJumper = pitchforkThreeFlameJumper;
				this.pitchforkFourFlameBouncer = pitchforkFourFlameBouncer;
				this.pitchforkFiveFlameSpinner = pitchforkFiveFlameSpinner;
				this.pitchforkSixFlameRing = pitchforkSixFlameRing;
				this.giantHeadPlatforms = giantHeadPlatforms;
				this.fireballs = fireballs;
				this.bombEye = bombEye;
				this.skullEye = skullEye;
				this.hands = hands;
				this.swoopers = swoopers;
				this.tears = tears;
				this.firewall = firewall;
			}

			// Token: 0x0400046D RID: 1133
			public readonly LevelProperties.Devil.SplitDevilWall splitDevilWall;

			// Token: 0x0400046E RID: 1134
			public readonly LevelProperties.Devil.SplitDevilProjectiles splitDevilProjectiles;

			// Token: 0x0400046F RID: 1135
			public readonly LevelProperties.Devil.Demons demons;

			// Token: 0x04000470 RID: 1136
			public readonly LevelProperties.Devil.Clap clap;

			// Token: 0x04000471 RID: 1137
			public readonly LevelProperties.Devil.Spider spider;

			// Token: 0x04000472 RID: 1138
			public readonly LevelProperties.Devil.Dragon dragon;

			// Token: 0x04000473 RID: 1139
			public readonly LevelProperties.Devil.Pitchfork pitchfork;

			// Token: 0x04000474 RID: 1140
			public readonly LevelProperties.Devil.PitchforkTwoFlameWheel pitchforkTwoFlameWheel;

			// Token: 0x04000475 RID: 1141
			public readonly LevelProperties.Devil.PitchforkThreeFlameJumper pitchforkThreeFlameJumper;

			// Token: 0x04000476 RID: 1142
			public readonly LevelProperties.Devil.PitchforkFourFlameBouncer pitchforkFourFlameBouncer;

			// Token: 0x04000477 RID: 1143
			public readonly LevelProperties.Devil.PitchforkFiveFlameSpinner pitchforkFiveFlameSpinner;

			// Token: 0x04000478 RID: 1144
			public readonly LevelProperties.Devil.PitchforkSixFlameRing pitchforkSixFlameRing;

			// Token: 0x04000479 RID: 1145
			public readonly LevelProperties.Devil.GiantHeadPlatforms giantHeadPlatforms;

			// Token: 0x0400047A RID: 1146
			public readonly LevelProperties.Devil.Fireballs fireballs;

			// Token: 0x0400047B RID: 1147
			public readonly LevelProperties.Devil.BombEye bombEye;

			// Token: 0x0400047C RID: 1148
			public readonly LevelProperties.Devil.SkullEye skullEye;

			// Token: 0x0400047D RID: 1149
			public readonly LevelProperties.Devil.Hands hands;

			// Token: 0x0400047E RID: 1150
			public readonly LevelProperties.Devil.Swoopers swoopers;

			// Token: 0x0400047F RID: 1151
			public readonly LevelProperties.Devil.Tears tears;

			// Token: 0x04000480 RID: 1152
			public readonly LevelProperties.Devil.Firewall firewall;
		}

		// Token: 0x020000D5 RID: 213
		public class SplitDevilWall : AbstractLevelPropertyGroup
		{
			// Token: 0x0600027A RID: 634 RVA: 0x00014FCA File Offset: 0x000133CA
			public SplitDevilWall(MinMax xRange, MinMax speed, MinMax hesitateAfterAttack)
			{
				this.xRange = xRange;
				this.speed = speed;
				this.hesitateAfterAttack = hesitateAfterAttack;
			}

			// Token: 0x04000481 RID: 1153
			public readonly MinMax xRange;

			// Token: 0x04000482 RID: 1154
			public readonly MinMax speed;

			// Token: 0x04000483 RID: 1155
			public readonly MinMax hesitateAfterAttack;
		}

		// Token: 0x020000D6 RID: 214
		public class SplitDevilProjectiles : AbstractLevelPropertyGroup
		{
			// Token: 0x0600027B RID: 635 RVA: 0x00014FE7 File Offset: 0x000133E7
			public SplitDevilProjectiles(MinMax numProjectiles, MinMax delayBetweenProjectiles, float projectileSpeed, MinMax hesitateAfterAttack)
			{
				this.numProjectiles = numProjectiles;
				this.delayBetweenProjectiles = delayBetweenProjectiles;
				this.projectileSpeed = projectileSpeed;
				this.hesitateAfterAttack = hesitateAfterAttack;
			}

			// Token: 0x04000484 RID: 1156
			public readonly MinMax numProjectiles;

			// Token: 0x04000485 RID: 1157
			public readonly MinMax delayBetweenProjectiles;

			// Token: 0x04000486 RID: 1158
			public readonly float projectileSpeed;

			// Token: 0x04000487 RID: 1159
			public readonly MinMax hesitateAfterAttack;
		}

		// Token: 0x020000D7 RID: 215
		public class Demons : AbstractLevelPropertyGroup
		{
			// Token: 0x0600027C RID: 636 RVA: 0x0001500C File Offset: 0x0001340C
			public Demons(float hp, float speed, float delay)
			{
				this.hp = hp;
				this.speed = speed;
				this.delay = delay;
			}

			// Token: 0x04000488 RID: 1160
			public readonly float hp;

			// Token: 0x04000489 RID: 1161
			public readonly float speed;

			// Token: 0x0400048A RID: 1162
			public readonly float delay;
		}

		// Token: 0x020000D8 RID: 216
		public class Clap : AbstractLevelPropertyGroup
		{
			// Token: 0x0600027D RID: 637 RVA: 0x00015029 File Offset: 0x00013429
			public Clap(MinMax delay, float warning, float speed, float hesitate)
			{
				this.delay = delay;
				this.warning = warning;
				this.speed = speed;
				this.hesitate = hesitate;
			}

			// Token: 0x0400048B RID: 1163
			public readonly MinMax delay;

			// Token: 0x0400048C RID: 1164
			public readonly float warning;

			// Token: 0x0400048D RID: 1165
			public readonly float speed;

			// Token: 0x0400048E RID: 1166
			public readonly float hesitate;
		}

		// Token: 0x020000D9 RID: 217
		public class Spider : AbstractLevelPropertyGroup
		{
			// Token: 0x0600027E RID: 638 RVA: 0x0001504E File Offset: 0x0001344E
			public Spider(float downSpeed, float upSpeed, string positionOffset, MinMax numAttacks, MinMax entranceDelay, float hesitate)
			{
				this.downSpeed = downSpeed;
				this.upSpeed = upSpeed;
				this.positionOffset = positionOffset;
				this.numAttacks = numAttacks;
				this.entranceDelay = entranceDelay;
				this.hesitate = hesitate;
			}

			// Token: 0x0400048F RID: 1167
			public readonly float downSpeed;

			// Token: 0x04000490 RID: 1168
			public readonly float upSpeed;

			// Token: 0x04000491 RID: 1169
			public readonly string positionOffset;

			// Token: 0x04000492 RID: 1170
			public readonly MinMax numAttacks;

			// Token: 0x04000493 RID: 1171
			public readonly MinMax entranceDelay;

			// Token: 0x04000494 RID: 1172
			public readonly float hesitate;
		}

		// Token: 0x020000DA RID: 218
		public class Dragon : AbstractLevelPropertyGroup
		{
			// Token: 0x0600027F RID: 639 RVA: 0x00015083 File Offset: 0x00013483
			public Dragon(float speed, float sinHeight, float sinSpeed, string positionOffset, float returnSpeed, float returnDelay, float hesitate)
			{
				this.speed = speed;
				this.sinHeight = sinHeight;
				this.sinSpeed = sinSpeed;
				this.positionOffset = positionOffset;
				this.returnSpeed = returnSpeed;
				this.returnDelay = returnDelay;
				this.hesitate = hesitate;
			}

			// Token: 0x04000495 RID: 1173
			public readonly float speed;

			// Token: 0x04000496 RID: 1174
			public readonly float sinHeight;

			// Token: 0x04000497 RID: 1175
			public readonly float sinSpeed;

			// Token: 0x04000498 RID: 1176
			public readonly string positionOffset;

			// Token: 0x04000499 RID: 1177
			public readonly float returnSpeed;

			// Token: 0x0400049A RID: 1178
			public readonly float returnDelay;

			// Token: 0x0400049B RID: 1179
			public readonly float hesitate;
		}

		// Token: 0x020000DB RID: 219
		public class Pitchfork : AbstractLevelPropertyGroup
		{
			// Token: 0x06000280 RID: 640 RVA: 0x000150C0 File Offset: 0x000134C0
			public Pitchfork(string[] patternString, float spawnCenterY, float spawnRadius, float dormantDuration)
			{
				this.patternString = patternString;
				this.spawnCenterY = spawnCenterY;
				this.spawnRadius = spawnRadius;
				this.dormantDuration = dormantDuration;
			}

			// Token: 0x0400049C RID: 1180
			public readonly string[] patternString;

			// Token: 0x0400049D RID: 1181
			public readonly float spawnCenterY;

			// Token: 0x0400049E RID: 1182
			public readonly float spawnRadius;

			// Token: 0x0400049F RID: 1183
			public readonly float dormantDuration;
		}

		// Token: 0x020000DC RID: 220
		public class PitchforkTwoFlameWheel : AbstractLevelPropertyGroup
		{
			// Token: 0x06000281 RID: 641 RVA: 0x000150E5 File Offset: 0x000134E5
			public PitchforkTwoFlameWheel(string angleOffset, float rotationSpeed, float movementSpeed, MinMax initialtAttackDelay, MinMax secondAttackDelay, float hesitate)
			{
				this.angleOffset = angleOffset;
				this.rotationSpeed = rotationSpeed;
				this.movementSpeed = movementSpeed;
				this.initialtAttackDelay = initialtAttackDelay;
				this.secondAttackDelay = secondAttackDelay;
				this.hesitate = hesitate;
			}

			// Token: 0x040004A0 RID: 1184
			public readonly string angleOffset;

			// Token: 0x040004A1 RID: 1185
			public readonly float rotationSpeed;

			// Token: 0x040004A2 RID: 1186
			public readonly float movementSpeed;

			// Token: 0x040004A3 RID: 1187
			public readonly MinMax initialtAttackDelay;

			// Token: 0x040004A4 RID: 1188
			public readonly MinMax secondAttackDelay;

			// Token: 0x040004A5 RID: 1189
			public readonly float hesitate;
		}

		// Token: 0x020000DD RID: 221
		public class PitchforkThreeFlameJumper : AbstractLevelPropertyGroup
		{
			// Token: 0x06000282 RID: 642 RVA: 0x0001511C File Offset: 0x0001351C
			public PitchforkThreeFlameJumper(string angleOffset, MinMax launchAngle, MinMax launchSpeed, float gravity, MinMax initialAttackDelay, float jumpDelay, int numJumps, float hesitate)
			{
				this.angleOffset = angleOffset;
				this.launchAngle = launchAngle;
				this.launchSpeed = launchSpeed;
				this.gravity = gravity;
				this.initialAttackDelay = initialAttackDelay;
				this.jumpDelay = jumpDelay;
				this.numJumps = numJumps;
				this.hesitate = hesitate;
			}

			// Token: 0x040004A6 RID: 1190
			public readonly string angleOffset;

			// Token: 0x040004A7 RID: 1191
			public readonly MinMax launchAngle;

			// Token: 0x040004A8 RID: 1192
			public readonly MinMax launchSpeed;

			// Token: 0x040004A9 RID: 1193
			public readonly float gravity;

			// Token: 0x040004AA RID: 1194
			public readonly MinMax initialAttackDelay;

			// Token: 0x040004AB RID: 1195
			public readonly float jumpDelay;

			// Token: 0x040004AC RID: 1196
			public readonly int numJumps;

			// Token: 0x040004AD RID: 1197
			public readonly float hesitate;
		}

		// Token: 0x020000DE RID: 222
		public class PitchforkFourFlameBouncer : AbstractLevelPropertyGroup
		{
			// Token: 0x06000283 RID: 643 RVA: 0x0001516C File Offset: 0x0001356C
			public PitchforkFourFlameBouncer(string angleOffset, MinMax initialAttackDelay, float speed, int numBounces, float hesitate)
			{
				this.angleOffset = angleOffset;
				this.initialAttackDelay = initialAttackDelay;
				this.speed = speed;
				this.numBounces = numBounces;
				this.hesitate = hesitate;
			}

			// Token: 0x040004AE RID: 1198
			public readonly string angleOffset;

			// Token: 0x040004AF RID: 1199
			public readonly MinMax initialAttackDelay;

			// Token: 0x040004B0 RID: 1200
			public readonly float speed;

			// Token: 0x040004B1 RID: 1201
			public readonly int numBounces;

			// Token: 0x040004B2 RID: 1202
			public readonly float hesitate;
		}

		// Token: 0x020000DF RID: 223
		public class PitchforkFiveFlameSpinner : AbstractLevelPropertyGroup
		{
			// Token: 0x06000284 RID: 644 RVA: 0x00015199 File Offset: 0x00013599
			public PitchforkFiveFlameSpinner(string angleOffset, float rotationSpeed, float maxSpeed, float acceleration, float attackDuration, float hesitate)
			{
				this.angleOffset = angleOffset;
				this.rotationSpeed = rotationSpeed;
				this.maxSpeed = maxSpeed;
				this.acceleration = acceleration;
				this.attackDuration = attackDuration;
				this.hesitate = hesitate;
			}

			// Token: 0x040004B3 RID: 1203
			public readonly string angleOffset;

			// Token: 0x040004B4 RID: 1204
			public readonly float rotationSpeed;

			// Token: 0x040004B5 RID: 1205
			public readonly float maxSpeed;

			// Token: 0x040004B6 RID: 1206
			public readonly float acceleration;

			// Token: 0x040004B7 RID: 1207
			public readonly float attackDuration;

			// Token: 0x040004B8 RID: 1208
			public readonly float hesitate;
		}

		// Token: 0x020000E0 RID: 224
		public class PitchforkSixFlameRing : AbstractLevelPropertyGroup
		{
			// Token: 0x06000285 RID: 645 RVA: 0x000151CE File Offset: 0x000135CE
			public PitchforkSixFlameRing(string angleOffset, MinMax initialAttackDelay, float attackDelay, float speed, float groundDuration, float hesitate)
			{
				this.angleOffset = angleOffset;
				this.initialAttackDelay = initialAttackDelay;
				this.attackDelay = attackDelay;
				this.speed = speed;
				this.groundDuration = groundDuration;
				this.hesitate = hesitate;
			}

			// Token: 0x040004B9 RID: 1209
			public readonly string angleOffset;

			// Token: 0x040004BA RID: 1210
			public readonly MinMax initialAttackDelay;

			// Token: 0x040004BB RID: 1211
			public readonly float attackDelay;

			// Token: 0x040004BC RID: 1212
			public readonly float speed;

			// Token: 0x040004BD RID: 1213
			public readonly float groundDuration;

			// Token: 0x040004BE RID: 1214
			public readonly float hesitate;
		}

		// Token: 0x020000E1 RID: 225
		public class GiantHeadPlatforms : AbstractLevelPropertyGroup
		{
			// Token: 0x06000286 RID: 646 RVA: 0x00015204 File Offset: 0x00013604
			public GiantHeadPlatforms(float exitSpeed, float riseSpeed, string riseString, float maxHeight, float holdDelay, MinMax riseDelayRange, float size, bool riseDuringTearPhase)
			{
				this.exitSpeed = exitSpeed;
				this.riseSpeed = riseSpeed;
				this.riseString = riseString;
				this.maxHeight = maxHeight;
				this.holdDelay = holdDelay;
				this.riseDelayRange = riseDelayRange;
				this.size = size;
				this.riseDuringTearPhase = riseDuringTearPhase;
			}

			// Token: 0x040004BF RID: 1215
			public readonly float exitSpeed;

			// Token: 0x040004C0 RID: 1216
			public readonly float riseSpeed;

			// Token: 0x040004C1 RID: 1217
			public readonly string riseString;

			// Token: 0x040004C2 RID: 1218
			public readonly float maxHeight;

			// Token: 0x040004C3 RID: 1219
			public readonly float holdDelay;

			// Token: 0x040004C4 RID: 1220
			public readonly MinMax riseDelayRange;

			// Token: 0x040004C5 RID: 1221
			public readonly float size;

			// Token: 0x040004C6 RID: 1222
			public readonly bool riseDuringTearPhase;
		}

		// Token: 0x020000E2 RID: 226
		public class Fireballs : AbstractLevelPropertyGroup
		{
			// Token: 0x06000287 RID: 647 RVA: 0x00015254 File Offset: 0x00013654
			public Fireballs(float initialDelay, float fallSpeed, float fallAcceleration, float spawnDelay, float size)
			{
				this.initialDelay = initialDelay;
				this.fallSpeed = fallSpeed;
				this.fallAcceleration = fallAcceleration;
				this.spawnDelay = spawnDelay;
				this.size = size;
			}

			// Token: 0x040004C7 RID: 1223
			public readonly float initialDelay;

			// Token: 0x040004C8 RID: 1224
			public readonly float fallSpeed;

			// Token: 0x040004C9 RID: 1225
			public readonly float fallAcceleration;

			// Token: 0x040004CA RID: 1226
			public readonly float spawnDelay;

			// Token: 0x040004CB RID: 1227
			public readonly float size;
		}

		// Token: 0x020000E3 RID: 227
		public class BombEye : AbstractLevelPropertyGroup
		{
			// Token: 0x06000288 RID: 648 RVA: 0x00015281 File Offset: 0x00013681
			public BombEye(float xSinHeight, float ySinHeight, float xSinSpeed, float ySinSpeed, float explodeDelay, MinMax hesitate)
			{
				this.xSinHeight = xSinHeight;
				this.ySinHeight = ySinHeight;
				this.xSinSpeed = xSinSpeed;
				this.ySinSpeed = ySinSpeed;
				this.explodeDelay = explodeDelay;
				this.hesitate = hesitate;
			}

			// Token: 0x040004CC RID: 1228
			public readonly float xSinHeight;

			// Token: 0x040004CD RID: 1229
			public readonly float ySinHeight;

			// Token: 0x040004CE RID: 1230
			public readonly float xSinSpeed;

			// Token: 0x040004CF RID: 1231
			public readonly float ySinSpeed;

			// Token: 0x040004D0 RID: 1232
			public readonly float explodeDelay;

			// Token: 0x040004D1 RID: 1233
			public readonly MinMax hesitate;
		}

		// Token: 0x020000E4 RID: 228
		public class SkullEye : AbstractLevelPropertyGroup
		{
			// Token: 0x06000289 RID: 649 RVA: 0x000152B6 File Offset: 0x000136B6
			public SkullEye(float initialMoveDuration, float initialMoveSpeed, float swirlMoveOutwardSpeed, float swirlRotationSpeed, MinMax hesitate)
			{
				this.initialMoveDuration = initialMoveDuration;
				this.initialMoveSpeed = initialMoveSpeed;
				this.swirlMoveOutwardSpeed = swirlMoveOutwardSpeed;
				this.swirlRotationSpeed = swirlRotationSpeed;
				this.hesitate = hesitate;
			}

			// Token: 0x040004D2 RID: 1234
			public readonly float initialMoveDuration;

			// Token: 0x040004D3 RID: 1235
			public readonly float initialMoveSpeed;

			// Token: 0x040004D4 RID: 1236
			public readonly float swirlMoveOutwardSpeed;

			// Token: 0x040004D5 RID: 1237
			public readonly float swirlRotationSpeed;

			// Token: 0x040004D6 RID: 1238
			public readonly MinMax hesitate;
		}

		// Token: 0x020000E5 RID: 229
		public class Hands : AbstractLevelPropertyGroup
		{
			// Token: 0x0600028A RID: 650 RVA: 0x000152E4 File Offset: 0x000136E4
			public Hands(float HP, MinMax yRange, float speed, MinMax shotDelay, float bulletSpeed, MinMax initialSpawnDelay, MinMax spawnDelayRange, string pinkString)
			{
				this.HP = HP;
				this.yRange = yRange;
				this.speed = speed;
				this.shotDelay = shotDelay;
				this.bulletSpeed = bulletSpeed;
				this.initialSpawnDelay = initialSpawnDelay;
				this.spawnDelayRange = spawnDelayRange;
				this.pinkString = pinkString;
			}

			// Token: 0x040004D7 RID: 1239
			public readonly float HP;

			// Token: 0x040004D8 RID: 1240
			public readonly MinMax yRange;

			// Token: 0x040004D9 RID: 1241
			public readonly float speed;

			// Token: 0x040004DA RID: 1242
			public readonly MinMax shotDelay;

			// Token: 0x040004DB RID: 1243
			public readonly float bulletSpeed;

			// Token: 0x040004DC RID: 1244
			public readonly MinMax initialSpawnDelay;

			// Token: 0x040004DD RID: 1245
			public readonly MinMax spawnDelayRange;

			// Token: 0x040004DE RID: 1246
			public readonly string pinkString;
		}

		// Token: 0x020000E6 RID: 230
		public class Swoopers : AbstractLevelPropertyGroup
		{
			// Token: 0x0600028B RID: 651 RVA: 0x00015334 File Offset: 0x00013734
			public Swoopers(string positions, MinMax spawnCount, int maxCount, float hp, MinMax attackDelay, MinMax launchAngle, MinMax launchSpeed, float gravity, MinMax initialSpawnDelay, MinMax spawnDelay, MinMax yIdlePos)
			{
				this.positions = positions;
				this.spawnCount = spawnCount;
				this.maxCount = maxCount;
				this.hp = hp;
				this.attackDelay = attackDelay;
				this.launchAngle = launchAngle;
				this.launchSpeed = launchSpeed;
				this.gravity = gravity;
				this.initialSpawnDelay = initialSpawnDelay;
				this.spawnDelay = spawnDelay;
				this.yIdlePos = yIdlePos;
			}

			// Token: 0x040004DF RID: 1247
			public readonly string positions;

			// Token: 0x040004E0 RID: 1248
			public readonly MinMax spawnCount;

			// Token: 0x040004E1 RID: 1249
			public readonly int maxCount;

			// Token: 0x040004E2 RID: 1250
			public readonly float hp;

			// Token: 0x040004E3 RID: 1251
			public readonly MinMax attackDelay;

			// Token: 0x040004E4 RID: 1252
			public readonly MinMax launchAngle;

			// Token: 0x040004E5 RID: 1253
			public readonly MinMax launchSpeed;

			// Token: 0x040004E6 RID: 1254
			public readonly float gravity;

			// Token: 0x040004E7 RID: 1255
			public readonly MinMax initialSpawnDelay;

			// Token: 0x040004E8 RID: 1256
			public readonly MinMax spawnDelay;

			// Token: 0x040004E9 RID: 1257
			public readonly MinMax yIdlePos;
		}

		// Token: 0x020000E7 RID: 231
		public class Tears : AbstractLevelPropertyGroup
		{
			// Token: 0x0600028C RID: 652 RVA: 0x0001539C File Offset: 0x0001379C
			public Tears(float speed, float delay)
			{
				this.speed = speed;
				this.delay = delay;
			}

			// Token: 0x040004EA RID: 1258
			public readonly float speed;

			// Token: 0x040004EB RID: 1259
			public readonly float delay;
		}

		// Token: 0x020000E8 RID: 232
		public class Firewall : AbstractLevelPropertyGroup
		{
			// Token: 0x0600028D RID: 653 RVA: 0x000153B2 File Offset: 0x000137B2
			public Firewall(float firewallSpeed)
			{
				this.firewallSpeed = firewallSpeed;
			}

			// Token: 0x040004EC RID: 1260
			public readonly float firewallSpeed;
		}
	}

	// Token: 0x020000EA RID: 234
	public class DiceGate : AbstractLevelProperties<LevelProperties.DiceGate.State, LevelProperties.DiceGate.Pattern, LevelProperties.DiceGate.States>
	{
		// Token: 0x060002A6 RID: 678 RVA: 0x000153C1 File Offset: 0x000137C1
		public DiceGate(int hp, Level.GoalTimes goalTimes, LevelProperties.DiceGate.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060002A7 RID: 679 RVA: 0x000153D0 File Offset: 0x000137D0
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x060002A8 RID: 680 RVA: 0x0001542B File Offset: 0x0001382B
		public static LevelProperties.DiceGate.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DiceGate.Pattern.Default;
				}
			}
			Debug.LogError("Pattern DiceGate.Pattern for  " + id + " not found.", null);
			return LevelProperties.DiceGate.Pattern.Uninitialized;
		}

		// Token: 0x060002A9 RID: 681 RVA: 0x0001546C File Offset: 0x0001386C
		public static LevelProperties.DiceGate GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DiceGate.State> list = new List<LevelProperties.DiceGate.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.DiceGate.State(10f, new LevelProperties.DiceGate.Pattern[][]
						{
							new LevelProperties.DiceGate.Pattern[1]
						}, LevelProperties.DiceGate.States.Main));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.DiceGate.State(10f, new LevelProperties.DiceGate.Pattern[][]
					{
						new LevelProperties.DiceGate.Pattern[1]
					}, LevelProperties.DiceGate.States.Main));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.DiceGate.State(10f, new LevelProperties.DiceGate.Pattern[][]
				{
					new LevelProperties.DiceGate.Pattern[1]
				}, LevelProperties.DiceGate.States.Main));
			}
			return new LevelProperties.DiceGate(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020000EB RID: 235
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700006C RID: 108
			// (get) Token: 0x060002AB RID: 683 RVA: 0x00015568 File Offset: 0x00013968
			// (set) Token: 0x060002AC RID: 684 RVA: 0x00015570 File Offset: 0x00013970
			private protected LevelProperties.DiceGate properties { protected get; private set; }

			// Token: 0x060002AD RID: 685 RVA: 0x00015579 File Offset: 0x00013979
			public virtual void LevelInit(LevelProperties.DiceGate properties)
			{
				this.properties = properties;
			}

			// Token: 0x060002AE RID: 686 RVA: 0x00015582 File Offset: 0x00013982
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020000EC RID: 236
		public enum States
		{
			// Token: 0x04000505 RID: 1285
			Main,
			// Token: 0x04000506 RID: 1286
			Generic
		}

		// Token: 0x020000ED RID: 237
		public enum Pattern
		{
			// Token: 0x04000508 RID: 1288
			Default,
			// Token: 0x04000509 RID: 1289
			Uninitialized
		}

		// Token: 0x020000EE RID: 238
		public class State : AbstractLevelState<LevelProperties.DiceGate.Pattern, LevelProperties.DiceGate.States>
		{
			// Token: 0x060002AF RID: 687 RVA: 0x00015584 File Offset: 0x00013984
			public State(float healthTrigger, LevelProperties.DiceGate.Pattern[][] patterns, LevelProperties.DiceGate.States stateName) : base(healthTrigger, patterns, stateName)
			{
			}
		}
	}

	// Token: 0x020000F0 RID: 240
	public class DicePalaceBooze : AbstractLevelProperties<LevelProperties.DicePalaceBooze.State, LevelProperties.DicePalaceBooze.Pattern, LevelProperties.DicePalaceBooze.States>
	{
		// Token: 0x060002BE RID: 702 RVA: 0x0001558F File Offset: 0x0001398F
		public DicePalaceBooze(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceBooze.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060002BF RID: 703 RVA: 0x0001559C File Offset: 0x0001399C
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 500f;
				break;
			case Level.Mode.Normal:
				timeline.health = 500f;
				break;
			case Level.Mode.Hard:
				timeline.health = 500f;
				break;
			}
			return timeline;
		}

		// Token: 0x060002C0 RID: 704 RVA: 0x000155F7 File Offset: 0x000139F7
		public static LevelProperties.DicePalaceBooze.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DicePalaceBooze.Pattern.Default;
				}
			}
			Debug.LogError("Pattern DicePalaceBooze.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceBooze.Pattern.Uninitialized;
		}

		// Token: 0x060002C1 RID: 705 RVA: 0x00015638 File Offset: 0x00013A38
		public static LevelProperties.DicePalaceBooze GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceBooze.State> list = new List<LevelProperties.DicePalaceBooze.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 500;
						goalTimes = new Level.GoalTimes(60f, 60f, 60f);
						list.Add(new LevelProperties.DicePalaceBooze.State(10f, new LevelProperties.DicePalaceBooze.Pattern[][]
						{
							new LevelProperties.DicePalaceBooze.Pattern[1]
						}, LevelProperties.DicePalaceBooze.States.Main, new LevelProperties.DicePalaceBooze.Decanter(265f, 730f, "2.9,3.5,4.2,3.4,2.8,4.2,3,3.4", new MinMax(0.8f, 1.3f)), new LevelProperties.DicePalaceBooze.Tumbler(265f, "4.6,5,4.4,5.1,4.1,5.5,5.6", 0.5f, 0.75f), new LevelProperties.DicePalaceBooze.Martini(265f, 8, 3.6f, "3,5,4,3,3,4", 530f, 1f, new string[]
						{
							"400,650,375,525",
							"425,500,625",
							"600,475,550,450"
						}, new string[]
						{
							"0,500,700,300,725,150,500",
							"550,200,650,50",
							"100,400,600,250,450"
						}, 350f, "1,2", 1f), new LevelProperties.DicePalaceBooze.Main(0.3f)));
					}
				}
				else
				{
					hp = 500;
					goalTimes = new Level.GoalTimes(60f, 60f, 60f);
					list.Add(new LevelProperties.DicePalaceBooze.State(10f, new LevelProperties.DicePalaceBooze.Pattern[][]
					{
						new LevelProperties.DicePalaceBooze.Pattern[1]
					}, LevelProperties.DicePalaceBooze.States.Main, new LevelProperties.DicePalaceBooze.Decanter(215f, 730f, "2.9,3.5,4.2,3.4,2.8,4.2,3,3.4", new MinMax(0.9f, 1.2f)), new LevelProperties.DicePalaceBooze.Tumbler(215f, "4.6,5,5.4,5.8,4.1,5.5,5.6", 0.5f, 0.75f), new LevelProperties.DicePalaceBooze.Martini(215f, 8, 3.6f, "3,5,4,3,3,4", 500f, 1f, new string[]
					{
						"400,650,375,500",
						"600,475,550,450"
					}, new string[]
					{
						"0,500,700,300,725,150,500",
						"100,400,600,250,450"
					}, 350f, "1,2", 1f), new LevelProperties.DicePalaceBooze.Main(0.3f)));
				}
			}
			else
			{
				hp = 500;
				goalTimes = new Level.GoalTimes(60f, 60f, 60f);
				list.Add(new LevelProperties.DicePalaceBooze.State(10f, new LevelProperties.DicePalaceBooze.Pattern[][]
				{
					new LevelProperties.DicePalaceBooze.Pattern[1]
				}, LevelProperties.DicePalaceBooze.States.Main, new LevelProperties.DicePalaceBooze.Decanter(215f, 730f, "2.9,3.5,4.2,3.4,2.8,4.2,3,3.4", new MinMax(0.9f, 1.2f)), new LevelProperties.DicePalaceBooze.Tumbler(215f, "4.6,5,5.4,5.8,4.1,5.5,5.6", 0.5f, 0.75f), new LevelProperties.DicePalaceBooze.Martini(215f, 8, 3.6f, "3,5,4,3,3,4", 500f, 1f, new string[]
				{
					"400,650,375,500"
				}, new string[]
				{
					"0,500,700,300,725,150,500"
				}, 350f, "1,2", 1f), new LevelProperties.DicePalaceBooze.Main(0.3f)));
			}
			return new LevelProperties.DicePalaceBooze(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020000F1 RID: 241
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000071 RID: 113
			// (get) Token: 0x060002C3 RID: 707 RVA: 0x0001591D File Offset: 0x00013D1D
			// (set) Token: 0x060002C4 RID: 708 RVA: 0x00015925 File Offset: 0x00013D25
			private protected LevelProperties.DicePalaceBooze properties { protected get; private set; }

			// Token: 0x060002C5 RID: 709 RVA: 0x0001592E File Offset: 0x00013D2E
			public virtual void LevelInit(LevelProperties.DicePalaceBooze properties)
			{
				this.properties = properties;
			}

			// Token: 0x060002C6 RID: 710 RVA: 0x00015937 File Offset: 0x00013D37
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020000F2 RID: 242
		public enum States
		{
			// Token: 0x0400051A RID: 1306
			Main,
			// Token: 0x0400051B RID: 1307
			Generic
		}

		// Token: 0x020000F3 RID: 243
		public enum Pattern
		{
			// Token: 0x0400051D RID: 1309
			Default,
			// Token: 0x0400051E RID: 1310
			Uninitialized
		}

		// Token: 0x020000F4 RID: 244
		public class State : AbstractLevelState<LevelProperties.DicePalaceBooze.Pattern, LevelProperties.DicePalaceBooze.States>
		{
			// Token: 0x060002C7 RID: 711 RVA: 0x00015939 File Offset: 0x00013D39
			public State(float healthTrigger, LevelProperties.DicePalaceBooze.Pattern[][] patterns, LevelProperties.DicePalaceBooze.States stateName, LevelProperties.DicePalaceBooze.Decanter decanter, LevelProperties.DicePalaceBooze.Tumbler tumbler, LevelProperties.DicePalaceBooze.Martini martini, LevelProperties.DicePalaceBooze.Main main) : base(healthTrigger, patterns, stateName)
			{
				this.decanter = decanter;
				this.tumbler = tumbler;
				this.martini = martini;
				this.main = main;
			}

			// Token: 0x0400051F RID: 1311
			public readonly LevelProperties.DicePalaceBooze.Decanter decanter;

			// Token: 0x04000520 RID: 1312
			public readonly LevelProperties.DicePalaceBooze.Tumbler tumbler;

			// Token: 0x04000521 RID: 1313
			public readonly LevelProperties.DicePalaceBooze.Martini martini;

			// Token: 0x04000522 RID: 1314
			public readonly LevelProperties.DicePalaceBooze.Main main;
		}

		// Token: 0x020000F5 RID: 245
		public class Decanter : AbstractLevelPropertyGroup
		{
			// Token: 0x060002C8 RID: 712 RVA: 0x00015964 File Offset: 0x00013D64
			public Decanter(float decanterHP, float beamDropSpeed, string attackDelayString, MinMax beamAppearDelayRange)
			{
				this.decanterHP = decanterHP;
				this.beamDropSpeed = beamDropSpeed;
				this.attackDelayString = attackDelayString;
				this.beamAppearDelayRange = beamAppearDelayRange;
			}

			// Token: 0x04000523 RID: 1315
			public readonly float decanterHP;

			// Token: 0x04000524 RID: 1316
			public readonly float beamDropSpeed;

			// Token: 0x04000525 RID: 1317
			public readonly string attackDelayString;

			// Token: 0x04000526 RID: 1318
			public readonly MinMax beamAppearDelayRange;
		}

		// Token: 0x020000F6 RID: 246
		public class Tumbler : AbstractLevelPropertyGroup
		{
			// Token: 0x060002C9 RID: 713 RVA: 0x00015989 File Offset: 0x00013D89
			public Tumbler(float tumblerHP, string beamDelayString, float beamDuration, float beamWarningDuration)
			{
				this.tumblerHP = tumblerHP;
				this.beamDelayString = beamDelayString;
				this.beamDuration = beamDuration;
				this.beamWarningDuration = beamWarningDuration;
			}

			// Token: 0x04000527 RID: 1319
			public readonly float tumblerHP;

			// Token: 0x04000528 RID: 1320
			public readonly string beamDelayString;

			// Token: 0x04000529 RID: 1321
			public readonly float beamDuration;

			// Token: 0x0400052A RID: 1322
			public readonly float beamWarningDuration;
		}

		// Token: 0x020000F7 RID: 247
		public class Martini : AbstractLevelPropertyGroup
		{
			// Token: 0x060002CA RID: 714 RVA: 0x000159B0 File Offset: 0x00013DB0
			public Martini(float martiniHP, int oliveHP, float oliveSpawnDelay, string moveString, float oliveSpeed, float oliveStopDuration, string[] olivePositionStringY, string[] olivePositionStringX, float bulletSpeed, string pinkString, float oliveHesitateAfterShooting)
			{
				this.martiniHP = martiniHP;
				this.oliveHP = oliveHP;
				this.oliveSpawnDelay = oliveSpawnDelay;
				this.moveString = moveString;
				this.oliveSpeed = oliveSpeed;
				this.oliveStopDuration = oliveStopDuration;
				this.olivePositionStringY = olivePositionStringY;
				this.olivePositionStringX = olivePositionStringX;
				this.bulletSpeed = bulletSpeed;
				this.pinkString = pinkString;
				this.oliveHesitateAfterShooting = oliveHesitateAfterShooting;
			}

			// Token: 0x0400052B RID: 1323
			public readonly float martiniHP;

			// Token: 0x0400052C RID: 1324
			public readonly int oliveHP;

			// Token: 0x0400052D RID: 1325
			public readonly float oliveSpawnDelay;

			// Token: 0x0400052E RID: 1326
			public readonly string moveString;

			// Token: 0x0400052F RID: 1327
			public readonly float oliveSpeed;

			// Token: 0x04000530 RID: 1328
			public readonly float oliveStopDuration;

			// Token: 0x04000531 RID: 1329
			public readonly string[] olivePositionStringY;

			// Token: 0x04000532 RID: 1330
			public readonly string[] olivePositionStringX;

			// Token: 0x04000533 RID: 1331
			public readonly float bulletSpeed;

			// Token: 0x04000534 RID: 1332
			public readonly string pinkString;

			// Token: 0x04000535 RID: 1333
			public readonly float oliveHesitateAfterShooting;
		}

		// Token: 0x020000F8 RID: 248
		public class Main : AbstractLevelPropertyGroup
		{
			// Token: 0x060002CB RID: 715 RVA: 0x00015A18 File Offset: 0x00013E18
			public Main(float delaySubstractAmount)
			{
				this.delaySubstractAmount = delaySubstractAmount;
			}

			// Token: 0x04000536 RID: 1334
			public readonly float delaySubstractAmount;
		}
	}

	// Token: 0x020000FA RID: 250
	public class DicePalaceCard : AbstractLevelProperties<LevelProperties.DicePalaceCard.State, LevelProperties.DicePalaceCard.Pattern, LevelProperties.DicePalaceCard.States>
	{
		// Token: 0x060002D9 RID: 729 RVA: 0x00015A27 File Offset: 0x00013E27
		public DicePalaceCard(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceCard.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060002DA RID: 730 RVA: 0x00015A34 File Offset: 0x00013E34
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x060002DB RID: 731 RVA: 0x00015A8F File Offset: 0x00013E8F
		public static LevelProperties.DicePalaceCard.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DicePalaceCard.Pattern.Default;
				}
			}
			Debug.LogError("Pattern DicePalaceCard.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceCard.Pattern.Uninitialized;
		}

		// Token: 0x060002DC RID: 732 RVA: 0x00015AD0 File Offset: 0x00013ED0
		public static LevelProperties.DicePalaceCard GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceCard.State> list = new List<LevelProperties.DicePalaceCard.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.DicePalaceCard.State(10f, new LevelProperties.DicePalaceCard.Pattern[][]
						{
							new LevelProperties.DicePalaceCard.Pattern[1]
						}, LevelProperties.DicePalaceCard.States.Main, new LevelProperties.DicePalaceCard.Blocks(0f, 0f, new string[0], new string[0], 0f, 0, 0, 0f)));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.DicePalaceCard.State(10f, new LevelProperties.DicePalaceCard.Pattern[][]
					{
						new LevelProperties.DicePalaceCard.Pattern[1]
					}, LevelProperties.DicePalaceCard.States.Main, new LevelProperties.DicePalaceCard.Blocks(550f, 400f, new string[]
					{
						"H,H,S,S,C,H,S,H,C,S"
					}, new string[]
					{
						"3,3"
					}, 2.5f, 8, 7, 70f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.DicePalaceCard.State(10f, new LevelProperties.DicePalaceCard.Pattern[][]
				{
					new LevelProperties.DicePalaceCard.Pattern[1]
				}, LevelProperties.DicePalaceCard.States.Main, new LevelProperties.DicePalaceCard.Blocks(0f, 0f, new string[0], new string[0], 0f, 0, 0, 0f)));
			}
			return new LevelProperties.DicePalaceCard(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020000FB RID: 251
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000077 RID: 119
			// (get) Token: 0x060002DE RID: 734 RVA: 0x00015C51 File Offset: 0x00014051
			// (set) Token: 0x060002DF RID: 735 RVA: 0x00015C59 File Offset: 0x00014059
			private protected LevelProperties.DicePalaceCard properties { protected get; private set; }

			// Token: 0x060002E0 RID: 736 RVA: 0x00015C62 File Offset: 0x00014062
			public virtual void LevelInit(LevelProperties.DicePalaceCard properties)
			{
				this.properties = properties;
			}

			// Token: 0x060002E1 RID: 737 RVA: 0x00015C6B File Offset: 0x0001406B
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020000FC RID: 252
		public enum States
		{
			// Token: 0x04000540 RID: 1344
			Main,
			// Token: 0x04000541 RID: 1345
			Generic
		}

		// Token: 0x020000FD RID: 253
		public enum Pattern
		{
			// Token: 0x04000543 RID: 1347
			Default,
			// Token: 0x04000544 RID: 1348
			Uninitialized
		}

		// Token: 0x020000FE RID: 254
		public class State : AbstractLevelState<LevelProperties.DicePalaceCard.Pattern, LevelProperties.DicePalaceCard.States>
		{
			// Token: 0x060002E2 RID: 738 RVA: 0x00015C6D File Offset: 0x0001406D
			public State(float healthTrigger, LevelProperties.DicePalaceCard.Pattern[][] patterns, LevelProperties.DicePalaceCard.States stateName, LevelProperties.DicePalaceCard.Blocks blocks) : base(healthTrigger, patterns, stateName)
			{
				this.blocks = blocks;
			}

			// Token: 0x04000545 RID: 1349
			public readonly LevelProperties.DicePalaceCard.Blocks blocks;
		}

		// Token: 0x020000FF RID: 255
		public class Blocks : AbstractLevelPropertyGroup
		{
			// Token: 0x060002E3 RID: 739 RVA: 0x00015C80 File Offset: 0x00014080
			public Blocks(float blockSpeed, float blockDropSpeed, string[] cardTypeString, string[] cardAmountString, float attackDelayRange, int gridWidth, int gridHeight, float blockSize)
			{
				this.blockSpeed = blockSpeed;
				this.blockDropSpeed = blockDropSpeed;
				this.cardTypeString = cardTypeString;
				this.cardAmountString = cardAmountString;
				this.attackDelayRange = attackDelayRange;
				this.gridWidth = gridWidth;
				this.gridHeight = gridHeight;
				this.blockSize = blockSize;
			}

			// Token: 0x04000546 RID: 1350
			public readonly float blockSpeed;

			// Token: 0x04000547 RID: 1351
			public readonly float blockDropSpeed;

			// Token: 0x04000548 RID: 1352
			public readonly string[] cardTypeString;

			// Token: 0x04000549 RID: 1353
			public readonly string[] cardAmountString;

			// Token: 0x0400054A RID: 1354
			public readonly float attackDelayRange;

			// Token: 0x0400054B RID: 1355
			public readonly int gridWidth;

			// Token: 0x0400054C RID: 1356
			public readonly int gridHeight;

			// Token: 0x0400054D RID: 1357
			public readonly float blockSize;
		}
	}

	// Token: 0x02000101 RID: 257
	public class DicePalaceChips : AbstractLevelProperties<LevelProperties.DicePalaceChips.State, LevelProperties.DicePalaceChips.Pattern, LevelProperties.DicePalaceChips.States>
	{
		// Token: 0x060002EF RID: 751 RVA: 0x00015CD0 File Offset: 0x000140D0
		public DicePalaceChips(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceChips.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060002F0 RID: 752 RVA: 0x00015CDC File Offset: 0x000140DC
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 450f;
				break;
			case Level.Mode.Normal:
				timeline.health = 450f;
				break;
			case Level.Mode.Hard:
				timeline.health = 575f;
				break;
			}
			return timeline;
		}

		// Token: 0x060002F1 RID: 753 RVA: 0x00015D37 File Offset: 0x00014137
		public static LevelProperties.DicePalaceChips.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DicePalaceChips.Pattern.Default;
				}
			}
			Debug.LogError("Pattern DicePalaceChips.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceChips.Pattern.Uninitialized;
		}

		// Token: 0x060002F2 RID: 754 RVA: 0x00015D78 File Offset: 0x00014178
		public static LevelProperties.DicePalaceChips GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceChips.State> list = new List<LevelProperties.DicePalaceChips.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 575;
						goalTimes = new Level.GoalTimes(60f, 60f, 60f);
						list.Add(new LevelProperties.DicePalaceChips.State(10f, new LevelProperties.DicePalaceChips.Pattern[][]
						{
							new LevelProperties.DicePalaceChips.Pattern[1]
						}, LevelProperties.DicePalaceChips.States.Main, new LevelProperties.DicePalaceChips.Chips(3f, 0.8f, new string[]
						{
							"1-2-8,3-4-5,6-7",
							"1-2,3-8,4-5-6-7",
							"1-2-3-4,5-6-7-8",
							"2-4-6-1,3-8,5-7",
							"1-7-8,2-3,4-5-6",
							"2-3-8,1-5-6,4-7",
							"3-4-5-6,1-2-7-8",
							"4-5-6-7,1-2-3-8",
							"5-6-7-8,1-2-3-4",
							"2-3-8-1,4-5-6-7",
							"3-4-5,1-2-6-7-8",
							"1-8,3-4-5,2-6-7",
							"4-5-6,1-2-3-7-8",
							"5-6-7-8,1-2-3-4",
							"2-3-4,1-5-6-7-8",
							"3-4-5-6,1-8,2-7",
							"1-2-3-8,4-5-6-7"
						}, 0.8f, new MinMax(1.5f, 2.5f), 1.2f)));
					}
				}
				else
				{
					hp = 450;
					goalTimes = new Level.GoalTimes(60f, 60f, 60f);
					list.Add(new LevelProperties.DicePalaceChips.State(10f, new LevelProperties.DicePalaceChips.Pattern[][]
					{
						new LevelProperties.DicePalaceChips.Pattern[1]
					}, LevelProperties.DicePalaceChips.States.Main, new LevelProperties.DicePalaceChips.Chips(3f, 0.8f, new string[]
					{
						"1-2-3-4,5-6-7-8",
						"1-8,2-7,3-4-5-6",
						"3-4-5,1-2-6-7-8",
						"5-6-7-8,1-2-3-4",
						"5-6-7,1-2-8,3-4",
						"1-2-3-4-5-6,7-8",
						"1-2-8,7-6,3-4-5",
						"2-3-4-5,1-6-7-8",
						"8-5,2-3-4,1-6-7",
						"1-8,2-3-4-5,6-7",
						"3-4-5,1-6-7,2-8",
						"6-7-8,3-4-5,1-2",
						"5-6-7,1-8,2-3-4",
						"1-2-7-8,3-4-5-6"
					}, 1f, new MinMax(2f, 3f), 1.2f)));
				}
			}
			else
			{
				hp = 450;
				goalTimes = new Level.GoalTimes(60f, 60f, 60f);
				list.Add(new LevelProperties.DicePalaceChips.State(10f, new LevelProperties.DicePalaceChips.Pattern[][]
				{
					new LevelProperties.DicePalaceChips.Pattern[1]
				}, LevelProperties.DicePalaceChips.States.Main, new LevelProperties.DicePalaceChips.Chips(3f, 0.8f, new string[]
				{
					"1-2-3-4,5-6-7-8",
					"1-8,2-7,3-4-5-6",
					"3-4-5,1-2-6-7-8",
					"5-6-7-8,1-2-3-4",
					"5-6-7,1-2-8,3-4"
				}, 1f, new MinMax(2f, 3f), 1.2f)));
			}
			return new LevelProperties.DicePalaceChips(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000102 RID: 258
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700007D RID: 125
			// (get) Token: 0x060002F4 RID: 756 RVA: 0x00016036 File Offset: 0x00014436
			// (set) Token: 0x060002F5 RID: 757 RVA: 0x0001603E File Offset: 0x0001443E
			private protected LevelProperties.DicePalaceChips properties { protected get; private set; }

			// Token: 0x060002F6 RID: 758 RVA: 0x00016047 File Offset: 0x00014447
			public virtual void LevelInit(LevelProperties.DicePalaceChips properties)
			{
				this.properties = properties;
			}

			// Token: 0x060002F7 RID: 759 RVA: 0x00016050 File Offset: 0x00014450
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000103 RID: 259
		public enum States
		{
			// Token: 0x04000555 RID: 1365
			Main,
			// Token: 0x04000556 RID: 1366
			Generic
		}

		// Token: 0x02000104 RID: 260
		public enum Pattern
		{
			// Token: 0x04000558 RID: 1368
			Default,
			// Token: 0x04000559 RID: 1369
			Uninitialized
		}

		// Token: 0x02000105 RID: 261
		public class State : AbstractLevelState<LevelProperties.DicePalaceChips.Pattern, LevelProperties.DicePalaceChips.States>
		{
			// Token: 0x060002F8 RID: 760 RVA: 0x00016052 File Offset: 0x00014452
			public State(float healthTrigger, LevelProperties.DicePalaceChips.Pattern[][] patterns, LevelProperties.DicePalaceChips.States stateName, LevelProperties.DicePalaceChips.Chips chips) : base(healthTrigger, patterns, stateName)
			{
				this.chips = chips;
			}

			// Token: 0x0400055A RID: 1370
			public readonly LevelProperties.DicePalaceChips.Chips chips;
		}

		// Token: 0x02000106 RID: 262
		public class Chips : AbstractLevelPropertyGroup
		{
			// Token: 0x060002F9 RID: 761 RVA: 0x00016065 File Offset: 0x00014465
			public Chips(float initialAttackDelay, float chipSpeedMultiplier, string[] chipAttackString, float chipAttackDelay, MinMax attackCycleDelay, float chipSpacing)
			{
				this.initialAttackDelay = initialAttackDelay;
				this.chipSpeedMultiplier = chipSpeedMultiplier;
				this.chipAttackString = chipAttackString;
				this.chipAttackDelay = chipAttackDelay;
				this.attackCycleDelay = attackCycleDelay;
				this.chipSpacing = chipSpacing;
			}

			// Token: 0x0400055B RID: 1371
			public readonly float initialAttackDelay;

			// Token: 0x0400055C RID: 1372
			public readonly float chipSpeedMultiplier;

			// Token: 0x0400055D RID: 1373
			public readonly string[] chipAttackString;

			// Token: 0x0400055E RID: 1374
			public readonly float chipAttackDelay;

			// Token: 0x0400055F RID: 1375
			public readonly MinMax attackCycleDelay;

			// Token: 0x04000560 RID: 1376
			public readonly float chipSpacing;
		}
	}

	// Token: 0x02000108 RID: 264
	public class DicePalaceCigar : AbstractLevelProperties<LevelProperties.DicePalaceCigar.State, LevelProperties.DicePalaceCigar.Pattern, LevelProperties.DicePalaceCigar.States>
	{
		// Token: 0x06000307 RID: 775 RVA: 0x0001609A File Offset: 0x0001449A
		public DicePalaceCigar(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceCigar.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000308 RID: 776 RVA: 0x000160A8 File Offset: 0x000144A8
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 700f;
				break;
			case Level.Mode.Normal:
				timeline.health = 700f;
				break;
			case Level.Mode.Hard:
				timeline.health = 850f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000309 RID: 777 RVA: 0x00016103 File Offset: 0x00014503
		public static LevelProperties.DicePalaceCigar.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DicePalaceCigar.Pattern.Default;
				}
			}
			Debug.LogError("Pattern DicePalaceCigar.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceCigar.Pattern.Uninitialized;
		}

		// Token: 0x0600030A RID: 778 RVA: 0x00016144 File Offset: 0x00014544
		public static LevelProperties.DicePalaceCigar GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceCigar.State> list = new List<LevelProperties.DicePalaceCigar.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 850;
						goalTimes = new Level.GoalTimes(60f, 60f, 60f);
						list.Add(new LevelProperties.DicePalaceCigar.State(10f, new LevelProperties.DicePalaceCigar.Pattern[][]
						{
							new LevelProperties.DicePalaceCigar.Pattern[1]
						}, LevelProperties.DicePalaceCigar.States.Main, new LevelProperties.DicePalaceCigar.Cigar(0.55f, 1f, 150f), new LevelProperties.DicePalaceCigar.SpiralSmoke(185f, 3.6f, "2,2,1,2,2,1,1,1", 1.4f, "1,0,2,1,2,0,2,2,1", 205f, 0.5f), new LevelProperties.DicePalaceCigar.CigaretteGhost(220f, 2f, "1.8,2.1,1.7,1.9,2.3,1.7,1.7,2.4,1.5,1.9,2.2", 90f, "0,50,-50,0,25,-25")));
					}
				}
				else
				{
					hp = 700;
					goalTimes = new Level.GoalTimes(60f, 60f, 60f);
					list.Add(new LevelProperties.DicePalaceCigar.State(10f, new LevelProperties.DicePalaceCigar.Pattern[][]
					{
						new LevelProperties.DicePalaceCigar.Pattern[1]
					}, LevelProperties.DicePalaceCigar.States.Main, new LevelProperties.DicePalaceCigar.Cigar(1.4f, 1f, 150f), new LevelProperties.DicePalaceCigar.SpiralSmoke(145f, 2.8f, "1,1,2,1,1,2,2,2", 3.3f, "0,1,0,1,1,2,0,1", 160f, 1f), new LevelProperties.DicePalaceCigar.CigaretteGhost(220f, 3.1f, "2,2.5,2.6,2.2,2.7,2.1,2,2.5", 130f, "0,50,-50,0,25,-25")));
				}
			}
			else
			{
				hp = 700;
				goalTimes = new Level.GoalTimes(60f, 60f, 60f);
				list.Add(new LevelProperties.DicePalaceCigar.State(10f, new LevelProperties.DicePalaceCigar.Pattern[][]
				{
					new LevelProperties.DicePalaceCigar.Pattern[1]
				}, LevelProperties.DicePalaceCigar.States.Main, new LevelProperties.DicePalaceCigar.Cigar(1.4f, 1f, 150f), new LevelProperties.DicePalaceCigar.SpiralSmoke(145f, 2.8f, "1,1,2,1,1,2,2,2", 3.3f, "0,1,0,1,1,2,0,1", 160f, 1f), new LevelProperties.DicePalaceCigar.CigaretteGhost(220f, 3.1f, "2,2.5,2.6,2.2,2.7,2.1,2,2.5", 130f, "0,50,-50,0,25,-25")));
			}
			return new LevelProperties.DicePalaceCigar(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000109 RID: 265
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000083 RID: 131
			// (get) Token: 0x0600030C RID: 780 RVA: 0x00016357 File Offset: 0x00014757
			// (set) Token: 0x0600030D RID: 781 RVA: 0x0001635F File Offset: 0x0001475F
			private protected LevelProperties.DicePalaceCigar properties { protected get; private set; }

			// Token: 0x0600030E RID: 782 RVA: 0x00016368 File Offset: 0x00014768
			public virtual void LevelInit(LevelProperties.DicePalaceCigar properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600030F RID: 783 RVA: 0x00016371 File Offset: 0x00014771
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200010A RID: 266
		public enum States
		{
			// Token: 0x04000568 RID: 1384
			Main,
			// Token: 0x04000569 RID: 1385
			Generic
		}

		// Token: 0x0200010B RID: 267
		public enum Pattern
		{
			// Token: 0x0400056B RID: 1387
			Default,
			// Token: 0x0400056C RID: 1388
			Uninitialized
		}

		// Token: 0x0200010C RID: 268
		public class State : AbstractLevelState<LevelProperties.DicePalaceCigar.Pattern, LevelProperties.DicePalaceCigar.States>
		{
			// Token: 0x06000310 RID: 784 RVA: 0x00016373 File Offset: 0x00014773
			public State(float healthTrigger, LevelProperties.DicePalaceCigar.Pattern[][] patterns, LevelProperties.DicePalaceCigar.States stateName, LevelProperties.DicePalaceCigar.Cigar cigar, LevelProperties.DicePalaceCigar.SpiralSmoke spiralSmoke, LevelProperties.DicePalaceCigar.CigaretteGhost cigaretteGhost) : base(healthTrigger, patterns, stateName)
			{
				this.cigar = cigar;
				this.spiralSmoke = spiralSmoke;
				this.cigaretteGhost = cigaretteGhost;
			}

			// Token: 0x0400056D RID: 1389
			public readonly LevelProperties.DicePalaceCigar.Cigar cigar;

			// Token: 0x0400056E RID: 1390
			public readonly LevelProperties.DicePalaceCigar.SpiralSmoke spiralSmoke;

			// Token: 0x0400056F RID: 1391
			public readonly LevelProperties.DicePalaceCigar.CigaretteGhost cigaretteGhost;
		}

		// Token: 0x0200010D RID: 269
		public class Cigar : AbstractLevelPropertyGroup
		{
			// Token: 0x06000311 RID: 785 RVA: 0x00016396 File Offset: 0x00014796
			public Cigar(float warningDelay, float platformWidthMultiplier, float platformHeight)
			{
				this.warningDelay = warningDelay;
				this.platformWidthMultiplier = platformWidthMultiplier;
				this.platformHeight = platformHeight;
			}

			// Token: 0x04000570 RID: 1392
			public readonly float warningDelay;

			// Token: 0x04000571 RID: 1393
			public readonly float platformWidthMultiplier;

			// Token: 0x04000572 RID: 1394
			public readonly float platformHeight;
		}

		// Token: 0x0200010E RID: 270
		public class SpiralSmoke : AbstractLevelPropertyGroup
		{
			// Token: 0x06000312 RID: 786 RVA: 0x000163B3 File Offset: 0x000147B3
			public SpiralSmoke(float horizontalSpeed, float circleSpeed, string rotationDirectionString, float attackDelay, string attackCount, float spiralSmokeCircleSize, float hesitateBeforeAttackDelay)
			{
				this.horizontalSpeed = horizontalSpeed;
				this.circleSpeed = circleSpeed;
				this.rotationDirectionString = rotationDirectionString;
				this.attackDelay = attackDelay;
				this.attackCount = attackCount;
				this.spiralSmokeCircleSize = spiralSmokeCircleSize;
				this.hesitateBeforeAttackDelay = hesitateBeforeAttackDelay;
			}

			// Token: 0x04000573 RID: 1395
			public readonly float horizontalSpeed;

			// Token: 0x04000574 RID: 1396
			public readonly float circleSpeed;

			// Token: 0x04000575 RID: 1397
			public readonly string rotationDirectionString;

			// Token: 0x04000576 RID: 1398
			public readonly float attackDelay;

			// Token: 0x04000577 RID: 1399
			public readonly string attackCount;

			// Token: 0x04000578 RID: 1400
			public readonly float spiralSmokeCircleSize;

			// Token: 0x04000579 RID: 1401
			public readonly float hesitateBeforeAttackDelay;
		}

		// Token: 0x0200010F RID: 271
		public class CigaretteGhost : AbstractLevelPropertyGroup
		{
			// Token: 0x06000313 RID: 787 RVA: 0x000163F0 File Offset: 0x000147F0
			public CigaretteGhost(float verticalSpeed, float horizontalSpeed, string attackDelayString, float horizontalSpacing, string spawnPositionString)
			{
				this.verticalSpeed = verticalSpeed;
				this.horizontalSpeed = horizontalSpeed;
				this.attackDelayString = attackDelayString;
				this.horizontalSpacing = horizontalSpacing;
				this.spawnPositionString = spawnPositionString;
			}

			// Token: 0x0400057A RID: 1402
			public readonly float verticalSpeed;

			// Token: 0x0400057B RID: 1403
			public readonly float horizontalSpeed;

			// Token: 0x0400057C RID: 1404
			public readonly string attackDelayString;

			// Token: 0x0400057D RID: 1405
			public readonly float horizontalSpacing;

			// Token: 0x0400057E RID: 1406
			public readonly string spawnPositionString;
		}
	}

	// Token: 0x02000111 RID: 273
	public class DicePalaceDomino : AbstractLevelProperties<LevelProperties.DicePalaceDomino.State, LevelProperties.DicePalaceDomino.Pattern, LevelProperties.DicePalaceDomino.States>
	{
		// Token: 0x06000320 RID: 800 RVA: 0x0001641D File Offset: 0x0001481D
		public DicePalaceDomino(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceDomino.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000321 RID: 801 RVA: 0x0001642C File Offset: 0x0001482C
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 600f;
				break;
			case Level.Mode.Normal:
				timeline.health = 600f;
				break;
			case Level.Mode.Hard:
				timeline.health = 750f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000322 RID: 802 RVA: 0x00016488 File Offset: 0x00014888
		public static LevelProperties.DicePalaceDomino.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "B")
				{
					return LevelProperties.DicePalaceDomino.Pattern.Boomerang;
				}
				if (id == "S")
				{
					return LevelProperties.DicePalaceDomino.Pattern.BouncyBall;
				}
			}
			Debug.LogError("Pattern DicePalaceDomino.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceDomino.Pattern.Uninitialized;
		}

		// Token: 0x06000323 RID: 803 RVA: 0x000164E4 File Offset: 0x000148E4
		public static LevelProperties.DicePalaceDomino GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceDomino.State> list = new List<LevelProperties.DicePalaceDomino.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 750;
						goalTimes = new Level.GoalTimes(60f, 60f, 60f);
						list.Add(new LevelProperties.DicePalaceDomino.State(10f, new LevelProperties.DicePalaceDomino.Pattern[][]
						{
							new LevelProperties.DicePalaceDomino.Pattern[]
							{
								LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
								LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
								LevelProperties.DicePalaceDomino.Pattern.Boomerang,
								LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
								LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
								LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
								LevelProperties.DicePalaceDomino.Pattern.Boomerang
							}
						}, LevelProperties.DicePalaceDomino.States.Main, new LevelProperties.DicePalaceDomino.Domino(500, 1.3f, 80f, 440f, 360f, "R,G,B,Y,R,R,G,B,Y,R,G,B,B,Y,R,G,G,B,Y,R,G,B,Y,Y", 1f, 2f, "B,B,B,S,S,B"), new LevelProperties.DicePalaceDomino.BouncyBall(650f, "71,76,72,70,75,76,73,75,72,74,69", "D,U,U,U,D,D,U,D,U,D,D,U,U", new MinMax(0.1f, 0.5f), "R,R,R,P,R,R,P", 1f), new LevelProperties.DicePalaceDomino.Boomerang(400f, new MinMax(0.1f, 0.5f), "R", 1f, 20f)));
					}
				}
				else
				{
					hp = 600;
					goalTimes = new Level.GoalTimes(60f, 60f, 60f);
					list.Add(new LevelProperties.DicePalaceDomino.State(10f, new LevelProperties.DicePalaceDomino.Pattern[][]
					{
						new LevelProperties.DicePalaceDomino.Pattern[]
						{
							LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
							LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
							LevelProperties.DicePalaceDomino.Pattern.Boomerang,
							LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
							LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
							LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
							LevelProperties.DicePalaceDomino.Pattern.Boomerang
						}
					}, LevelProperties.DicePalaceDomino.States.Main, new LevelProperties.DicePalaceDomino.Domino(500, 1.3f, 80f, 440f, 300f, "R,G,B,Y,R,R,G,B,Y,R,G,B,B,Y,R,G,G,B,Y,R,G,B,Y,Y", 1f, 0.8f, "B,B,B,S,S,B"), new LevelProperties.DicePalaceDomino.BouncyBall(575f, "70,72,68,66,68,65,70,67,65,69,66", "U,U,D,U,D,D,D,U,D,U,U,D,U,D,D", new MinMax(1f, 1.5f), "R,R,P,R,P,R,R,P", 2f), new LevelProperties.DicePalaceDomino.Boomerang(350f, new MinMax(1f, 1.5f), "R", 2f, 20f)));
				}
			}
			else
			{
				hp = 600;
				goalTimes = new Level.GoalTimes(60f, 60f, 60f);
				list.Add(new LevelProperties.DicePalaceDomino.State(10f, new LevelProperties.DicePalaceDomino.Pattern[][]
				{
					new LevelProperties.DicePalaceDomino.Pattern[]
					{
						LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
						LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
						LevelProperties.DicePalaceDomino.Pattern.Boomerang,
						LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
						LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
						LevelProperties.DicePalaceDomino.Pattern.BouncyBall,
						LevelProperties.DicePalaceDomino.Pattern.Boomerang
					}
				}, LevelProperties.DicePalaceDomino.States.Main, new LevelProperties.DicePalaceDomino.Domino(500, 1.3f, 80f, 440f, 270f, "R,G,B,Y,R,R,G,B,Y,R,G,B,B,Y,R,G,G,B,Y,R,G,B,Y,Y", 1f, 0.8f, "B,B,B,S,S,B"), new LevelProperties.DicePalaceDomino.BouncyBall(575f, "70,72,68,66,68,65,70,67,65,69,66", "U,U,D,U,D,D,D,U,D,U,U,D,U,D,D", new MinMax(1f, 1f), "R,R,R,P,R,R,R,P", 2f), new LevelProperties.DicePalaceDomino.Boomerang(350f, new MinMax(1f, 1.5f), "R", 2f, 20f)));
			}
			return new LevelProperties.DicePalaceDomino(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000112 RID: 274
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000089 RID: 137
			// (get) Token: 0x06000325 RID: 805 RVA: 0x0001679F File Offset: 0x00014B9F
			// (set) Token: 0x06000326 RID: 806 RVA: 0x000167A7 File Offset: 0x00014BA7
			private protected LevelProperties.DicePalaceDomino properties { protected get; private set; }

			// Token: 0x06000327 RID: 807 RVA: 0x000167B0 File Offset: 0x00014BB0
			public virtual void LevelInit(LevelProperties.DicePalaceDomino properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000328 RID: 808 RVA: 0x000167B9 File Offset: 0x00014BB9
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000113 RID: 275
		public enum States
		{
			// Token: 0x04000586 RID: 1414
			Main,
			// Token: 0x04000587 RID: 1415
			Generic
		}

		// Token: 0x02000114 RID: 276
		public enum Pattern
		{
			// Token: 0x04000589 RID: 1417
			Boomerang,
			// Token: 0x0400058A RID: 1418
			BouncyBall,
			// Token: 0x0400058B RID: 1419
			Uninitialized
		}

		// Token: 0x02000115 RID: 277
		public class State : AbstractLevelState<LevelProperties.DicePalaceDomino.Pattern, LevelProperties.DicePalaceDomino.States>
		{
			// Token: 0x06000329 RID: 809 RVA: 0x000167BB File Offset: 0x00014BBB
			public State(float healthTrigger, LevelProperties.DicePalaceDomino.Pattern[][] patterns, LevelProperties.DicePalaceDomino.States stateName, LevelProperties.DicePalaceDomino.Domino domino, LevelProperties.DicePalaceDomino.BouncyBall bouncyBall, LevelProperties.DicePalaceDomino.Boomerang boomerang) : base(healthTrigger, patterns, stateName)
			{
				this.domino = domino;
				this.bouncyBall = bouncyBall;
				this.boomerang = boomerang;
			}

			// Token: 0x0400058C RID: 1420
			public readonly LevelProperties.DicePalaceDomino.Domino domino;

			// Token: 0x0400058D RID: 1421
			public readonly LevelProperties.DicePalaceDomino.BouncyBall bouncyBall;

			// Token: 0x0400058E RID: 1422
			public readonly LevelProperties.DicePalaceDomino.Boomerang boomerang;
		}

		// Token: 0x02000116 RID: 278
		public class Domino : AbstractLevelPropertyGroup
		{
			// Token: 0x0600032A RID: 810 RVA: 0x000167E0 File Offset: 0x00014BE0
			public Domino(int dominoHP, float swingSpeed, float swingDistance, float swingPosY, float floorSpeed, string floorColourString, float floorTileScale, float spikesWarningDuration, string mainString)
			{
				this.dominoHP = dominoHP;
				this.swingSpeed = swingSpeed;
				this.swingDistance = swingDistance;
				this.swingPosY = swingPosY;
				this.floorSpeed = floorSpeed;
				this.floorColourString = floorColourString;
				this.floorTileScale = floorTileScale;
				this.spikesWarningDuration = spikesWarningDuration;
				this.mainString = mainString;
			}

			// Token: 0x0400058F RID: 1423
			public readonly int dominoHP;

			// Token: 0x04000590 RID: 1424
			public readonly float swingSpeed;

			// Token: 0x04000591 RID: 1425
			public readonly float swingDistance;

			// Token: 0x04000592 RID: 1426
			public readonly float swingPosY;

			// Token: 0x04000593 RID: 1427
			public readonly float floorSpeed;

			// Token: 0x04000594 RID: 1428
			public readonly string floorColourString;

			// Token: 0x04000595 RID: 1429
			public readonly float floorTileScale;

			// Token: 0x04000596 RID: 1430
			public readonly float spikesWarningDuration;

			// Token: 0x04000597 RID: 1431
			public readonly string mainString;
		}

		// Token: 0x02000117 RID: 279
		public class BouncyBall : AbstractLevelPropertyGroup
		{
			// Token: 0x0600032B RID: 811 RVA: 0x00016838 File Offset: 0x00014C38
			public BouncyBall(float bulletSpeed, string angleString, string upDownString, MinMax attackDelayRange, string projectileTypeString, float initialAttackDelay)
			{
				this.bulletSpeed = bulletSpeed;
				this.angleString = angleString;
				this.upDownString = upDownString;
				this.attackDelayRange = attackDelayRange;
				this.projectileTypeString = projectileTypeString;
				this.initialAttackDelay = initialAttackDelay;
			}

			// Token: 0x04000598 RID: 1432
			public readonly float bulletSpeed;

			// Token: 0x04000599 RID: 1433
			public readonly string angleString;

			// Token: 0x0400059A RID: 1434
			public readonly string upDownString;

			// Token: 0x0400059B RID: 1435
			public readonly MinMax attackDelayRange;

			// Token: 0x0400059C RID: 1436
			public readonly string projectileTypeString;

			// Token: 0x0400059D RID: 1437
			public readonly float initialAttackDelay;
		}

		// Token: 0x02000118 RID: 280
		public class Boomerang : AbstractLevelPropertyGroup
		{
			// Token: 0x0600032C RID: 812 RVA: 0x0001686D File Offset: 0x00014C6D
			public Boomerang(float boomerangSpeed, MinMax attackDelayRange, string boomerangTypeString, float initialAttackDelay, float health)
			{
				this.boomerangSpeed = boomerangSpeed;
				this.attackDelayRange = attackDelayRange;
				this.boomerangTypeString = boomerangTypeString;
				this.initialAttackDelay = initialAttackDelay;
				this.health = health;
			}

			// Token: 0x0400059E RID: 1438
			public readonly float boomerangSpeed;

			// Token: 0x0400059F RID: 1439
			public readonly MinMax attackDelayRange;

			// Token: 0x040005A0 RID: 1440
			public readonly string boomerangTypeString;

			// Token: 0x040005A1 RID: 1441
			public readonly float initialAttackDelay;

			// Token: 0x040005A2 RID: 1442
			public readonly float health;
		}
	}

	// Token: 0x0200011A RID: 282
	public class DicePalaceEightBall : AbstractLevelProperties<LevelProperties.DicePalaceEightBall.State, LevelProperties.DicePalaceEightBall.Pattern, LevelProperties.DicePalaceEightBall.States>
	{
		// Token: 0x0600033B RID: 827 RVA: 0x0001689A File Offset: 0x00014C9A
		public DicePalaceEightBall(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceEightBall.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600033C RID: 828 RVA: 0x000168A8 File Offset: 0x00014CA8
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 600f;
				break;
			case Level.Mode.Normal:
				timeline.health = 600f;
				break;
			case Level.Mode.Hard:
				timeline.health = 750f;
				break;
			}
			return timeline;
		}

		// Token: 0x0600033D RID: 829 RVA: 0x00016903 File Offset: 0x00014D03
		public static LevelProperties.DicePalaceEightBall.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DicePalaceEightBall.Pattern.Default;
				}
			}
			Debug.LogError("Pattern DicePalaceEightBall.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceEightBall.Pattern.Uninitialized;
		}

		// Token: 0x0600033E RID: 830 RVA: 0x00016944 File Offset: 0x00014D44
		public static LevelProperties.DicePalaceEightBall GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceEightBall.State> list = new List<LevelProperties.DicePalaceEightBall.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 750;
						goalTimes = new Level.GoalTimes(60f, 60f, 60f);
						list.Add(new LevelProperties.DicePalaceEightBall.State(10f, new LevelProperties.DicePalaceEightBall.Pattern[][]
						{
							new LevelProperties.DicePalaceEightBall.Pattern[1]
						}, LevelProperties.DicePalaceEightBall.States.Main, new LevelProperties.DicePalaceEightBall.General(550f, new string[]
						{
							"R,R"
						}, 3.3f, 2, 2f), new LevelProperties.DicePalaceEightBall.PoolBalls(new string[]
						{
							"L,R"
						}, 2.35f, 0.1f, 2000f, 600f, 7000f, 0.7f, 2300f, 800f, 7000f, 0.5f, 1900f, 900f, 7000f, 0.4f, 2200f, 400f, 7000f, 0.6f, 2100f, 800f, 7000f)));
					}
				}
				else
				{
					hp = 600;
					goalTimes = new Level.GoalTimes(60f, 60f, 60f);
					list.Add(new LevelProperties.DicePalaceEightBall.State(10f, new LevelProperties.DicePalaceEightBall.Pattern[][]
					{
						new LevelProperties.DicePalaceEightBall.Pattern[1]
					}, LevelProperties.DicePalaceEightBall.States.Main, new LevelProperties.DicePalaceEightBall.General(550f, new string[]
					{
						"R,R"
					}, 3.3f, 2, 2f), new LevelProperties.DicePalaceEightBall.PoolBalls(new string[]
					{
						"L,R"
					}, 3.8f, 0.5f, 2000f, 580f, 7000f, 0.7f, 2200f, 780f, 7000f, 0.6f, 2100f, 680f, 7000f, 0.4f, 2200f, 400f, 7000f, 0.6f, 2100f, 800f, 7000f)));
				}
			}
			else
			{
				hp = 600;
				goalTimes = new Level.GoalTimes(60f, 60f, 60f);
				list.Add(new LevelProperties.DicePalaceEightBall.State(10f, new LevelProperties.DicePalaceEightBall.Pattern[][]
				{
					new LevelProperties.DicePalaceEightBall.Pattern[1]
				}, LevelProperties.DicePalaceEightBall.States.Main, new LevelProperties.DicePalaceEightBall.General(550f, new string[]
				{
					"R,R"
				}, 3.3f, 2, 2f), new LevelProperties.DicePalaceEightBall.PoolBalls(new string[]
				{
					"L,R"
				}, 3.8f, 0.5f, 2000f, 580f, 7000f, 0.7f, 2200f, 780f, 7000f, 0.6f, 2100f, 680f, 7000f, 0.4f, 2200f, 400f, 7000f, 0.6f, 2100f, 800f, 7000f)));
			}
			return new LevelProperties.DicePalaceEightBall(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200011B RID: 283
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700008F RID: 143
			// (get) Token: 0x06000340 RID: 832 RVA: 0x00016C26 File Offset: 0x00015026
			// (set) Token: 0x06000341 RID: 833 RVA: 0x00016C2E File Offset: 0x0001502E
			private protected LevelProperties.DicePalaceEightBall properties { protected get; private set; }

			// Token: 0x06000342 RID: 834 RVA: 0x00016C37 File Offset: 0x00015037
			public virtual void LevelInit(LevelProperties.DicePalaceEightBall properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000343 RID: 835 RVA: 0x00016C40 File Offset: 0x00015040
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200011C RID: 284
		public enum States
		{
			// Token: 0x040005A9 RID: 1449
			Main,
			// Token: 0x040005AA RID: 1450
			Generic
		}

		// Token: 0x0200011D RID: 285
		public enum Pattern
		{
			// Token: 0x040005AC RID: 1452
			Default,
			// Token: 0x040005AD RID: 1453
			Uninitialized
		}

		// Token: 0x0200011E RID: 286
		public class State : AbstractLevelState<LevelProperties.DicePalaceEightBall.Pattern, LevelProperties.DicePalaceEightBall.States>
		{
			// Token: 0x06000344 RID: 836 RVA: 0x00016C42 File Offset: 0x00015042
			public State(float healthTrigger, LevelProperties.DicePalaceEightBall.Pattern[][] patterns, LevelProperties.DicePalaceEightBall.States stateName, LevelProperties.DicePalaceEightBall.General general, LevelProperties.DicePalaceEightBall.PoolBalls poolBalls) : base(healthTrigger, patterns, stateName)
			{
				this.general = general;
				this.poolBalls = poolBalls;
			}

			// Token: 0x040005AE RID: 1454
			public readonly LevelProperties.DicePalaceEightBall.General general;

			// Token: 0x040005AF RID: 1455
			public readonly LevelProperties.DicePalaceEightBall.PoolBalls poolBalls;
		}

		// Token: 0x0200011F RID: 287
		public class General : AbstractLevelPropertyGroup
		{
			// Token: 0x06000345 RID: 837 RVA: 0x00016C5D File Offset: 0x0001505D
			public General(float shootSpeed, string[] shootString, float shootDelay, int idleLoopAmount, float attackDuration)
			{
				this.shootSpeed = shootSpeed;
				this.shootString = shootString;
				this.shootDelay = shootDelay;
				this.idleLoopAmount = idleLoopAmount;
				this.attackDuration = attackDuration;
			}

			// Token: 0x040005B0 RID: 1456
			public readonly float shootSpeed;

			// Token: 0x040005B1 RID: 1457
			public readonly string[] shootString;

			// Token: 0x040005B2 RID: 1458
			public readonly float shootDelay;

			// Token: 0x040005B3 RID: 1459
			public readonly int idleLoopAmount;

			// Token: 0x040005B4 RID: 1460
			public readonly float attackDuration;
		}

		// Token: 0x02000120 RID: 288
		public class PoolBalls : AbstractLevelPropertyGroup
		{
			// Token: 0x06000346 RID: 838 RVA: 0x00016C8C File Offset: 0x0001508C
			public PoolBalls(string[] sideString, float spawnDelay, float oneGroundDelay, float oneJumpVerticalSpeed, float oneJumpHorizontalSpeed, float oneJumpGravity, float twoGroundDelay, float twoJumpVerticalSpeed, float twoJumpHorizontalSpeed, float twoJumpGravity, float threeGroundDelay, float threeJumpVerticalSpeed, float threeJumpHorizontalSpeed, float threeJumpGravity, float fourGroundDelay, float fourJumpVerticalSpeed, float fourJumpHorizontalSpeed, float fourJumpGravity, float fiveGroundDelay, float fiveJumpVerticalSpeed, float fiveJumpHorizontalSpeed, float fiveJumpGravity)
			{
				this.sideString = sideString;
				this.spawnDelay = spawnDelay;
				this.oneGroundDelay = oneGroundDelay;
				this.oneJumpVerticalSpeed = oneJumpVerticalSpeed;
				this.oneJumpHorizontalSpeed = oneJumpHorizontalSpeed;
				this.oneJumpGravity = oneJumpGravity;
				this.twoGroundDelay = twoGroundDelay;
				this.twoJumpVerticalSpeed = twoJumpVerticalSpeed;
				this.twoJumpHorizontalSpeed = twoJumpHorizontalSpeed;
				this.twoJumpGravity = twoJumpGravity;
				this.threeGroundDelay = threeGroundDelay;
				this.threeJumpVerticalSpeed = threeJumpVerticalSpeed;
				this.threeJumpHorizontalSpeed = threeJumpHorizontalSpeed;
				this.threeJumpGravity = threeJumpGravity;
				this.fourGroundDelay = fourGroundDelay;
				this.fourJumpVerticalSpeed = fourJumpVerticalSpeed;
				this.fourJumpHorizontalSpeed = fourJumpHorizontalSpeed;
				this.fourJumpGravity = fourJumpGravity;
				this.fiveGroundDelay = fiveGroundDelay;
				this.fiveJumpVerticalSpeed = fiveJumpVerticalSpeed;
				this.fiveJumpHorizontalSpeed = fiveJumpHorizontalSpeed;
				this.fiveJumpGravity = fiveJumpGravity;
			}

			// Token: 0x040005B5 RID: 1461
			public readonly string[] sideString;

			// Token: 0x040005B6 RID: 1462
			public readonly float spawnDelay;

			// Token: 0x040005B7 RID: 1463
			public readonly float oneGroundDelay;

			// Token: 0x040005B8 RID: 1464
			public readonly float oneJumpVerticalSpeed;

			// Token: 0x040005B9 RID: 1465
			public readonly float oneJumpHorizontalSpeed;

			// Token: 0x040005BA RID: 1466
			public readonly float oneJumpGravity;

			// Token: 0x040005BB RID: 1467
			public readonly float twoGroundDelay;

			// Token: 0x040005BC RID: 1468
			public readonly float twoJumpVerticalSpeed;

			// Token: 0x040005BD RID: 1469
			public readonly float twoJumpHorizontalSpeed;

			// Token: 0x040005BE RID: 1470
			public readonly float twoJumpGravity;

			// Token: 0x040005BF RID: 1471
			public readonly float threeGroundDelay;

			// Token: 0x040005C0 RID: 1472
			public readonly float threeJumpVerticalSpeed;

			// Token: 0x040005C1 RID: 1473
			public readonly float threeJumpHorizontalSpeed;

			// Token: 0x040005C2 RID: 1474
			public readonly float threeJumpGravity;

			// Token: 0x040005C3 RID: 1475
			public readonly float fourGroundDelay;

			// Token: 0x040005C4 RID: 1476
			public readonly float fourJumpVerticalSpeed;

			// Token: 0x040005C5 RID: 1477
			public readonly float fourJumpHorizontalSpeed;

			// Token: 0x040005C6 RID: 1478
			public readonly float fourJumpGravity;

			// Token: 0x040005C7 RID: 1479
			public readonly float fiveGroundDelay;

			// Token: 0x040005C8 RID: 1480
			public readonly float fiveJumpVerticalSpeed;

			// Token: 0x040005C9 RID: 1481
			public readonly float fiveJumpHorizontalSpeed;

			// Token: 0x040005CA RID: 1482
			public readonly float fiveJumpGravity;
		}
	}

	// Token: 0x02000122 RID: 290
	public class DicePalaceFlyingHorse : AbstractLevelProperties<LevelProperties.DicePalaceFlyingHorse.State, LevelProperties.DicePalaceFlyingHorse.Pattern, LevelProperties.DicePalaceFlyingHorse.States>
	{
		// Token: 0x06000353 RID: 851 RVA: 0x00016D4C File Offset: 0x0001514C
		public DicePalaceFlyingHorse(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceFlyingHorse.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000354 RID: 852 RVA: 0x00016D58 File Offset: 0x00015158
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1000f;
				break;
			case Level.Mode.Normal:
				timeline.health = 1000f;
				break;
			case Level.Mode.Hard:
				timeline.health = 1200f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000355 RID: 853 RVA: 0x00016DB3 File Offset: 0x000151B3
		public static LevelProperties.DicePalaceFlyingHorse.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DicePalaceFlyingHorse.Pattern.Default;
				}
			}
			Debug.LogError("Pattern DicePalaceFlyingHorse.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceFlyingHorse.Pattern.Uninitialized;
		}

		// Token: 0x06000356 RID: 854 RVA: 0x00016DF4 File Offset: 0x000151F4
		public static LevelProperties.DicePalaceFlyingHorse GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceFlyingHorse.State> list = new List<LevelProperties.DicePalaceFlyingHorse.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1200;
						goalTimes = new Level.GoalTimes(60f, 60f, 60f);
						list.Add(new LevelProperties.DicePalaceFlyingHorse.State(10f, new LevelProperties.DicePalaceFlyingHorse.Pattern[][]
						{
							new LevelProperties.DicePalaceFlyingHorse.Pattern[1]
						}, LevelProperties.DicePalaceFlyingHorse.States.Main, new LevelProperties.DicePalaceFlyingHorse.GiftBombs(350f, 200f, 1f, new MinMax(2f, 5f), new string[]
						{
							"100,360,245,160,360,200,100,345,150,275,360,100,255,180"
						}, new string[]
						{
							"100,600,350,477,100,285,600,100,550,300,100,480,600"
						}, "0,45,90,135,180,225,270,315", 1.5f), new LevelProperties.DicePalaceFlyingHorse.MiniHorses(9999f, new string[]
						{
							"1,1.3,1.4,1,1.5,1.2,1.2,1.3,1.7,1.4,1.3,1.6",
							"1,1.2,1.5,1,,1.4,1.6,1,1.1,1.3,1.4,1.6,1.2,1"
						}, new MinMax(270f, 450f), new string[]
						{
							"1,2,1,3,1,2,1,1,3,1,2,3,1,2,3,1,2,2,3,2,2,1,1,3,1,1,2,1,3",
							"1,2,3,1,2,2,1,3,1,2,3,1,2,1,1,3,1,2,3,1,2,2,1,3,1,2,2,3"
						}, 400f, 600f, new MinMax(999f, 999f), new string[]
						{
							"0,100,50,0,120,0,-50,0,80,-20,0,50"
						}, new string[]
						{
							"1,1"
						})));
					}
				}
				else
				{
					hp = 1000;
					goalTimes = new Level.GoalTimes(60f, 60f, 60f);
					list.Add(new LevelProperties.DicePalaceFlyingHorse.State(10f, new LevelProperties.DicePalaceFlyingHorse.Pattern[][]
					{
						new LevelProperties.DicePalaceFlyingHorse.Pattern[1]
					}, LevelProperties.DicePalaceFlyingHorse.States.Main, new LevelProperties.DicePalaceFlyingHorse.GiftBombs(300f, 200f, 1f, new MinMax(2f, 5f), new string[]
					{
						"100,360,245,160,360,200,100,345,150,275,360,100,255,180"
					}, new string[]
					{
						"100,600,350,477,100,285,600,100,550,300,100,480,600"
					}, "0,45,90,135,180,225,270,315", 3f), new LevelProperties.DicePalaceFlyingHorse.MiniHorses(999f, new string[]
					{
						"1,1.4,1.6,1,1.8,1.4,1,1,1.5,1.2,1,1.3,1.4",
						"1,1,1.5,1.5,1.2,1.3,1,1.8,1.6,1.4,1.6,1.3"
					}, new MinMax(270f, 450f), new string[]
					{
						"1,2,1,3,1,2,1,2,3,1,2,2,1,3,1,2,1,2,1,3",
						"1,2,1,2,1,3,1,2,3,1,2,1,2,2,3,2,1,2,1,3"
					}, 400f, 600f, new MinMax(999f, 999f), new string[]
					{
						"0,100,50,0,120,0,-50,0,80,-20,0,50"
					}, new string[]
					{
						"1,1"
					})));
				}
			}
			else
			{
				hp = 1000;
				goalTimes = new Level.GoalTimes(60f, 60f, 60f);
				list.Add(new LevelProperties.DicePalaceFlyingHorse.State(10f, new LevelProperties.DicePalaceFlyingHorse.Pattern[][]
				{
					new LevelProperties.DicePalaceFlyingHorse.Pattern[1]
				}, LevelProperties.DicePalaceFlyingHorse.States.Main, new LevelProperties.DicePalaceFlyingHorse.GiftBombs(300f, 200f, 1f, new MinMax(2f, 5f), new string[]
				{
					"100,360,245,160,360,200,100,345,150,275,360,100,255,180"
				}, new string[]
				{
					"100,600,350,477,100,285,600,100,550,300,100,480,600"
				}, "0,45,90,135,180,225,270,315", 3f), new LevelProperties.DicePalaceFlyingHorse.MiniHorses(999f, new string[]
				{
					"1,1.4,1.6,1,1.8,1.4,1,1,1.5,1.2,1,1.3,1.4"
				}, new MinMax(270f, 450f), new string[]
				{
					"1,2,1,3,1,2,1,2,3,1,2,2,1,3,1,2,1,2,1,3"
				}, 400f, 600f, new MinMax(999f, 999f), new string[]
				{
					"0,100,50,0,120,0,-50,0,80,-20,0,50"
				}, new string[]
				{
					"1,1"
				})));
			}
			return new LevelProperties.DicePalaceFlyingHorse(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000123 RID: 291
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000095 RID: 149
			// (get) Token: 0x06000358 RID: 856 RVA: 0x00017132 File Offset: 0x00015532
			// (set) Token: 0x06000359 RID: 857 RVA: 0x0001713A File Offset: 0x0001553A
			private protected LevelProperties.DicePalaceFlyingHorse properties { protected get; private set; }

			// Token: 0x0600035A RID: 858 RVA: 0x00017143 File Offset: 0x00015543
			public virtual void LevelInit(LevelProperties.DicePalaceFlyingHorse properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600035B RID: 859 RVA: 0x0001714C File Offset: 0x0001554C
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000124 RID: 292
		public enum States
		{
			// Token: 0x040005D1 RID: 1489
			Main,
			// Token: 0x040005D2 RID: 1490
			Generic
		}

		// Token: 0x02000125 RID: 293
		public enum Pattern
		{
			// Token: 0x040005D4 RID: 1492
			Default,
			// Token: 0x040005D5 RID: 1493
			Uninitialized
		}

		// Token: 0x02000126 RID: 294
		public class State : AbstractLevelState<LevelProperties.DicePalaceFlyingHorse.Pattern, LevelProperties.DicePalaceFlyingHorse.States>
		{
			// Token: 0x0600035C RID: 860 RVA: 0x0001714E File Offset: 0x0001554E
			public State(float healthTrigger, LevelProperties.DicePalaceFlyingHorse.Pattern[][] patterns, LevelProperties.DicePalaceFlyingHorse.States stateName, LevelProperties.DicePalaceFlyingHorse.GiftBombs giftBombs, LevelProperties.DicePalaceFlyingHorse.MiniHorses miniHorses) : base(healthTrigger, patterns, stateName)
			{
				this.giftBombs = giftBombs;
				this.miniHorses = miniHorses;
			}

			// Token: 0x040005D6 RID: 1494
			public readonly LevelProperties.DicePalaceFlyingHorse.GiftBombs giftBombs;

			// Token: 0x040005D7 RID: 1495
			public readonly LevelProperties.DicePalaceFlyingHorse.MiniHorses miniHorses;
		}

		// Token: 0x02000127 RID: 295
		public class GiftBombs : AbstractLevelPropertyGroup
		{
			// Token: 0x0600035D RID: 861 RVA: 0x0001716C File Offset: 0x0001556C
			public GiftBombs(float initialSpeed, float explosionSpeed, float explosionTime, MinMax playerAimRange, string[] giftPositionStringY, string[] giftPositionStringX, string spreadCount, float giftDelay)
			{
				this.initialSpeed = initialSpeed;
				this.explosionSpeed = explosionSpeed;
				this.explosionTime = explosionTime;
				this.playerAimRange = playerAimRange;
				this.giftPositionStringY = giftPositionStringY;
				this.giftPositionStringX = giftPositionStringX;
				this.spreadCount = spreadCount;
				this.giftDelay = giftDelay;
			}

			// Token: 0x040005D8 RID: 1496
			public readonly float initialSpeed;

			// Token: 0x040005D9 RID: 1497
			public readonly float explosionSpeed;

			// Token: 0x040005DA RID: 1498
			public readonly float explosionTime;

			// Token: 0x040005DB RID: 1499
			public readonly MinMax playerAimRange;

			// Token: 0x040005DC RID: 1500
			public readonly string[] giftPositionStringY;

			// Token: 0x040005DD RID: 1501
			public readonly string[] giftPositionStringX;

			// Token: 0x040005DE RID: 1502
			public readonly string spreadCount;

			// Token: 0x040005DF RID: 1503
			public readonly float giftDelay;
		}

		// Token: 0x02000128 RID: 296
		public class MiniHorses : AbstractLevelPropertyGroup
		{
			// Token: 0x0600035E RID: 862 RVA: 0x000171BC File Offset: 0x000155BC
			public MiniHorses(float HP, string[] delayString, MinMax miniSpeedRange, string[] miniTypeString, float miniTwoBulletSpeed, float miniThreeJockeySpeed, MinMax miniTwoShotDelayRange, string[] miniThreeProxString, string[] miniTwoPinkString)
			{
				this.HP = HP;
				this.delayString = delayString;
				this.miniSpeedRange = miniSpeedRange;
				this.miniTypeString = miniTypeString;
				this.miniTwoBulletSpeed = miniTwoBulletSpeed;
				this.miniThreeJockeySpeed = miniThreeJockeySpeed;
				this.miniTwoShotDelayRange = miniTwoShotDelayRange;
				this.miniThreeProxString = miniThreeProxString;
				this.miniTwoPinkString = miniTwoPinkString;
			}

			// Token: 0x040005E0 RID: 1504
			public readonly float HP;

			// Token: 0x040005E1 RID: 1505
			public readonly string[] delayString;

			// Token: 0x040005E2 RID: 1506
			public readonly MinMax miniSpeedRange;

			// Token: 0x040005E3 RID: 1507
			public readonly string[] miniTypeString;

			// Token: 0x040005E4 RID: 1508
			public readonly float miniTwoBulletSpeed;

			// Token: 0x040005E5 RID: 1509
			public readonly float miniThreeJockeySpeed;

			// Token: 0x040005E6 RID: 1510
			public readonly MinMax miniTwoShotDelayRange;

			// Token: 0x040005E7 RID: 1511
			public readonly string[] miniThreeProxString;

			// Token: 0x040005E8 RID: 1512
			public readonly string[] miniTwoPinkString;
		}
	}

	// Token: 0x0200012A RID: 298
	public class DicePalaceFlyingMemory : AbstractLevelProperties<LevelProperties.DicePalaceFlyingMemory.State, LevelProperties.DicePalaceFlyingMemory.Pattern, LevelProperties.DicePalaceFlyingMemory.States>
	{
		// Token: 0x0600036B RID: 875 RVA: 0x00017214 File Offset: 0x00015614
		public DicePalaceFlyingMemory(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceFlyingMemory.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600036C RID: 876 RVA: 0x00017220 File Offset: 0x00015620
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 800f;
				break;
			case Level.Mode.Normal:
				timeline.health = 800f;
				break;
			case Level.Mode.Hard:
				timeline.health = 1000f;
				break;
			}
			return timeline;
		}

		// Token: 0x0600036D RID: 877 RVA: 0x0001727B File Offset: 0x0001567B
		public static LevelProperties.DicePalaceFlyingMemory.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DicePalaceFlyingMemory.Pattern.Default;
				}
			}
			Debug.LogError("Pattern DicePalaceFlyingMemory.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceFlyingMemory.Pattern.Uninitialized;
		}

		// Token: 0x0600036E RID: 878 RVA: 0x000172BC File Offset: 0x000156BC
		public static LevelProperties.DicePalaceFlyingMemory GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceFlyingMemory.State> list = new List<LevelProperties.DicePalaceFlyingMemory.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1000;
						goalTimes = new Level.GoalTimes(60f, 60f, 60f);
						list.Add(new LevelProperties.DicePalaceFlyingMemory.State(10f, new LevelProperties.DicePalaceFlyingMemory.Pattern[][]
						{
							new LevelProperties.DicePalaceFlyingMemory.Pattern[1]
						}, LevelProperties.DicePalaceFlyingMemory.States.Main, new LevelProperties.DicePalaceFlyingMemory.Bots(1f, 1f, 1f, 1f, 1f, new string[]
						{
							"U:2,D:4,L:1,R:3,U:4,L:3"
						}, 99999f, new string[]
						{
							"2,4,1,3"
						}, new string[]
						{
							"N,N,N,P,N,N,N,N,N,P"
						}, 9999f, false), new LevelProperties.DicePalaceFlyingMemory.FlippyCard(new string[]
						{
							"2B,3A,3B,2A,2A,2B,1A,1A,1B,3B,3A,1B",
							"1B,3A,3A,3B,2A,2B,1B,1A,3B,1A,2B,2A",
							"2A,1A,1B,3B,1B,3A,2A,2B,1A,3B,2B,3A",
							"3A,2A,1A,2B,1A,3B,1B,2A,2B,1B,3B,3A",
							"1A,2B,3B,3A,3B,1A,1B,2A,2A,2B,3A,1B",
							"2A,3B,1A,1A,2B,3A,3B,1B,1B,3A,2A,2B",
							"1B,1A,3B,1B,3A,2A,2B,1A,2B,2A,3A,3B",
							"3A,2A,3A,1A,1A,2B,3B,2A,2B,3B,1B,1B",
							"3B,2B,1B,1A,2B,3A,1B,2A,1A,2A,3A,3B",
							"2B,2A,1A,1A,3B,3A,2B,1B,1B,3B,2A,3A",
							"3B,1B,2B,1B,2A,3A,1A,3B,2B,2A,1A,3A",
							"1A,3B,2B,3B,1B,3A,1B,2A,1A,2A,3A,2B"
						}, 2.1f), new LevelProperties.DicePalaceFlyingMemory.StuffedToy(new string[]
						{
							"220,45,125,325,37,140,305,55,135,235,40,140"
						}, new string[]
						{
							"2,4"
						}, 600f, 900f, 6f, 1.3f, 1f, new MinMax(1.4f, 2.8f), new string[]
						{
							"2"
						}, 5f, new string[]
						{
							"5,-3,8,-6,7,-4,8,-6,1,-5,-5"
						}, 500f, 500f, new MinMax(0f, 300f), 6, 500f, 1f, 0.4f)));
					}
				}
				else
				{
					hp = 800;
					goalTimes = new Level.GoalTimes(60f, 60f, 60f);
					list.Add(new LevelProperties.DicePalaceFlyingMemory.State(10f, new LevelProperties.DicePalaceFlyingMemory.Pattern[][]
					{
						new LevelProperties.DicePalaceFlyingMemory.Pattern[1]
					}, LevelProperties.DicePalaceFlyingMemory.States.Main, new LevelProperties.DicePalaceFlyingMemory.Bots(200f, 1f, 10f, 1f, 200f, new string[]
					{
						"U:2,D:4,L:1,R:3,U:4,L:3"
					}, 9999f, new string[]
					{
						"2,4,1,3"
					}, new string[]
					{
						"N,N,N,P,N,N,N,N,N,P"
					}, 5f, false), new LevelProperties.DicePalaceFlyingMemory.FlippyCard(new string[]
					{
						"1A,3B,2B,3B,1B,3A,1B,2A,1A,2A,3A,2B",
						"3B,1B,2B,1B,2A,3A,1A,3B,2B,2A,1A,3A",
						"2B,2A,1A,1A,3B,3A,2B,1B,1B,3B,2A,3A",
						"3B,2B,1B,1A,2B,3A,1B,2A,1A,2A,3A,3B",
						"3A,2A,3A,1A,1A,2B,3B,2A,2B,3B,1B,1B",
						"1B,1A,3B,1B,3A,2A,2B,1A,2B,2A,3A,3B",
						"2A,3B,1A,1A,2B,3A,3B,1B,1B,3A,2A,2B",
						"1A,2B,3B,3A,3B,1A,1B,2A,2A,2B,3A,1B",
						"3A,2A,1A,2B,1A,3B,1B,2A,2B,1B,3B,3A",
						"2A,1A,1B,3B,1B,3A,2A,2B,1A,3B,2B,3A",
						"1B,3A,3A,3B,2A,2B,1B,1A,3B,1A,2B,2A",
						"2B,3A,3B,2A,2A,2B,1A,1A,1B,3B,3A,1B"
					}, 2.1f), new LevelProperties.DicePalaceFlyingMemory.StuffedToy(new string[]
					{
						"220,45,125,325,37,140,305,55,135,235,40,140",
						"215,40,120,320,36,135,300,50,130,230,35,135",
						"225,50,130,330,42,145,310,60,140,240,44,145"
					}, new string[]
					{
						"2,4"
					}, 530f, 730f, 6f, 1.3f, 0.5f, new MinMax(1.8f, 3.3f), new string[]
					{
						"2"
					}, 5f, new string[]
					{
						"0"
					}, 500f, 500f, new MinMax(0f, 300f), 6, 100f, 0.6f, 0.4f)));
				}
			}
			else
			{
				hp = 800;
				goalTimes = new Level.GoalTimes(60f, 60f, 60f);
				list.Add(new LevelProperties.DicePalaceFlyingMemory.State(10f, new LevelProperties.DicePalaceFlyingMemory.Pattern[][]
				{
					new LevelProperties.DicePalaceFlyingMemory.Pattern[1]
				}, LevelProperties.DicePalaceFlyingMemory.States.Main, new LevelProperties.DicePalaceFlyingMemory.Bots(200f, 1f, 10f, 1f, 200f, new string[]
				{
					"U:2,D:4,L:1,R:3,U:4,L:3"
				}, 9999f, new string[]
				{
					"2,4,1,3"
				}, new string[]
				{
					"N,N,N,P,N,N,N,N,N,P"
				}, 5f, false), new LevelProperties.DicePalaceFlyingMemory.FlippyCard(new string[]
				{
					"1A,3B,2B,3B,1B,3A,1B,2A,1A,2A,3A,2B",
					"3B,2B,1B,1A,2B,3A,1B,2A,1A,2A,3A,3B",
					"1A,2B,3B,3A,3B,1A,1B,2A,2A,2B,3A,1B",
					"2A,1A,1B,3B,1B,3A,2A,2B,1A,3B,2B,3A",
					"2B,3A,3B,2A,2A,2B,1A,1A,1B,3B,3A,1B"
				}, 2.1f), new LevelProperties.DicePalaceFlyingMemory.StuffedToy(new string[]
				{
					"220,45,125,325,37,140,305,55,135,235,40,140",
					"215,40,120,320,36,135,300,50,130,230,35,135"
				}, new string[]
				{
					"2,4"
				}, 530f, 730f, 6f, 1.3f, 0.5f, new MinMax(1.8f, 3.3f), new string[]
				{
					"2"
				}, 5f, new string[]
				{
					"0"
				}, 500f, 500f, new MinMax(0f, 300f), 6, 100f, 0.6f, 0.4f)));
			}
			return new LevelProperties.DicePalaceFlyingMemory(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200012B RID: 299
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700009B RID: 155
			// (get) Token: 0x06000370 RID: 880 RVA: 0x000177AB File Offset: 0x00015BAB
			// (set) Token: 0x06000371 RID: 881 RVA: 0x000177B3 File Offset: 0x00015BB3
			private protected LevelProperties.DicePalaceFlyingMemory properties { protected get; private set; }

			// Token: 0x06000372 RID: 882 RVA: 0x000177BC File Offset: 0x00015BBC
			public virtual void LevelInit(LevelProperties.DicePalaceFlyingMemory properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000373 RID: 883 RVA: 0x000177C5 File Offset: 0x00015BC5
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200012C RID: 300
		public enum States
		{
			// Token: 0x040005EF RID: 1519
			Main,
			// Token: 0x040005F0 RID: 1520
			Generic
		}

		// Token: 0x0200012D RID: 301
		public enum Pattern
		{
			// Token: 0x040005F2 RID: 1522
			Default,
			// Token: 0x040005F3 RID: 1523
			Uninitialized
		}

		// Token: 0x0200012E RID: 302
		public class State : AbstractLevelState<LevelProperties.DicePalaceFlyingMemory.Pattern, LevelProperties.DicePalaceFlyingMemory.States>
		{
			// Token: 0x06000374 RID: 884 RVA: 0x000177C7 File Offset: 0x00015BC7
			public State(float healthTrigger, LevelProperties.DicePalaceFlyingMemory.Pattern[][] patterns, LevelProperties.DicePalaceFlyingMemory.States stateName, LevelProperties.DicePalaceFlyingMemory.Bots bots, LevelProperties.DicePalaceFlyingMemory.FlippyCard flippyCard, LevelProperties.DicePalaceFlyingMemory.StuffedToy stuffedToy) : base(healthTrigger, patterns, stateName)
			{
				this.bots = bots;
				this.flippyCard = flippyCard;
				this.stuffedToy = stuffedToy;
			}

			// Token: 0x040005F4 RID: 1524
			public readonly LevelProperties.DicePalaceFlyingMemory.Bots bots;

			// Token: 0x040005F5 RID: 1525
			public readonly LevelProperties.DicePalaceFlyingMemory.FlippyCard flippyCard;

			// Token: 0x040005F6 RID: 1526
			public readonly LevelProperties.DicePalaceFlyingMemory.StuffedToy stuffedToy;
		}

		// Token: 0x0200012F RID: 303
		public class Bots : AbstractLevelPropertyGroup
		{
			// Token: 0x06000375 RID: 885 RVA: 0x000177EC File Offset: 0x00015BEC
			public Bots(float botsSpeed, float botsScale, float botsHP, float bulletWarningDuration, float bulletSpeed, string[] spawnOrder, float spawnDelay, string[] movementString, string[] directionString, float bulletDelay, bool botsOn)
			{
				this.botsSpeed = botsSpeed;
				this.botsScale = botsScale;
				this.botsHP = botsHP;
				this.bulletWarningDuration = bulletWarningDuration;
				this.bulletSpeed = bulletSpeed;
				this.spawnOrder = spawnOrder;
				this.spawnDelay = spawnDelay;
				this.movementString = movementString;
				this.directionString = directionString;
				this.bulletDelay = bulletDelay;
				this.botsOn = botsOn;
			}

			// Token: 0x040005F7 RID: 1527
			public readonly float botsSpeed;

			// Token: 0x040005F8 RID: 1528
			public readonly float botsScale;

			// Token: 0x040005F9 RID: 1529
			public readonly float botsHP;

			// Token: 0x040005FA RID: 1530
			public readonly float bulletWarningDuration;

			// Token: 0x040005FB RID: 1531
			public readonly float bulletSpeed;

			// Token: 0x040005FC RID: 1532
			public readonly string[] spawnOrder;

			// Token: 0x040005FD RID: 1533
			public readonly float spawnDelay;

			// Token: 0x040005FE RID: 1534
			public readonly string[] movementString;

			// Token: 0x040005FF RID: 1535
			public readonly string[] directionString;

			// Token: 0x04000600 RID: 1536
			public readonly float bulletDelay;

			// Token: 0x04000601 RID: 1537
			public readonly bool botsOn;
		}

		// Token: 0x02000130 RID: 304
		public class FlippyCard : AbstractLevelPropertyGroup
		{
			// Token: 0x06000376 RID: 886 RVA: 0x00017854 File Offset: 0x00015C54
			public FlippyCard(string[] patternOrder, float initialRevealTime)
			{
				this.patternOrder = patternOrder;
				this.initialRevealTime = initialRevealTime;
			}

			// Token: 0x04000602 RID: 1538
			public readonly string[] patternOrder;

			// Token: 0x04000603 RID: 1539
			public readonly float initialRevealTime;
		}

		// Token: 0x02000131 RID: 305
		public class StuffedToy : AbstractLevelPropertyGroup
		{
			// Token: 0x06000377 RID: 887 RVA: 0x0001786C File Offset: 0x00015C6C
			public StuffedToy(string[] angleString, string[] bounceCount, float bounceSpeed, float punishSpeed, float punishTime, float directionChangeDelay, float attackAnti, MinMax shotDelayRange, string[] shotType, float incrementSpeedBy, string[] angleAdditionString, float regularSpeed, float spreadSpeed, MinMax spreadAngle, int spreadBullets, float spiralSpeed, float spiralMovementRate, float musicDeathTimer)
			{
				this.angleString = angleString;
				this.bounceCount = bounceCount;
				this.bounceSpeed = bounceSpeed;
				this.punishSpeed = punishSpeed;
				this.punishTime = punishTime;
				this.directionChangeDelay = directionChangeDelay;
				this.attackAnti = attackAnti;
				this.shotDelayRange = shotDelayRange;
				this.shotType = shotType;
				this.incrementSpeedBy = incrementSpeedBy;
				this.angleAdditionString = angleAdditionString;
				this.regularSpeed = regularSpeed;
				this.spreadSpeed = spreadSpeed;
				this.spreadAngle = spreadAngle;
				this.spreadBullets = spreadBullets;
				this.spiralSpeed = spiralSpeed;
				this.spiralMovementRate = spiralMovementRate;
				this.musicDeathTimer = musicDeathTimer;
			}

			// Token: 0x04000604 RID: 1540
			public readonly string[] angleString;

			// Token: 0x04000605 RID: 1541
			public readonly string[] bounceCount;

			// Token: 0x04000606 RID: 1542
			public readonly float bounceSpeed;

			// Token: 0x04000607 RID: 1543
			public readonly float punishSpeed;

			// Token: 0x04000608 RID: 1544
			public readonly float punishTime;

			// Token: 0x04000609 RID: 1545
			public readonly float directionChangeDelay;

			// Token: 0x0400060A RID: 1546
			public readonly float attackAnti;

			// Token: 0x0400060B RID: 1547
			public readonly MinMax shotDelayRange;

			// Token: 0x0400060C RID: 1548
			public readonly string[] shotType;

			// Token: 0x0400060D RID: 1549
			public readonly float incrementSpeedBy;

			// Token: 0x0400060E RID: 1550
			public readonly string[] angleAdditionString;

			// Token: 0x0400060F RID: 1551
			public readonly float regularSpeed;

			// Token: 0x04000610 RID: 1552
			public readonly float spreadSpeed;

			// Token: 0x04000611 RID: 1553
			public readonly MinMax spreadAngle;

			// Token: 0x04000612 RID: 1554
			public readonly int spreadBullets;

			// Token: 0x04000613 RID: 1555
			public readonly float spiralSpeed;

			// Token: 0x04000614 RID: 1556
			public readonly float spiralMovementRate;

			// Token: 0x04000615 RID: 1557
			public readonly float musicDeathTimer;
		}
	}

	// Token: 0x02000133 RID: 307
	public class DicePalaceLight : AbstractLevelProperties<LevelProperties.DicePalaceLight.State, LevelProperties.DicePalaceLight.Pattern, LevelProperties.DicePalaceLight.States>
	{
		// Token: 0x06000384 RID: 900 RVA: 0x0001790C File Offset: 0x00015D0C
		public DicePalaceLight(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceLight.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000385 RID: 901 RVA: 0x00017918 File Offset: 0x00015D18
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 500f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000386 RID: 902 RVA: 0x00017973 File Offset: 0x00015D73
		public static LevelProperties.DicePalaceLight.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DicePalaceLight.Pattern.Default;
				}
			}
			Debug.LogError("Pattern DicePalaceLight.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceLight.Pattern.Uninitialized;
		}

		// Token: 0x06000387 RID: 903 RVA: 0x000179B4 File Offset: 0x00015DB4
		public static LevelProperties.DicePalaceLight GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceLight.State> list = new List<LevelProperties.DicePalaceLight.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.DicePalaceLight.State(10f, new LevelProperties.DicePalaceLight.Pattern[][]
						{
							new LevelProperties.DicePalaceLight.Pattern[1]
						}, LevelProperties.DicePalaceLight.States.Main, new LevelProperties.DicePalaceLight.General(0f, 0f, 0f), new LevelProperties.DicePalaceLight.SixWayLaser(new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), new string[0], 0f), new LevelProperties.DicePalaceLight.Objects(0f, 0f)));
					}
				}
				else
				{
					hp = 500;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.DicePalaceLight.State(10f, new LevelProperties.DicePalaceLight.Pattern[][]
					{
						new LevelProperties.DicePalaceLight.Pattern[1]
					}, LevelProperties.DicePalaceLight.States.Main, new LevelProperties.DicePalaceLight.General(250f, 500f, 10f), new LevelProperties.DicePalaceLight.SixWayLaser(new MinMax(25f, 85f), new MinMax(3f, 5.5f), 1.7f, new MinMax(2f, 3.2f), new string[]
					{
						"1,1,2,1,2,2"
					}, 9000f), new LevelProperties.DicePalaceLight.Objects(200f, 400f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.DicePalaceLight.State(10f, new LevelProperties.DicePalaceLight.Pattern[][]
				{
					new LevelProperties.DicePalaceLight.Pattern[1]
				}, LevelProperties.DicePalaceLight.States.Main, new LevelProperties.DicePalaceLight.General(0f, 0f, 0f), new LevelProperties.DicePalaceLight.SixWayLaser(new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), new string[0], 0f), new LevelProperties.DicePalaceLight.Objects(0f, 0f)));
			}
			return new LevelProperties.DicePalaceLight(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000134 RID: 308
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000A1 RID: 161
			// (get) Token: 0x06000389 RID: 905 RVA: 0x00017BEA File Offset: 0x00015FEA
			// (set) Token: 0x0600038A RID: 906 RVA: 0x00017BF2 File Offset: 0x00015FF2
			private protected LevelProperties.DicePalaceLight properties { protected get; private set; }

			// Token: 0x0600038B RID: 907 RVA: 0x00017BFB File Offset: 0x00015FFB
			public virtual void LevelInit(LevelProperties.DicePalaceLight properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600038C RID: 908 RVA: 0x00017C04 File Offset: 0x00016004
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000135 RID: 309
		public enum States
		{
			// Token: 0x0400061D RID: 1565
			Main,
			// Token: 0x0400061E RID: 1566
			Generic
		}

		// Token: 0x02000136 RID: 310
		public enum Pattern
		{
			// Token: 0x04000620 RID: 1568
			Default,
			// Token: 0x04000621 RID: 1569
			Uninitialized
		}

		// Token: 0x02000137 RID: 311
		public class State : AbstractLevelState<LevelProperties.DicePalaceLight.Pattern, LevelProperties.DicePalaceLight.States>
		{
			// Token: 0x0600038D RID: 909 RVA: 0x00017C06 File Offset: 0x00016006
			public State(float healthTrigger, LevelProperties.DicePalaceLight.Pattern[][] patterns, LevelProperties.DicePalaceLight.States stateName, LevelProperties.DicePalaceLight.General general, LevelProperties.DicePalaceLight.SixWayLaser sixWayLaser, LevelProperties.DicePalaceLight.Objects objects) : base(healthTrigger, patterns, stateName)
			{
				this.general = general;
				this.sixWayLaser = sixWayLaser;
				this.objects = objects;
			}

			// Token: 0x04000622 RID: 1570
			public readonly LevelProperties.DicePalaceLight.General general;

			// Token: 0x04000623 RID: 1571
			public readonly LevelProperties.DicePalaceLight.SixWayLaser sixWayLaser;

			// Token: 0x04000624 RID: 1572
			public readonly LevelProperties.DicePalaceLight.Objects objects;
		}

		// Token: 0x02000138 RID: 312
		public class General : AbstractLevelPropertyGroup
		{
			// Token: 0x0600038E RID: 910 RVA: 0x00017C29 File Offset: 0x00016029
			public General(float platformOnePosition, float platformTwoPosition, float bossPosition)
			{
				this.platformOnePosition = platformOnePosition;
				this.platformTwoPosition = platformTwoPosition;
				this.bossPosition = bossPosition;
			}

			// Token: 0x04000625 RID: 1573
			public readonly float platformOnePosition;

			// Token: 0x04000626 RID: 1574
			public readonly float platformTwoPosition;

			// Token: 0x04000627 RID: 1575
			public readonly float bossPosition;
		}

		// Token: 0x02000139 RID: 313
		public class SixWayLaser : AbstractLevelPropertyGroup
		{
			// Token: 0x0600038F RID: 911 RVA: 0x00017C46 File Offset: 0x00016046
			public SixWayLaser(MinMax rotationSpeedRange, MinMax attackOffDurationRange, float warningDuration, MinMax attackOnDurationRange, string[] directionAttackString, float directionTime)
			{
				this.rotationSpeedRange = rotationSpeedRange;
				this.attackOffDurationRange = attackOffDurationRange;
				this.warningDuration = warningDuration;
				this.attackOnDurationRange = attackOnDurationRange;
				this.directionAttackString = directionAttackString;
				this.directionTime = directionTime;
			}

			// Token: 0x04000628 RID: 1576
			public readonly MinMax rotationSpeedRange;

			// Token: 0x04000629 RID: 1577
			public readonly MinMax attackOffDurationRange;

			// Token: 0x0400062A RID: 1578
			public readonly float warningDuration;

			// Token: 0x0400062B RID: 1579
			public readonly MinMax attackOnDurationRange;

			// Token: 0x0400062C RID: 1580
			public readonly string[] directionAttackString;

			// Token: 0x0400062D RID: 1581
			public readonly float directionTime;
		}

		// Token: 0x0200013A RID: 314
		public class Objects : AbstractLevelPropertyGroup
		{
			// Token: 0x06000390 RID: 912 RVA: 0x00017C7B File Offset: 0x0001607B
			public Objects(float objectSpeed, float objectStartHeight)
			{
				this.objectSpeed = objectSpeed;
				this.objectStartHeight = objectStartHeight;
			}

			// Token: 0x0400062E RID: 1582
			public readonly float objectSpeed;

			// Token: 0x0400062F RID: 1583
			public readonly float objectStartHeight;
		}
	}

	// Token: 0x0200013C RID: 316
	public class DicePalaceMain : AbstractLevelProperties<LevelProperties.DicePalaceMain.State, LevelProperties.DicePalaceMain.Pattern, LevelProperties.DicePalaceMain.States>
	{
		// Token: 0x0600039C RID: 924 RVA: 0x00017C91 File Offset: 0x00016091
		public DicePalaceMain(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceMain.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600039D RID: 925 RVA: 0x00017CA0 File Offset: 0x000160A0
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 600f;
				break;
			case Level.Mode.Normal:
				timeline.health = 600f;
				break;
			case Level.Mode.Hard:
				timeline.health = 750f;
				break;
			}
			return timeline;
		}

		// Token: 0x0600039E RID: 926 RVA: 0x00017CFB File Offset: 0x000160FB
		public static LevelProperties.DicePalaceMain.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DicePalaceMain.Pattern.Default;
				}
			}
			Debug.LogError("Pattern DicePalaceMain.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceMain.Pattern.Uninitialized;
		}

		// Token: 0x0600039F RID: 927 RVA: 0x00017D3C File Offset: 0x0001613C
		public static LevelProperties.DicePalaceMain GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceMain.State> list = new List<LevelProperties.DicePalaceMain.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 750;
						goalTimes = new Level.GoalTimes(60f, 60f, 60f);
						list.Add(new LevelProperties.DicePalaceMain.State(10f, new LevelProperties.DicePalaceMain.Pattern[][]
						{
							new LevelProperties.DicePalaceMain.Pattern[1]
						}, LevelProperties.DicePalaceMain.States.Main, new LevelProperties.DicePalaceMain.Dice(1.5f, -300f, 1000f, 300f, 50f, 8f, 1f, 2f), new LevelProperties.DicePalaceMain.Cards(410f, new string[]
						{
							"R,P,R,R,R,P,R,P,R,R,R,R,P,R,R,P",
							"R,R,P,R,R,R,R,P,R,P,R,R,R,P,R,R",
							"R,R,R,P,R,R,R,P,R,R,R,P,R,P,R,R",
							"R,R,P,R,R,P,R,P,R,R,R,R,P,R,R,P",
							"R,P,R,R,P,R,R,R,P,R,R,P,R,R,R,R",
							"R,R,R,P,R,P,R,R,R,P,R,R,R,P,R,R",
							"R,P,R,R,R,R,P,R,R,R,P,R,R,P,R,P",
							"R,R,P,R,P,R,R,R,P,R,R,R,R,P,R,R",
							"R,P,R,P,R,R,R,R,P,R,R,P,R,R,R,P",
							"R,R,R,P,R,P,R,R,P,R,P,R,R,P,R,R",
							"R,R,P,R,R,P,R,R,P,R,R,R,R,P,R,R",
							"R,R,P,R,P,R,R,R,P,R,R,R,R,P,R,P",
							"R,R,P,R,R,P,R,P,R,R,R,P,R,R,R,R"
						}, new string[]
						{
							"L,R,L,R,L,L,R,L,R,L,R,R"
						}, 3f, 0.5f, 0.3f)));
					}
				}
				else
				{
					hp = 600;
					goalTimes = new Level.GoalTimes(60f, 60f, 60f);
					list.Add(new LevelProperties.DicePalaceMain.State(10f, new LevelProperties.DicePalaceMain.Pattern[][]
					{
						new LevelProperties.DicePalaceMain.Pattern[1]
					}, LevelProperties.DicePalaceMain.States.Main, new LevelProperties.DicePalaceMain.Dice(1.5f, -300f, 1000f, 300f, 50f, 8f, 1f, 2f), new LevelProperties.DicePalaceMain.Cards(410f, new string[]
					{
						"R,R,P,R,P,R,R,R,P,R,R,P",
						"R,R,R,P,R,P,R,R,P,R,R,P",
						"R,R,P,R,R,P,R,P,R,R,P,R",
						"R,R,R,P,R,R,P,R,R,P,R,P",
						"R,P,R,R,R,P,R,P,R,R,P,R",
						"R,R,P,R,R,R,P,R,P,R,R,P",
						"R,R,R,P,R,P,R,R,P,R,P,R",
						"R,P,R,R,P,R,P,R,R,P,R,R",
						"R,R,R,P,R,R,P,R,R,P,R,P",
						"R,P,R,R,R,P,R,P,R,R,P,R",
						"R,R,P,R,R,P,R,R,R,P,R,R"
					}, new string[]
					{
						"L,R,L,R,L,L,R,L,R,L,R,R"
					}, 3f, 0.5f, 0.3f)));
				}
			}
			else
			{
				hp = 600;
				goalTimes = new Level.GoalTimes(60f, 60f, 60f);
				list.Add(new LevelProperties.DicePalaceMain.State(10f, new LevelProperties.DicePalaceMain.Pattern[][]
				{
					new LevelProperties.DicePalaceMain.Pattern[1]
				}, LevelProperties.DicePalaceMain.States.Main, new LevelProperties.DicePalaceMain.Dice(1.5f, -300f, 1000f, 300f, 50f, 8f, 1f, 2f), new LevelProperties.DicePalaceMain.Cards(410f, new string[]
				{
					"R,R,P,R,P,R,R,R,P,R,R,P",
					"R,R,R,P,R,P,R,R,P,R,R,P",
					"R,R,P,R,R,R,P,R,P,R,R,P",
					"R,R,R,P,R,R,P,R,R,P,R,P"
				}, new string[]
				{
					"L,R,L,R,L,L,R,L,R,L,R,R"
				}, 3f, 0.5f, 0.3f)));
			}
			return new LevelProperties.DicePalaceMain(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200013D RID: 317
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000A7 RID: 167
			// (get) Token: 0x060003A1 RID: 929 RVA: 0x00018037 File Offset: 0x00016437
			// (set) Token: 0x060003A2 RID: 930 RVA: 0x0001803F File Offset: 0x0001643F
			private protected LevelProperties.DicePalaceMain properties { protected get; private set; }

			// Token: 0x060003A3 RID: 931 RVA: 0x00018048 File Offset: 0x00016448
			public virtual void LevelInit(LevelProperties.DicePalaceMain properties)
			{
				this.properties = properties;
			}

			// Token: 0x060003A4 RID: 932 RVA: 0x00018051 File Offset: 0x00016451
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200013E RID: 318
		public enum States
		{
			// Token: 0x04000636 RID: 1590
			Main,
			// Token: 0x04000637 RID: 1591
			Generic
		}

		// Token: 0x0200013F RID: 319
		public enum Pattern
		{
			// Token: 0x04000639 RID: 1593
			Default,
			// Token: 0x0400063A RID: 1594
			Uninitialized
		}

		// Token: 0x02000140 RID: 320
		public class State : AbstractLevelState<LevelProperties.DicePalaceMain.Pattern, LevelProperties.DicePalaceMain.States>
		{
			// Token: 0x060003A5 RID: 933 RVA: 0x00018053 File Offset: 0x00016453
			public State(float healthTrigger, LevelProperties.DicePalaceMain.Pattern[][] patterns, LevelProperties.DicePalaceMain.States stateName, LevelProperties.DicePalaceMain.Dice dice, LevelProperties.DicePalaceMain.Cards cards) : base(healthTrigger, patterns, stateName)
			{
				this.dice = dice;
				this.cards = cards;
			}

			// Token: 0x0400063B RID: 1595
			public readonly LevelProperties.DicePalaceMain.Dice dice;

			// Token: 0x0400063C RID: 1596
			public readonly LevelProperties.DicePalaceMain.Cards cards;
		}

		// Token: 0x02000141 RID: 321
		public class Dice : AbstractLevelPropertyGroup
		{
			// Token: 0x060003A6 RID: 934 RVA: 0x00018070 File Offset: 0x00016470
			public Dice(float movementSpeed, float diceStartPositionOneX, float diceStartPositionOneY, float diceStartPositionTwoX, float diceStartPositionTwoY, float rollFrameCount, float pauseWhenRolled, float revealDelay)
			{
				this.movementSpeed = movementSpeed;
				this.diceStartPositionOneX = diceStartPositionOneX;
				this.diceStartPositionOneY = diceStartPositionOneY;
				this.diceStartPositionTwoX = diceStartPositionTwoX;
				this.diceStartPositionTwoY = diceStartPositionTwoY;
				this.rollFrameCount = rollFrameCount;
				this.pauseWhenRolled = pauseWhenRolled;
				this.revealDelay = revealDelay;
			}

			// Token: 0x0400063D RID: 1597
			public readonly float movementSpeed;

			// Token: 0x0400063E RID: 1598
			public readonly float diceStartPositionOneX;

			// Token: 0x0400063F RID: 1599
			public readonly float diceStartPositionOneY;

			// Token: 0x04000640 RID: 1600
			public readonly float diceStartPositionTwoX;

			// Token: 0x04000641 RID: 1601
			public readonly float diceStartPositionTwoY;

			// Token: 0x04000642 RID: 1602
			public readonly float rollFrameCount;

			// Token: 0x04000643 RID: 1603
			public readonly float pauseWhenRolled;

			// Token: 0x04000644 RID: 1604
			public readonly float revealDelay;
		}

		// Token: 0x02000142 RID: 322
		public class Cards : AbstractLevelPropertyGroup
		{
			// Token: 0x060003A7 RID: 935 RVA: 0x000180C0 File Offset: 0x000164C0
			public Cards(float cardSpeed, string[] cardString, string[] cardSideOrder, float hesitate, float cardScale, float cardDelay)
			{
				this.cardSpeed = cardSpeed;
				this.cardString = cardString;
				this.cardSideOrder = cardSideOrder;
				this.hesitate = hesitate;
				this.cardScale = cardScale;
				this.cardDelay = cardDelay;
			}

			// Token: 0x04000645 RID: 1605
			public readonly float cardSpeed;

			// Token: 0x04000646 RID: 1606
			public readonly string[] cardString;

			// Token: 0x04000647 RID: 1607
			public readonly string[] cardSideOrder;

			// Token: 0x04000648 RID: 1608
			public readonly float hesitate;

			// Token: 0x04000649 RID: 1609
			public readonly float cardScale;

			// Token: 0x0400064A RID: 1610
			public readonly float cardDelay;
		}
	}

	// Token: 0x02000144 RID: 324
	public class DicePalacePachinko : AbstractLevelProperties<LevelProperties.DicePalacePachinko.State, LevelProperties.DicePalacePachinko.Pattern, LevelProperties.DicePalacePachinko.States>
	{
		// Token: 0x060003B6 RID: 950 RVA: 0x000180F5 File Offset: 0x000164F5
		public DicePalacePachinko(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalacePachinko.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060003B7 RID: 951 RVA: 0x00018104 File Offset: 0x00016504
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 550f;
				break;
			case Level.Mode.Hard:
				timeline.health = 700f;
				break;
			}
			return timeline;
		}

		// Token: 0x060003B8 RID: 952 RVA: 0x0001815F File Offset: 0x0001655F
		public static LevelProperties.DicePalacePachinko.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DicePalacePachinko.Pattern.Default;
				}
			}
			Debug.LogError("Pattern DicePalacePachinko.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalacePachinko.Pattern.Uninitialized;
		}

		// Token: 0x060003B9 RID: 953 RVA: 0x000181A0 File Offset: 0x000165A0
		public static LevelProperties.DicePalacePachinko GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalacePachinko.State> list = new List<LevelProperties.DicePalacePachinko.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 700;
						goalTimes = new Level.GoalTimes(60f, 60f, 60f);
						list.Add(new LevelProperties.DicePalacePachinko.State(10f, new LevelProperties.DicePalacePachinko.Pattern[][]
						{
							new LevelProperties.DicePalacePachinko.Pattern[1]
						}, LevelProperties.DicePalacePachinko.States.Main, new LevelProperties.DicePalacePachinko.Pachinko(2f, 2.5f, "150,350,550"), new LevelProperties.DicePalacePachinko.Balls(415f, "L,L,R,P,R,P,L,R,R,P,R,L,R,P,R,P,L,L,R,P", "1,2,3,2,1,2,3,1,3,2,1,2,3,2,3,1,2,3,1,3", "2.2,2.4,2.6,2,2.5,2,2.7,2.3,2.3,2.9,2", "4,3,4,3,4,2,3", 1f), new LevelProperties.DicePalacePachinko.Boss(new MinMax(470f, 730f), new MinMax(2.5f, 4.1f), 0.75f, 1f, 2.4f, -65f, -65f)));
					}
				}
				else
				{
					hp = 550;
					goalTimes = new Level.GoalTimes(60f, 60f, 60f);
					list.Add(new LevelProperties.DicePalacePachinko.State(10f, new LevelProperties.DicePalacePachinko.Pattern[][]
					{
						new LevelProperties.DicePalacePachinko.Pattern[1]
					}, LevelProperties.DicePalacePachinko.States.Main, new LevelProperties.DicePalacePachinko.Pachinko(2f, 2.5f, "150,350,550"), new LevelProperties.DicePalacePachinko.Balls(365f, "L,L,R,P,R,P,L,R,R,P,R,L,R,P,R,P,L,L,R,P", "1,2,3,2,1,2,3,1,3,2,1,2,3,2,3,1,2,3,1,3", "2.5,2,2.6,2.4,2.1,2.7,2.3,2.8,2.6,2.1,3.1", "4,2,3,4,3,3,2,4,3", 1f), new LevelProperties.DicePalacePachinko.Boss(new MinMax(300f, 650f), new MinMax(2.8f, 4.8f), 0.75f, 0.9f, 2.4f, -65f, -65f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.DicePalacePachinko.State(10f, new LevelProperties.DicePalacePachinko.Pattern[][]
				{
					new LevelProperties.DicePalacePachinko.Pattern[1]
				}, LevelProperties.DicePalacePachinko.States.Main, new LevelProperties.DicePalacePachinko.Pachinko(0f, 0f, string.Empty), new LevelProperties.DicePalacePachinko.Balls(0f, string.Empty, string.Empty, string.Empty, string.Empty, 0f), new LevelProperties.DicePalacePachinko.Boss(new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f)));
			}
			return new LevelProperties.DicePalacePachinko(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000145 RID: 325
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000AE RID: 174
			// (get) Token: 0x060003BB RID: 955 RVA: 0x000183FB File Offset: 0x000167FB
			// (set) Token: 0x060003BC RID: 956 RVA: 0x00018403 File Offset: 0x00016803
			private protected LevelProperties.DicePalacePachinko properties { protected get; private set; }

			// Token: 0x060003BD RID: 957 RVA: 0x0001840C File Offset: 0x0001680C
			public virtual void LevelInit(LevelProperties.DicePalacePachinko properties)
			{
				this.properties = properties;
			}

			// Token: 0x060003BE RID: 958 RVA: 0x00018415 File Offset: 0x00016815
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000146 RID: 326
		public enum States
		{
			// Token: 0x04000652 RID: 1618
			Main,
			// Token: 0x04000653 RID: 1619
			Generic
		}

		// Token: 0x02000147 RID: 327
		public enum Pattern
		{
			// Token: 0x04000655 RID: 1621
			Default,
			// Token: 0x04000656 RID: 1622
			Uninitialized
		}

		// Token: 0x02000148 RID: 328
		public class State : AbstractLevelState<LevelProperties.DicePalacePachinko.Pattern, LevelProperties.DicePalacePachinko.States>
		{
			// Token: 0x060003BF RID: 959 RVA: 0x00018417 File Offset: 0x00016817
			public State(float healthTrigger, LevelProperties.DicePalacePachinko.Pattern[][] patterns, LevelProperties.DicePalacePachinko.States stateName, LevelProperties.DicePalacePachinko.Pachinko pachinko, LevelProperties.DicePalacePachinko.Balls balls, LevelProperties.DicePalacePachinko.Boss boss) : base(healthTrigger, patterns, stateName)
			{
				this.pachinko = pachinko;
				this.balls = balls;
				this.boss = boss;
			}

			// Token: 0x04000657 RID: 1623
			public readonly LevelProperties.DicePalacePachinko.Pachinko pachinko;

			// Token: 0x04000658 RID: 1624
			public readonly LevelProperties.DicePalacePachinko.Balls balls;

			// Token: 0x04000659 RID: 1625
			public readonly LevelProperties.DicePalacePachinko.Boss boss;
		}

		// Token: 0x02000149 RID: 329
		public class Pachinko : AbstractLevelPropertyGroup
		{
			// Token: 0x060003C0 RID: 960 RVA: 0x0001843A File Offset: 0x0001683A
			public Pachinko(float platformWidthFour, float platformWidthThree, string platformHeights)
			{
				this.platformWidthFour = platformWidthFour;
				this.platformWidthThree = platformWidthThree;
				this.platformHeights = platformHeights;
			}

			// Token: 0x0400065A RID: 1626
			public readonly float platformWidthFour;

			// Token: 0x0400065B RID: 1627
			public readonly float platformWidthThree;

			// Token: 0x0400065C RID: 1628
			public readonly string platformHeights;
		}

		// Token: 0x0200014A RID: 330
		public class Balls : AbstractLevelPropertyGroup
		{
			// Token: 0x060003C1 RID: 961 RVA: 0x00018457 File Offset: 0x00016857
			public Balls(float movementSpeed, string directionString, string spawnOrderString, string ballDelayString, string pinkString, float initialAttackDelay)
			{
				this.movementSpeed = movementSpeed;
				this.directionString = directionString;
				this.spawnOrderString = spawnOrderString;
				this.ballDelayString = ballDelayString;
				this.pinkString = pinkString;
				this.initialAttackDelay = initialAttackDelay;
			}

			// Token: 0x0400065D RID: 1629
			public readonly float movementSpeed;

			// Token: 0x0400065E RID: 1630
			public readonly string directionString;

			// Token: 0x0400065F RID: 1631
			public readonly string spawnOrderString;

			// Token: 0x04000660 RID: 1632
			public readonly string ballDelayString;

			// Token: 0x04000661 RID: 1633
			public readonly string pinkString;

			// Token: 0x04000662 RID: 1634
			public readonly float initialAttackDelay;
		}

		// Token: 0x0200014B RID: 331
		public class Boss : AbstractLevelPropertyGroup
		{
			// Token: 0x060003C2 RID: 962 RVA: 0x0001848C File Offset: 0x0001688C
			public Boss(MinMax movementSpeed, MinMax attackDelay, float warningDuration, float beamDuration, float initialAttackDelay, float leftBoundaryOffset, float rightBoundaryOffset)
			{
				this.movementSpeed = movementSpeed;
				this.attackDelay = attackDelay;
				this.warningDuration = warningDuration;
				this.beamDuration = beamDuration;
				this.initialAttackDelay = initialAttackDelay;
				this.leftBoundaryOffset = leftBoundaryOffset;
				this.rightBoundaryOffset = rightBoundaryOffset;
			}

			// Token: 0x04000663 RID: 1635
			public readonly MinMax movementSpeed;

			// Token: 0x04000664 RID: 1636
			public readonly MinMax attackDelay;

			// Token: 0x04000665 RID: 1637
			public readonly float warningDuration;

			// Token: 0x04000666 RID: 1638
			public readonly float beamDuration;

			// Token: 0x04000667 RID: 1639
			public readonly float initialAttackDelay;

			// Token: 0x04000668 RID: 1640
			public readonly float leftBoundaryOffset;

			// Token: 0x04000669 RID: 1641
			public readonly float rightBoundaryOffset;
		}
	}

	// Token: 0x0200014D RID: 333
	public class DicePalaceRabbit : AbstractLevelProperties<LevelProperties.DicePalaceRabbit.State, LevelProperties.DicePalaceRabbit.Pattern, LevelProperties.DicePalaceRabbit.States>
	{
		// Token: 0x060003CF RID: 975 RVA: 0x000184C9 File Offset: 0x000168C9
		public DicePalaceRabbit(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceRabbit.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060003D0 RID: 976 RVA: 0x000184D8 File Offset: 0x000168D8
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 700f;
				break;
			case Level.Mode.Normal:
				timeline.health = 700f;
				break;
			case Level.Mode.Hard:
				timeline.health = 850f;
				break;
			}
			return timeline;
		}

		// Token: 0x060003D1 RID: 977 RVA: 0x00018534 File Offset: 0x00016934
		public static LevelProperties.DicePalaceRabbit.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "W")
				{
					return LevelProperties.DicePalaceRabbit.Pattern.MagicWand;
				}
				if (id == "P")
				{
					return LevelProperties.DicePalaceRabbit.Pattern.MagicParry;
				}
			}
			Debug.LogError("Pattern DicePalaceRabbit.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceRabbit.Pattern.Uninitialized;
		}

		// Token: 0x060003D2 RID: 978 RVA: 0x00018590 File Offset: 0x00016990
		public static LevelProperties.DicePalaceRabbit GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceRabbit.State> list = new List<LevelProperties.DicePalaceRabbit.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 850;
						goalTimes = new Level.GoalTimes(60f, 60f, 60f);
						list.Add(new LevelProperties.DicePalaceRabbit.State(10f, new LevelProperties.DicePalaceRabbit.Pattern[][]
						{
							new LevelProperties.DicePalaceRabbit.Pattern[]
							{
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
								LevelProperties.DicePalaceRabbit.Pattern.MagicParry
							}
						}, LevelProperties.DicePalaceRabbit.States.Main, new LevelProperties.DicePalaceRabbit.MagicWand(500f, 245f, new MinMax(1.3f, 2.4f), 530f, 0.4f, "1,4,7,8,9,6,3,2,4,6,7,2,9,3,8,1,8,7,3,4,2,8,6,1,9,4,3,8,2,1,9,6,8", 2f, 2f), new LevelProperties.DicePalaceRabbit.MagicParry(new MinMax(1.5f, 2f), 465f, 0f, "1,8,7,2,9,3,6,1,8,2,9,4,7,2,7,3,9,1,4,1,8,2,6,3,1,7,2,9,4,9,1,7,1,8,3,7,9,4,9,2,8,3,9,1,6,2,8,3,1,7,9,1,6", 1f, "25-135-245-355-465-575-685-795-905", 100f), new LevelProperties.DicePalaceRabbit.General("-200,-50", "1000,1000")));
					}
				}
				else
				{
					hp = 700;
					goalTimes = new Level.GoalTimes(60f, 60f, 60f);
					list.Add(new LevelProperties.DicePalaceRabbit.State(10f, new LevelProperties.DicePalaceRabbit.Pattern[][]
					{
						new LevelProperties.DicePalaceRabbit.Pattern[]
						{
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
							LevelProperties.DicePalaceRabbit.Pattern.MagicParry
						}
					}, LevelProperties.DicePalaceRabbit.States.Main, new LevelProperties.DicePalaceRabbit.MagicWand(500f, 175f, new MinMax(1.5f, 2.5f), 530f, 1f, "1,4,7,8,9,6,3,2,4,6,7,2,9,3,8,1,8,7,3,4,2,8,6,1,9,4,3,8,2,1,9,6,8", 2f, 2f), new LevelProperties.DicePalaceRabbit.MagicParry(new MinMax(2f, 2.8f), 405f, 0f, "1-6,5-9,4-7,4-8,2-8,1-5,3-9,2-9,1-5,3-7,4-8,5-9,2-6,4-6,1-7,3-9,2-7,1-5,6-9,2-8,1-4,5-9,1-9,3-7,2-6,1-5,2-8", 1f, "25-135-245-355-465-575-685-795-905", 100f), new LevelProperties.DicePalaceRabbit.General("-200,-50", "1000,1000")));
				}
			}
			else
			{
				hp = 700;
				goalTimes = new Level.GoalTimes(60f, 60f, 60f);
				list.Add(new LevelProperties.DicePalaceRabbit.State(10f, new LevelProperties.DicePalaceRabbit.Pattern[][]
				{
					new LevelProperties.DicePalaceRabbit.Pattern[]
					{
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicParry,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicWand,
						LevelProperties.DicePalaceRabbit.Pattern.MagicParry
					}
				}, LevelProperties.DicePalaceRabbit.States.Main, new LevelProperties.DicePalaceRabbit.MagicWand(500f, 175f, new MinMax(1.5f, 2.5f), 530f, 1f, "1,4,7,8,9,6,3,2,4,6,7,2,9,3,8,1,8,7,3,4,2,8,6,1,9,4,3,8,2,1,9,6,8", 2f, 2f), new LevelProperties.DicePalaceRabbit.MagicParry(new MinMax(2f, 2.8f), 405f, 0f, "1-6,5-9,4-7,4-8,2-8,1-5,3-9,2-9,1-5,3-7,4-8,5-9,2-6,4-6,1-7,3-9,2-7,1-5,6-9,2-8,1-4,5-9,1-9,3-7,2-6,1-5,2-8", 1f, "25-135-245-355-465-575-685-795-905", 100f), new LevelProperties.DicePalaceRabbit.General("-200,-50", "1000,1000")));
			}
			return new LevelProperties.DicePalaceRabbit(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200014E RID: 334
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000B4 RID: 180
			// (get) Token: 0x060003D4 RID: 980 RVA: 0x00018821 File Offset: 0x00016C21
			// (set) Token: 0x060003D5 RID: 981 RVA: 0x00018829 File Offset: 0x00016C29
			private protected LevelProperties.DicePalaceRabbit properties { protected get; private set; }

			// Token: 0x060003D6 RID: 982 RVA: 0x00018832 File Offset: 0x00016C32
			public virtual void LevelInit(LevelProperties.DicePalaceRabbit properties)
			{
				this.properties = properties;
			}

			// Token: 0x060003D7 RID: 983 RVA: 0x0001883B File Offset: 0x00016C3B
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200014F RID: 335
		public enum States
		{
			// Token: 0x04000672 RID: 1650
			Main,
			// Token: 0x04000673 RID: 1651
			Generic
		}

		// Token: 0x02000150 RID: 336
		public enum Pattern
		{
			// Token: 0x04000675 RID: 1653
			MagicWand,
			// Token: 0x04000676 RID: 1654
			MagicParry,
			// Token: 0x04000677 RID: 1655
			Uninitialized
		}

		// Token: 0x02000151 RID: 337
		public class State : AbstractLevelState<LevelProperties.DicePalaceRabbit.Pattern, LevelProperties.DicePalaceRabbit.States>
		{
			// Token: 0x060003D8 RID: 984 RVA: 0x0001883D File Offset: 0x00016C3D
			public State(float healthTrigger, LevelProperties.DicePalaceRabbit.Pattern[][] patterns, LevelProperties.DicePalaceRabbit.States stateName, LevelProperties.DicePalaceRabbit.MagicWand magicWand, LevelProperties.DicePalaceRabbit.MagicParry magicParry, LevelProperties.DicePalaceRabbit.General general) : base(healthTrigger, patterns, stateName)
			{
				this.magicWand = magicWand;
				this.magicParry = magicParry;
				this.general = general;
			}

			// Token: 0x04000678 RID: 1656
			public readonly LevelProperties.DicePalaceRabbit.MagicWand magicWand;

			// Token: 0x04000679 RID: 1657
			public readonly LevelProperties.DicePalaceRabbit.MagicParry magicParry;

			// Token: 0x0400067A RID: 1658
			public readonly LevelProperties.DicePalaceRabbit.General general;
		}

		// Token: 0x02000152 RID: 338
		public class MagicWand : AbstractLevelPropertyGroup
		{
			// Token: 0x060003D9 RID: 985 RVA: 0x00018860 File Offset: 0x00016C60
			public MagicWand(float spinningSpeed, float bulletSpeed, MinMax attackDelayRange, float circleDiameter, float hesitate, string safeZoneString, float bulletSize, float initialAttackDelay)
			{
				this.spinningSpeed = spinningSpeed;
				this.bulletSpeed = bulletSpeed;
				this.attackDelayRange = attackDelayRange;
				this.circleDiameter = circleDiameter;
				this.hesitate = hesitate;
				this.safeZoneString = safeZoneString;
				this.bulletSize = bulletSize;
				this.initialAttackDelay = initialAttackDelay;
			}

			// Token: 0x0400067B RID: 1659
			public readonly float spinningSpeed;

			// Token: 0x0400067C RID: 1660
			public readonly float bulletSpeed;

			// Token: 0x0400067D RID: 1661
			public readonly MinMax attackDelayRange;

			// Token: 0x0400067E RID: 1662
			public readonly float circleDiameter;

			// Token: 0x0400067F RID: 1663
			public readonly float hesitate;

			// Token: 0x04000680 RID: 1664
			public readonly string safeZoneString;

			// Token: 0x04000681 RID: 1665
			public readonly float bulletSize;

			// Token: 0x04000682 RID: 1666
			public readonly float initialAttackDelay;
		}

		// Token: 0x02000153 RID: 339
		public class MagicParry : AbstractLevelPropertyGroup
		{
			// Token: 0x060003DA RID: 986 RVA: 0x000188B0 File Offset: 0x00016CB0
			public MagicParry(MinMax attackDelayRange, float speed, float hesitate, string pinkString, float initialAttackDelay, string magicPositions, float yOffset)
			{
				this.attackDelayRange = attackDelayRange;
				this.speed = speed;
				this.hesitate = hesitate;
				this.pinkString = pinkString;
				this.initialAttackDelay = initialAttackDelay;
				this.magicPositions = magicPositions;
				this.yOffset = yOffset;
			}

			// Token: 0x04000683 RID: 1667
			public readonly MinMax attackDelayRange;

			// Token: 0x04000684 RID: 1668
			public readonly float speed;

			// Token: 0x04000685 RID: 1669
			public readonly float hesitate;

			// Token: 0x04000686 RID: 1670
			public readonly string pinkString;

			// Token: 0x04000687 RID: 1671
			public readonly float initialAttackDelay;

			// Token: 0x04000688 RID: 1672
			public readonly string magicPositions;

			// Token: 0x04000689 RID: 1673
			public readonly float yOffset;
		}

		// Token: 0x02000154 RID: 340
		public class General : AbstractLevelPropertyGroup
		{
			// Token: 0x060003DB RID: 987 RVA: 0x000188ED File Offset: 0x00016CED
			public General(string platformOnePosition, string platformTwoPosition)
			{
				this.platformOnePosition = platformOnePosition;
				this.platformTwoPosition = platformTwoPosition;
			}

			// Token: 0x0400068A RID: 1674
			public readonly string platformOnePosition;

			// Token: 0x0400068B RID: 1675
			public readonly string platformTwoPosition;
		}
	}

	// Token: 0x02000156 RID: 342
	public class DicePalaceRoulette : AbstractLevelProperties<LevelProperties.DicePalaceRoulette.State, LevelProperties.DicePalaceRoulette.Pattern, LevelProperties.DicePalaceRoulette.States>
	{
		// Token: 0x060003EA RID: 1002 RVA: 0x00018903 File Offset: 0x00016D03
		public DicePalaceRoulette(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceRoulette.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060003EB RID: 1003 RVA: 0x00018910 File Offset: 0x00016D10
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 650f;
				break;
			case Level.Mode.Normal:
				timeline.health = 650f;
				break;
			case Level.Mode.Hard:
				timeline.health = 800f;
				break;
			}
			return timeline;
		}

		// Token: 0x060003EC RID: 1004 RVA: 0x0001896C File Offset: 0x00016D6C
		public static LevelProperties.DicePalaceRoulette.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DicePalaceRoulette.Pattern.Default;
				}
				if (id == "T")
				{
					return LevelProperties.DicePalaceRoulette.Pattern.Twirl;
				}
				if (id == "M")
				{
					return LevelProperties.DicePalaceRoulette.Pattern.Marble;
				}
			}
			Debug.LogError("Pattern DicePalaceRoulette.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceRoulette.Pattern.Uninitialized;
		}

		// Token: 0x060003ED RID: 1005 RVA: 0x000189DC File Offset: 0x00016DDC
		public static LevelProperties.DicePalaceRoulette GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceRoulette.State> list = new List<LevelProperties.DicePalaceRoulette.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 800;
						goalTimes = new Level.GoalTimes(60f, 60f, 60f);
						list.Add(new LevelProperties.DicePalaceRoulette.State(10f, new LevelProperties.DicePalaceRoulette.Pattern[][]
						{
							new LevelProperties.DicePalaceRoulette.Pattern[]
							{
								LevelProperties.DicePalaceRoulette.Pattern.Twirl,
								LevelProperties.DicePalaceRoulette.Pattern.Marble
							}
						}, LevelProperties.DicePalaceRoulette.States.Main, new LevelProperties.DicePalaceRoulette.Platform(0f, 30f, 4f, 1.8f), new LevelProperties.DicePalaceRoulette.Twirl(950f, 0.0001f, 0.8f, new string[]
						{
							"5,6,3,6,4,5,6,3,4,7,4,3"
						}, 1f), new LevelProperties.DicePalaceRoulette.MarbleDrop(1200f, new string[]
						{
							"25-1050,100-1000,150-950,200-900,250-850,300,350-750,400-700,450-650,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,700,450-650,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,750,400-700,450-650,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400,450-650,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400-700,450-650,600,550",
							"25-1050,100-1000,150-950,200-900,250-850,800,350-750,400-700,450-650,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400-700,450,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400-700,650,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400-700,450,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300,350-750,400-700,450-650,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,750,400-700,450-650,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,750,400-700,450-650,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,350,400-700,450-650,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,700,450-650,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400-700,650,500-600,550",
							"25-1050,100-1000,150-950,200-900,250-850,300-800,350,400-700,450-650,500-600,550"
						}, 0.24f, 1f, 1.6f)));
					}
				}
				else
				{
					hp = 650;
					goalTimes = new Level.GoalTimes(60f, 60f, 60f);
					list.Add(new LevelProperties.DicePalaceRoulette.State(10f, new LevelProperties.DicePalaceRoulette.Pattern[][]
					{
						new LevelProperties.DicePalaceRoulette.Pattern[]
						{
							LevelProperties.DicePalaceRoulette.Pattern.Twirl,
							LevelProperties.DicePalaceRoulette.Pattern.Marble
						}
					}, LevelProperties.DicePalaceRoulette.States.Main, new LevelProperties.DicePalaceRoulette.Platform(0f, 30f, 4f, 2.2f), new LevelProperties.DicePalaceRoulette.Twirl(800f, 0.0001f, 1f, new string[]
					{
						"4,5,3,6,4,5,4,3,4,6,4,3",
						"5,3,4,4,3,5,4,3,6,4,3,3"
					}, 1f), new LevelProperties.DicePalaceRoulette.MarbleDrop(990f, new string[]
					{
						"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,700,650,500-600,550",
						"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400,450,500-600,550",
						"25-1050,100-1000,150-950,200-900,250-850,300-800,350,400,450-650,500-600,550",
						"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400-700,650,600,550",
						"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400-700,450-650,500",
						"25-1050,100-1000,150-950,200-900,250-850,300-800,750,700,450-650,500-600,550",
						"25-1050,100-1000,150-950,200-900,250-850,300-800,350,400,450-650,500-600,550",
						"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,700,650,500-600,550",
						"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400,450,500-600,550",
						"25-1050,100-1000,150-950,200-900,250-850,300-800,350,400,450-650,500-600,550",
						"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,700,650,500-600,550",
						"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400-700,450,500,550"
					}, 0.27f, 1.3f, 2f)));
				}
			}
			else
			{
				hp = 650;
				goalTimes = new Level.GoalTimes(60f, 60f, 60f);
				list.Add(new LevelProperties.DicePalaceRoulette.State(10f, new LevelProperties.DicePalaceRoulette.Pattern[][]
				{
					new LevelProperties.DicePalaceRoulette.Pattern[]
					{
						LevelProperties.DicePalaceRoulette.Pattern.Twirl,
						LevelProperties.DicePalaceRoulette.Pattern.Marble
					}
				}, LevelProperties.DicePalaceRoulette.States.Main, new LevelProperties.DicePalaceRoulette.Platform(0f, 30f, 4f, 2.2f), new LevelProperties.DicePalaceRoulette.Twirl(800f, 0.0001f, 1f, new string[]
				{
					"5,6,3,6,4,5,6,3,4,7,4,3"
				}, 1f), new LevelProperties.DicePalaceRoulette.MarbleDrop(990f, new string[]
				{
					"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,700,650,500-600,550",
					"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400,450,500-600,550",
					"25-1050,100-1000,150-950,200-900,250-850,300-800,350,400,450-650,500-600,550",
					"25-1050,100-1000,150-950,200-900,250-850,300-800,350-750,400-700,650,600,550"
				}, 0.257f, 1.3f, 2f)));
			}
			return new LevelProperties.DicePalaceRoulette(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000157 RID: 343
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000BA RID: 186
			// (get) Token: 0x060003EF RID: 1007 RVA: 0x00018D2A File Offset: 0x0001712A
			// (set) Token: 0x060003F0 RID: 1008 RVA: 0x00018D32 File Offset: 0x00017132
			private protected LevelProperties.DicePalaceRoulette properties { protected get; private set; }

			// Token: 0x060003F1 RID: 1009 RVA: 0x00018D3B File Offset: 0x0001713B
			public virtual void LevelInit(LevelProperties.DicePalaceRoulette properties)
			{
				this.properties = properties;
			}

			// Token: 0x060003F2 RID: 1010 RVA: 0x00018D44 File Offset: 0x00017144
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000158 RID: 344
		public enum States
		{
			// Token: 0x04000692 RID: 1682
			Main,
			// Token: 0x04000693 RID: 1683
			Generic
		}

		// Token: 0x02000159 RID: 345
		public enum Pattern
		{
			// Token: 0x04000695 RID: 1685
			Default,
			// Token: 0x04000696 RID: 1686
			Twirl,
			// Token: 0x04000697 RID: 1687
			Marble,
			// Token: 0x04000698 RID: 1688
			Uninitialized
		}

		// Token: 0x0200015A RID: 346
		public class State : AbstractLevelState<LevelProperties.DicePalaceRoulette.Pattern, LevelProperties.DicePalaceRoulette.States>
		{
			// Token: 0x060003F3 RID: 1011 RVA: 0x00018D46 File Offset: 0x00017146
			public State(float healthTrigger, LevelProperties.DicePalaceRoulette.Pattern[][] patterns, LevelProperties.DicePalaceRoulette.States stateName, LevelProperties.DicePalaceRoulette.Platform platform, LevelProperties.DicePalaceRoulette.Twirl twirl, LevelProperties.DicePalaceRoulette.MarbleDrop marbleDrop) : base(healthTrigger, patterns, stateName)
			{
				this.platform = platform;
				this.twirl = twirl;
				this.marbleDrop = marbleDrop;
			}

			// Token: 0x04000699 RID: 1689
			public readonly LevelProperties.DicePalaceRoulette.Platform platform;

			// Token: 0x0400069A RID: 1690
			public readonly LevelProperties.DicePalaceRoulette.Twirl twirl;

			// Token: 0x0400069B RID: 1691
			public readonly LevelProperties.DicePalaceRoulette.MarbleDrop marbleDrop;
		}

		// Token: 0x0200015B RID: 347
		public class Platform : AbstractLevelPropertyGroup
		{
			// Token: 0x060003F4 RID: 1012 RVA: 0x00018D69 File Offset: 0x00017169
			public Platform(float platformHeightRow, float platformWidth, float platformCount, float platformOpenDuration)
			{
				this.platformHeightRow = platformHeightRow;
				this.platformWidth = platformWidth;
				this.platformCount = platformCount;
				this.platformOpenDuration = platformOpenDuration;
			}

			// Token: 0x0400069C RID: 1692
			public readonly float platformHeightRow;

			// Token: 0x0400069D RID: 1693
			public readonly float platformWidth;

			// Token: 0x0400069E RID: 1694
			public readonly float platformCount;

			// Token: 0x0400069F RID: 1695
			public readonly float platformOpenDuration;
		}

		// Token: 0x0200015C RID: 348
		public class Twirl : AbstractLevelPropertyGroup
		{
			// Token: 0x060003F5 RID: 1013 RVA: 0x00018D8E File Offset: 0x0001718E
			public Twirl(float movementSpeed, float moveDelayRange, float hesitate, string[] twirlAmount, float scale)
			{
				this.movementSpeed = movementSpeed;
				this.moveDelayRange = moveDelayRange;
				this.hesitate = hesitate;
				this.twirlAmount = twirlAmount;
				this.scale = scale;
			}

			// Token: 0x040006A0 RID: 1696
			public readonly float movementSpeed;

			// Token: 0x040006A1 RID: 1697
			public readonly float moveDelayRange;

			// Token: 0x040006A2 RID: 1698
			public readonly float hesitate;

			// Token: 0x040006A3 RID: 1699
			public readonly string[] twirlAmount;

			// Token: 0x040006A4 RID: 1700
			public readonly float scale;
		}

		// Token: 0x0200015D RID: 349
		public class MarbleDrop : AbstractLevelPropertyGroup
		{
			// Token: 0x060003F6 RID: 1014 RVA: 0x00018DBB File Offset: 0x000171BB
			public MarbleDrop(float marbleSpeed, string[] marblePositionStrings, float marbleDelay, float marbleInitalDelay, float hesitate)
			{
				this.marbleSpeed = marbleSpeed;
				this.marblePositionStrings = marblePositionStrings;
				this.marbleDelay = marbleDelay;
				this.marbleInitalDelay = marbleInitalDelay;
				this.hesitate = hesitate;
			}

			// Token: 0x040006A5 RID: 1701
			public readonly float marbleSpeed;

			// Token: 0x040006A6 RID: 1702
			public readonly string[] marblePositionStrings;

			// Token: 0x040006A7 RID: 1703
			public readonly float marbleDelay;

			// Token: 0x040006A8 RID: 1704
			public readonly float marbleInitalDelay;

			// Token: 0x040006A9 RID: 1705
			public readonly float hesitate;
		}
	}

	// Token: 0x0200015F RID: 351
	public class DicePalaceTest : AbstractLevelProperties<LevelProperties.DicePalaceTest.State, LevelProperties.DicePalaceTest.Pattern, LevelProperties.DicePalaceTest.States>
	{
		// Token: 0x06000405 RID: 1029 RVA: 0x00018DE8 File Offset: 0x000171E8
		public DicePalaceTest(int hp, Level.GoalTimes goalTimes, LevelProperties.DicePalaceTest.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000406 RID: 1030 RVA: 0x00018DF4 File Offset: 0x000171F4
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000407 RID: 1031 RVA: 0x00018E4F File Offset: 0x0001724F
		public static LevelProperties.DicePalaceTest.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.DicePalaceTest.Pattern.Default;
				}
			}
			Debug.LogError("Pattern DicePalaceTest.Pattern for  " + id + " not found.", null);
			return LevelProperties.DicePalaceTest.Pattern.Uninitialized;
		}

		// Token: 0x06000408 RID: 1032 RVA: 0x00018E90 File Offset: 0x00017290
		public static LevelProperties.DicePalaceTest GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.DicePalaceTest.State> list = new List<LevelProperties.DicePalaceTest.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.DicePalaceTest.State(10f, new LevelProperties.DicePalaceTest.Pattern[][]
						{
							new LevelProperties.DicePalaceTest.Pattern[1]
						}, LevelProperties.DicePalaceTest.States.Main));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.DicePalaceTest.State(10f, new LevelProperties.DicePalaceTest.Pattern[][]
					{
						new LevelProperties.DicePalaceTest.Pattern[1]
					}, LevelProperties.DicePalaceTest.States.Main));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.DicePalaceTest.State(10f, new LevelProperties.DicePalaceTest.Pattern[][]
				{
					new LevelProperties.DicePalaceTest.Pattern[1]
				}, LevelProperties.DicePalaceTest.States.Main));
			}
			return new LevelProperties.DicePalaceTest(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000160 RID: 352
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000C0 RID: 192
			// (get) Token: 0x0600040A RID: 1034 RVA: 0x00018F8C File Offset: 0x0001738C
			// (set) Token: 0x0600040B RID: 1035 RVA: 0x00018F94 File Offset: 0x00017394
			private protected LevelProperties.DicePalaceTest properties { protected get; private set; }

			// Token: 0x0600040C RID: 1036 RVA: 0x00018F9D File Offset: 0x0001739D
			public virtual void LevelInit(LevelProperties.DicePalaceTest properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600040D RID: 1037 RVA: 0x00018FA6 File Offset: 0x000173A6
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000161 RID: 353
		public enum States
		{
			// Token: 0x040006B1 RID: 1713
			Main,
			// Token: 0x040006B2 RID: 1714
			Generic
		}

		// Token: 0x02000162 RID: 354
		public enum Pattern
		{
			// Token: 0x040006B4 RID: 1716
			Default,
			// Token: 0x040006B5 RID: 1717
			Uninitialized
		}

		// Token: 0x02000163 RID: 355
		public class State : AbstractLevelState<LevelProperties.DicePalaceTest.Pattern, LevelProperties.DicePalaceTest.States>
		{
			// Token: 0x0600040E RID: 1038 RVA: 0x00018FA8 File Offset: 0x000173A8
			public State(float healthTrigger, LevelProperties.DicePalaceTest.Pattern[][] patterns, LevelProperties.DicePalaceTest.States stateName) : base(healthTrigger, patterns, stateName)
			{
			}
		}
	}

	// Token: 0x02000165 RID: 357
	public class Dragon : AbstractLevelProperties<LevelProperties.Dragon.State, LevelProperties.Dragon.Pattern, LevelProperties.Dragon.States>
	{
		// Token: 0x0600041A RID: 1050 RVA: 0x00018FB3 File Offset: 0x000173B3
		public Dragon(int hp, Level.GoalTimes goalTimes, LevelProperties.Dragon.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600041B RID: 1051 RVA: 0x00018FC0 File Offset: 0x000173C0
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1200f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.75f));
				timeline.events.Add(new Level.Timeline.Event("FireMarchers", 0.45f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1700f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.92f));
				timeline.events.Add(new Level.Timeline.Event("FireMarchers", 0.63f));
				timeline.events.Add(new Level.Timeline.Event("ThreeHeads", 0.33f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1900f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.9f));
				timeline.events.Add(new Level.Timeline.Event("FireMarchers", 0.64f));
				timeline.events.Add(new Level.Timeline.Event("ThreeHeads", 0.35f));
				break;
			}
			return timeline;
		}

		// Token: 0x0600041C RID: 1052 RVA: 0x000190EC File Offset: 0x000174EC
		public static LevelProperties.Dragon.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "M")
				{
					return LevelProperties.Dragon.Pattern.Meteor;
				}
				if (id == "P")
				{
					return LevelProperties.Dragon.Pattern.Peashot;
				}
			}
			Debug.LogError("Pattern Dragon.Pattern for  " + id + " not found.", null);
			return LevelProperties.Dragon.Pattern.Uninitialized;
		}

		// Token: 0x0600041D RID: 1053 RVA: 0x00019148 File Offset: 0x00017548
		public static LevelProperties.Dragon GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Dragon.State> list = new List<LevelProperties.Dragon.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1900;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						List<LevelProperties.Dragon.State> list2 = list;
						float healthTrigger = 10f;
						LevelProperties.Dragon.Pattern[][] array = new LevelProperties.Dragon.Pattern[1][];
						int num = 0;
						LevelProperties.Dragon.Pattern[] array2 = new LevelProperties.Dragon.Pattern[2];
						array2[0] = LevelProperties.Dragon.Pattern.Peashot;
						array[num] = array2;
						list2.Add(new LevelProperties.Dragon.State(healthTrigger, array, LevelProperties.Dragon.States.Main, new LevelProperties.Dragon.Meteor(new string[]
						{
							"UD",
							"DUD",
							"DU",
							"UD",
							"UDU"
						}, 350f, 0.85f, 1.1f, 2f), new LevelProperties.Dragon.Tail(false, 1f, 0.25f, 1f, 0.5f, new MinMax(2.5f, 4f)), new LevelProperties.Dragon.Peashot(new string[]
						{
							"0.4,P,0.7,P",
							"0.7,P,0.4,P",
							"0.4,P,0.7,P,0.6,P"
						}, 0.18f, 865f, "OBP", 2f), new LevelProperties.Dragon.FireAndSmoke("F,S,F,F,S,F,S,F,F,F,S,F,S,F,S,F,F,S"), new LevelProperties.Dragon.FireMarchers(360f, 0.46f, new MinMax(0.9f, 2f), 0.5f, 2200f, new MinMax(200f, 1700f), new MinMax(45f, 70f), new MinMax(150f, 800f)), new LevelProperties.Dragon.Potions(460f, 700f, 5f, new string[]
						{
							"X"
						}, new string[]
						{
							"T:A,T:C,B:A,B:C,T:A,T:C",
							"B:A,T:A,T:C,B:A,T:A,T:C",
							"B:A,B:C,T:A,T:C,B:A,B:C",
							"T:C,B:C,B:A,T:C,B:C,B:A"
						}, 0.7f, 0.6f, new string[]
						{
							"12,6,8,10,6,10,12,8"
						}, 0f, 1.5f, 3f), new LevelProperties.Dragon.Blowtorch(new string[]
						{
							"11,14,8,13,11,8,15,10,8,12,14"
						}, 12, 20, 1.5f, 2f, 0.8f), new LevelProperties.Dragon.Clouds(new string[]
						{
							"445,D0.6,290,D0.6,565,D0.3,190,D0.5,330,D0.6",
							"180,485,D0.8,560,310,D0.8,240,D0.3,570,D0.6,350,D0.7",
							"505,D0.3,218,480,D0.7,305,D0.8",
							"205,D0.2,580,D0.7,415,D0.4,235,560,D0.8,505,D0.6,345,D0.2,150,D0.5,565,D0.4,375,D0.7",
							"560,D0.2,285,D0.8,425,D0.6,170,500,D0.9,250,530,D0.7,380,D0.8",
							"495,235,D0.7,402,D0.6",
							"246,D0.3,550,D0.6,394,D0.8,525,295,D0.6,394,D0.6,515,D0.1,265,D0.5,370,D0.7"
						}, 225f, true, 0.36f)));
						list.Add(new LevelProperties.Dragon.State(0.9f, new LevelProperties.Dragon.Pattern[][]
						{
							new LevelProperties.Dragon.Pattern[]
							{
								LevelProperties.Dragon.Pattern.Meteor,
								LevelProperties.Dragon.Pattern.Peashot
							}
						}, LevelProperties.Dragon.States.Generic, new LevelProperties.Dragon.Meteor(new string[]
						{
							"U,D",
							"D,U",
							"D,B",
							"U,D",
							"D,U"
						}, 350f, 0.9f, 1.2f, 2f), new LevelProperties.Dragon.Tail(true, 1.3f, 0.25f, 1f, 0.5f, new MinMax(3f, 4.5f)), new LevelProperties.Dragon.Peashot(new string[]
						{
							"0.4,P,0.7,P",
							"0.7,P,0.4,P",
							"0.4,P,0.7,P,0.6,P"
						}, 0.18f, 865f, "OBP", 2f), new LevelProperties.Dragon.FireAndSmoke("F,S,F,F,S,F,S,F,F,F,S,F,S,F,S,F,F,S"), new LevelProperties.Dragon.FireMarchers(360f, 0.46f, new MinMax(0.9f, 2f), 0.5f, 2200f, new MinMax(200f, 1700f), new MinMax(45f, 70f), new MinMax(150f, 800f)), new LevelProperties.Dragon.Potions(460f, 700f, 5f, new string[]
						{
							"X"
						}, new string[]
						{
							"T:A,T:C,B:A,B:C,T:A,T:C",
							"B:A,T:A,T:C,B:A,T:A,T:C",
							"B:A,B:C,T:A,T:C,B:A,B:C",
							"T:C,B:C,B:A,T:C,B:C,B:A"
						}, 0.7f, 0.6f, new string[]
						{
							"12,6,8,10,6,10,12,8"
						}, 0f, 1.5f, 3f), new LevelProperties.Dragon.Blowtorch(new string[]
						{
							"11,14,8,13,11,8,15,10,8,12,14"
						}, 12, 20, 1.5f, 2f, 0.8f), new LevelProperties.Dragon.Clouds(new string[]
						{
							"445,D0.6,290,D0.6,565,D0.3,190,D0.5,330,D0.6",
							"180,485,D0.8,560,310,D0.8,240,D0.3,570,D0.6,350,D0.7",
							"505,D0.3,218,480,D0.7,305,D0.8",
							"205,D0.2,580,D0.7,415,D0.4,235,560,D0.8,505,D0.6,345,D0.2,150,D0.5,565,D0.4,375,D0.7",
							"560,D0.2,285,D0.8,425,D0.6,170,500,D0.9,250,530,D0.7,380,D0.8",
							"495,235,D0.7,402,D0.6",
							"246,D0.3,550,D0.6,394,D0.8,525,295,D0.6,394,D0.6,515,D0.1,265,D0.5,370,D0.7"
						}, 225f, true, 0.36f)));
						list.Add(new LevelProperties.Dragon.State(0.64f, new LevelProperties.Dragon.Pattern[][]
						{
							new LevelProperties.Dragon.Pattern[0]
						}, LevelProperties.Dragon.States.FireMarchers, new LevelProperties.Dragon.Meteor(new string[]
						{
							"U,D",
							"D,U",
							"D,B",
							"U,D",
							"D,U"
						}, 350f, 0.9f, 1.2f, 2f), new LevelProperties.Dragon.Tail(true, 1.3f, 0.25f, 1f, 0.5f, new MinMax(3f, 4.5f)), new LevelProperties.Dragon.Peashot(new string[]
						{
							"0.4,P,0.7,P",
							"0.7,P,0.4,P",
							"0.4,P,0.7,P,0.6,P"
						}, 0.18f, 865f, "OBP", 2f), new LevelProperties.Dragon.FireAndSmoke("F,S,F,F,S,F,S,F,F,F,S,F,S,F,S,F,F,S"), new LevelProperties.Dragon.FireMarchers(360f, 0.46f, new MinMax(0.9f, 2f), 0.5f, 2200f, new MinMax(200f, 1700f), new MinMax(45f, 70f), new MinMax(150f, 800f)), new LevelProperties.Dragon.Potions(460f, 700f, 5f, new string[]
						{
							"X"
						}, new string[]
						{
							"T:A,T:C,B:A,B:C,T:A,T:C",
							"B:A,T:A,T:C,B:A,T:A,T:C",
							"B:A,B:C,T:A,T:C,B:A,B:C",
							"T:C,B:C,B:A,T:C,B:C,B:A"
						}, 0.7f, 0.6f, new string[]
						{
							"12,6,8,10,6,10,12,8"
						}, 0f, 1.5f, 3f), new LevelProperties.Dragon.Blowtorch(new string[]
						{
							"11,14,8,13,11,8,15,10,8,12,14"
						}, 12, 20, 1.5f, 2f, 0.8f), new LevelProperties.Dragon.Clouds(new string[]
						{
							"445,D0.6,290,D0.6,565,D0.3,190,D0.5,330,D0.6",
							"180,485,D0.8,560,310,D0.8,240,D0.3,570,D0.6,350,D0.7",
							"505,D0.3,218,480,D0.7,305,D0.8",
							"205,D0.2,580,D0.7,415,D0.4,235,560,D0.8,505,D0.6,345,D0.2,150,D0.5,565,D0.4,375,D0.7",
							"560,D0.2,285,D0.8,425,D0.6,170,500,D0.9,250,530,D0.7,380,D0.8",
							"495,235,D0.7,402,D0.6",
							"246,D0.3,550,D0.6,394,D0.8,525,295,D0.6,394,D0.6,515,D0.1,265,D0.5,370,D0.7"
						}, 225f, true, 0.36f)));
						list.Add(new LevelProperties.Dragon.State(0.35f, new LevelProperties.Dragon.Pattern[][]
						{
							new LevelProperties.Dragon.Pattern[0]
						}, LevelProperties.Dragon.States.ThreeHeads, new LevelProperties.Dragon.Meteor(new string[]
						{
							"U,D",
							"D,U",
							"D,B",
							"U,D",
							"D,U"
						}, 350f, 0.9f, 1.2f, 2f), new LevelProperties.Dragon.Tail(true, 1.3f, 0.25f, 1f, 0.5f, new MinMax(3f, 4.5f)), new LevelProperties.Dragon.Peashot(new string[]
						{
							"0.4,P,0.7,P",
							"0.7,P,0.4,P",
							"0.4,P,0.7,P,0.6,P"
						}, 0.18f, 865f, "OBP", 2f), new LevelProperties.Dragon.FireAndSmoke("F,S,F,F,S,F,S,F,F,F,S,F,S,F,S,F,F,S"), new LevelProperties.Dragon.FireMarchers(360f, 0.46f, new MinMax(0.9f, 2f), 0.5f, 2200f, new MinMax(200f, 1700f), new MinMax(45f, 70f), new MinMax(150f, 800f)), new LevelProperties.Dragon.Potions(460f, 700f, 5f, new string[]
						{
							"X"
						}, new string[]
						{
							"T:A,T:C,B:A,B:C,T:A,T:C",
							"B:A,T:A,T:C,B:A,T:A,T:C",
							"B:A,B:C,T:A,T:C,B:A,B:C",
							"T:C,B:C,B:A,T:C,B:C,B:A"
						}, 0.7f, 0.6f, new string[]
						{
							"12,6,8,10,6,10,12,8"
						}, 0f, 1.5f, 3f), new LevelProperties.Dragon.Blowtorch(new string[]
						{
							"11,14,8,13,11,8,15,10,8,12,14"
						}, 12, 20, 1.5f, 2f, 0.8f), new LevelProperties.Dragon.Clouds(new string[]
						{
							"180,485,D0.8,560,310,D0.8,190,D0.3,570,D0.6,350,D0.6",
							"585,D0.3,200,480,D0.7,305,D0.7",
							"445,D0.6,250,D0.6,575,D0.3,180,D0.5,330,D0.6",
							"195,D0.2,600,D0.7,415,D0.4,175,600,D0.8,475,D0.6,345,D0.2,150,D0.5,565,D0.4,375,D0.7",
							"535,215,D0.7,402,D0.6",
							"620,D0.2,285,D0.8,425,D0.6,170,550,D0.9,220,600,D0.7,380,D0.6",
							"176,D0.3,550,D0.6,394,D0.8,575,295,D0.6,394,D0.6,515,D0.1,205,D0.5,370,D0.7"
						}, 225f, true, 0.36f)));
					}
				}
				else
				{
					hp = 1700;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Dragon.State(10f, new LevelProperties.Dragon.Pattern[][]
					{
						new LevelProperties.Dragon.Pattern[]
						{
							LevelProperties.Dragon.Pattern.Peashot
						}
					}, LevelProperties.Dragon.States.Main, new LevelProperties.Dragon.Meteor(new string[]
					{
						"UDUD",
						"DUD",
						"DUDU",
						"UDU"
					}, 400f, 1f, 1.5f, 2f), new LevelProperties.Dragon.Tail(false, 1f, 0.15f, 2f, 4f, new MinMax(2.5f, 4f)), new LevelProperties.Dragon.Peashot(new string[]
					{
						"0.5,P,0.8,P,1,P",
						"0.5,P,1,P",
						"0.5,P,0.8,P"
					}, 0.2f, 650f, "OBP", 2f), new LevelProperties.Dragon.FireAndSmoke("F,S,F,F,S,F,S,F,F,F,S,F,S,F,S,F,F,S"), new LevelProperties.Dragon.FireMarchers(350f, 0.5f, new MinMax(1.3f, 2.4f), 0.5f, 2100f, new MinMax(0f, 1650f), new MinMax(45f, 70f), new MinMax(150f, 650f)), new LevelProperties.Dragon.Potions(400f, 580f, 5f, new string[]
					{
						"X"
					}, new string[]
					{
						"T:A,T:C,B:A,B:C,T:A,T:C",
						"T:A,B:A,T:C,B:C,T:A,B:A",
						"B:C,B:A,T:C,T:A,B:C,B:A",
						"B:A,T:A,B:C,T:C,B:A,T:A"
					}, 0.7f, 0.6f, new string[]
					{
						"6,8,8,6,10,8,6,6,8,10"
					}, 0f, 1.8f, 3f), new LevelProperties.Dragon.Blowtorch(new string[]
					{
						"10,14,8,13,11,10,15,10,8,13,12,15"
					}, 12, 20, 1.5f, 2f, 0.8f), new LevelProperties.Dragon.Clouds(new string[]
					{
						"500,205,D1,405,D0.8",
						"180,520,D0.8,600,320,D0.8,220,D0.3,490,D0.6,350,D0.8",
						"560,D0.2,265,D0.8,405,D0.4,190,570,D0.9,250,540,D0.8,370,D0.6",
						"575,D0.3,228,D0.7,335,D0.9",
						"205,D0.2,620,D0.7,415,D0.4,235,580,D1,505,D0.6,345,D0.2,160,D0.5,565,D0.4,375,D0.7",
						"226,D0.3,630,D0.5,374,D1,525,245,D0.5,394,D0.7,580,D0.1,285,D0.5,410,D0.8",
						"445,D0.6,290,D0.6,565,D0.6,150,D0.7,330,D0.7"
					}, 210f, false, 0.37f)));
					list.Add(new LevelProperties.Dragon.State(0.92f, new LevelProperties.Dragon.Pattern[][]
					{
						new LevelProperties.Dragon.Pattern[1]
					}, LevelProperties.Dragon.States.Generic, new LevelProperties.Dragon.Meteor(new string[]
					{
						"UDUD",
						"DUD",
						"DUDU",
						"UDU"
					}, 400f, 1f, 1.5f, 2f), new LevelProperties.Dragon.Tail(false, 1f, 0.15f, 2f, 4f, new MinMax(2.5f, 4f)), new LevelProperties.Dragon.Peashot(new string[]
					{
						"0.5,P,0.8,P,1,P",
						"0.5,P,1,P",
						"0.5,P,0.8,P"
					}, 0.2f, 650f, "OBP", 2f), new LevelProperties.Dragon.FireAndSmoke("F,S,F,F,S,F,S,F,F,F,S,F,S,F,S,F,F,S"), new LevelProperties.Dragon.FireMarchers(350f, 0.5f, new MinMax(1.3f, 2.4f), 0.5f, 2100f, new MinMax(0f, 1650f), new MinMax(45f, 70f), new MinMax(150f, 650f)), new LevelProperties.Dragon.Potions(400f, 580f, 5f, new string[]
					{
						"X"
					}, new string[]
					{
						"T:A,T:C,B:A,B:C,T:A,T:C",
						"T:A,B:A,T:C,B:C,T:A,B:A",
						"B:C,B:A,T:C,T:A,B:C,B:A",
						"B:A,T:A,B:C,T:C,B:A,T:A"
					}, 0.7f, 0.6f, new string[]
					{
						"6,8,8,6,10,8,6,6,8,10"
					}, 0f, 1.8f, 3f), new LevelProperties.Dragon.Blowtorch(new string[]
					{
						"10,14,8,13,11,10,15,10,8,13,12,15"
					}, 12, 20, 1.5f, 2f, 0.8f), new LevelProperties.Dragon.Clouds(new string[]
					{
						"500,205,D1,405,D0.8",
						"180,520,D0.8,600,320,D0.8,220,D0.3,490,D0.6,350,D0.8",
						"560,D0.2,265,D0.8,405,D0.4,190,570,D0.9,250,540,D0.8,370,D0.6",
						"575,D0.3,228,D0.7,335,D0.9",
						"205,D0.2,620,D0.7,415,D0.4,235,580,D1,505,D0.6,345,D0.2,160,D0.5,565,D0.4,375,D0.7",
						"226,D0.3,630,D0.5,374,D1,525,245,D0.5,394,D0.7,580,D0.1,285,D0.5,410,D0.8",
						"445,D0.6,290,D0.6,565,D0.6,150,D0.7,330,D0.7"
					}, 210f, false, 0.37f)));
					list.Add(new LevelProperties.Dragon.State(0.82f, new LevelProperties.Dragon.Pattern[][]
					{
						new LevelProperties.Dragon.Pattern[]
						{
							LevelProperties.Dragon.Pattern.Meteor,
							LevelProperties.Dragon.Pattern.Peashot
						}
					}, LevelProperties.Dragon.States.Generic, new LevelProperties.Dragon.Meteor(new string[]
					{
						"UB",
						"BD",
						"DB",
						"BU"
					}, 500f, 1f, 1.5f, 2f), new LevelProperties.Dragon.Tail(true, 1.5f, 0.15f, 1f, 0.5f, new MinMax(3.5f, 5.5f)), new LevelProperties.Dragon.Peashot(new string[]
					{
						"1,P,1,P",
						"1,P",
						"1,P"
					}, 0.15f, 750f, "OBOP", 1.5f), new LevelProperties.Dragon.FireAndSmoke("F,S,F,F,S,F,S,F,F,F,S,F,S,F,S,F,F,S"), new LevelProperties.Dragon.FireMarchers(350f, 0.5f, new MinMax(1.3f, 2.4f), 0.5f, 2100f, new MinMax(0f, 1650f), new MinMax(45f, 70f), new MinMax(150f, 650f)), new LevelProperties.Dragon.Potions(400f, 580f, 5f, new string[]
					{
						"X"
					}, new string[]
					{
						"T:A,T:C,B:A,B:C,T:A,T:C",
						"T:A,B:A,T:C,B:C,T:A,B:A",
						"B:C,B:A,T:C,T:A,B:C,B:A",
						"B:A,T:A,B:C,T:C,B:A,T:A"
					}, 0.7f, 0.6f, new string[]
					{
						"6,8,8,6,10,8,6,6,8,10"
					}, 0f, 1.8f, 3f), new LevelProperties.Dragon.Blowtorch(new string[]
					{
						"10,14,8,13,11,10,15,10,8,13,12,15"
					}, 12, 20, 1.5f, 2f, 0.8f), new LevelProperties.Dragon.Clouds(new string[]
					{
						"500,205,D1,405,D0.8",
						"180,520,D0.8,600,320,D0.8,220,D0.3,490,D0.6,350,D0.8",
						"560,D0.2,265,D0.8,405,D0.4,190,570,D0.9,250,540,D0.8,370,D0.6",
						"575,D0.3,228,D0.7,335,D0.9",
						"205,D0.2,620,D0.7,415,D0.4,235,580,D1,505,D0.6,345,D0.2,160,D0.5,565,D0.4,375,D0.7",
						"226,D0.3,630,D0.5,374,D1,525,245,D0.5,394,D0.7,580,D0.1,285,D0.5,410,D0.8",
						"445,D0.6,290,D0.6,565,D0.6,150,D0.7,330,D0.7"
					}, 210f, false, 0.37f)));
					list.Add(new LevelProperties.Dragon.State(0.63f, new LevelProperties.Dragon.Pattern[][]
					{
						new LevelProperties.Dragon.Pattern[]
						{
							LevelProperties.Dragon.Pattern.Peashot
						}
					}, LevelProperties.Dragon.States.FireMarchers, new LevelProperties.Dragon.Meteor(new string[]
					{
						"UB",
						"BD",
						"DB",
						"BU"
					}, 500f, 1f, 1.5f, 2f), new LevelProperties.Dragon.Tail(true, 1.5f, 0.15f, 1f, 0.5f, new MinMax(3.5f, 5.5f)), new LevelProperties.Dragon.Peashot(new string[]
					{
						"1,P,1,P",
						"1,P",
						"1,P"
					}, 0.15f, 750f, "OBOP", 1.5f), new LevelProperties.Dragon.FireAndSmoke("F,S,F,F,S,F,S,F,F,F,S,F,S,F,S,F,F,S"), new LevelProperties.Dragon.FireMarchers(350f, 0.5f, new MinMax(1.3f, 2.4f), 0.5f, 2100f, new MinMax(0f, 1650f), new MinMax(45f, 70f), new MinMax(150f, 650f)), new LevelProperties.Dragon.Potions(400f, 580f, 5f, new string[]
					{
						"X"
					}, new string[]
					{
						"T:A,T:C,B:A,B:C,T:A,T:C",
						"T:A,B:A,T:C,B:C,T:A,B:A",
						"B:C,B:A,T:C,T:A,B:C,B:A",
						"B:A,T:A,B:C,T:C,B:A,T:A"
					}, 0.7f, 0.6f, new string[]
					{
						"6,8,8,6,10,8,6,6,8,10"
					}, 0f, 1.8f, 3f), new LevelProperties.Dragon.Blowtorch(new string[]
					{
						"10,14,8,13,11,10,15,10,8,13,12,15"
					}, 12, 20, 1.5f, 2f, 0.8f), new LevelProperties.Dragon.Clouds(new string[]
					{
						"500,205,D1,405,D0.8",
						"180,520,D0.8,600,320,D0.8,220,D0.3,490,D0.6,350,D0.8",
						"560,D0.2,265,D0.8,405,D0.4,190,570,D0.9,250,540,D0.8,370,D0.6",
						"575,D0.3,228,D0.7,335,D0.9",
						"205,D0.2,620,D0.7,415,D0.4,235,580,D1,505,D0.6,345,D0.2,160,D0.5,565,D0.4,375,D0.7",
						"226,D0.3,630,D0.5,374,D1,525,245,D0.5,394,D0.7,580,D0.1,285,D0.5,410,D0.8",
						"445,D0.6,290,D0.6,565,D0.6,150,D0.7,330,D0.7"
					}, 210f, false, 0.37f)));
					list.Add(new LevelProperties.Dragon.State(0.33f, new LevelProperties.Dragon.Pattern[][]
					{
						new LevelProperties.Dragon.Pattern[0]
					}, LevelProperties.Dragon.States.ThreeHeads, new LevelProperties.Dragon.Meteor(new string[]
					{
						"UB",
						"BD",
						"DB",
						"BU"
					}, 500f, 1f, 1.5f, 2f), new LevelProperties.Dragon.Tail(true, 1.5f, 0.15f, 1f, 0.5f, new MinMax(3.5f, 5.5f)), new LevelProperties.Dragon.Peashot(new string[]
					{
						"1,P,1,P",
						"1,P",
						"1,P"
					}, 0.15f, 750f, "OBOP", 1.5f), new LevelProperties.Dragon.FireAndSmoke("F,S,F,F,S,F,S,F,F,F,S,F,S,F,S,F,F,S"), new LevelProperties.Dragon.FireMarchers(350f, 0.5f, new MinMax(1.3f, 2.4f), 0.5f, 2100f, new MinMax(0f, 1650f), new MinMax(45f, 70f), new MinMax(150f, 650f)), new LevelProperties.Dragon.Potions(400f, 580f, 5f, new string[]
					{
						"X"
					}, new string[]
					{
						"T:A,T:C,B:A,B:C,T:A,T:C",
						"T:A,B:A,T:C,B:C,T:A,B:A",
						"B:C,B:A,T:C,T:A,B:C,B:A",
						"B:A,T:A,B:C,T:C,B:A,T:A"
					}, 0.7f, 0.6f, new string[]
					{
						"6,8,8,6,10,8,6,6,8,10"
					}, 0f, 1.8f, 3f), new LevelProperties.Dragon.Blowtorch(new string[]
					{
						"10,14,8,13,11,10,15,10,8,13,12,15"
					}, 12, 20, 1.5f, 2f, 0.8f), new LevelProperties.Dragon.Clouds(new string[]
					{
						"500,205,D1,405,D0.8",
						"180,520,D0.8,600,320,D0.8,220,D0.3,490,D0.6,350,D0.8",
						"560,D0.2,265,D0.8,405,D0.4,190,570,D0.9,250,540,D0.8,370,D0.6",
						"575,D0.3,228,D0.7,335,D0.9",
						"205,D0.2,620,D0.7,415,D0.4,235,580,D1,505,D0.6,345,D0.2,160,D0.5,565,D0.4,375,D0.7",
						"226,D0.3,630,D0.5,374,D1,525,245,D0.5,394,D0.7,580,D0.1,285,D0.5,410,D0.8",
						"445,D0.6,290,D0.6,565,D0.6,150,D0.7,330,D0.7"
					}, 210f, false, 0.37f)));
				}
			}
			else
			{
				hp = 1200;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Dragon.State(10f, new LevelProperties.Dragon.Pattern[][]
				{
					new LevelProperties.Dragon.Pattern[]
					{
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Meteor,
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Meteor,
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Meteor,
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Meteor
					}
				}, LevelProperties.Dragon.States.Main, new LevelProperties.Dragon.Meteor(new string[]
				{
					"UD",
					"DUD",
					"UD",
					"UDU",
					"DD",
					"DUD",
					"UD",
					"UDU",
					"UU",
					"DUD"
				}, 360f, 1.2f, 2.3f, 2f), new LevelProperties.Dragon.Tail(false, 1f, 0.15f, 2f, 1f, new MinMax(2.5f, 4f)), new LevelProperties.Dragon.Peashot(new string[]
				{
					"0.5,P,1.5,P",
					"1,P,2,P",
					"0.5,P",
					"1,P,1,P",
					"1,P"
				}, 0.25f, 600f, "OBP", 2f), new LevelProperties.Dragon.FireAndSmoke("F,S,F,F,S,F,S,F,F,F,S,F,S,F,S,F,F,S"), new LevelProperties.Dragon.FireMarchers(285f, 0.75f, new MinMax(1.5f, 2.5f), 0.5f, 2000f, new MinMax(0f, 1600f), new MinMax(45f, 75f), new MinMax(150f, 650f)), new LevelProperties.Dragon.Potions(500f, 800f, 5f, new string[]
				{
					"H"
				}, new string[]
				{
					"T:A,B:C"
				}, 0.8f, 0.6f, new string[]
				{
					"4,6,5"
				}, 1.2f, 4f, 3f), new LevelProperties.Dragon.Blowtorch(new string[]
				{
					"8,10,14,8,10"
				}, 12, 9, 2f, 2f, 0.8f), new LevelProperties.Dragon.Clouds(new string[]
				{
					"205,D0.2,620,D0.7,415,D0.4,235,580,D1,505,D0.6,345,D0.2,150,D0.5,565,D0.4,375,D0.8",
					"560,D0.2,265,D0.8,405,D0.4,150,570,D0.9,250,540,D0.8,370,D0.8",
					"445,D0.6,290,D0.6,565,D0.6,150,D1",
					"226,D0.3,630,D0.5,374,D1,525,245,D0.5,394,D0.7,580,D0.1,285,D0.5,410,D0.9",
					"500,205,D1,422,D0.9",
					"180,520,D0.8,600,320,D0.8,220,D0.3,490,D0.6,350,D0.9",
					"575,D0.3,228,D0.7,335,D1"
				}, 135f, false, 0.71f)));
				list.Add(new LevelProperties.Dragon.State(0.75f, new LevelProperties.Dragon.Pattern[][]
				{
					new LevelProperties.Dragon.Pattern[]
					{
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Meteor,
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Meteor,
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Meteor,
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Peashot,
						LevelProperties.Dragon.Pattern.Meteor
					}
				}, LevelProperties.Dragon.States.Generic, new LevelProperties.Dragon.Meteor(new string[]
				{
					"UD",
					"DUD",
					"UD",
					"UDU",
					"DD",
					"DUD",
					"UD",
					"UDU",
					"UU",
					"DUD"
				}, 360f, 1.2f, 2.3f, 2f), new LevelProperties.Dragon.Tail(true, 1f, 0.5f, 1.4f, 1f, new MinMax(2.9f, 4.3f)), new LevelProperties.Dragon.Peashot(new string[]
				{
					"0.5,P,1.5,P",
					"1,P,2,P",
					"0.5,P",
					"1,P,1,P",
					"1,P"
				}, 0.25f, 600f, "OBP", 2f), new LevelProperties.Dragon.FireAndSmoke("F,S,F,F,S,F,S,F,F,F,S,F,S,F,S,F,F,S"), new LevelProperties.Dragon.FireMarchers(285f, 0.75f, new MinMax(1.5f, 2.5f), 0.5f, 2000f, new MinMax(0f, 1600f), new MinMax(45f, 75f), new MinMax(150f, 650f)), new LevelProperties.Dragon.Potions(500f, 800f, 5f, new string[]
				{
					"H"
				}, new string[]
				{
					"T:A,B:C"
				}, 0.8f, 0.6f, new string[]
				{
					"4,6,5"
				}, 1.2f, 4f, 3f), new LevelProperties.Dragon.Blowtorch(new string[]
				{
					"8,10,14,8,10"
				}, 12, 9, 2f, 2f, 0.8f), new LevelProperties.Dragon.Clouds(new string[]
				{
					"205,D0.2,620,D0.7,415,D0.4,235,580,D1,505,D0.6,345,D0.2,150,D0.5,565,D0.4,375,D0.8",
					"560,D0.2,265,D0.8,405,D0.4,150,570,D0.9,250,540,D0.8,370,D0.8",
					"445,D0.6,290,D0.6,565,D0.6,150,D1",
					"226,D0.3,630,D0.5,374,D1,525,245,D0.5,394,D0.7,580,D0.1,285,D0.5,410,D0.9",
					"500,205,D1,422,D0.9",
					"180,520,D0.8,600,320,D0.8,220,D0.3,490,D0.6,350,D0.9",
					"575,D0.3,228,D0.7,335,D1"
				}, 135f, false, 0.71f)));
				list.Add(new LevelProperties.Dragon.State(0.45f, new LevelProperties.Dragon.Pattern[][]
				{
					new LevelProperties.Dragon.Pattern[0]
				}, LevelProperties.Dragon.States.FireMarchers, new LevelProperties.Dragon.Meteor(new string[]
				{
					"UD",
					"DUD",
					"UD",
					"UDU",
					"DD",
					"DUD",
					"UD",
					"UDU",
					"UU",
					"DUD"
				}, 360f, 1.2f, 2.3f, 2f), new LevelProperties.Dragon.Tail(true, 1f, 0.5f, 1.4f, 1f, new MinMax(2.9f, 4.3f)), new LevelProperties.Dragon.Peashot(new string[]
				{
					"0.5,P,1.5,P",
					"1,P,2,P",
					"0.5,P",
					"1,P,1,P",
					"1,P"
				}, 0.25f, 600f, "OBP", 2f), new LevelProperties.Dragon.FireAndSmoke("F,S,F,F,S,F,S,F,F,F,S,F,S,F,S,F,F,S"), new LevelProperties.Dragon.FireMarchers(285f, 0.75f, new MinMax(1.5f, 2.5f), 0.5f, 2000f, new MinMax(0f, 1600f), new MinMax(45f, 75f), new MinMax(150f, 650f)), new LevelProperties.Dragon.Potions(500f, 800f, 5f, new string[]
				{
					"H"
				}, new string[]
				{
					"T:A,B:C"
				}, 0.8f, 0.6f, new string[]
				{
					"4,6,5"
				}, 1.2f, 4f, 3f), new LevelProperties.Dragon.Blowtorch(new string[]
				{
					"8,10,14,8,10"
				}, 12, 9, 2f, 2f, 0.8f), new LevelProperties.Dragon.Clouds(new string[]
				{
					"205,D0.2,620,D0.7,415,D0.4,235,580,D1,505,D0.6,345,D0.2,150,D0.5,565,D0.4,375,D0.8",
					"560,D0.2,265,D0.8,405,D0.4,150,570,D0.9,250,540,D0.8,370,D0.8",
					"445,D0.6,290,D0.6,565,D0.6,150,D1",
					"226,D0.3,630,D0.5,374,D1,525,245,D0.5,394,D0.7,580,D0.1,285,D0.5,410,D0.9",
					"500,205,D1,422,D0.9",
					"180,520,D0.8,600,320,D0.8,220,D0.3,490,D0.6,350,D0.9",
					"575,D0.3,228,D0.7,335,D1"
				}, 135f, false, 0.71f)));
			}
			return new LevelProperties.Dragon(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000166 RID: 358
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000C6 RID: 198
			// (get) Token: 0x0600041F RID: 1055 RVA: 0x0001AAC3 File Offset: 0x00018EC3
			// (set) Token: 0x06000420 RID: 1056 RVA: 0x0001AACB File Offset: 0x00018ECB
			private protected LevelProperties.Dragon properties { protected get; private set; }

			// Token: 0x06000421 RID: 1057 RVA: 0x0001AAD4 File Offset: 0x00018ED4
			public virtual void LevelInit(LevelProperties.Dragon properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000422 RID: 1058 RVA: 0x0001AADD File Offset: 0x00018EDD
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000167 RID: 359
		public enum States
		{
			// Token: 0x040006BC RID: 1724
			Main,
			// Token: 0x040006BD RID: 1725
			Generic,
			// Token: 0x040006BE RID: 1726
			ThreeHeads,
			// Token: 0x040006BF RID: 1727
			FireMarchers
		}

		// Token: 0x02000168 RID: 360
		public enum Pattern
		{
			// Token: 0x040006C1 RID: 1729
			Meteor,
			// Token: 0x040006C2 RID: 1730
			Peashot,
			// Token: 0x040006C3 RID: 1731
			Uninitialized
		}

		// Token: 0x02000169 RID: 361
		public class State : AbstractLevelState<LevelProperties.Dragon.Pattern, LevelProperties.Dragon.States>
		{
			// Token: 0x06000423 RID: 1059 RVA: 0x0001AAE0 File Offset: 0x00018EE0
			public State(float healthTrigger, LevelProperties.Dragon.Pattern[][] patterns, LevelProperties.Dragon.States stateName, LevelProperties.Dragon.Meteor meteor, LevelProperties.Dragon.Tail tail, LevelProperties.Dragon.Peashot peashot, LevelProperties.Dragon.FireAndSmoke fireAndSmoke, LevelProperties.Dragon.FireMarchers fireMarchers, LevelProperties.Dragon.Potions potions, LevelProperties.Dragon.Blowtorch blowtorch, LevelProperties.Dragon.Clouds clouds) : base(healthTrigger, patterns, stateName)
			{
				this.meteor = meteor;
				this.tail = tail;
				this.peashot = peashot;
				this.fireAndSmoke = fireAndSmoke;
				this.fireMarchers = fireMarchers;
				this.potions = potions;
				this.blowtorch = blowtorch;
				this.clouds = clouds;
			}

			// Token: 0x040006C4 RID: 1732
			public readonly LevelProperties.Dragon.Meteor meteor;

			// Token: 0x040006C5 RID: 1733
			public readonly LevelProperties.Dragon.Tail tail;

			// Token: 0x040006C6 RID: 1734
			public readonly LevelProperties.Dragon.Peashot peashot;

			// Token: 0x040006C7 RID: 1735
			public readonly LevelProperties.Dragon.FireAndSmoke fireAndSmoke;

			// Token: 0x040006C8 RID: 1736
			public readonly LevelProperties.Dragon.FireMarchers fireMarchers;

			// Token: 0x040006C9 RID: 1737
			public readonly LevelProperties.Dragon.Potions potions;

			// Token: 0x040006CA RID: 1738
			public readonly LevelProperties.Dragon.Blowtorch blowtorch;

			// Token: 0x040006CB RID: 1739
			public readonly LevelProperties.Dragon.Clouds clouds;
		}

		// Token: 0x0200016A RID: 362
		public class Meteor : AbstractLevelPropertyGroup
		{
			// Token: 0x06000424 RID: 1060 RVA: 0x0001AB36 File Offset: 0x00018F36
			public Meteor(string[] pattern, float speedX, float timeY, float shotDelay, float hesitate)
			{
				this.pattern = pattern;
				this.speedX = speedX;
				this.timeY = timeY;
				this.shotDelay = shotDelay;
				this.hesitate = hesitate;
			}

			// Token: 0x040006CC RID: 1740
			public readonly string[] pattern;

			// Token: 0x040006CD RID: 1741
			public readonly float speedX;

			// Token: 0x040006CE RID: 1742
			public readonly float timeY;

			// Token: 0x040006CF RID: 1743
			public readonly float shotDelay;

			// Token: 0x040006D0 RID: 1744
			public readonly float hesitate;
		}

		// Token: 0x0200016B RID: 363
		public class Tail : AbstractLevelPropertyGroup
		{
			// Token: 0x06000425 RID: 1061 RVA: 0x0001AB63 File Offset: 0x00018F63
			public Tail(bool active, float warningTime, float inTime, float outTime, float holdTime, MinMax attackDelay)
			{
				this.active = active;
				this.warningTime = warningTime;
				this.inTime = inTime;
				this.outTime = outTime;
				this.holdTime = holdTime;
				this.attackDelay = attackDelay;
			}

			// Token: 0x040006D1 RID: 1745
			public readonly bool active;

			// Token: 0x040006D2 RID: 1746
			public readonly float warningTime;

			// Token: 0x040006D3 RID: 1747
			public readonly float inTime;

			// Token: 0x040006D4 RID: 1748
			public readonly float outTime;

			// Token: 0x040006D5 RID: 1749
			public readonly float holdTime;

			// Token: 0x040006D6 RID: 1750
			public readonly MinMax attackDelay;
		}

		// Token: 0x0200016C RID: 364
		public class Peashot : AbstractLevelPropertyGroup
		{
			// Token: 0x06000426 RID: 1062 RVA: 0x0001AB98 File Offset: 0x00018F98
			public Peashot(string[] patternString, float shotDelay, float speed, string colorString, float hesitate)
			{
				this.patternString = patternString;
				this.shotDelay = shotDelay;
				this.speed = speed;
				this.colorString = colorString;
				this.hesitate = hesitate;
			}

			// Token: 0x040006D7 RID: 1751
			public readonly string[] patternString;

			// Token: 0x040006D8 RID: 1752
			public readonly float shotDelay;

			// Token: 0x040006D9 RID: 1753
			public readonly float speed;

			// Token: 0x040006DA RID: 1754
			public readonly string colorString;

			// Token: 0x040006DB RID: 1755
			public readonly float hesitate;
		}

		// Token: 0x0200016D RID: 365
		public class FireAndSmoke : AbstractLevelPropertyGroup
		{
			// Token: 0x06000427 RID: 1063 RVA: 0x0001ABC5 File Offset: 0x00018FC5
			public FireAndSmoke(string PatternString)
			{
				this.PatternString = PatternString;
			}

			// Token: 0x040006DC RID: 1756
			public readonly string PatternString;
		}

		// Token: 0x0200016E RID: 366
		public class FireMarchers : AbstractLevelPropertyGroup
		{
			// Token: 0x06000428 RID: 1064 RVA: 0x0001ABD4 File Offset: 0x00018FD4
			public FireMarchers(float moveSpeed, float spawnDelay, MinMax jumpDelay, float crouchTime, float gravity, MinMax jumpSpeed, MinMax jumpAngle, MinMax jumpX)
			{
				this.moveSpeed = moveSpeed;
				this.spawnDelay = spawnDelay;
				this.jumpDelay = jumpDelay;
				this.crouchTime = crouchTime;
				this.gravity = gravity;
				this.jumpSpeed = jumpSpeed;
				this.jumpAngle = jumpAngle;
				this.jumpX = jumpX;
			}

			// Token: 0x040006DD RID: 1757
			public readonly float moveSpeed;

			// Token: 0x040006DE RID: 1758
			public readonly float spawnDelay;

			// Token: 0x040006DF RID: 1759
			public readonly MinMax jumpDelay;

			// Token: 0x040006E0 RID: 1760
			public readonly float crouchTime;

			// Token: 0x040006E1 RID: 1761
			public readonly float gravity;

			// Token: 0x040006E2 RID: 1762
			public readonly MinMax jumpSpeed;

			// Token: 0x040006E3 RID: 1763
			public readonly MinMax jumpAngle;

			// Token: 0x040006E4 RID: 1764
			public readonly MinMax jumpX;
		}

		// Token: 0x0200016F RID: 367
		public class Potions : AbstractLevelPropertyGroup
		{
			// Token: 0x06000429 RID: 1065 RVA: 0x0001AC24 File Offset: 0x00019024
			public Potions(float potionSpeed, float spitBulletSpeed, float potionHP, string[] potionTypeString, string[] shotPositionString, float potionScale, float explosionBulletScale, string[] attackCount, float repeatDelay, float attackMainDelay, float playerAimCount)
			{
				this.potionSpeed = potionSpeed;
				this.spitBulletSpeed = spitBulletSpeed;
				this.potionHP = potionHP;
				this.potionTypeString = potionTypeString;
				this.shotPositionString = shotPositionString;
				this.potionScale = potionScale;
				this.explosionBulletScale = explosionBulletScale;
				this.attackCount = attackCount;
				this.repeatDelay = repeatDelay;
				this.attackMainDelay = attackMainDelay;
				this.playerAimCount = playerAimCount;
			}

			// Token: 0x040006E5 RID: 1765
			public readonly float potionSpeed;

			// Token: 0x040006E6 RID: 1766
			public readonly float spitBulletSpeed;

			// Token: 0x040006E7 RID: 1767
			public readonly float potionHP;

			// Token: 0x040006E8 RID: 1768
			public readonly string[] potionTypeString;

			// Token: 0x040006E9 RID: 1769
			public readonly string[] shotPositionString;

			// Token: 0x040006EA RID: 1770
			public readonly float potionScale;

			// Token: 0x040006EB RID: 1771
			public readonly float explosionBulletScale;

			// Token: 0x040006EC RID: 1772
			public readonly string[] attackCount;

			// Token: 0x040006ED RID: 1773
			public readonly float repeatDelay;

			// Token: 0x040006EE RID: 1774
			public readonly float attackMainDelay;

			// Token: 0x040006EF RID: 1775
			public readonly float playerAimCount;
		}

		// Token: 0x02000170 RID: 368
		public class Blowtorch : AbstractLevelPropertyGroup
		{
			// Token: 0x0600042A RID: 1066 RVA: 0x0001AC8C File Offset: 0x0001908C
			public Blowtorch(string[] attackDelayString, int warningDurationOne, int warningDurationTwo, float fireOnDuration, float repeatDelay, float fireSize)
			{
				this.attackDelayString = attackDelayString;
				this.warningDurationOne = warningDurationOne;
				this.warningDurationTwo = warningDurationTwo;
				this.fireOnDuration = fireOnDuration;
				this.repeatDelay = repeatDelay;
				this.fireSize = fireSize;
			}

			// Token: 0x040006F0 RID: 1776
			public readonly string[] attackDelayString;

			// Token: 0x040006F1 RID: 1777
			public readonly int warningDurationOne;

			// Token: 0x040006F2 RID: 1778
			public readonly int warningDurationTwo;

			// Token: 0x040006F3 RID: 1779
			public readonly float fireOnDuration;

			// Token: 0x040006F4 RID: 1780
			public readonly float repeatDelay;

			// Token: 0x040006F5 RID: 1781
			public readonly float fireSize;
		}

		// Token: 0x02000171 RID: 369
		public class Clouds : AbstractLevelPropertyGroup
		{
			// Token: 0x0600042B RID: 1067 RVA: 0x0001ACC1 File Offset: 0x000190C1
			public Clouds(string[] cloudPositions, float cloudSpeed, bool movingRight, float cloudDelay)
			{
				this.cloudPositions = cloudPositions;
				this.cloudSpeed = cloudSpeed;
				this.movingRight = movingRight;
				this.cloudDelay = cloudDelay;
			}

			// Token: 0x040006F6 RID: 1782
			public readonly string[] cloudPositions;

			// Token: 0x040006F7 RID: 1783
			public readonly float cloudSpeed;

			// Token: 0x040006F8 RID: 1784
			public readonly bool movingRight;

			// Token: 0x040006F9 RID: 1785
			public readonly float cloudDelay;
		}
	}

	// Token: 0x02000173 RID: 371
	public class Flower : AbstractLevelProperties<LevelProperties.Flower.State, LevelProperties.Flower.Pattern, LevelProperties.Flower.States>
	{
		// Token: 0x06000442 RID: 1090 RVA: 0x0001ACE6 File Offset: 0x000190E6
		public Flower(int hp, Level.GoalTimes goalTimes, LevelProperties.Flower.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000443 RID: 1091 RVA: 0x0001ACF4 File Offset: 0x000190F4
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1000f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.9f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.65f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.4f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1300f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.89f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.68f));
				timeline.events.Add(new Level.Timeline.Event("PhaseTwo", 0.46f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1500f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.73f));
				timeline.events.Add(new Level.Timeline.Event("PhaseTwo", 0.46f));
				break;
			}
			return timeline;
		}

		// Token: 0x06000444 RID: 1092 RVA: 0x0001AE20 File Offset: 0x00019220
		public static LevelProperties.Flower.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "L")
				{
					return LevelProperties.Flower.Pattern.Laser;
				}
				if (id == "H")
				{
					return LevelProperties.Flower.Pattern.PodHands;
				}
				if (id == "S")
				{
					return LevelProperties.Flower.Pattern.GattlingGun;
				}
				if (id == "V")
				{
					return LevelProperties.Flower.Pattern.VineHands;
				}
				if (id == "D")
				{
					return LevelProperties.Flower.Pattern.Nothing;
				}
			}
			Debug.LogError("Pattern Flower.Pattern for  " + id + " not found.", null);
			return LevelProperties.Flower.Pattern.Uninitialized;
		}

		// Token: 0x06000445 RID: 1093 RVA: 0x0001AEB4 File Offset: 0x000192B4
		public static LevelProperties.Flower GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Flower.State> list = new List<LevelProperties.Flower.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1500;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Flower.State(10f, new LevelProperties.Flower.Pattern[][]
						{
							new LevelProperties.Flower.Pattern[]
							{
								LevelProperties.Flower.Pattern.GattlingGun
							}
						}, LevelProperties.Flower.States.Main, new LevelProperties.Flower.Laser(1f, 1.5f, "T,B,B,B,T,B,B,T,B", 1f), new LevelProperties.Flower.PodHands(1f, 1f, 2.5f, "3,2,3,2,2,2,3,3,2,3,2,2,2,2,3,3,3,2", "B,S,S,B,B,S,B,S,S,S,B,B,S,B,S"), new LevelProperties.Flower.Boomerang(820, 0.6f, 1.5f, 0.4f), new LevelProperties.Flower.Bullets(0.3f, new MinMax(100f, 700f), 1.8f, 0, 4), new LevelProperties.Flower.PuffUp(400, 1f, 5), new LevelProperties.Flower.GattlingGun(3f, 0.5f, 1f, 0.7f, new string[]
						{
							"A50,A350,C600,A100,A700",
							"A250,A150,A500,C650",
							"A700,A450,A550,A200,C50",
							"A100,A250,A150,C600",
							"A650,A500,A700,C150,A50",
							"C300,A450,A250,A400,A550",
							"A700,A500,C300,A100",
							"A450,A650,C150,A550,A350"
						}), new LevelProperties.Flower.EnemyPlants(8, 10, 350, 2, 0.9f, 140, 4, 4, new MinMax(4f, 7f), 400, 1, 25), new LevelProperties.Flower.VineHands(0.6f, 0.2f, new MinMax(3.3f, 5.7f), "1,2,3,2,1,3"), new LevelProperties.Flower.PollenSpit("1,2,D0.5,1,1", 1.5f, "R,R,P,R,R,R,P", 2.3f, 330, 50f)));
						List<LevelProperties.Flower.State> list2 = list;
						float healthTrigger = 0.73f;
						LevelProperties.Flower.Pattern[][] array = new LevelProperties.Flower.Pattern[1][];
						int num = 0;
						LevelProperties.Flower.Pattern[] array2 = new LevelProperties.Flower.Pattern[2];
						array2[0] = LevelProperties.Flower.Pattern.PodHands;
						array[num] = array2;
						list2.Add(new LevelProperties.Flower.State(healthTrigger, array, LevelProperties.Flower.States.Generic, new LevelProperties.Flower.Laser(1f, 1.5f, "T,B,B,B,T,B,B,T,B", 1f), new LevelProperties.Flower.PodHands(1f, 1f, 2.5f, "3,2,3,2,2,2,3,3,2,3,2,2,2,2,3,3,3,2", "B,S,S,B,B,S,B,S,S,S,B,B,S,B,S"), new LevelProperties.Flower.Boomerang(820, 0.6f, 1.5f, 0.4f), new LevelProperties.Flower.Bullets(0.3f, new MinMax(100f, 700f), 1.8f, 0, 4), new LevelProperties.Flower.PuffUp(400, 1f, 5), new LevelProperties.Flower.GattlingGun(3f, 0.5f, 1f, 0.7f, new string[]
						{
							"A50,A350,C600,A100,A700",
							"A250,A150,A500,C650",
							"A700,A450,A550,A200,C50",
							"A100,A250,A150,C600",
							"A650,A500,A700,C150,A50",
							"C300,A450,A250,A400,A550",
							"A700,A500,C300,A100",
							"A450,A650,C150,A550,A350"
						}), new LevelProperties.Flower.EnemyPlants(8, 10, 350, 2, 0.9f, 140, 4, 4, new MinMax(4f, 7f), 400, 1, 25), new LevelProperties.Flower.VineHands(0.6f, 0.2f, new MinMax(3.3f, 5.7f), "1,2,3,2,1,3"), new LevelProperties.Flower.PollenSpit("1,2,D0.5,1,1", 1.5f, "R,R,P,R,R,R,P", 2.3f, 330, 50f)));
						list.Add(new LevelProperties.Flower.State(0.46f, new LevelProperties.Flower.Pattern[][]
						{
							new LevelProperties.Flower.Pattern[0]
						}, LevelProperties.Flower.States.PhaseTwo, new LevelProperties.Flower.Laser(1f, 1.5f, "T,B,B,B,T,B,B,T,B", 1f), new LevelProperties.Flower.PodHands(1f, 1f, 2.5f, "3,2,3,2,2,2,3,3,2,3,2,2,2,2,3,3,3,2", "B,S,S,B,B,S,B,S,S,S,B,B,S,B,S"), new LevelProperties.Flower.Boomerang(820, 0.6f, 1.5f, 0.4f), new LevelProperties.Flower.Bullets(0.3f, new MinMax(100f, 700f), 1.8f, 0, 4), new LevelProperties.Flower.PuffUp(400, 1f, 5), new LevelProperties.Flower.GattlingGun(3f, 0.5f, 1f, 0.7f, new string[]
						{
							"A50,A350,C600,A100,A700",
							"A250,A150,A500,C650",
							"A700,A450,A550,A200,C50",
							"A100,A250,A150,C600",
							"A650,A500,A700,C150,A50",
							"C300,A450,A250,A400,A550",
							"A700,A500,C300,A100",
							"A450,A650,C150,A550,A350"
						}), new LevelProperties.Flower.EnemyPlants(8, 10, 350, 2, 0.9f, 140, 4, 4, new MinMax(4f, 7f), 400, 1, 25), new LevelProperties.Flower.VineHands(0.6f, 0.2f, new MinMax(3.3f, 5.7f), "1,2,3,2,1,3"), new LevelProperties.Flower.PollenSpit("1,2,D0.5,1,1", 1.5f, "R,R,P,R,R,R,P", 2.3f, 330, 50f)));
					}
				}
				else
				{
					hp = 1300;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Flower.State(10f, new LevelProperties.Flower.Pattern[][]
					{
						new LevelProperties.Flower.Pattern[]
						{
							LevelProperties.Flower.Pattern.Laser,
							LevelProperties.Flower.Pattern.GattlingGun
						}
					}, LevelProperties.Flower.States.Main, new LevelProperties.Flower.Laser(1f, 1f, "T,B,B,T,B,B,T,B,B", 2f), new LevelProperties.Flower.PodHands(1f, 1f, 3f, "3,2,3,2,2,2,3,3,2,3,2,2,2,2,3,3,3,2", "B,S,S,B,S,B,S,S,S,B,S,B,S"), new LevelProperties.Flower.Boomerang(720, 0.7f, 1.5f, 0.4f), new LevelProperties.Flower.Bullets(0.4f, new MinMax(100f, 680f), 2f, 0, 3), new LevelProperties.Flower.PuffUp(400, 1f, 5), new LevelProperties.Flower.GattlingGun(4.5f, 0.5f, 3f, 0.9f, new string[]
					{
						"A0,B300,A500,C400,A700",
						"B50,C650,A450,A150,A550",
						"A700,A300,C600,B400,A0",
						"B700,A0,A600,C350,B500",
						"A550,A150,C650,B100,A0",
						"A0,B250,A400,A650,C100",
						"B350,B650,A0,C200,A700",
						"A100,A200,C700,B200,A350",
						"A500,A200,A700,B600,C0",
						"A550,B150,A0,C300,A700"
					}), new LevelProperties.Flower.EnemyPlants(5, 4, 320, 4, 0.9f, 120, 4, 4, new MinMax(5f, 7f), 400, 1, 25), new LevelProperties.Flower.VineHands(0.75f, 0.2f, new MinMax(3.9f, 6.3f), "1,2,3,2,1,3"), new LevelProperties.Flower.PollenSpit("1,2,D0.5,1,1", 2.1f, "R,R,P,R,P", 3.3f, 360, 40f)));
					list.Add(new LevelProperties.Flower.State(0.89f, new LevelProperties.Flower.Pattern[][]
					{
						new LevelProperties.Flower.Pattern[]
						{
							LevelProperties.Flower.Pattern.Laser,
							LevelProperties.Flower.Pattern.PodHands
						}
					}, LevelProperties.Flower.States.Generic, new LevelProperties.Flower.Laser(1f, 1f, "T,B,B,T,B,B,T,B,B", 2f), new LevelProperties.Flower.PodHands(1f, 1f, 3f, "3,2,3,2,2,2,3,3,2,3,2,2,2,2,3,3,3,2", "B,S,S,B,S,B,S,S,S,B,S,B,S"), new LevelProperties.Flower.Boomerang(720, 0.7f, 1.5f, 0.4f), new LevelProperties.Flower.Bullets(0.4f, new MinMax(100f, 680f), 2f, 0, 3), new LevelProperties.Flower.PuffUp(400, 1f, 5), new LevelProperties.Flower.GattlingGun(4.5f, 0.5f, 3f, 0.9f, new string[]
					{
						"A0,B300,A500,C400,A700",
						"B50,C650,A450,A150,A550",
						"A700,A300,C600,B400,A0",
						"B700,A0,A600,C350,B500",
						"A550,A150,C650,B100,A0",
						"A0,B250,A400,A650,C100",
						"B350,B650,A0,C200,A700",
						"A100,A200,C700,B200,A350",
						"A500,A200,A700,B600,C0",
						"A550,B150,A0,C300,A700"
					}), new LevelProperties.Flower.EnemyPlants(5, 4, 320, 4, 0.9f, 120, 4, 4, new MinMax(5f, 7f), 400, 1, 25), new LevelProperties.Flower.VineHands(0.75f, 0.2f, new MinMax(3.9f, 6.3f), "1,2,3,2,1,3"), new LevelProperties.Flower.PollenSpit("1,2,D0.5,1,1", 2.1f, "R,R,P,R,P", 3.3f, 360, 40f)));
					list.Add(new LevelProperties.Flower.State(0.68f, new LevelProperties.Flower.Pattern[][]
					{
						new LevelProperties.Flower.Pattern[]
						{
							LevelProperties.Flower.Pattern.PodHands,
							LevelProperties.Flower.Pattern.GattlingGun
						}
					}, LevelProperties.Flower.States.Generic, new LevelProperties.Flower.Laser(1f, 1f, "T,B,B,T,B,B,T,B,B", 2f), new LevelProperties.Flower.PodHands(1f, 1f, 3f, "3,2,3,2,2,2,3,2,3,2,2,2,3,3,2", "B,S,S,B,B,S,B,S,S,B,B,S,B,S"), new LevelProperties.Flower.Boomerang(720, 0.7f, 1.5f, 0.4f), new LevelProperties.Flower.Bullets(0.4f, new MinMax(100f, 680f), 2f, 0, 3), new LevelProperties.Flower.PuffUp(400, 1f, 5), new LevelProperties.Flower.GattlingGun(4.5f, 0.5f, 3f, 0.9f, new string[]
					{
						"A0,B300,A500,C400,A700",
						"B50,C650,A450,A150,A550",
						"A700,A300,C600,B400,A0",
						"B700,A0,A600,C350,B500",
						"A550,A150,C650,B100,A0",
						"A0,B250,A400,A650,C100",
						"B350,B650,A0,C200,A700",
						"A100,A200,C700,B200,A350",
						"A500,A200,A700,B600,C0",
						"A550,B150,A0,C300,A700"
					}), new LevelProperties.Flower.EnemyPlants(5, 4, 320, 4, 0.9f, 120, 4, 4, new MinMax(5f, 7f), 400, 1, 25), new LevelProperties.Flower.VineHands(0.75f, 0.2f, new MinMax(3.9f, 6.3f), "1,2,3,2,1,3"), new LevelProperties.Flower.PollenSpit("1,2,D0.5,1,1", 2.1f, "R,R,P,R,P", 3.3f, 360, 40f)));
					list.Add(new LevelProperties.Flower.State(0.46f, new LevelProperties.Flower.Pattern[][]
					{
						new LevelProperties.Flower.Pattern[]
						{
							LevelProperties.Flower.Pattern.VineHands
						}
					}, LevelProperties.Flower.States.PhaseTwo, new LevelProperties.Flower.Laser(1f, 1f, "T,B,B,T,B,B,T,B,B", 2f), new LevelProperties.Flower.PodHands(1f, 1f, 3f, "3,2,3,2,2,2,3,2,3,2,2,2,3,3,2", "B,S,S,B,B,S,B,S,S,B,B,S,B,S"), new LevelProperties.Flower.Boomerang(720, 0.7f, 1.5f, 0.4f), new LevelProperties.Flower.Bullets(0.4f, new MinMax(100f, 680f), 2f, 0, 3), new LevelProperties.Flower.PuffUp(400, 1f, 5), new LevelProperties.Flower.GattlingGun(4.5f, 0.5f, 3f, 0.9f, new string[]
					{
						"A0,B300,A500,C400,A700",
						"B50,C650,A450,A150,A550",
						"A700,A300,C600,B400,A0",
						"B700,A0,A600,C350,B500",
						"A550,A150,C650,B100,A0",
						"A0,B250,A400,A650,C100",
						"B350,B650,A0,C200,A700",
						"A100,A200,C700,B200,A350",
						"A500,A200,A700,B600,C0",
						"A550,B150,A0,C300,A700"
					}), new LevelProperties.Flower.EnemyPlants(5, 4, 320, 4, 0.9f, 120, 4, 4, new MinMax(5f, 7f), 400, 1, 25), new LevelProperties.Flower.VineHands(0.75f, 0.2f, new MinMax(3.9f, 6.3f), "1,2,3,2,1,3"), new LevelProperties.Flower.PollenSpit("1,2,D0.5,1,1", 2.1f, "R,R,P,R,P", 3.3f, 360, 40f)));
				}
			}
			else
			{
				hp = 1000;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Flower.State(10f, new LevelProperties.Flower.Pattern[][]
				{
					new LevelProperties.Flower.Pattern[1]
				}, LevelProperties.Flower.States.Main, new LevelProperties.Flower.Laser(1.3f, 1.2f, "T,B,T,B,T,T,B,T,T,B,T,B,B,T,B", 0.5f), new LevelProperties.Flower.PodHands(1f, 1f, 2f, "1,2,1,2,1,2,2", "B,S,S,B,S,B,B,S,B,S,S,B,S,S,B"), new LevelProperties.Flower.Boomerang(660, 0.7f, 1.5f, 0.4f), new LevelProperties.Flower.Bullets(0.8f, new MinMax(200f, 600f), 2f, 0, 3), new LevelProperties.Flower.PuffUp(400, 1f, 5), new LevelProperties.Flower.GattlingGun(1.8f, 0.5f, 0.5f, 0.9f, new string[]
				{
					"B100,B300,B650",
					"B250,B550,B0",
					"B700,B150,B500",
					"B350,B50,B450",
					"B600,B400,B200"
				}), new LevelProperties.Flower.EnemyPlants(5, 4, 320, 4, 0.9f, 110, 3, 4, new MinMax(5f, 7f), 300, 1, 25), new LevelProperties.Flower.VineHands(0f, 0f, new MinMax(0f, 1f), string.Empty), new LevelProperties.Flower.PollenSpit(string.Empty, 0f, string.Empty, 0f, 0, 0f)));
				List<LevelProperties.Flower.State> list3 = list;
				float healthTrigger2 = 0.9f;
				LevelProperties.Flower.Pattern[][] array3 = new LevelProperties.Flower.Pattern[1][];
				int num2 = 0;
				LevelProperties.Flower.Pattern[] array4 = new LevelProperties.Flower.Pattern[2];
				array4[0] = LevelProperties.Flower.Pattern.GattlingGun;
				array3[num2] = array4;
				list3.Add(new LevelProperties.Flower.State(healthTrigger2, array3, LevelProperties.Flower.States.Generic, new LevelProperties.Flower.Laser(1.3f, 1.2f, "T,B,T,B,T,T,B,T,T,B,T,B,B,T,B", 0.5f), new LevelProperties.Flower.PodHands(1f, 1f, 2f, "1,2,1,2,1,2,2", "B,S,S,B,S,B,B,S,B,S,S,B,S,S,B"), new LevelProperties.Flower.Boomerang(660, 0.7f, 1.5f, 0.4f), new LevelProperties.Flower.Bullets(0.8f, new MinMax(200f, 600f), 2f, 0, 3), new LevelProperties.Flower.PuffUp(400, 1f, 5), new LevelProperties.Flower.GattlingGun(1.8f, 0.5f, 0.5f, 0.9f, new string[]
				{
					"B100,B300,B650",
					"B250,B550,B0",
					"B700,B150,B500",
					"B350,B50,B450",
					"B600,B400,B200"
				}), new LevelProperties.Flower.EnemyPlants(5, 4, 320, 4, 0.9f, 110, 3, 4, new MinMax(5f, 7f), 300, 1, 25), new LevelProperties.Flower.VineHands(0f, 0f, new MinMax(0f, 1f), string.Empty), new LevelProperties.Flower.PollenSpit(string.Empty, 0f, string.Empty, 0f, 0, 0f)));
				list.Add(new LevelProperties.Flower.State(0.65f, new LevelProperties.Flower.Pattern[][]
				{
					new LevelProperties.Flower.Pattern[]
					{
						LevelProperties.Flower.Pattern.PodHands
					}
				}, LevelProperties.Flower.States.Generic, new LevelProperties.Flower.Laser(1.3f, 1.2f, "T,B,T,B,T,T,B,T,T,B,T,B,B,T,B", 0.5f), new LevelProperties.Flower.PodHands(1f, 1f, 2f, "1,2,1,2,1,2,2", "B,S,S,B,S,B,B,S,B,S,S,B,S,S,B"), new LevelProperties.Flower.Boomerang(660, 0.7f, 1.5f, 0.4f), new LevelProperties.Flower.Bullets(0.8f, new MinMax(200f, 600f), 2f, 0, 3), new LevelProperties.Flower.PuffUp(400, 1f, 5), new LevelProperties.Flower.GattlingGun(1.8f, 0.5f, 0.5f, 0.9f, new string[]
				{
					"B100,B300,B650",
					"B250,B550,B0",
					"B700,B150,B500",
					"B350,B50,B450",
					"B600,B400,B200"
				}), new LevelProperties.Flower.EnemyPlants(5, 4, 320, 4, 0.9f, 110, 3, 4, new MinMax(5f, 7f), 300, 1, 25), new LevelProperties.Flower.VineHands(0f, 0f, new MinMax(0f, 1f), string.Empty), new LevelProperties.Flower.PollenSpit(string.Empty, 0f, string.Empty, 0f, 0, 0f)));
				list.Add(new LevelProperties.Flower.State(0.4f, new LevelProperties.Flower.Pattern[][]
				{
					new LevelProperties.Flower.Pattern[]
					{
						LevelProperties.Flower.Pattern.GattlingGun
					}
				}, LevelProperties.Flower.States.Generic, new LevelProperties.Flower.Laser(1.3f, 1.2f, "T,B,T,B,T,T,B,T,T,B,T,B,B,T,B", 0.5f), new LevelProperties.Flower.PodHands(1f, 1f, 2f, "1,2,1,2,1,2,2", "B,S,S,B,S,B,B,S,B,S,S,B,S,S,B"), new LevelProperties.Flower.Boomerang(660, 0.7f, 1.5f, 0.4f), new LevelProperties.Flower.Bullets(0.8f, new MinMax(200f, 600f), 2f, 0, 3), new LevelProperties.Flower.PuffUp(400, 1f, 5), new LevelProperties.Flower.GattlingGun(3.5f, 0.5f, 2.5f, 0.9f, new string[]
				{
					"A0,A100,C700,A600,A400",
					"A300,C500,A400,A0,A700",
					"A600,A500,A700,A400,C550",
					"C0,A700,A600,A150,A250",
					"A300,A550,A0,A700,C200",
					"A0,C650,A550,A100,A250"
				}), new LevelProperties.Flower.EnemyPlants(5, 4, 320, 4, 0.9f, 110, 3, 4, new MinMax(5f, 7f), 300, 1, 25), new LevelProperties.Flower.VineHands(0f, 0f, new MinMax(0f, 1f), string.Empty), new LevelProperties.Flower.PollenSpit(string.Empty, 0f, string.Empty, 0f, 0, 0f)));
			}
			return new LevelProperties.Flower(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000174 RID: 372
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000CC RID: 204
			// (get) Token: 0x06000447 RID: 1095 RVA: 0x0001BF53 File Offset: 0x0001A353
			// (set) Token: 0x06000448 RID: 1096 RVA: 0x0001BF5B File Offset: 0x0001A35B
			private protected LevelProperties.Flower properties { protected get; private set; }

			// Token: 0x06000449 RID: 1097 RVA: 0x0001BF64 File Offset: 0x0001A364
			public virtual void LevelInit(LevelProperties.Flower properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600044A RID: 1098 RVA: 0x0001BF6D File Offset: 0x0001A36D
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000175 RID: 373
		public enum States
		{
			// Token: 0x04000714 RID: 1812
			Main,
			// Token: 0x04000715 RID: 1813
			Generic,
			// Token: 0x04000716 RID: 1814
			PhaseTwo
		}

		// Token: 0x02000176 RID: 374
		public enum Pattern
		{
			// Token: 0x04000718 RID: 1816
			Laser,
			// Token: 0x04000719 RID: 1817
			PodHands,
			// Token: 0x0400071A RID: 1818
			GattlingGun,
			// Token: 0x0400071B RID: 1819
			VineHands,
			// Token: 0x0400071C RID: 1820
			Nothing,
			// Token: 0x0400071D RID: 1821
			Uninitialized
		}

		// Token: 0x02000177 RID: 375
		public class State : AbstractLevelState<LevelProperties.Flower.Pattern, LevelProperties.Flower.States>
		{
			// Token: 0x0600044B RID: 1099 RVA: 0x0001BF70 File Offset: 0x0001A370
			public State(float healthTrigger, LevelProperties.Flower.Pattern[][] patterns, LevelProperties.Flower.States stateName, LevelProperties.Flower.Laser laser, LevelProperties.Flower.PodHands podHands, LevelProperties.Flower.Boomerang boomerang, LevelProperties.Flower.Bullets bullets, LevelProperties.Flower.PuffUp puffUp, LevelProperties.Flower.GattlingGun gattlingGun, LevelProperties.Flower.EnemyPlants enemyPlants, LevelProperties.Flower.VineHands vineHands, LevelProperties.Flower.PollenSpit pollenSpit) : base(healthTrigger, patterns, stateName)
			{
				this.laser = laser;
				this.podHands = podHands;
				this.boomerang = boomerang;
				this.bullets = bullets;
				this.puffUp = puffUp;
				this.gattlingGun = gattlingGun;
				this.enemyPlants = enemyPlants;
				this.vineHands = vineHands;
				this.pollenSpit = pollenSpit;
			}

			// Token: 0x0400071E RID: 1822
			public readonly LevelProperties.Flower.Laser laser;

			// Token: 0x0400071F RID: 1823
			public readonly LevelProperties.Flower.PodHands podHands;

			// Token: 0x04000720 RID: 1824
			public readonly LevelProperties.Flower.Boomerang boomerang;

			// Token: 0x04000721 RID: 1825
			public readonly LevelProperties.Flower.Bullets bullets;

			// Token: 0x04000722 RID: 1826
			public readonly LevelProperties.Flower.PuffUp puffUp;

			// Token: 0x04000723 RID: 1827
			public readonly LevelProperties.Flower.GattlingGun gattlingGun;

			// Token: 0x04000724 RID: 1828
			public readonly LevelProperties.Flower.EnemyPlants enemyPlants;

			// Token: 0x04000725 RID: 1829
			public readonly LevelProperties.Flower.VineHands vineHands;

			// Token: 0x04000726 RID: 1830
			public readonly LevelProperties.Flower.PollenSpit pollenSpit;
		}

		// Token: 0x02000178 RID: 376
		public class Laser : AbstractLevelPropertyGroup
		{
			// Token: 0x0600044C RID: 1100 RVA: 0x0001BFCE File Offset: 0x0001A3CE
			public Laser(float anticHold, float attackHold, string attackType, float hesitateAfterAttack)
			{
				this.anticHold = anticHold;
				this.attackHold = attackHold;
				this.attackType = attackType;
				this.hesitateAfterAttack = hesitateAfterAttack;
			}

			// Token: 0x04000727 RID: 1831
			public readonly float anticHold;

			// Token: 0x04000728 RID: 1832
			public readonly float attackHold;

			// Token: 0x04000729 RID: 1833
			public readonly string attackType;

			// Token: 0x0400072A RID: 1834
			public readonly float hesitateAfterAttack;
		}

		// Token: 0x02000179 RID: 377
		public class PodHands : AbstractLevelPropertyGroup
		{
			// Token: 0x0600044D RID: 1101 RVA: 0x0001BFF3 File Offset: 0x0001A3F3
			public PodHands(float attackDelay, float attackHold, float hesitateAfterAttack, string attackAmount, string attacktype)
			{
				this.attackDelay = attackDelay;
				this.attackHold = attackHold;
				this.hesitateAfterAttack = hesitateAfterAttack;
				this.attackAmount = attackAmount;
				this.attacktype = attacktype;
			}

			// Token: 0x0400072B RID: 1835
			public readonly float attackDelay;

			// Token: 0x0400072C RID: 1836
			public readonly float attackHold;

			// Token: 0x0400072D RID: 1837
			public readonly float hesitateAfterAttack;

			// Token: 0x0400072E RID: 1838
			public readonly string attackAmount;

			// Token: 0x0400072F RID: 1839
			public readonly string attacktype;
		}

		// Token: 0x0200017A RID: 378
		public class Boomerang : AbstractLevelPropertyGroup
		{
			// Token: 0x0600044E RID: 1102 RVA: 0x0001C020 File Offset: 0x0001A420
			public Boomerang(int speed, float offScreenDelay, float holdDelay, float initialMovementDelay)
			{
				this.speed = speed;
				this.offScreenDelay = offScreenDelay;
				this.holdDelay = holdDelay;
				this.initialMovementDelay = initialMovementDelay;
			}

			// Token: 0x04000730 RID: 1840
			public readonly int speed;

			// Token: 0x04000731 RID: 1841
			public readonly float offScreenDelay;

			// Token: 0x04000732 RID: 1842
			public readonly float holdDelay;

			// Token: 0x04000733 RID: 1843
			public readonly float initialMovementDelay;
		}

		// Token: 0x0200017B RID: 379
		public class Bullets : AbstractLevelPropertyGroup
		{
			// Token: 0x0600044F RID: 1103 RVA: 0x0001C045 File Offset: 0x0001A445
			public Bullets(float delayNextShot, MinMax speedMinMax, float acceleration, int holdDelay, int numberOfProjectiles)
			{
				this.delayNextShot = delayNextShot;
				this.speedMinMax = speedMinMax;
				this.acceleration = acceleration;
				this.holdDelay = holdDelay;
				this.numberOfProjectiles = numberOfProjectiles;
			}

			// Token: 0x04000734 RID: 1844
			public readonly float delayNextShot;

			// Token: 0x04000735 RID: 1845
			public readonly MinMax speedMinMax;

			// Token: 0x04000736 RID: 1846
			public readonly float acceleration;

			// Token: 0x04000737 RID: 1847
			public readonly int holdDelay;

			// Token: 0x04000738 RID: 1848
			public readonly int numberOfProjectiles;
		}

		// Token: 0x0200017C RID: 380
		public class PuffUp : AbstractLevelPropertyGroup
		{
			// Token: 0x06000450 RID: 1104 RVA: 0x0001C072 File Offset: 0x0001A472
			public PuffUp(int speed, float delayExplosion, int holdDelay)
			{
				this.speed = speed;
				this.delayExplosion = delayExplosion;
				this.holdDelay = holdDelay;
			}

			// Token: 0x04000739 RID: 1849
			public readonly int speed;

			// Token: 0x0400073A RID: 1850
			public readonly float delayExplosion;

			// Token: 0x0400073B RID: 1851
			public readonly int holdDelay;
		}

		// Token: 0x0200017D RID: 381
		public class GattlingGun : AbstractLevelPropertyGroup
		{
			// Token: 0x06000451 RID: 1105 RVA: 0x0001C08F File Offset: 0x0001A48F
			public GattlingGun(float loopDuration, float initialSeedDelay, float hesitateAfterAttack, float fallingSeedDelay, string[] seedSpawnString)
			{
				this.loopDuration = loopDuration;
				this.initialSeedDelay = initialSeedDelay;
				this.hesitateAfterAttack = hesitateAfterAttack;
				this.fallingSeedDelay = fallingSeedDelay;
				this.seedSpawnString = seedSpawnString;
			}

			// Token: 0x0400073C RID: 1852
			public readonly float loopDuration;

			// Token: 0x0400073D RID: 1853
			public readonly float initialSeedDelay;

			// Token: 0x0400073E RID: 1854
			public readonly float hesitateAfterAttack;

			// Token: 0x0400073F RID: 1855
			public readonly float fallingSeedDelay;

			// Token: 0x04000740 RID: 1856
			public readonly string[] seedSpawnString;
		}

		// Token: 0x0200017E RID: 382
		public class EnemyPlants : AbstractLevelPropertyGroup
		{
			// Token: 0x06000452 RID: 1106 RVA: 0x0001C0BC File Offset: 0x0001A4BC
			public EnemyPlants(int chomperPlantHP, int venusPlantHP, int fallingSeedSpeed, int venusTurningSpeed, float venusTurningDelay, int venusMovmentSpeed, int miniFlowerPlantHP, int miniFlowerMovmentSpeed, MinMax miniFlowerShootDelay, int miniFlowerProjectileSpeed, int miniFlowerFriendHP, int miniFlowerProjectileDamage)
			{
				this.chomperPlantHP = chomperPlantHP;
				this.venusPlantHP = venusPlantHP;
				this.fallingSeedSpeed = fallingSeedSpeed;
				this.venusTurningSpeed = venusTurningSpeed;
				this.venusTurningDelay = venusTurningDelay;
				this.venusMovmentSpeed = venusMovmentSpeed;
				this.miniFlowerPlantHP = miniFlowerPlantHP;
				this.miniFlowerMovmentSpeed = miniFlowerMovmentSpeed;
				this.miniFlowerShootDelay = miniFlowerShootDelay;
				this.miniFlowerProjectileSpeed = miniFlowerProjectileSpeed;
				this.miniFlowerFriendHP = miniFlowerFriendHP;
				this.miniFlowerProjectileDamage = miniFlowerProjectileDamage;
			}

			// Token: 0x04000741 RID: 1857
			public readonly int chomperPlantHP;

			// Token: 0x04000742 RID: 1858
			public readonly int venusPlantHP;

			// Token: 0x04000743 RID: 1859
			public readonly int fallingSeedSpeed;

			// Token: 0x04000744 RID: 1860
			public readonly int venusTurningSpeed;

			// Token: 0x04000745 RID: 1861
			public readonly float venusTurningDelay;

			// Token: 0x04000746 RID: 1862
			public readonly int venusMovmentSpeed;

			// Token: 0x04000747 RID: 1863
			public readonly int miniFlowerPlantHP;

			// Token: 0x04000748 RID: 1864
			public readonly int miniFlowerMovmentSpeed;

			// Token: 0x04000749 RID: 1865
			public readonly MinMax miniFlowerShootDelay;

			// Token: 0x0400074A RID: 1866
			public readonly int miniFlowerProjectileSpeed;

			// Token: 0x0400074B RID: 1867
			public readonly int miniFlowerFriendHP;

			// Token: 0x0400074C RID: 1868
			public readonly int miniFlowerProjectileDamage;
		}

		// Token: 0x0200017F RID: 383
		public class VineHands : AbstractLevelPropertyGroup
		{
			// Token: 0x06000453 RID: 1107 RVA: 0x0001C12C File Offset: 0x0001A52C
			public VineHands(float firstPositionHold, float secondPositionHold, MinMax attackDelay, string handAttackString)
			{
				this.firstPositionHold = firstPositionHold;
				this.secondPositionHold = secondPositionHold;
				this.attackDelay = attackDelay;
				this.handAttackString = handAttackString;
			}

			// Token: 0x0400074D RID: 1869
			public readonly float firstPositionHold;

			// Token: 0x0400074E RID: 1870
			public readonly float secondPositionHold;

			// Token: 0x0400074F RID: 1871
			public readonly MinMax attackDelay;

			// Token: 0x04000750 RID: 1872
			public readonly string handAttackString;
		}

		// Token: 0x02000180 RID: 384
		public class PollenSpit : AbstractLevelPropertyGroup
		{
			// Token: 0x06000454 RID: 1108 RVA: 0x0001C151 File Offset: 0x0001A551
			public PollenSpit(string pollenAttackCount, float consecutiveAttackHold, string pollenType, float pollenCommaDelay, int pollenSpeed, float pollenUpDownStrength)
			{
				this.pollenAttackCount = pollenAttackCount;
				this.consecutiveAttackHold = consecutiveAttackHold;
				this.pollenType = pollenType;
				this.pollenCommaDelay = pollenCommaDelay;
				this.pollenSpeed = pollenSpeed;
				this.pollenUpDownStrength = pollenUpDownStrength;
			}

			// Token: 0x04000751 RID: 1873
			public readonly string pollenAttackCount;

			// Token: 0x04000752 RID: 1874
			public readonly float consecutiveAttackHold;

			// Token: 0x04000753 RID: 1875
			public readonly string pollenType;

			// Token: 0x04000754 RID: 1876
			public readonly float pollenCommaDelay;

			// Token: 0x04000755 RID: 1877
			public readonly int pollenSpeed;

			// Token: 0x04000756 RID: 1878
			public readonly float pollenUpDownStrength;
		}
	}

	// Token: 0x02000182 RID: 386
	public class FlyingBird : AbstractLevelProperties<LevelProperties.FlyingBird.State, LevelProperties.FlyingBird.Pattern, LevelProperties.FlyingBird.States>
	{
		// Token: 0x06000467 RID: 1127 RVA: 0x0001C186 File Offset: 0x0001A586
		public FlyingBird(int hp, Level.GoalTimes goalTimes, LevelProperties.FlyingBird.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000468 RID: 1128 RVA: 0x0001C194 File Offset: 0x0001A594
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 2000f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.85f));
				timeline.events.Add(new Level.Timeline.Event("Whistle", 0.5f));
				timeline.events.Add(new Level.Timeline.Event("HouseDeath", 0.25f));
				break;
			case Level.Mode.Normal:
				timeline.health = 2400f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.9f));
				timeline.events.Add(new Level.Timeline.Event("Whistle", 0.75f));
				timeline.events.Add(new Level.Timeline.Event("HouseDeath", 0.52f));
				timeline.events.Add(new Level.Timeline.Event("BirdRevival", 0.29f));
				break;
			case Level.Mode.Hard:
				timeline.health = 2800f;
				timeline.events.Add(new Level.Timeline.Event("Whistle", 0.75f));
				timeline.events.Add(new Level.Timeline.Event("HouseDeath", 0.5f));
				timeline.events.Add(new Level.Timeline.Event("BirdRevival", 0.31f));
				break;
			}
			return timeline;
		}

		// Token: 0x06000469 RID: 1129 RVA: 0x0001C2F4 File Offset: 0x0001A6F4
		public static LevelProperties.FlyingBird.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			switch (id)
			{
			case "F":
				return LevelProperties.FlyingBird.Pattern.Feathers;
			case "E":
				return LevelProperties.FlyingBird.Pattern.Eggs;
			case "L":
				return LevelProperties.FlyingBird.Pattern.Lasers;
			case "S":
				return LevelProperties.FlyingBird.Pattern.SmallBird;
			case "G":
				return LevelProperties.FlyingBird.Pattern.Garbage;
			case "H":
				return LevelProperties.FlyingBird.Pattern.Heart;
			case "D":
				return LevelProperties.FlyingBird.Pattern.Default;
			}
			Debug.LogError("Pattern FlyingBird.Pattern for  " + id + " not found.", null);
			return LevelProperties.FlyingBird.Pattern.Uninitialized;
		}

		// Token: 0x0600046A RID: 1130 RVA: 0x0001C3DC File Offset: 0x0001A7DC
		public static LevelProperties.FlyingBird GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.FlyingBird.State> list = new List<LevelProperties.FlyingBird.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 2800;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.FlyingBird.State(10f, new LevelProperties.FlyingBird.Pattern[][]
						{
							new LevelProperties.FlyingBird.Pattern[]
							{
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Lasers,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Lasers,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Lasers,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Lasers,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Eggs,
								LevelProperties.FlyingBird.Pattern.Lasers
							}
						}, LevelProperties.FlyingBird.States.Main, new LevelProperties.FlyingBird.Floating(2.4f, 360f, -120f, new MinMax(0.5f, 2.2f)), new LevelProperties.FlyingBird.Feathers(new string[]
						{
							"P:15",
							"P:20",
							"P:25",
							"P:20"
						}, 10, 850f, 22f, 0.23f, 0.23f, 1.4f), new LevelProperties.FlyingBird.Eggs(new string[]
						{
							"P:3",
							"P:1",
							"P:2",
							"P:2",
							"P:1"
						}, 500f, 1.2f, 1f), new LevelProperties.FlyingBird.Enemies(true, 4, 0.7f, 8, 350f, 100f, 2f, 600f, 1f, 10f, 4.1f, 2f, true), new LevelProperties.FlyingBird.Lasers(1050f, 0.7f), new LevelProperties.FlyingBird.Turrets(false, 0, 0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.FlyingBird.SmallBird(3.2f, 1.4f, -245f, 6, new MinMax(100f, 545f), 110f, 5f, 6.5f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(3.7f), new LevelProperties.FlyingBird.Nurses(550f, 450f, 130f, 0.8f, "R,R,R,R,P,R,R,R,R,R,P", 2f, "6,2,4,2", 4f), new LevelProperties.FlyingBird.Garbage(210f, 1020f, 160f, 150f, "5,6", 0.2f, 1f, new MinMax(1.5f, 3.3f), new string[]
						{
							"P,F,B,A,B,F",
							"B,F,A,P,A,B",
							"A,B,F,P,A,F",
							"A,P,F,B,F,A"
						}), new LevelProperties.FlyingBird.Heart(425f, 2, new MinMax(1.8f, 3.4f), new MinMax(0f, 60f), 500f, 500f, new string[]
						{
							"0.6,0.8",
							"0.8,0.8",
							"0.5,0.5",
							"0.7,0.5",
							"0.6,0.9",
							"0.9,0.7",
							"0.7,0.7",
							"0.6,0.9",
							"0.8,0.5",
							"0.7,0.8",
							"0.5,0.6",
							"0.9,0.7",
							"0.5,0.9"
						}, new string[]
						{
							"3,3"
						})));
						list.Add(new LevelProperties.FlyingBird.State(0.75f, new LevelProperties.FlyingBird.Pattern[][]
						{
							new LevelProperties.FlyingBird.Pattern[1]
						}, LevelProperties.FlyingBird.States.Whistle, new LevelProperties.FlyingBird.Floating(2.4f, 250f, -120f, new MinMax(1.3f, 2.2f)), new LevelProperties.FlyingBird.Feathers(new string[]
						{
							"P:15",
							"P:20",
							"P:25",
							"P:20"
						}, 10, 850f, 22f, 0.23f, 0.23f, 1.4f), new LevelProperties.FlyingBird.Eggs(new string[]
						{
							"P:3",
							"P:1",
							"P:2",
							"P:2",
							"P:1"
						}, 500f, 1.2f, 1f), new LevelProperties.FlyingBird.Enemies(true, 4, 0.7f, 8, 350f, 100f, 2f, 600f, 1f, 10f, 4.1f, 2f, true), new LevelProperties.FlyingBird.Lasers(1050f, 0.7f), new LevelProperties.FlyingBird.Turrets(false, 0, 0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.FlyingBird.SmallBird(3.2f, 1.4f, -245f, 6, new MinMax(100f, 545f), 110f, 5f, 6.5f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(3.7f), new LevelProperties.FlyingBird.Nurses(550f, 450f, 130f, 0.8f, "R,R,R,R,P,R,R,R,R,R,P", 2f, "6,2,4,2", 4f), new LevelProperties.FlyingBird.Garbage(210f, 1020f, 160f, 150f, "5,6", 0.2f, 1f, new MinMax(1.5f, 3.3f), new string[]
						{
							"P,F,B,A,B,F",
							"B,F,A,P,A,B",
							"A,B,F,P,A,F",
							"A,P,F,B,F,A"
						}), new LevelProperties.FlyingBird.Heart(425f, 2, new MinMax(1.8f, 3.4f), new MinMax(0f, 60f), 500f, 500f, new string[]
						{
							"0.6,0.8",
							"0.8,0.8",
							"0.5,0.5",
							"0.7,0.5",
							"0.6,0.9",
							"0.9,0.7",
							"0.7,0.7",
							"0.6,0.9",
							"0.8,0.5",
							"0.7,0.8",
							"0.5,0.6",
							"0.9,0.7",
							"0.5,0.9"
						}, new string[]
						{
							"3,3"
						})));
						list.Add(new LevelProperties.FlyingBird.State(0.5f, new LevelProperties.FlyingBird.Pattern[][]
						{
							new LevelProperties.FlyingBird.Pattern[0]
						}, LevelProperties.FlyingBird.States.HouseDeath, new LevelProperties.FlyingBird.Floating(2.4f, 250f, -120f, new MinMax(1.3f, 2.2f)), new LevelProperties.FlyingBird.Feathers(new string[]
						{
							"P:15",
							"P:20",
							"P:25",
							"P:20"
						}, 10, 850f, 22f, 0.23f, 0.23f, 1.4f), new LevelProperties.FlyingBird.Eggs(new string[]
						{
							"P:3",
							"P:1",
							"P:2",
							"P:2",
							"P:1"
						}, 500f, 1.2f, 1f), new LevelProperties.FlyingBird.Enemies(false, 0, 0f, 0, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, false), new LevelProperties.FlyingBird.Lasers(1050f, 0.7f), new LevelProperties.FlyingBird.Turrets(false, 0, 0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.FlyingBird.SmallBird(3.2f, 1.4f, -245f, 6, new MinMax(100f, 545f), 110f, 5f, 6.5f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(3.7f), new LevelProperties.FlyingBird.Nurses(550f, 450f, 130f, 0.8f, "R,R,R,R,P,R,R,R,R,R,P", 2f, "6,2,4,2", 4f), new LevelProperties.FlyingBird.Garbage(210f, 1020f, 160f, 150f, "5,6", 0.2f, 1f, new MinMax(1.5f, 3.3f), new string[]
						{
							"P,F,B,A,B,F",
							"B,F,A,P,A,B",
							"A,B,F,P,A,F",
							"A,P,F,B,F,A"
						}), new LevelProperties.FlyingBird.Heart(425f, 2, new MinMax(1.8f, 3.4f), new MinMax(0f, 60f), 500f, 500f, new string[]
						{
							"0.6,0.8",
							"0.8,0.8",
							"0.5,0.5",
							"0.7,0.5",
							"0.6,0.9",
							"0.9,0.7",
							"0.7,0.7",
							"0.6,0.9",
							"0.8,0.5",
							"0.7,0.8",
							"0.5,0.6",
							"0.9,0.7",
							"0.5,0.9"
						}, new string[]
						{
							"3,3"
						})));
						list.Add(new LevelProperties.FlyingBird.State(0.31f, new LevelProperties.FlyingBird.Pattern[][]
						{
							new LevelProperties.FlyingBird.Pattern[]
							{
								LevelProperties.FlyingBird.Pattern.Heart,
								LevelProperties.FlyingBird.Pattern.Garbage
							}
						}, LevelProperties.FlyingBird.States.BirdRevival, new LevelProperties.FlyingBird.Floating(2.4f, 250f, -120f, new MinMax(1.3f, 2.2f)), new LevelProperties.FlyingBird.Feathers(new string[]
						{
							"P:15",
							"P:20",
							"P:25",
							"P:20"
						}, 10, 850f, 22f, 0.23f, 0.23f, 1.4f), new LevelProperties.FlyingBird.Eggs(new string[]
						{
							"P:3",
							"P:1",
							"P:2",
							"P:2",
							"P:1"
						}, 500f, 1.2f, 1f), new LevelProperties.FlyingBird.Enemies(false, 4, 0.7f, 8, 350f, 100f, 2f, 600f, 1f, 10f, 4.5f, 2f, true), new LevelProperties.FlyingBird.Lasers(1050f, 0.7f), new LevelProperties.FlyingBird.Turrets(false, 0, 0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.FlyingBird.SmallBird(3.2f, 1.4f, -245f, 6, new MinMax(100f, 545f), 110f, 5f, 6.5f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(3.7f), new LevelProperties.FlyingBird.Nurses(550f, 450f, 130f, 0.8f, "R,R,R,R,P,R,R,R,R,R,P", 2f, "6,2,4,2", 4f), new LevelProperties.FlyingBird.Garbage(210f, 1020f, 160f, 150f, "5,6", 0.2f, 1f, new MinMax(1.5f, 3.3f), new string[]
						{
							"P,F,B,A,B,F",
							"B,F,A,P,A,B",
							"A,B,F,P,A,F",
							"A,P,F,B,F,A"
						}), new LevelProperties.FlyingBird.Heart(425f, 2, new MinMax(1.8f, 3.4f), new MinMax(0f, 60f), 500f, 500f, new string[]
						{
							"0.6,0.8",
							"0.8,0.8",
							"0.5,0.5",
							"0.7,0.5",
							"0.6,0.9",
							"0.9,0.7",
							"0.7,0.7",
							"0.6,0.9",
							"0.8,0.5",
							"0.7,0.8",
							"0.5,0.6",
							"0.9,0.7",
							"0.5,0.9"
						}, new string[]
						{
							"3,3"
						})));
					}
				}
				else
				{
					hp = 2400;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.FlyingBird.State(10f, new LevelProperties.FlyingBird.Pattern[][]
					{
						new LevelProperties.FlyingBird.Pattern[]
						{
							LevelProperties.FlyingBird.Pattern.Eggs,
							LevelProperties.FlyingBird.Pattern.Lasers
						}
					}, LevelProperties.FlyingBird.States.Main, new LevelProperties.FlyingBird.Floating(2.4f, 360f, -120f, new MinMax(0.5f, 1.5f)), new LevelProperties.FlyingBird.Feathers(new string[]
					{
						"P:30"
					}, 9, 750f, 23f, 0.25f, 0.25f, 3.4f), new LevelProperties.FlyingBird.Eggs(new string[]
					{
						"D:1,P:1,D:1,P:2,D:1,P:1",
						"P:1,D:1,P:1,D:1,P:2",
						"D:1,P:2,D:1,P:1,D:1,P:1"
					}, 540f, 1.2f, 3f), new LevelProperties.FlyingBird.Enemies(false, 3, 1f, 8, 270f, 100f, 2f, 600f, 1.6f, 2.1f, 5f, 0f, false), new LevelProperties.FlyingBird.Lasers(900f, 1f), new LevelProperties.FlyingBird.Turrets(false, 8, 3f, 800f, 3f, 6f, 100f, 2f), new LevelProperties.FlyingBird.SmallBird(4.5f, 2.3f, -300f, 5, new MinMax(100f, 470f), 80f, 3.7f, 7f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(7.4f), new LevelProperties.FlyingBird.Nurses(500f, 450f, 150f, 0.8f, "R,R,R,P,R,R,R,R,P", 3f, "6,2,4,2,4,2", 4f), new LevelProperties.FlyingBird.Garbage(210f, 1020f, 160f, 200f, "4,5", 0.5f, 1f, new MinMax(1.5f, 3.3f), new string[]
					{
						"F,B,P,F,A,B",
						"P,F,B,A,A,F",
						"B,F,A,P,F,A",
						"F,P,B,F,A,B"
					}), new LevelProperties.FlyingBird.Heart(425f, 1, new MinMax(1.8f, 3.4f), new MinMax(0f, 60f), 450f, 500f, new string[]
					{
						"0.6",
						"1.1",
						"0.5",
						"1.5",
						"0.7",
						"1.6",
						"0.8",
						"1.4"
					}, new string[]
					{
						"3"
					})));
					list.Add(new LevelProperties.FlyingBird.State(0.9f, new LevelProperties.FlyingBird.Pattern[][]
					{
						new LevelProperties.FlyingBird.Pattern[]
						{
							LevelProperties.FlyingBird.Pattern.Eggs,
							LevelProperties.FlyingBird.Pattern.Eggs,
							LevelProperties.FlyingBird.Pattern.Eggs,
							LevelProperties.FlyingBird.Pattern.Lasers,
							LevelProperties.FlyingBird.Pattern.Eggs,
							LevelProperties.FlyingBird.Pattern.Eggs,
							LevelProperties.FlyingBird.Pattern.Eggs,
							LevelProperties.FlyingBird.Pattern.Eggs,
							LevelProperties.FlyingBird.Pattern.Lasers
						}
					}, LevelProperties.FlyingBird.States.Generic, new LevelProperties.FlyingBird.Floating(2.4f, 360f, -120f, new MinMax(0.5f, 1.5f)), new LevelProperties.FlyingBird.Feathers(new string[]
					{
						"P:30"
					}, 9, 750f, 23f, 0.25f, 0.25f, 3.4f), new LevelProperties.FlyingBird.Eggs(new string[]
					{
						"D:0.1,P:1",
						"D:0.6,P:2",
						"D:0.5,P:1",
						"D:0.2,P:2"
					}, 540f, 1.3f, 1f), new LevelProperties.FlyingBird.Enemies(true, 4, 0.8f, 8, 300f, 100f, 2f, 600f, 1f, 10f, 4.5f, 1.5f, false), new LevelProperties.FlyingBird.Lasers(900f, 1f), new LevelProperties.FlyingBird.Turrets(false, 8, 3f, 800f, 3f, 6f, 100f, 2f), new LevelProperties.FlyingBird.SmallBird(4.5f, 2.3f, -300f, 5, new MinMax(100f, 470f), 80f, 3.7f, 7f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(7.4f), new LevelProperties.FlyingBird.Nurses(500f, 450f, 150f, 0.8f, "R,R,R,P,R,R,R,R,P", 3f, "6,2,4,2,4,2", 4f), new LevelProperties.FlyingBird.Garbage(210f, 1020f, 160f, 200f, "4,5", 0.5f, 1f, new MinMax(1.5f, 3.3f), new string[]
					{
						"F,B,P,F,A,B",
						"P,F,B,A,A,F",
						"B,F,A,P,F,A",
						"F,P,B,F,A,B"
					}), new LevelProperties.FlyingBird.Heart(425f, 1, new MinMax(1.8f, 3.4f), new MinMax(0f, 60f), 450f, 500f, new string[]
					{
						"0.6",
						"1.1",
						"0.5",
						"1.5",
						"0.7",
						"1.6",
						"0.8",
						"1.4"
					}, new string[]
					{
						"3"
					})));
					list.Add(new LevelProperties.FlyingBird.State(0.75f, new LevelProperties.FlyingBird.Pattern[][]
					{
						new LevelProperties.FlyingBird.Pattern[1]
					}, LevelProperties.FlyingBird.States.Whistle, new LevelProperties.FlyingBird.Floating(2.6f, 250f, -120f, new MinMax(1.2f, 2.2f)), new LevelProperties.FlyingBird.Feathers(new string[]
					{
						"P:30"
					}, 9, 750f, 23f, 0.25f, 0.25f, 3.4f), new LevelProperties.FlyingBird.Eggs(new string[]
					{
						"P:1",
						"D:0.5,P:1"
					}, 540f, 1.5f, 1f), new LevelProperties.FlyingBird.Enemies(true, 4, 1f, 8, 270f, 100f, 2f, 600f, 1f, 10f, 4.5f, 4f, false), new LevelProperties.FlyingBird.Lasers(900f, 1f), new LevelProperties.FlyingBird.Turrets(false, 8, 3f, 800f, 3f, 6f, 100f, 2f), new LevelProperties.FlyingBird.SmallBird(4.5f, 2.3f, -300f, 5, new MinMax(100f, 470f), 80f, 3.7f, 7f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(7.4f), new LevelProperties.FlyingBird.Nurses(500f, 450f, 150f, 0.8f, "R,R,R,P,R,R,R,R,P", 3f, "6,2,4,2,4,2", 4f), new LevelProperties.FlyingBird.Garbage(210f, 1020f, 160f, 200f, "4,5", 0.5f, 1f, new MinMax(1.5f, 3.3f), new string[]
					{
						"F,B,P,F,A,B",
						"P,F,B,A,A,F",
						"B,F,A,P,F,A",
						"F,P,B,F,A,B"
					}), new LevelProperties.FlyingBird.Heart(425f, 1, new MinMax(1.8f, 3.4f), new MinMax(0f, 60f), 450f, 500f, new string[]
					{
						"0.6",
						"1.1",
						"0.5",
						"1.5",
						"0.7",
						"1.6",
						"0.8",
						"1.4"
					}, new string[]
					{
						"3"
					})));
					list.Add(new LevelProperties.FlyingBird.State(0.52f, new LevelProperties.FlyingBird.Pattern[][]
					{
						new LevelProperties.FlyingBird.Pattern[0]
					}, LevelProperties.FlyingBird.States.HouseDeath, new LevelProperties.FlyingBird.Floating(2.6f, 250f, -120f, new MinMax(1.2f, 2.2f)), new LevelProperties.FlyingBird.Feathers(new string[]
					{
						"P:30"
					}, 9, 750f, 23f, 0.25f, 0.25f, 3.4f), new LevelProperties.FlyingBird.Eggs(new string[]
					{
						"P:1",
						"D:0.5,P:1"
					}, 540f, 1.5f, 1f), new LevelProperties.FlyingBird.Enemies(false, 0, 0f, 0, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, false), new LevelProperties.FlyingBird.Lasers(900f, 1f), new LevelProperties.FlyingBird.Turrets(false, 8, 3f, 800f, 3f, 6f, 100f, 2f), new LevelProperties.FlyingBird.SmallBird(4.5f, 2.3f, -300f, 5, new MinMax(100f, 470f), 80f, 3.7f, 7f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(7.4f), new LevelProperties.FlyingBird.Nurses(500f, 450f, 150f, 0.8f, "R,R,R,P,R,R,R,R,P", 3f, "6,2,4,2,4,2", 4f), new LevelProperties.FlyingBird.Garbage(210f, 1020f, 160f, 200f, "4,5", 0.5f, 1f, new MinMax(1.5f, 3.3f), new string[]
					{
						"F,B,P,F,A,B",
						"P,F,B,A,A,F",
						"B,F,A,P,F,A",
						"F,P,B,F,A,B"
					}), new LevelProperties.FlyingBird.Heart(425f, 1, new MinMax(1.8f, 3.4f), new MinMax(0f, 60f), 450f, 500f, new string[]
					{
						"0.6",
						"1.1",
						"0.5",
						"1.5",
						"0.7",
						"1.6",
						"0.8",
						"1.4"
					}, new string[]
					{
						"3"
					})));
					list.Add(new LevelProperties.FlyingBird.State(0.29f, new LevelProperties.FlyingBird.Pattern[][]
					{
						new LevelProperties.FlyingBird.Pattern[]
						{
							LevelProperties.FlyingBird.Pattern.Garbage,
							LevelProperties.FlyingBird.Pattern.Heart
						}
					}, LevelProperties.FlyingBird.States.BirdRevival, new LevelProperties.FlyingBird.Floating(2.6f, 250f, -120f, new MinMax(1.2f, 2.2f)), new LevelProperties.FlyingBird.Feathers(new string[]
					{
						"P:30"
					}, 9, 750f, 23f, 0.25f, 0.25f, 3.4f), new LevelProperties.FlyingBird.Eggs(new string[]
					{
						"P:1",
						"D:0.5,P:1"
					}, 540f, 1.5f, 1f), new LevelProperties.FlyingBird.Enemies(false, 4, 0.8f, 8, 300f, 100f, 2f, 600f, 1f, 10f, 5f, 1.5f, true), new LevelProperties.FlyingBird.Lasers(900f, 1f), new LevelProperties.FlyingBird.Turrets(false, 8, 3f, 800f, 3f, 6f, 100f, 2f), new LevelProperties.FlyingBird.SmallBird(4.5f, 2.3f, -300f, 5, new MinMax(100f, 470f), 80f, 3.7f, 7f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(7.4f), new LevelProperties.FlyingBird.Nurses(500f, 450f, 150f, 0.8f, "R,R,R,P,R,R,R,R,P", 3f, "6,2,4,2,4,2", 4f), new LevelProperties.FlyingBird.Garbage(210f, 1020f, 160f, 200f, "4,5", 0.5f, 1f, new MinMax(1.5f, 3.3f), new string[]
					{
						"F,B,P,F,A,B",
						"P,F,B,A,A,F",
						"B,F,A,P,F,A",
						"F,P,B,F,A,B"
					}), new LevelProperties.FlyingBird.Heart(425f, 1, new MinMax(1.8f, 3.4f), new MinMax(0f, 60f), 450f, 500f, new string[]
					{
						"0.6",
						"1.1",
						"0.5",
						"1.5",
						"0.7",
						"1.6",
						"0.8",
						"1.4"
					}, new string[]
					{
						"3"
					})));
				}
			}
			else
			{
				hp = 2000;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.FlyingBird.State(10f, new LevelProperties.FlyingBird.Pattern[][]
				{
					new LevelProperties.FlyingBird.Pattern[]
					{
						LevelProperties.FlyingBird.Pattern.Eggs,
						LevelProperties.FlyingBird.Pattern.Lasers,
						LevelProperties.FlyingBird.Pattern.Eggs,
						LevelProperties.FlyingBird.Pattern.Eggs,
						LevelProperties.FlyingBird.Pattern.Lasers
					}
				}, LevelProperties.FlyingBird.States.Main, new LevelProperties.FlyingBird.Floating(2.8f, 360f, -120f, new MinMax(0.5f, 2.2f)), new LevelProperties.FlyingBird.Feathers(new string[]
				{
					"P:10"
				}, 8, 680f, 29f, 0.33f, 0.33f, 1.7f), new LevelProperties.FlyingBird.Eggs(new string[]
				{
					"P:1,D:1,P:2",
					"D:0.5,P:2",
					"P:1,D:0.1,P:1",
					"P:2,D:1,P:1",
					"D:0.7,P:2"
				}, 470f, 1.35f, 1.4f), new LevelProperties.FlyingBird.Enemies(false, 4, 0.8f, 8, 300f, 100f, 2f, 600f, 1f, 10f, 5f, 0f, false), new LevelProperties.FlyingBird.Lasers(750f, 1.5f), new LevelProperties.FlyingBird.Turrets(false, 0, 0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.FlyingBird.SmallBird(3.45f, 2.07f, -300f, 4, new MinMax(100f, 470f), 70f, 8f, 8f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(0f), new LevelProperties.FlyingBird.Nurses(0f, 0f, 0f, 0f, string.Empty, 0f, string.Empty, 0f), new LevelProperties.FlyingBird.Garbage(0f, 0f, 0f, 0f, string.Empty, 0f, 0f, new MinMax(0f, 1f), new string[0]), new LevelProperties.FlyingBird.Heart(0f, 0, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f, new string[0], new string[0])));
				list.Add(new LevelProperties.FlyingBird.State(0.85f, new LevelProperties.FlyingBird.Pattern[][]
				{
					new LevelProperties.FlyingBird.Pattern[]
					{
						LevelProperties.FlyingBird.Pattern.Eggs,
						LevelProperties.FlyingBird.Pattern.Eggs,
						LevelProperties.FlyingBird.Pattern.Eggs,
						LevelProperties.FlyingBird.Pattern.Lasers,
						LevelProperties.FlyingBird.Pattern.Eggs,
						LevelProperties.FlyingBird.Pattern.Eggs,
						LevelProperties.FlyingBird.Pattern.Eggs,
						LevelProperties.FlyingBird.Pattern.Eggs,
						LevelProperties.FlyingBird.Pattern.Lasers
					}
				}, LevelProperties.FlyingBird.States.Generic, new LevelProperties.FlyingBird.Floating(2.8f, 360f, -120f, new MinMax(0.5f, 2.2f)), new LevelProperties.FlyingBird.Feathers(new string[]
				{
					"P:10"
				}, 8, 680f, 29f, 0.33f, 0.33f, 1.7f), new LevelProperties.FlyingBird.Eggs(new string[]
				{
					"P:1,D:1,P:2",
					"D:0.5,P:2",
					"P:1,D:0.1,P:1",
					"P:2,D:1,P:1",
					"D:0.7,P:2"
				}, 470f, 1.35f, 1.4f), new LevelProperties.FlyingBird.Enemies(true, 3, 0.8f, 8, 400f, 100f, 2f, 600f, 1f, 10f, 3.3f, 1.5f, true), new LevelProperties.FlyingBird.Lasers(750f, 1.5f), new LevelProperties.FlyingBird.Turrets(false, 0, 0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.FlyingBird.SmallBird(3.45f, 2.07f, -300f, 4, new MinMax(100f, 470f), 70f, 8f, 8f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(0f), new LevelProperties.FlyingBird.Nurses(0f, 0f, 0f, 0f, string.Empty, 0f, string.Empty, 0f), new LevelProperties.FlyingBird.Garbage(0f, 0f, 0f, 0f, string.Empty, 0f, 0f, new MinMax(0f, 1f), new string[0]), new LevelProperties.FlyingBird.Heart(0f, 0, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f, new string[0], new string[0])));
				list.Add(new LevelProperties.FlyingBird.State(0.5f, new LevelProperties.FlyingBird.Pattern[][]
				{
					new LevelProperties.FlyingBird.Pattern[1]
				}, LevelProperties.FlyingBird.States.Whistle, new LevelProperties.FlyingBird.Floating(2.8f, 250f, -120f, new MinMax(0.2f, 2.2f)), new LevelProperties.FlyingBird.Feathers(new string[]
				{
					"P:10"
				}, 8, 680f, 29f, 0.33f, 0.33f, 1.7f), new LevelProperties.FlyingBird.Eggs(new string[]
				{
					"P:1,D:1,P:2",
					"D:0.5,P:2",
					"P:1,D:0.1,P:1",
					"P:2,D:1,P:1",
					"D:0.7,P:2"
				}, 470f, 1.35f, 1.4f), new LevelProperties.FlyingBird.Enemies(false, 0, 0f, 0, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, false), new LevelProperties.FlyingBird.Lasers(750f, 1.5f), new LevelProperties.FlyingBird.Turrets(false, 0, 0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.FlyingBird.SmallBird(3.45f, 2.07f, -300f, 4, new MinMax(100f, 470f), 70f, 8f, 8f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(0f), new LevelProperties.FlyingBird.Nurses(0f, 0f, 0f, 0f, string.Empty, 0f, string.Empty, 0f), new LevelProperties.FlyingBird.Garbage(0f, 0f, 0f, 0f, string.Empty, 0f, 0f, new MinMax(0f, 1f), new string[0]), new LevelProperties.FlyingBird.Heart(0f, 0, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f, new string[0], new string[0])));
				list.Add(new LevelProperties.FlyingBird.State(0.25f, new LevelProperties.FlyingBird.Pattern[][]
				{
					new LevelProperties.FlyingBird.Pattern[0]
				}, LevelProperties.FlyingBird.States.HouseDeath, new LevelProperties.FlyingBird.Floating(2.8f, 250f, -120f, new MinMax(0.2f, 2.2f)), new LevelProperties.FlyingBird.Feathers(new string[]
				{
					"P:10"
				}, 8, 680f, 29f, 0.33f, 0.33f, 1.7f), new LevelProperties.FlyingBird.Eggs(new string[]
				{
					"P:1,D:1,P:2",
					"D:0.5,P:2",
					"P:1,D:0.1,P:1",
					"P:2,D:1,P:1",
					"D:0.7,P:2"
				}, 470f, 1.35f, 1.4f), new LevelProperties.FlyingBird.Enemies(false, 0, 0f, 0, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, false), new LevelProperties.FlyingBird.Lasers(750f, 1.5f), new LevelProperties.FlyingBird.Turrets(false, 0, 0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.FlyingBird.SmallBird(3.45f, 2.07f, -300f, 4, new MinMax(100f, 470f), 70f, 8f, 8f, 700f, 2f), new LevelProperties.FlyingBird.BigBird(0f), new LevelProperties.FlyingBird.Nurses(0f, 0f, 0f, 0f, string.Empty, 0f, string.Empty, 0f), new LevelProperties.FlyingBird.Garbage(0f, 0f, 0f, 0f, string.Empty, 0f, 0f, new MinMax(0f, 1f), new string[0]), new LevelProperties.FlyingBird.Heart(0f, 0, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f, new string[0], new string[0])));
			}
			return new LevelProperties.FlyingBird(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000183 RID: 387
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000D1 RID: 209
			// (get) Token: 0x0600046C RID: 1132 RVA: 0x0001E3C9 File Offset: 0x0001C7C9
			// (set) Token: 0x0600046D RID: 1133 RVA: 0x0001E3D1 File Offset: 0x0001C7D1
			private protected LevelProperties.FlyingBird properties { protected get; private set; }

			// Token: 0x0600046E RID: 1134 RVA: 0x0001E3DA File Offset: 0x0001C7DA
			public virtual void LevelInit(LevelProperties.FlyingBird properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600046F RID: 1135 RVA: 0x0001E3E3 File Offset: 0x0001C7E3
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000184 RID: 388
		public enum States
		{
			// Token: 0x04000761 RID: 1889
			Main,
			// Token: 0x04000762 RID: 1890
			Generic,
			// Token: 0x04000763 RID: 1891
			HouseDeath,
			// Token: 0x04000764 RID: 1892
			Whistle,
			// Token: 0x04000765 RID: 1893
			BirdRevival
		}

		// Token: 0x02000185 RID: 389
		public enum Pattern
		{
			// Token: 0x04000767 RID: 1895
			Feathers,
			// Token: 0x04000768 RID: 1896
			Eggs,
			// Token: 0x04000769 RID: 1897
			Lasers,
			// Token: 0x0400076A RID: 1898
			SmallBird,
			// Token: 0x0400076B RID: 1899
			Garbage,
			// Token: 0x0400076C RID: 1900
			Heart,
			// Token: 0x0400076D RID: 1901
			Default,
			// Token: 0x0400076E RID: 1902
			Uninitialized
		}

		// Token: 0x02000186 RID: 390
		public class State : AbstractLevelState<LevelProperties.FlyingBird.Pattern, LevelProperties.FlyingBird.States>
		{
			// Token: 0x06000470 RID: 1136 RVA: 0x0001E3E8 File Offset: 0x0001C7E8
			public State(float healthTrigger, LevelProperties.FlyingBird.Pattern[][] patterns, LevelProperties.FlyingBird.States stateName, LevelProperties.FlyingBird.Floating floating, LevelProperties.FlyingBird.Feathers feathers, LevelProperties.FlyingBird.Eggs eggs, LevelProperties.FlyingBird.Enemies enemies, LevelProperties.FlyingBird.Lasers lasers, LevelProperties.FlyingBird.Turrets turrets, LevelProperties.FlyingBird.SmallBird smallBird, LevelProperties.FlyingBird.BigBird bigBird, LevelProperties.FlyingBird.Nurses nurses, LevelProperties.FlyingBird.Garbage garbage, LevelProperties.FlyingBird.Heart heart) : base(healthTrigger, patterns, stateName)
			{
				this.floating = floating;
				this.feathers = feathers;
				this.eggs = eggs;
				this.enemies = enemies;
				this.lasers = lasers;
				this.turrets = turrets;
				this.smallBird = smallBird;
				this.bigBird = bigBird;
				this.nurses = nurses;
				this.garbage = garbage;
				this.heart = heart;
			}

			// Token: 0x0400076F RID: 1903
			public readonly LevelProperties.FlyingBird.Floating floating;

			// Token: 0x04000770 RID: 1904
			public readonly LevelProperties.FlyingBird.Feathers feathers;

			// Token: 0x04000771 RID: 1905
			public readonly LevelProperties.FlyingBird.Eggs eggs;

			// Token: 0x04000772 RID: 1906
			public readonly LevelProperties.FlyingBird.Enemies enemies;

			// Token: 0x04000773 RID: 1907
			public readonly LevelProperties.FlyingBird.Lasers lasers;

			// Token: 0x04000774 RID: 1908
			public readonly LevelProperties.FlyingBird.Turrets turrets;

			// Token: 0x04000775 RID: 1909
			public readonly LevelProperties.FlyingBird.SmallBird smallBird;

			// Token: 0x04000776 RID: 1910
			public readonly LevelProperties.FlyingBird.BigBird bigBird;

			// Token: 0x04000777 RID: 1911
			public readonly LevelProperties.FlyingBird.Nurses nurses;

			// Token: 0x04000778 RID: 1912
			public readonly LevelProperties.FlyingBird.Garbage garbage;

			// Token: 0x04000779 RID: 1913
			public readonly LevelProperties.FlyingBird.Heart heart;
		}

		// Token: 0x02000187 RID: 391
		public class Floating : AbstractLevelPropertyGroup
		{
			// Token: 0x06000471 RID: 1137 RVA: 0x0001E456 File Offset: 0x0001C856
			public Floating(float time, float top, float bottom, MinMax attackInitialDelayRange)
			{
				this.time = time;
				this.top = top;
				this.bottom = bottom;
				this.attackInitialDelayRange = attackInitialDelayRange;
			}

			// Token: 0x0400077A RID: 1914
			public readonly float time;

			// Token: 0x0400077B RID: 1915
			public readonly float top;

			// Token: 0x0400077C RID: 1916
			public readonly float bottom;

			// Token: 0x0400077D RID: 1917
			public readonly MinMax attackInitialDelayRange;
		}

		// Token: 0x02000188 RID: 392
		public class Feathers : AbstractLevelPropertyGroup
		{
			// Token: 0x06000472 RID: 1138 RVA: 0x0001E47B File Offset: 0x0001C87B
			public Feathers(string[] pattern, int count, float speed, float offset, float shotDelay, float initalShotDelay, float hesitate)
			{
				this.pattern = pattern;
				this.count = count;
				this.speed = speed;
				this.offset = offset;
				this.shotDelay = shotDelay;
				this.initalShotDelay = initalShotDelay;
				this.hesitate = hesitate;
			}

			// Token: 0x0400077E RID: 1918
			public readonly string[] pattern;

			// Token: 0x0400077F RID: 1919
			public readonly int count;

			// Token: 0x04000780 RID: 1920
			public readonly float speed;

			// Token: 0x04000781 RID: 1921
			public readonly float offset;

			// Token: 0x04000782 RID: 1922
			public readonly float shotDelay;

			// Token: 0x04000783 RID: 1923
			public readonly float initalShotDelay;

			// Token: 0x04000784 RID: 1924
			public readonly float hesitate;
		}

		// Token: 0x02000189 RID: 393
		public class Eggs : AbstractLevelPropertyGroup
		{
			// Token: 0x06000473 RID: 1139 RVA: 0x0001E4B8 File Offset: 0x0001C8B8
			public Eggs(string[] pattern, float speed, float shotDelay, float hesitate)
			{
				this.pattern = pattern;
				this.speed = speed;
				this.shotDelay = shotDelay;
				this.hesitate = hesitate;
			}

			// Token: 0x04000785 RID: 1925
			public readonly string[] pattern;

			// Token: 0x04000786 RID: 1926
			public readonly float speed;

			// Token: 0x04000787 RID: 1927
			public readonly float shotDelay;

			// Token: 0x04000788 RID: 1928
			public readonly float hesitate;
		}

		// Token: 0x0200018A RID: 394
		public class Enemies : AbstractLevelPropertyGroup
		{
			// Token: 0x06000474 RID: 1140 RVA: 0x0001E4E0 File Offset: 0x0001C8E0
			public Enemies(bool active, int count, float delay, int health, float speed, float floatRange, float floatTime, float projectileHeight, float projectileFallTime, float projectileDelay, float groupDelay, float initalGroupDelay, bool aim)
			{
				this.active = active;
				this.count = count;
				this.delay = delay;
				this.health = health;
				this.speed = speed;
				this.floatRange = floatRange;
				this.floatTime = floatTime;
				this.projectileHeight = projectileHeight;
				this.projectileFallTime = projectileFallTime;
				this.projectileDelay = projectileDelay;
				this.groupDelay = groupDelay;
				this.initalGroupDelay = initalGroupDelay;
				this.aim = aim;
			}

			// Token: 0x04000789 RID: 1929
			public readonly bool active;

			// Token: 0x0400078A RID: 1930
			public readonly int count;

			// Token: 0x0400078B RID: 1931
			public readonly float delay;

			// Token: 0x0400078C RID: 1932
			public readonly int health;

			// Token: 0x0400078D RID: 1933
			public readonly float speed;

			// Token: 0x0400078E RID: 1934
			public readonly float floatRange;

			// Token: 0x0400078F RID: 1935
			public readonly float floatTime;

			// Token: 0x04000790 RID: 1936
			public readonly float projectileHeight;

			// Token: 0x04000791 RID: 1937
			public readonly float projectileFallTime;

			// Token: 0x04000792 RID: 1938
			public readonly float projectileDelay;

			// Token: 0x04000793 RID: 1939
			public readonly float groupDelay;

			// Token: 0x04000794 RID: 1940
			public readonly float initalGroupDelay;

			// Token: 0x04000795 RID: 1941
			public readonly bool aim;
		}

		// Token: 0x0200018B RID: 395
		public class Lasers : AbstractLevelPropertyGroup
		{
			// Token: 0x06000475 RID: 1141 RVA: 0x0001E558 File Offset: 0x0001C958
			public Lasers(float speed, float hesitate)
			{
				this.speed = speed;
				this.hesitate = hesitate;
			}

			// Token: 0x04000796 RID: 1942
			public readonly float speed;

			// Token: 0x04000797 RID: 1943
			public readonly float hesitate;
		}

		// Token: 0x0200018C RID: 396
		public class Turrets : AbstractLevelPropertyGroup
		{
			// Token: 0x06000476 RID: 1142 RVA: 0x0001E570 File Offset: 0x0001C970
			public Turrets(bool active, int health, float inTime, float bulletSpeed, float bulletDelay, float respawnDelay, float floatRange, float floatTime)
			{
				this.active = active;
				this.health = health;
				this.inTime = inTime;
				this.bulletSpeed = bulletSpeed;
				this.bulletDelay = bulletDelay;
				this.respawnDelay = respawnDelay;
				this.floatRange = floatRange;
				this.floatTime = floatTime;
			}

			// Token: 0x04000798 RID: 1944
			public readonly bool active;

			// Token: 0x04000799 RID: 1945
			public readonly int health;

			// Token: 0x0400079A RID: 1946
			public readonly float inTime;

			// Token: 0x0400079B RID: 1947
			public readonly float bulletSpeed;

			// Token: 0x0400079C RID: 1948
			public readonly float bulletDelay;

			// Token: 0x0400079D RID: 1949
			public readonly float respawnDelay;

			// Token: 0x0400079E RID: 1950
			public readonly float floatRange;

			// Token: 0x0400079F RID: 1951
			public readonly float floatTime;
		}

		// Token: 0x0200018D RID: 397
		public class SmallBird : AbstractLevelPropertyGroup
		{
			// Token: 0x06000477 RID: 1143 RVA: 0x0001E5C0 File Offset: 0x0001C9C0
			public SmallBird(float timeX, float timeY, float minX, int eggCount, MinMax eggRange, float eggRotationSpeed, float eggMoveTime, float shotDelay, float shotSpeed, float leaveTime)
			{
				this.timeX = timeX;
				this.timeY = timeY;
				this.minX = minX;
				this.eggCount = eggCount;
				this.eggRange = eggRange;
				this.eggRotationSpeed = eggRotationSpeed;
				this.eggMoveTime = eggMoveTime;
				this.shotDelay = shotDelay;
				this.shotSpeed = shotSpeed;
				this.leaveTime = leaveTime;
			}

			// Token: 0x040007A0 RID: 1952
			public readonly float timeX;

			// Token: 0x040007A1 RID: 1953
			public readonly float timeY;

			// Token: 0x040007A2 RID: 1954
			public readonly float minX;

			// Token: 0x040007A3 RID: 1955
			public readonly int eggCount;

			// Token: 0x040007A4 RID: 1956
			public readonly MinMax eggRange;

			// Token: 0x040007A5 RID: 1957
			public readonly float eggRotationSpeed;

			// Token: 0x040007A6 RID: 1958
			public readonly float eggMoveTime;

			// Token: 0x040007A7 RID: 1959
			public readonly float shotDelay;

			// Token: 0x040007A8 RID: 1960
			public readonly float shotSpeed;

			// Token: 0x040007A9 RID: 1961
			public readonly float leaveTime;
		}

		// Token: 0x0200018E RID: 398
		public class BigBird : AbstractLevelPropertyGroup
		{
			// Token: 0x06000478 RID: 1144 RVA: 0x0001E620 File Offset: 0x0001CA20
			public BigBird(float speedXTime)
			{
				this.speedXTime = speedXTime;
			}

			// Token: 0x040007AA RID: 1962
			public readonly float speedXTime;
		}

		// Token: 0x0200018F RID: 399
		public class Nurses : AbstractLevelPropertyGroup
		{
			// Token: 0x06000479 RID: 1145 RVA: 0x0001E630 File Offset: 0x0001CA30
			public Nurses(float bulletSpeed, float pillSpeed, float pillMaxHeight, float pillExplodeDelay, string pinkString, float attackRepeatDelay, string attackCount, float attackMainDelay)
			{
				this.bulletSpeed = bulletSpeed;
				this.pillSpeed = pillSpeed;
				this.pillMaxHeight = pillMaxHeight;
				this.pillExplodeDelay = pillExplodeDelay;
				this.pinkString = pinkString;
				this.attackRepeatDelay = attackRepeatDelay;
				this.attackCount = attackCount;
				this.attackMainDelay = attackMainDelay;
			}

			// Token: 0x040007AB RID: 1963
			public readonly float bulletSpeed;

			// Token: 0x040007AC RID: 1964
			public readonly float pillSpeed;

			// Token: 0x040007AD RID: 1965
			public readonly float pillMaxHeight;

			// Token: 0x040007AE RID: 1966
			public readonly float pillExplodeDelay;

			// Token: 0x040007AF RID: 1967
			public readonly string pinkString;

			// Token: 0x040007B0 RID: 1968
			public readonly float attackRepeatDelay;

			// Token: 0x040007B1 RID: 1969
			public readonly string attackCount;

			// Token: 0x040007B2 RID: 1970
			public readonly float attackMainDelay;
		}

		// Token: 0x02000190 RID: 400
		public class Garbage : AbstractLevelPropertyGroup
		{
			// Token: 0x0600047A RID: 1146 RVA: 0x0001E680 File Offset: 0x0001CA80
			public Garbage(float maxHeight, float speedY, float speedX, float speedXIncreaser, string shotCount, float shotDelay, float shotSize, MinMax hesitate, string[] garbageTypeString)
			{
				this.maxHeight = maxHeight;
				this.speedY = speedY;
				this.speedX = speedX;
				this.speedXIncreaser = speedXIncreaser;
				this.shotCount = shotCount;
				this.shotDelay = shotDelay;
				this.shotSize = shotSize;
				this.hesitate = hesitate;
				this.garbageTypeString = garbageTypeString;
			}

			// Token: 0x040007B3 RID: 1971
			public readonly float maxHeight;

			// Token: 0x040007B4 RID: 1972
			public readonly float speedY;

			// Token: 0x040007B5 RID: 1973
			public readonly float speedX;

			// Token: 0x040007B6 RID: 1974
			public readonly float speedXIncreaser;

			// Token: 0x040007B7 RID: 1975
			public readonly string shotCount;

			// Token: 0x040007B8 RID: 1976
			public readonly float shotDelay;

			// Token: 0x040007B9 RID: 1977
			public readonly float shotSize;

			// Token: 0x040007BA RID: 1978
			public readonly MinMax hesitate;

			// Token: 0x040007BB RID: 1979
			public readonly string[] garbageTypeString;
		}

		// Token: 0x02000191 RID: 401
		public class Heart : AbstractLevelPropertyGroup
		{
			// Token: 0x0600047B RID: 1147 RVA: 0x0001E6D8 File Offset: 0x0001CAD8
			public Heart(float movementSpeed, int shotCount, MinMax hesitate, MinMax spreadAngle, float projectileSpeed, float heartHeight, string[] shootString, string[] numOfProjectiles)
			{
				this.movementSpeed = movementSpeed;
				this.shotCount = shotCount;
				this.hesitate = hesitate;
				this.spreadAngle = spreadAngle;
				this.projectileSpeed = projectileSpeed;
				this.heartHeight = heartHeight;
				this.shootString = shootString;
				this.numOfProjectiles = numOfProjectiles;
			}

			// Token: 0x040007BC RID: 1980
			public readonly float movementSpeed;

			// Token: 0x040007BD RID: 1981
			public readonly int shotCount;

			// Token: 0x040007BE RID: 1982
			public readonly MinMax hesitate;

			// Token: 0x040007BF RID: 1983
			public readonly MinMax spreadAngle;

			// Token: 0x040007C0 RID: 1984
			public readonly float projectileSpeed;

			// Token: 0x040007C1 RID: 1985
			public readonly float heartHeight;

			// Token: 0x040007C2 RID: 1986
			public readonly string[] shootString;

			// Token: 0x040007C3 RID: 1987
			public readonly string[] numOfProjectiles;
		}
	}

	// Token: 0x02000193 RID: 403
	public class FlyingBlimp : AbstractLevelProperties<LevelProperties.FlyingBlimp.State, LevelProperties.FlyingBlimp.Pattern, LevelProperties.FlyingBlimp.States>
	{
		// Token: 0x06000492 RID: 1170 RVA: 0x0001E728 File Offset: 0x0001CB28
		public FlyingBlimp(int hp, Level.GoalTimes goalTimes, LevelProperties.FlyingBlimp.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000493 RID: 1171 RVA: 0x0001E734 File Offset: 0x0001CB34
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 2200f;
				timeline.events.Add(new Level.Timeline.Event("Taurus", 0.9f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.65f));
				timeline.events.Add(new Level.Timeline.Event("Gemini", 0.45f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.2f));
				break;
			case Level.Mode.Normal:
				timeline.health = 2600f;
				timeline.events.Add(new Level.Timeline.Event("Taurus", 0.95f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.77f));
				timeline.events.Add(new Level.Timeline.Event("SagOrGem", 0.64f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.46f));
				timeline.events.Add(new Level.Timeline.Event("Moon", 0.34f));
				break;
			case Level.Mode.Hard:
				timeline.health = 3000f;
				timeline.events.Add(new Level.Timeline.Event("Gemini", 0.95f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.8f));
				timeline.events.Add(new Level.Timeline.Event("Sagittarius", 0.67f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.51f));
				timeline.events.Add(new Level.Timeline.Event("Moon", 0.39f));
				break;
			}
			return timeline;
		}

		// Token: 0x06000494 RID: 1172 RVA: 0x0001E8FC File Offset: 0x0001CCFC
		public static LevelProperties.FlyingBlimp.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.FlyingBlimp.Pattern.Dash;
				}
				if (id == "T")
				{
					return LevelProperties.FlyingBlimp.Pattern.Tornado;
				}
				if (id == "S")
				{
					return LevelProperties.FlyingBlimp.Pattern.Shoot;
				}
			}
			Debug.LogError("Pattern FlyingBlimp.Pattern for  " + id + " not found.", null);
			return LevelProperties.FlyingBlimp.Pattern.Uninitialized;
		}

		// Token: 0x06000495 RID: 1173 RVA: 0x0001E96C File Offset: 0x0001CD6C
		public static LevelProperties.FlyingBlimp GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.FlyingBlimp.State> list = new List<LevelProperties.FlyingBlimp.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 3000;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.FlyingBlimp.State(10f, new LevelProperties.FlyingBlimp.Pattern[][]
						{
							new LevelProperties.FlyingBlimp.Pattern[]
							{
								LevelProperties.FlyingBlimp.Pattern.Shoot,
								LevelProperties.FlyingBlimp.Pattern.Shoot,
								LevelProperties.FlyingBlimp.Pattern.Shoot
							}
						}, LevelProperties.FlyingBlimp.States.Main, new LevelProperties.FlyingBlimp.Move(5.1f, new MinMax(1.3f, 2.8f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
						{
							"D0.5,1"
						}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 805f, 0.4f, new MinMax(10f, 80f), 3.6f, new string[]
						{
							"600,200,500,300,100,550,150,450,250,50"
						}, new string[]
						{
							"A,B,A"
						}, new MinMax(0f, 90f), 5, 575f, 525f, new MinMax(1f, 1f)), new LevelProperties.FlyingBlimp.Tornado(600f, 1.05f, 1f, 2.6f), new LevelProperties.FlyingBlimp.Shoot(450f, 1800f, 1450f, new MinMax(1.2f, 1.5f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(350f, 800f), 5f, 5f, 0.9f, new string[]
						{
							"A,B,C,A,C,A,A,B,C,C,A,B,C,B,A,A,P",
							"B,C,A,A,C,B,A,B,B,C,A,B,C,C,B,A,P"
						}, new string[]
						{
							"100,300,400,500,600,200,350,550,50,600",
							"300,600,400,50,200,500,50,550,450,150"
						}), new LevelProperties.FlyingBlimp.Sagittarius(10, 3, new MinMax(3f, 5.1f), 755f, 0.5f, new MinMax(0f, 90f), 1.45f, 495f, 2.5f, new MinMax(5f, 8f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(1.7f, 3.9f), 4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(1.5f, 3f), 1f, 5f, 0.3f, 300f), new LevelProperties.FlyingBlimp.UFO(9999f, 325f, 140f, 340f, 0.65f, 1.6f, new string[]
						{
							"A,B,A,A,B,B,A",
							"B,A,B,B,A,A,B",
							"A,A,B,A,A,B,B",
							"B,B,A,B,A,A,A",
							"A,B,A,B,A,A,B",
							"B,A,A,B,A,A,B"
						}, 0.3f, 0.5f, 1.5f, 8f, 2f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1100f)));
						list.Add(new LevelProperties.FlyingBlimp.State(0.95f, new LevelProperties.FlyingBlimp.Pattern[][]
						{
							new LevelProperties.FlyingBlimp.Pattern[0]
						}, LevelProperties.FlyingBlimp.States.Gemini, new LevelProperties.FlyingBlimp.Move(5.1f, new MinMax(1.3f, 2.8f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
						{
							"D0.5,1"
						}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 805f, 0.4f, new MinMax(60f, 100f), 3.6f, new string[]
						{
							"600,200,500,300,100,550,150,450,250,50"
						}, new string[]
						{
							"A,A,B"
						}, new MinMax(0f, 90f), 5, 575f, 525f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 1.05f, 1f, 2.6f), new LevelProperties.FlyingBlimp.Shoot(450f, 1800f, 1450f, new MinMax(1.2f, 1.5f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(350f, 800f), 5f, 5f, 0.9f, new string[]
						{
							"A,B,C,A,C,A,A,B,C,C,A,B,C,B,A,A,P",
							"B,C,A,A,C,B,A,B,B,C,A,B,C,C,B,A,P"
						}, new string[]
						{
							"100,300,400,500,600,200,350,550,50,600",
							"300,600,400,50,200,500,50,550,450,150"
						}), new LevelProperties.FlyingBlimp.Sagittarius(10, 3, new MinMax(3f, 5.1f), 755f, 0.5f, new MinMax(0f, 90f), 1.45f, 495f, 2.5f, new MinMax(5f, 8f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(1.7f, 3.9f), 4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(1.5f, 3f), 1f, 5f, 0.3f, 300f), new LevelProperties.FlyingBlimp.UFO(9999f, 325f, 140f, 340f, 0.65f, 1.6f, new string[]
						{
							"A,B,A,A,B,B,A",
							"B,A,B,B,A,A,B",
							"A,A,B,A,A,B,B",
							"B,B,A,B,A,A,A",
							"A,B,A,B,A,A,B",
							"B,A,A,B,A,A,B"
						}, 0.3f, 0.5f, 1.5f, 8f, 2f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1100f)));
						list.Add(new LevelProperties.FlyingBlimp.State(0.8f, new LevelProperties.FlyingBlimp.Pattern[][]
						{
							new LevelProperties.FlyingBlimp.Pattern[]
							{
								LevelProperties.FlyingBlimp.Pattern.Shoot,
								LevelProperties.FlyingBlimp.Pattern.Tornado,
								LevelProperties.FlyingBlimp.Pattern.Shoot,
								LevelProperties.FlyingBlimp.Pattern.Shoot,
								LevelProperties.FlyingBlimp.Pattern.Tornado
							}
						}, LevelProperties.FlyingBlimp.States.Generic, new LevelProperties.FlyingBlimp.Move(5.1f, new MinMax(1.3f, 2.8f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
						{
							"D0.5,1"
						}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 805f, 0.4f, new MinMax(50f, 100f), 3.2f, new string[]
						{
							"600,200,500,300,100,550,150,450,250,50"
						}, new string[]
						{
							"B"
						}, new MinMax(0f, 90f), 5, 575f, 525f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 1.05f, 1f, 2.6f), new LevelProperties.FlyingBlimp.Shoot(450f, 1800f, 1450f, new MinMax(1.2f, 1.5f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(350f, 800f), 5f, 5f, 0.9f, new string[]
						{
							"A,B,C,A,C,A,A,B,C,C,A,B,C,B,A,A,P",
							"B,C,A,A,C,B,A,B,B,C,A,B,C,C,B,A,P"
						}, new string[]
						{
							"100,300,400,500,600,200,350,550,50,600",
							"300,600,400,50,200,500,50,550,450,150"
						}), new LevelProperties.FlyingBlimp.Sagittarius(10, 3, new MinMax(3f, 5.1f), 755f, 0.5f, new MinMax(0f, 90f), 1.45f, 495f, 2.5f, new MinMax(5f, 8f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(1.7f, 3.9f), 4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(1.5f, 3f), 1f, 5f, 0.3f, 300f), new LevelProperties.FlyingBlimp.UFO(9999f, 325f, 140f, 340f, 0.65f, 1.6f, new string[]
						{
							"A,B,A,A,B,B,A",
							"B,A,B,B,A,A,B",
							"A,A,B,A,A,B,B",
							"B,B,A,B,A,A,A",
							"A,B,A,B,A,A,B",
							"B,A,A,B,A,A,B"
						}, 0.3f, 0.5f, 1.5f, 8f, 2f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1100f)));
						list.Add(new LevelProperties.FlyingBlimp.State(0.67f, new LevelProperties.FlyingBlimp.Pattern[][]
						{
							new LevelProperties.FlyingBlimp.Pattern[0]
						}, LevelProperties.FlyingBlimp.States.Sagittarius, new LevelProperties.FlyingBlimp.Move(5.1f, new MinMax(1.3f, 2.8f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
						{
							"D0.5,1"
						}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 805f, 0.4f, new MinMax(10f, 80f), 3f, new string[]
						{
							"600,200,500,300,100,550,150,450,250,50"
						}, new string[]
						{
							"A,B,A"
						}, new MinMax(0f, 90f), 5, 575f, 525f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 1.05f, 1f, 2.6f), new LevelProperties.FlyingBlimp.Shoot(450f, 1800f, 1450f, new MinMax(1.2f, 1.5f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(350f, 800f), 5f, 5f, 0.9f, new string[]
						{
							"A,B,C,A,C,A,A,B,C,C,A,B,C,B,A,A,P",
							"B,C,A,A,C,B,A,B,B,C,A,B,C,C,B,A,P"
						}, new string[]
						{
							"100,300,400,500,600,200,350,550,50,600",
							"300,600,400,50,200,500,50,550,450,150"
						}), new LevelProperties.FlyingBlimp.Sagittarius(10, 3, new MinMax(3f, 5.1f), 755f, 0.5f, new MinMax(0f, 90f), 1.45f, 495f, 2.5f, new MinMax(5f, 8f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(1.7f, 3.9f), 4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(1.5f, 3f), 1f, 5f, 0.3f, 300f), new LevelProperties.FlyingBlimp.UFO(9999f, 325f, 140f, 340f, 0.65f, 1.6f, new string[]
						{
							"A,B,A,A,B,B,A",
							"B,A,B,B,A,A,B",
							"A,A,B,A,A,B,B",
							"B,B,A,B,A,A,A",
							"A,B,A,B,A,A,B",
							"B,A,A,B,A,A,B"
						}, 0.3f, 0.5f, 1.5f, 8f, 2f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1100f)));
						list.Add(new LevelProperties.FlyingBlimp.State(0.51f, new LevelProperties.FlyingBlimp.Pattern[][]
						{
							new LevelProperties.FlyingBlimp.Pattern[]
							{
								LevelProperties.FlyingBlimp.Pattern.Shoot,
								LevelProperties.FlyingBlimp.Pattern.Shoot,
								LevelProperties.FlyingBlimp.Pattern.Tornado,
								LevelProperties.FlyingBlimp.Pattern.Shoot,
								LevelProperties.FlyingBlimp.Pattern.Shoot,
								LevelProperties.FlyingBlimp.Pattern.Shoot,
								LevelProperties.FlyingBlimp.Pattern.Tornado
							}
						}, LevelProperties.FlyingBlimp.States.Generic, new LevelProperties.FlyingBlimp.Move(5.1f, new MinMax(1.3f, 2.8f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
						{
							"D0.5,1"
						}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 805f, 0.4f, new MinMax(10f, 80f), 3.2f, new string[]
						{
							"600-200,500-300,600-400,100-550,150-450,250-50"
						}, new string[]
						{
							"A,A,A,B"
						}, new MinMax(0f, 90f), 5, 575f, 525f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 1.05f, 1f, 2.6f), new LevelProperties.FlyingBlimp.Shoot(450f, 1800f, 1450f, new MinMax(1.2f, 1.5f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(350f, 800f), 5f, 5f, 0.9f, new string[]
						{
							"A,B,C,A,C,A,A,B,C,C,A,B,C,B,A,A,P",
							"B,C,A,A,C,B,A,B,B,C,A,B,C,C,B,A,P"
						}, new string[]
						{
							"100,300,400,500,600,200,350,550,50,600",
							"300,600,400,50,200,500,50,550,450,150"
						}), new LevelProperties.FlyingBlimp.Sagittarius(10, 3, new MinMax(3f, 5.1f), 755f, 0.5f, new MinMax(0f, 90f), 1.45f, 495f, 2.5f, new MinMax(5f, 8f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(1.7f, 3.9f), 4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(1.5f, 3f), 1f, 5f, 0.3f, 300f), new LevelProperties.FlyingBlimp.UFO(9999f, 325f, 140f, 340f, 0.65f, 1.6f, new string[]
						{
							"A,B,A,A,B,B,A",
							"B,A,B,B,A,A,B",
							"A,A,B,A,A,B,B",
							"B,B,A,B,A,A,A",
							"A,B,A,B,A,A,B",
							"B,A,A,B,A,A,B"
						}, 0.3f, 0.5f, 1.5f, 8f, 2f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1100f)));
						list.Add(new LevelProperties.FlyingBlimp.State(0.39f, new LevelProperties.FlyingBlimp.Pattern[][]
						{
							new LevelProperties.FlyingBlimp.Pattern[0]
						}, LevelProperties.FlyingBlimp.States.Moon, new LevelProperties.FlyingBlimp.Move(5.1f, new MinMax(1.3f, 2.8f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
						{
							"D0.5,1"
						}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 805f, 0.4f, new MinMax(10f, 80f), 3.2f, new string[]
						{
							"600-200,500-300,600-400,100-550,150-450,250-50"
						}, new string[]
						{
							"A,A,A,B"
						}, new MinMax(0f, 90f), 5, 575f, 525f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 1.05f, 1f, 2.6f), new LevelProperties.FlyingBlimp.Shoot(450f, 1800f, 1450f, new MinMax(1.2f, 1.5f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(350f, 800f), 5f, 5f, 0.9f, new string[]
						{
							"A,B,C,A,C,A,A,B,C,C,A,B,C,B,A,A,P",
							"B,C,A,A,C,B,A,B,B,C,A,B,C,C,B,A,P"
						}, new string[]
						{
							"100,300,400,500,600,200,350,550,50,600",
							"300,600,400,50,200,500,50,550,450,150"
						}), new LevelProperties.FlyingBlimp.Sagittarius(10, 3, new MinMax(3f, 5.1f), 755f, 0.5f, new MinMax(0f, 90f), 1.45f, 495f, 2.5f, new MinMax(5f, 8f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(1.7f, 3.9f), 4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(1.5f, 3f), 1f, 5f, 0.3f, 300f), new LevelProperties.FlyingBlimp.UFO(9999f, 325f, 140f, 340f, 0.65f, 1.6f, new string[]
						{
							"A,B,A,A,B,B,A",
							"B,A,B,B,A,A,B",
							"A,A,B,A,A,B,B",
							"B,B,A,B,A,A,A",
							"A,B,A,B,A,A,B",
							"B,A,A,B,A,A,B"
						}, 0.3f, 0.5f, 1.5f, 8f, 2f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1100f)));
					}
				}
				else
				{
					hp = 2600;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.FlyingBlimp.State(10f, new LevelProperties.FlyingBlimp.Pattern[][]
					{
						new LevelProperties.FlyingBlimp.Pattern[]
						{
							LevelProperties.FlyingBlimp.Pattern.Shoot
						}
					}, LevelProperties.FlyingBlimp.States.Main, new LevelProperties.FlyingBlimp.Move(5f, new MinMax(1.3f, 3f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
					{
						"D0.5,1"
					}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 750f, 0.4f, new MinMax(10f, 80f), 4.2f, new string[]
					{
						"50,250,450,150,550,100,300,500,200,600"
					}, new string[]
					{
						"A,A,B"
					}, new MinMax(0f, 90f), 4, 525f, 475f, new MinMax(1f, 1f)), new LevelProperties.FlyingBlimp.Tornado(600f, 0.9f, 1f, 3.3f), new LevelProperties.FlyingBlimp.Shoot(400f, 1600f, 1300f, new MinMax(1.5f, 1.8f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(300f, 800f), 5f, 5f, 1.35f, new string[]
					{
						"A,B,C,A,C,A,A,B,C,C,P,A,B,C,B,A,A",
						"C,B,A,C,A,A,B,C,A,B,A,P,C,C,B,A,A"
					}, new string[]
					{
						"100,300,400,500,600,200,350,550,50,600",
						"200,400,600,50,300,550"
					}), new LevelProperties.FlyingBlimp.Sagittarius(10, 3, new MinMax(3f, 6f), 705f, 0.5f, new MinMax(0f, 90f), 1f, 447f, 2.3f, new MinMax(3f, 5f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(2.6f, 5.5f), 4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(2f, 3.5f), 1f, 5f, 0.22f, 300f), new LevelProperties.FlyingBlimp.UFO(9999f, 330f, 115f, 385f, 0.5f, 2f, new string[]
					{
						"A,B,A,A,B,B,A",
						"A,A,B,A,A,B,A",
						"B,A,B,A,A,A,B",
						"A,B,B,A,A,B,A",
						"B,A,A,B,A,A,B"
					}, 0.3f, 0.5f, 1.5f, 9f, 2f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1100f)));
					list.Add(new LevelProperties.FlyingBlimp.State(0.95f, new LevelProperties.FlyingBlimp.Pattern[][]
					{
						new LevelProperties.FlyingBlimp.Pattern[0]
					}, LevelProperties.FlyingBlimp.States.Taurus, new LevelProperties.FlyingBlimp.Move(5f, new MinMax(1.3f, 3f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
					{
						"D0.5,1"
					}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 750f, 0.4f, new MinMax(10f, 70f), 4f, new string[]
					{
						"50,250,450,150,550,100,300,500,200,600"
					}, new string[]
					{
						"A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A"
					}, new MinMax(0f, 90f), 3, 525f, 475f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 0.9f, 1f, 3.3f), new LevelProperties.FlyingBlimp.Shoot(400f, 1600f, 1300f, new MinMax(1.5f, 1.8f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(300f, 800f), 5f, 5f, 1.35f, new string[]
					{
						"A,B,C,A,C,A,A,B,C,C,P,A,B,C,B,A,A",
						"C,B,A,C,A,A,B,C,A,B,A,P,C,C,B,A,A"
					}, new string[]
					{
						"100,300,400,500,600,200,350,550,50,600",
						"200,400,600,50,300,550"
					}), new LevelProperties.FlyingBlimp.Sagittarius(10, 3, new MinMax(3f, 6f), 705f, 0.5f, new MinMax(0f, 90f), 1f, 447f, 2.3f, new MinMax(3f, 5f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(2.6f, 5.5f), 4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(2f, 3.5f), 1f, 5f, 0.22f, 300f), new LevelProperties.FlyingBlimp.UFO(9999f, 330f, 115f, 385f, 0.5f, 2f, new string[]
					{
						"A,B,A,A,B,B,A",
						"A,A,B,A,A,B,A",
						"B,A,B,A,A,A,B",
						"A,B,B,A,A,B,A",
						"B,A,A,B,A,A,B"
					}, 0.3f, 0.5f, 1.5f, 9f, 2f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1100f)));
					list.Add(new LevelProperties.FlyingBlimp.State(0.77f, new LevelProperties.FlyingBlimp.Pattern[][]
					{
						new LevelProperties.FlyingBlimp.Pattern[]
						{
							LevelProperties.FlyingBlimp.Pattern.Tornado,
							LevelProperties.FlyingBlimp.Pattern.Shoot,
							LevelProperties.FlyingBlimp.Pattern.Shoot,
							LevelProperties.FlyingBlimp.Pattern.Shoot,
							LevelProperties.FlyingBlimp.Pattern.Tornado,
							LevelProperties.FlyingBlimp.Pattern.Shoot,
							LevelProperties.FlyingBlimp.Pattern.Shoot
						}
					}, LevelProperties.FlyingBlimp.States.Generic, new LevelProperties.FlyingBlimp.Move(5f, new MinMax(1.3f, 3f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
					{
						"D0.5,1"
					}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 750f, 0.4f, new MinMax(10f, 70f), 3.8f, new string[]
					{
						"50,250,450,150,550,100,300,500,200,600"
					}, new string[]
					{
						"A,B,A,A,B,B,A,A,A,B,A,A,B,A,B"
					}, new MinMax(0f, 90f), 4, 525f, 475f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 0.9f, 1f, 3.3f), new LevelProperties.FlyingBlimp.Shoot(400f, 1600f, 1300f, new MinMax(1.5f, 1.8f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(300f, 800f), 5f, 5f, 1.35f, new string[]
					{
						"A,B,C,A,C,A,A,B,C,C,P,A,B,C,B,A,A",
						"C,B,A,C,A,A,B,C,A,B,A,P,C,C,B,A,A"
					}, new string[]
					{
						"100,300,400,500,600,200,350,550,50,600",
						"200,400,600,50,300,550"
					}), new LevelProperties.FlyingBlimp.Sagittarius(10, 3, new MinMax(3f, 6f), 705f, 0.5f, new MinMax(0f, 90f), 1f, 447f, 2.3f, new MinMax(3f, 5f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(2.6f, 5.5f), 4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(2f, 3.5f), 1f, 5f, 0.22f, 300f), new LevelProperties.FlyingBlimp.UFO(9999f, 330f, 115f, 385f, 0.5f, 2f, new string[]
					{
						"A,B,A,A,B,B,A",
						"A,A,B,A,A,B,A",
						"B,A,B,A,A,A,B",
						"A,B,B,A,A,B,A",
						"B,A,A,B,A,A,B"
					}, 0.3f, 0.5f, 1.5f, 9f, 2f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1100f)));
					list.Add(new LevelProperties.FlyingBlimp.State(0.64f, new LevelProperties.FlyingBlimp.Pattern[][]
					{
						new LevelProperties.FlyingBlimp.Pattern[0]
					}, LevelProperties.FlyingBlimp.States.SagOrGem, new LevelProperties.FlyingBlimp.Move(5f, new MinMax(1.3f, 3f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
					{
						"D0.5,1"
					}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 750f, 0.4f, new MinMax(70f, 100f), 4f, new string[]
					{
						"50,250,450,150,550,100,300,500,200,600"
					}, new string[]
					{
						"A,A"
					}, new MinMax(0f, 90f), 4, 525f, 475f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 0.9f, 1f, 3.3f), new LevelProperties.FlyingBlimp.Shoot(400f, 1600f, 1300f, new MinMax(1.5f, 1.8f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(300f, 800f), 5f, 5f, 1.35f, new string[]
					{
						"A,B,C,A,C,A,A,B,C,C,P,A,B,C,B,A,A",
						"C,B,A,C,A,A,B,C,A,B,A,P,C,C,B,A,A"
					}, new string[]
					{
						"100,300,400,500,600,200,350,550,50,600",
						"200,400,600,50,300,550"
					}), new LevelProperties.FlyingBlimp.Sagittarius(10, 3, new MinMax(3f, 6f), 705f, 0.5f, new MinMax(0f, 90f), 1f, 447f, 2.3f, new MinMax(3f, 5f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(2.6f, 5.5f), 4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(2f, 3.5f), 1f, 5f, 0.22f, 300f), new LevelProperties.FlyingBlimp.UFO(9999f, 330f, 115f, 385f, 0.5f, 2f, new string[]
					{
						"A,B,A,A,B,B,A",
						"A,A,B,A,A,B,A",
						"B,A,B,A,A,A,B",
						"A,B,B,A,A,B,A",
						"B,A,A,B,A,A,B"
					}, 0.3f, 0.5f, 1.5f, 9f, 2f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1100f)));
					list.Add(new LevelProperties.FlyingBlimp.State(0.46f, new LevelProperties.FlyingBlimp.Pattern[][]
					{
						new LevelProperties.FlyingBlimp.Pattern[]
						{
							LevelProperties.FlyingBlimp.Pattern.Shoot,
							LevelProperties.FlyingBlimp.Pattern.Tornado,
							LevelProperties.FlyingBlimp.Pattern.Shoot,
							LevelProperties.FlyingBlimp.Pattern.Shoot,
							LevelProperties.FlyingBlimp.Pattern.Tornado
						}
					}, LevelProperties.FlyingBlimp.States.Generic, new LevelProperties.FlyingBlimp.Move(5f, new MinMax(1.3f, 3f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
					{
						"D0.5,1"
					}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 750f, 0.3f, new MinMax(10f, 70f), 5.6f, new string[]
					{
						"50-250,450-150,550-100,300-500,200-600,450"
					}, new string[]
					{
						"A"
					}, new MinMax(0f, 90f), 4, 525f, 475f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 0.9f, 1f, 3.3f), new LevelProperties.FlyingBlimp.Shoot(400f, 1600f, 1300f, new MinMax(1.5f, 1.8f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(300f, 800f), 5f, 5f, 1.35f, new string[]
					{
						"A,B,C,A,C,A,A,B,C,C,P,A,B,C,B,A,A",
						"C,B,A,C,A,A,B,C,A,B,A,P,C,C,B,A,A"
					}, new string[]
					{
						"100,300,400,500,600,200,350,550,50,600",
						"200,400,600,50,300,550"
					}), new LevelProperties.FlyingBlimp.Sagittarius(10, 3, new MinMax(3f, 6f), 705f, 0.5f, new MinMax(0f, 90f), 1f, 447f, 2.3f, new MinMax(3f, 5f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(2.6f, 5.5f), 4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(2f, 3.5f), 1f, 5f, 0.22f, 300f), new LevelProperties.FlyingBlimp.UFO(9999f, 330f, 115f, 385f, 0.5f, 2f, new string[]
					{
						"A,B,A,A,B,B,A",
						"A,A,B,A,A,B,A",
						"B,A,B,A,A,A,B",
						"A,B,B,A,A,B,A",
						"B,A,A,B,A,A,B"
					}, 0.3f, 0.5f, 1.5f, 9f, 2f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1100f)));
					list.Add(new LevelProperties.FlyingBlimp.State(0.34f, new LevelProperties.FlyingBlimp.Pattern[][]
					{
						new LevelProperties.FlyingBlimp.Pattern[0]
					}, LevelProperties.FlyingBlimp.States.Moon, new LevelProperties.FlyingBlimp.Move(5f, new MinMax(1.3f, 3f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
					{
						"D0.5,1"
					}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 750f, 0.3f, new MinMax(10f, 70f), 5.6f, new string[]
					{
						"50-250,450-150,550-100,300-500,200-600,450"
					}, new string[]
					{
						"A"
					}, new MinMax(0f, 90f), 4, 525f, 475f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 0.9f, 1f, 3.3f), new LevelProperties.FlyingBlimp.Shoot(400f, 1600f, 1300f, new MinMax(1.5f, 1.8f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(300f, 800f), 5f, 5f, 1.35f, new string[]
					{
						"A,B,C,A,C,A,A,B,C,C,P,A,B,C,B,A,A",
						"C,B,A,C,A,A,B,C,A,B,A,P,C,C,B,A,A"
					}, new string[]
					{
						"100,300,400,500,600,200,350,550,50,600",
						"200,400,600,50,300,550"
					}), new LevelProperties.FlyingBlimp.Sagittarius(10, 3, new MinMax(3f, 6f), 705f, 0.5f, new MinMax(0f, 90f), 1f, 447f, 2.3f, new MinMax(3f, 5f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(2.6f, 5.5f), 4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(2f, 3.5f), 1f, 5f, 0.22f, 300f), new LevelProperties.FlyingBlimp.UFO(9999f, 330f, 115f, 385f, 0.5f, 2f, new string[]
					{
						"A,B,A,A,B,B,A",
						"A,A,B,A,A,B,A",
						"B,A,B,A,A,A,B",
						"A,B,B,A,A,B,A",
						"B,A,A,B,A,A,B"
					}, 0.3f, 0.5f, 1.5f, 9f, 2f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1100f)));
				}
			}
			else
			{
				hp = 2200;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.FlyingBlimp.State(10f, new LevelProperties.FlyingBlimp.Pattern[][]
				{
					new LevelProperties.FlyingBlimp.Pattern[]
					{
						LevelProperties.FlyingBlimp.Pattern.Shoot
					}
				}, LevelProperties.FlyingBlimp.States.Main, new LevelProperties.FlyingBlimp.Move(4.2f, new MinMax(1.5f, 4f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
				{
					"D0.5,1"
				}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 700f, 0.4f, new MinMax(10f, 80f), 4.6f, new string[]
				{
					"50,250,450,150,550,100,300,500,200,600"
				}, new string[]
				{
					"A,A"
				}, new MinMax(0f, 90f), 3, 425f, 475f, new MinMax(1f, 1f)), new LevelProperties.FlyingBlimp.Tornado(600f, 0.75f, 1f, 3.4f), new LevelProperties.FlyingBlimp.Shoot(400f, 1600f, 1300f, new MinMax(1.5f, 2f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(1f, 1f), 1f, 1f, 1f, new string[]
				{
					"A,B,C"
				}, new string[]
				{
					"1,100"
				}), new LevelProperties.FlyingBlimp.Sagittarius(8, 3, new MinMax(3f, 6f), 450f, 0.5f, new MinMax(0f, 90f), 1.5f, 470f, 2.3f, new MinMax(0f, 1f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(3.5f, 6f), 3.4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(2f, 4f), 1f, 5f, 0.18f, 300f), new LevelProperties.FlyingBlimp.UFO(1f, 1f, 1f, 1f, 11f, 1f, new string[]
				{
					"A,B"
				}, 1f, 1f, 1f, 1f, 1f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1000f)));
				list.Add(new LevelProperties.FlyingBlimp.State(0.9f, new LevelProperties.FlyingBlimp.Pattern[][]
				{
					new LevelProperties.FlyingBlimp.Pattern[0]
				}, LevelProperties.FlyingBlimp.States.Taurus, new LevelProperties.FlyingBlimp.Move(4.2f, new MinMax(1.5f, 4f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
				{
					"D0.5,1"
				}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 700f, 0.4f, new MinMax(10f, 80f), 4.4f, new string[]
				{
					"50,250,450,150,550,100,300,500,200,600"
				}, new string[]
				{
					"A,A,B"
				}, new MinMax(0f, 90f), 3, 425f, 475f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 0.75f, 1f, 3.4f), new LevelProperties.FlyingBlimp.Shoot(400f, 1600f, 1300f, new MinMax(1.5f, 2f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(1f, 1f), 1f, 1f, 1f, new string[]
				{
					"A,B,C"
				}, new string[]
				{
					"1,100"
				}), new LevelProperties.FlyingBlimp.Sagittarius(8, 3, new MinMax(3f, 6f), 450f, 0.5f, new MinMax(0f, 90f), 1.5f, 470f, 2.3f, new MinMax(0f, 1f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(3.5f, 6f), 3.4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(2f, 4f), 1f, 5f, 0.18f, 300f), new LevelProperties.FlyingBlimp.UFO(1f, 1f, 1f, 1f, 11f, 1f, new string[]
				{
					"A,B"
				}, 1f, 1f, 1f, 1f, 1f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1000f)));
				list.Add(new LevelProperties.FlyingBlimp.State(0.65f, new LevelProperties.FlyingBlimp.Pattern[][]
				{
					new LevelProperties.FlyingBlimp.Pattern[]
					{
						LevelProperties.FlyingBlimp.Pattern.Tornado,
						LevelProperties.FlyingBlimp.Pattern.Shoot,
						LevelProperties.FlyingBlimp.Pattern.Shoot
					}
				}, LevelProperties.FlyingBlimp.States.Generic, new LevelProperties.FlyingBlimp.Move(4.2f, new MinMax(1.5f, 4f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
				{
					"D0.5,1"
				}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 700f, 0.4f, new MinMax(10f, 80f), 4.4f, new string[]
				{
					"50,250,450,150,550,100,300,500,200,600"
				}, new string[]
				{
					"A"
				}, new MinMax(0f, 90f), 3, 425f, 475f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 0.75f, 1f, 3.4f), new LevelProperties.FlyingBlimp.Shoot(400f, 1600f, 1300f, new MinMax(1.5f, 2f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(1f, 1f), 1f, 1f, 1f, new string[]
				{
					"A,B,C"
				}, new string[]
				{
					"1,100"
				}), new LevelProperties.FlyingBlimp.Sagittarius(8, 3, new MinMax(3f, 6f), 450f, 0.5f, new MinMax(0f, 90f), 1.5f, 470f, 2.3f, new MinMax(0f, 1f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(3.5f, 6f), 3.4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(2f, 4f), 1f, 5f, 0.18f, 300f), new LevelProperties.FlyingBlimp.UFO(1f, 1f, 1f, 1f, 11f, 1f, new string[]
				{
					"A,B"
				}, 1f, 1f, 1f, 1f, 1f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1000f)));
				list.Add(new LevelProperties.FlyingBlimp.State(0.45f, new LevelProperties.FlyingBlimp.Pattern[][]
				{
					new LevelProperties.FlyingBlimp.Pattern[0]
				}, LevelProperties.FlyingBlimp.States.Gemini, new LevelProperties.FlyingBlimp.Move(4.2f, new MinMax(1.5f, 4f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
				{
					"D0.5,1"
				}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 700f, 0.4f, new MinMax(0f, -20f), 4.2f, new string[]
				{
					"50,250,450,150,550,100,300,500,200,600"
				}, new string[]
				{
					"A,A"
				}, new MinMax(0f, 90f), 3, 425f, 475f, new MinMax(1f, 2f)), new LevelProperties.FlyingBlimp.Tornado(600f, 0.75f, 1f, 3.4f), new LevelProperties.FlyingBlimp.Shoot(400f, 1600f, 1300f, new MinMax(1.5f, 2f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(1f, 1f), 1f, 1f, 1f, new string[]
				{
					"A,B,C"
				}, new string[]
				{
					"1,100"
				}), new LevelProperties.FlyingBlimp.Sagittarius(8, 3, new MinMax(3f, 6f), 450f, 0.5f, new MinMax(0f, 90f), 1.5f, 470f, 2.3f, new MinMax(0f, 1f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(3.5f, 6f), 3.4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(2f, 4f), 1f, 5f, 0.18f, 300f), new LevelProperties.FlyingBlimp.UFO(1f, 1f, 1f, 1f, 11f, 1f, new string[]
				{
					"A,B"
				}, 1f, 1f, 1f, 1f, 1f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1000f)));
				list.Add(new LevelProperties.FlyingBlimp.State(0.2f, new LevelProperties.FlyingBlimp.Pattern[][]
				{
					new LevelProperties.FlyingBlimp.Pattern[]
					{
						LevelProperties.FlyingBlimp.Pattern.Shoot,
						LevelProperties.FlyingBlimp.Pattern.Shoot,
						LevelProperties.FlyingBlimp.Pattern.Tornado,
						LevelProperties.FlyingBlimp.Pattern.Shoot,
						LevelProperties.FlyingBlimp.Pattern.Shoot,
						LevelProperties.FlyingBlimp.Pattern.Shoot,
						LevelProperties.FlyingBlimp.Pattern.Tornado
					}
				}, LevelProperties.FlyingBlimp.States.Generic, new LevelProperties.FlyingBlimp.Move(4.2f, new MinMax(1.5f, 4f)), new LevelProperties.FlyingBlimp.DashSummon(new string[]
				{
					"D0.5,1"
				}, 1f, 2700f, 0.1f, 780f, 3f), new LevelProperties.FlyingBlimp.Enemy(true, 10, 900f, 0.4f, new MinMax(10f, 80f), 2.5f, new string[]
				{
					"50,250,450,150,550,100,300,500,200,600"
				}, new string[]
				{
					"A"
				}, new MinMax(0f, 90f), 3, 425f, 475f, new MinMax(2f, 3f)), new LevelProperties.FlyingBlimp.Tornado(600f, 0.75f, 1f, 3.4f), new LevelProperties.FlyingBlimp.Shoot(400f, 1600f, 1300f, new MinMax(1.5f, 2f)), new LevelProperties.FlyingBlimp.Morph(0.4f, 2.3f), new LevelProperties.FlyingBlimp.Stars(new MinMax(1f, 1f), 1f, 1f, 1f, new string[]
				{
					"A,B,C"
				}, new string[]
				{
					"1,100"
				}), new LevelProperties.FlyingBlimp.Sagittarius(8, 3, new MinMax(3f, 6f), 450f, 0.5f, new MinMax(0f, 90f), 1.5f, 470f, 2.3f, new MinMax(0f, 1f)), new LevelProperties.FlyingBlimp.Taurus(new MinMax(3.5f, 6f), 3.4f), new LevelProperties.FlyingBlimp.Gemini(new MinMax(2f, 4f), 1f, 5f, 0.18f, 300f), new LevelProperties.FlyingBlimp.UFO(1f, 1f, 1f, 1f, 11f, 1f, new string[]
				{
					"A,B"
				}, 1f, 1f, 1f, 1f, 1f, false), new LevelProperties.FlyingBlimp.Gear(2, -255f, 1000f)));
			}
			return new LevelProperties.FlyingBlimp(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000194 RID: 404
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000D6 RID: 214
			// (get) Token: 0x06000497 RID: 1175 RVA: 0x00021355 File Offset: 0x0001F755
			// (set) Token: 0x06000498 RID: 1176 RVA: 0x0002135D File Offset: 0x0001F75D
			private protected LevelProperties.FlyingBlimp properties { protected get; private set; }

			// Token: 0x06000499 RID: 1177 RVA: 0x00021366 File Offset: 0x0001F766
			public virtual void LevelInit(LevelProperties.FlyingBlimp properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600049A RID: 1178 RVA: 0x0002136F File Offset: 0x0001F76F
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000195 RID: 405
		public enum States
		{
			// Token: 0x040007D4 RID: 2004
			Main,
			// Token: 0x040007D5 RID: 2005
			Generic,
			// Token: 0x040007D6 RID: 2006
			Moon,
			// Token: 0x040007D7 RID: 2007
			Sagittarius,
			// Token: 0x040007D8 RID: 2008
			Taurus,
			// Token: 0x040007D9 RID: 2009
			Gemini,
			// Token: 0x040007DA RID: 2010
			SagOrGem
		}

		// Token: 0x02000196 RID: 406
		public enum Pattern
		{
			// Token: 0x040007DC RID: 2012
			Dash,
			// Token: 0x040007DD RID: 2013
			Tornado,
			// Token: 0x040007DE RID: 2014
			Shoot,
			// Token: 0x040007DF RID: 2015
			Uninitialized
		}

		// Token: 0x02000197 RID: 407
		public class State : AbstractLevelState<LevelProperties.FlyingBlimp.Pattern, LevelProperties.FlyingBlimp.States>
		{
			// Token: 0x0600049B RID: 1179 RVA: 0x00021374 File Offset: 0x0001F774
			public State(float healthTrigger, LevelProperties.FlyingBlimp.Pattern[][] patterns, LevelProperties.FlyingBlimp.States stateName, LevelProperties.FlyingBlimp.Move move, LevelProperties.FlyingBlimp.DashSummon dashSummon, LevelProperties.FlyingBlimp.Enemy enemy, LevelProperties.FlyingBlimp.Tornado tornado, LevelProperties.FlyingBlimp.Shoot shoot, LevelProperties.FlyingBlimp.Morph morph, LevelProperties.FlyingBlimp.Stars stars, LevelProperties.FlyingBlimp.Sagittarius sagittarius, LevelProperties.FlyingBlimp.Taurus taurus, LevelProperties.FlyingBlimp.Gemini gemini, LevelProperties.FlyingBlimp.UFO uFO, LevelProperties.FlyingBlimp.Gear gear) : base(healthTrigger, patterns, stateName)
			{
				this.move = move;
				this.dashSummon = dashSummon;
				this.enemy = enemy;
				this.tornado = tornado;
				this.shoot = shoot;
				this.morph = morph;
				this.stars = stars;
				this.sagittarius = sagittarius;
				this.taurus = taurus;
				this.gemini = gemini;
				this.uFO = uFO;
				this.gear = gear;
			}

			// Token: 0x040007E0 RID: 2016
			public readonly LevelProperties.FlyingBlimp.Move move;

			// Token: 0x040007E1 RID: 2017
			public readonly LevelProperties.FlyingBlimp.DashSummon dashSummon;

			// Token: 0x040007E2 RID: 2018
			public readonly LevelProperties.FlyingBlimp.Enemy enemy;

			// Token: 0x040007E3 RID: 2019
			public readonly LevelProperties.FlyingBlimp.Tornado tornado;

			// Token: 0x040007E4 RID: 2020
			public readonly LevelProperties.FlyingBlimp.Shoot shoot;

			// Token: 0x040007E5 RID: 2021
			public readonly LevelProperties.FlyingBlimp.Morph morph;

			// Token: 0x040007E6 RID: 2022
			public readonly LevelProperties.FlyingBlimp.Stars stars;

			// Token: 0x040007E7 RID: 2023
			public readonly LevelProperties.FlyingBlimp.Sagittarius sagittarius;

			// Token: 0x040007E8 RID: 2024
			public readonly LevelProperties.FlyingBlimp.Taurus taurus;

			// Token: 0x040007E9 RID: 2025
			public readonly LevelProperties.FlyingBlimp.Gemini gemini;

			// Token: 0x040007EA RID: 2026
			public readonly LevelProperties.FlyingBlimp.UFO uFO;

			// Token: 0x040007EB RID: 2027
			public readonly LevelProperties.FlyingBlimp.Gear gear;
		}

		// Token: 0x02000198 RID: 408
		public class Move : AbstractLevelPropertyGroup
		{
			// Token: 0x0600049C RID: 1180 RVA: 0x000213EA File Offset: 0x0001F7EA
			public Move(float pathSpeed, MinMax initalAttackDelayRange)
			{
				this.pathSpeed = pathSpeed;
				this.initalAttackDelayRange = initalAttackDelayRange;
			}

			// Token: 0x040007EC RID: 2028
			public readonly float pathSpeed;

			// Token: 0x040007ED RID: 2029
			public readonly MinMax initalAttackDelayRange;
		}

		// Token: 0x02000199 RID: 409
		public class DashSummon : AbstractLevelPropertyGroup
		{
			// Token: 0x0600049D RID: 1181 RVA: 0x00021400 File Offset: 0x0001F800
			public DashSummon(string[] patternString, float hold, float dashSpeed, float reeentryDelay, float summonSpeed, float summonHesitate)
			{
				this.patternString = patternString;
				this.hold = hold;
				this.dashSpeed = dashSpeed;
				this.reeentryDelay = reeentryDelay;
				this.summonSpeed = summonSpeed;
				this.summonHesitate = summonHesitate;
			}

			// Token: 0x040007EE RID: 2030
			public readonly string[] patternString;

			// Token: 0x040007EF RID: 2031
			public readonly float hold;

			// Token: 0x040007F0 RID: 2032
			public readonly float dashSpeed;

			// Token: 0x040007F1 RID: 2033
			public readonly float reeentryDelay;

			// Token: 0x040007F2 RID: 2034
			public readonly float summonSpeed;

			// Token: 0x040007F3 RID: 2035
			public readonly float summonHesitate;
		}

		// Token: 0x0200019A RID: 410
		public class Enemy : AbstractLevelPropertyGroup
		{
			// Token: 0x0600049E RID: 1182 RVA: 0x00021438 File Offset: 0x0001F838
			public Enemy(bool active, int hp, float speed, float shotDelay, MinMax stopDistance, float stringDelay, string[] spawnString, string[] typeString, MinMax spreadAngle, int numBullets, float ASpeed, float BSpeed, MinMax APinkOccurance)
			{
				this.active = active;
				this.hp = hp;
				this.speed = speed;
				this.shotDelay = shotDelay;
				this.stopDistance = stopDistance;
				this.stringDelay = stringDelay;
				this.spawnString = spawnString;
				this.typeString = typeString;
				this.spreadAngle = spreadAngle;
				this.numBullets = numBullets;
				this.ASpeed = ASpeed;
				this.BSpeed = BSpeed;
				this.APinkOccurance = APinkOccurance;
			}

			// Token: 0x040007F4 RID: 2036
			public readonly bool active;

			// Token: 0x040007F5 RID: 2037
			public readonly int hp;

			// Token: 0x040007F6 RID: 2038
			public readonly float speed;

			// Token: 0x040007F7 RID: 2039
			public readonly float shotDelay;

			// Token: 0x040007F8 RID: 2040
			public readonly MinMax stopDistance;

			// Token: 0x040007F9 RID: 2041
			public readonly float stringDelay;

			// Token: 0x040007FA RID: 2042
			public readonly string[] spawnString;

			// Token: 0x040007FB RID: 2043
			public readonly string[] typeString;

			// Token: 0x040007FC RID: 2044
			public readonly MinMax spreadAngle;

			// Token: 0x040007FD RID: 2045
			public readonly int numBullets;

			// Token: 0x040007FE RID: 2046
			public readonly float ASpeed;

			// Token: 0x040007FF RID: 2047
			public readonly float BSpeed;

			// Token: 0x04000800 RID: 2048
			public readonly MinMax APinkOccurance;
		}

		// Token: 0x0200019B RID: 411
		public class Tornado : AbstractLevelPropertyGroup
		{
			// Token: 0x0600049F RID: 1183 RVA: 0x000214B0 File Offset: 0x0001F8B0
			public Tornado(float moveSpeed, float homingSpeed, float loopDuration, float hesitateAfterAttack)
			{
				this.moveSpeed = moveSpeed;
				this.homingSpeed = homingSpeed;
				this.loopDuration = loopDuration;
				this.hesitateAfterAttack = hesitateAfterAttack;
			}

			// Token: 0x04000801 RID: 2049
			public readonly float moveSpeed;

			// Token: 0x04000802 RID: 2050
			public readonly float homingSpeed;

			// Token: 0x04000803 RID: 2051
			public readonly float loopDuration;

			// Token: 0x04000804 RID: 2052
			public readonly float hesitateAfterAttack;
		}

		// Token: 0x0200019C RID: 412
		public class Shoot : AbstractLevelPropertyGroup
		{
			// Token: 0x060004A0 RID: 1184 RVA: 0x000214D5 File Offset: 0x0001F8D5
			public Shoot(float speedMin, float speedMax, float accelerationTime, MinMax hesitateAfterAttackRange)
			{
				this.speedMin = speedMin;
				this.speedMax = speedMax;
				this.accelerationTime = accelerationTime;
				this.hesitateAfterAttackRange = hesitateAfterAttackRange;
			}

			// Token: 0x04000805 RID: 2053
			public readonly float speedMin;

			// Token: 0x04000806 RID: 2054
			public readonly float speedMax;

			// Token: 0x04000807 RID: 2055
			public readonly float accelerationTime;

			// Token: 0x04000808 RID: 2056
			public readonly MinMax hesitateAfterAttackRange;
		}

		// Token: 0x0200019D RID: 413
		public class Morph : AbstractLevelPropertyGroup
		{
			// Token: 0x060004A1 RID: 1185 RVA: 0x000214FA File Offset: 0x0001F8FA
			public Morph(float crazyAHold, float crazyBHold)
			{
				this.crazyAHold = crazyAHold;
				this.crazyBHold = crazyBHold;
			}

			// Token: 0x04000809 RID: 2057
			public readonly float crazyAHold;

			// Token: 0x0400080A RID: 2058
			public readonly float crazyBHold;
		}

		// Token: 0x0200019E RID: 414
		public class Stars : AbstractLevelPropertyGroup
		{
			// Token: 0x060004A2 RID: 1186 RVA: 0x00021510 File Offset: 0x0001F910
			public Stars(MinMax speedX, float speedY, float sineSize, float delay, string[] typeString, string[] positionString)
			{
				this.speedX = speedX;
				this.speedY = speedY;
				this.sineSize = sineSize;
				this.delay = delay;
				this.typeString = typeString;
				this.positionString = positionString;
			}

			// Token: 0x0400080B RID: 2059
			public readonly MinMax speedX;

			// Token: 0x0400080C RID: 2060
			public readonly float speedY;

			// Token: 0x0400080D RID: 2061
			public readonly float sineSize;

			// Token: 0x0400080E RID: 2062
			public readonly float delay;

			// Token: 0x0400080F RID: 2063
			public readonly string[] typeString;

			// Token: 0x04000810 RID: 2064
			public readonly string[] positionString;
		}

		// Token: 0x0200019F RID: 415
		public class Sagittarius : AbstractLevelPropertyGroup
		{
			// Token: 0x060004A3 RID: 1187 RVA: 0x00021548 File Offset: 0x0001F948
			public Sagittarius(int arrowHP, int movementSpeed, MinMax attackDelayRange, float arrowInitialSpeed, float arrowWarning, MinMax homingSpreadAngle, float homingDelay, float homingSpeed, float homingRotation, MinMax homingDurationRange)
			{
				this.arrowHP = arrowHP;
				this.movementSpeed = movementSpeed;
				this.attackDelayRange = attackDelayRange;
				this.arrowInitialSpeed = arrowInitialSpeed;
				this.arrowWarning = arrowWarning;
				this.homingSpreadAngle = homingSpreadAngle;
				this.homingDelay = homingDelay;
				this.homingSpeed = homingSpeed;
				this.homingRotation = homingRotation;
				this.homingDurationRange = homingDurationRange;
			}

			// Token: 0x04000811 RID: 2065
			public readonly int arrowHP;

			// Token: 0x04000812 RID: 2066
			public readonly int movementSpeed;

			// Token: 0x04000813 RID: 2067
			public readonly MinMax attackDelayRange;

			// Token: 0x04000814 RID: 2068
			public readonly float arrowInitialSpeed;

			// Token: 0x04000815 RID: 2069
			public readonly float arrowWarning;

			// Token: 0x04000816 RID: 2070
			public readonly MinMax homingSpreadAngle;

			// Token: 0x04000817 RID: 2071
			public readonly float homingDelay;

			// Token: 0x04000818 RID: 2072
			public readonly float homingSpeed;

			// Token: 0x04000819 RID: 2073
			public readonly float homingRotation;

			// Token: 0x0400081A RID: 2074
			public readonly MinMax homingDurationRange;
		}

		// Token: 0x020001A0 RID: 416
		public class Taurus : AbstractLevelPropertyGroup
		{
			// Token: 0x060004A4 RID: 1188 RVA: 0x000215A8 File Offset: 0x0001F9A8
			public Taurus(MinMax attackDelayRange, float movementSpeed)
			{
				this.attackDelayRange = attackDelayRange;
				this.movementSpeed = movementSpeed;
			}

			// Token: 0x0400081B RID: 2075
			public readonly MinMax attackDelayRange;

			// Token: 0x0400081C RID: 2076
			public readonly float movementSpeed;
		}

		// Token: 0x020001A1 RID: 417
		public class Gemini : AbstractLevelPropertyGroup
		{
			// Token: 0x060004A5 RID: 1189 RVA: 0x000215BE File Offset: 0x0001F9BE
			public Gemini(MinMax spawnerDelay, float spawnerSpeed, float bulletDelay, float rotationSpeed, float bulletSpeed)
			{
				this.spawnerDelay = spawnerDelay;
				this.spawnerSpeed = spawnerSpeed;
				this.bulletDelay = bulletDelay;
				this.rotationSpeed = rotationSpeed;
				this.bulletSpeed = bulletSpeed;
			}

			// Token: 0x0400081D RID: 2077
			public readonly MinMax spawnerDelay;

			// Token: 0x0400081E RID: 2078
			public readonly float spawnerSpeed;

			// Token: 0x0400081F RID: 2079
			public readonly float bulletDelay;

			// Token: 0x04000820 RID: 2080
			public readonly float rotationSpeed;

			// Token: 0x04000821 RID: 2081
			public readonly float bulletSpeed;
		}

		// Token: 0x020001A2 RID: 418
		public class UFO : AbstractLevelPropertyGroup
		{
			// Token: 0x060004A6 RID: 1190 RVA: 0x000215EC File Offset: 0x0001F9EC
			public UFO(float UFOHP, float UFOSpeed, float UFOProximityA, float UFOProximityB, float beamDuration, float UFODelay, string[] UFOString, float UFOWarningBeamDuration, float UFOInitialDelay, float moonATKAnticipation, float moonATKDuration, float moonWaitForNextATK, bool invincibility)
			{
				this.UFOHP = UFOHP;
				this.UFOSpeed = UFOSpeed;
				this.UFOProximityA = UFOProximityA;
				this.UFOProximityB = UFOProximityB;
				this.beamDuration = beamDuration;
				this.UFODelay = UFODelay;
				this.UFOString = UFOString;
				this.UFOWarningBeamDuration = UFOWarningBeamDuration;
				this.UFOInitialDelay = UFOInitialDelay;
				this.moonATKAnticipation = moonATKAnticipation;
				this.moonATKDuration = moonATKDuration;
				this.moonWaitForNextATK = moonWaitForNextATK;
				this.invincibility = invincibility;
			}

			// Token: 0x04000822 RID: 2082
			public readonly float UFOHP;

			// Token: 0x04000823 RID: 2083
			public readonly float UFOSpeed;

			// Token: 0x04000824 RID: 2084
			public readonly float UFOProximityA;

			// Token: 0x04000825 RID: 2085
			public readonly float UFOProximityB;

			// Token: 0x04000826 RID: 2086
			public readonly float beamDuration;

			// Token: 0x04000827 RID: 2087
			public readonly float UFODelay;

			// Token: 0x04000828 RID: 2088
			public readonly string[] UFOString;

			// Token: 0x04000829 RID: 2089
			public readonly float UFOWarningBeamDuration;

			// Token: 0x0400082A RID: 2090
			public readonly float UFOInitialDelay;

			// Token: 0x0400082B RID: 2091
			public readonly float moonATKAnticipation;

			// Token: 0x0400082C RID: 2092
			public readonly float moonATKDuration;

			// Token: 0x0400082D RID: 2093
			public readonly float moonWaitForNextATK;

			// Token: 0x0400082E RID: 2094
			public readonly bool invincibility;
		}

		// Token: 0x020001A3 RID: 419
		public class Gear : AbstractLevelPropertyGroup
		{
			// Token: 0x060004A7 RID: 1191 RVA: 0x00021664 File Offset: 0x0001FA64
			public Gear(int parryCount, float bounceSpeed, float bounceHeight)
			{
				this.parryCount = parryCount;
				this.bounceSpeed = bounceSpeed;
				this.bounceHeight = bounceHeight;
			}

			// Token: 0x0400082F RID: 2095
			public readonly int parryCount;

			// Token: 0x04000830 RID: 2096
			public readonly float bounceSpeed;

			// Token: 0x04000831 RID: 2097
			public readonly float bounceHeight;
		}
	}

	// Token: 0x020001A5 RID: 421
	public class FlyingCowboy : AbstractLevelProperties<LevelProperties.FlyingCowboy.State, LevelProperties.FlyingCowboy.Pattern, LevelProperties.FlyingCowboy.States>
	{
		// Token: 0x060004BB RID: 1211 RVA: 0x00021681 File Offset: 0x0001FA81
		public FlyingCowboy(int hp, Level.GoalTimes goalTimes, LevelProperties.FlyingCowboy.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060004BC RID: 1212 RVA: 0x00021690 File Offset: 0x0001FA90
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 2250f;
				timeline.events.Add(new Level.Timeline.Event("Vacuum", 0.7f));
				timeline.events.Add(new Level.Timeline.Event("Meatball", 0.33f));
				break;
			case Level.Mode.Normal:
				timeline.health = 2850f;
				timeline.events.Add(new Level.Timeline.Event("Vacuum", 0.82f));
				timeline.events.Add(new Level.Timeline.Event("Meatball", 0.52f));
				timeline.events.Add(new Level.Timeline.Event("Sausage", 0.27f));
				break;
			case Level.Mode.Hard:
				timeline.health = 3200f;
				timeline.events.Add(new Level.Timeline.Event("Vacuum", 0.82f));
				timeline.events.Add(new Level.Timeline.Event("Meatball", 0.52f));
				timeline.events.Add(new Level.Timeline.Event("Sausage", 0.27f));
				break;
			}
			return timeline;
		}

		// Token: 0x060004BD RID: 1213 RVA: 0x000217BC File Offset: 0x0001FBBC
		public static LevelProperties.FlyingCowboy.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.FlyingCowboy.Pattern.Default;
				}
				if (id == "V")
				{
					return LevelProperties.FlyingCowboy.Pattern.Vacuum;
				}
				if (id == "R")
				{
					return LevelProperties.FlyingCowboy.Pattern.Ricochet;
				}
			}
			Debug.LogError("Pattern FlyingCowboy.Pattern for  " + id + " not found.", null);
			return LevelProperties.FlyingCowboy.Pattern.Uninitialized;
		}

		// Token: 0x060004BE RID: 1214 RVA: 0x0002182C File Offset: 0x0001FC2C
		public static LevelProperties.FlyingCowboy GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.FlyingCowboy.State> list = new List<LevelProperties.FlyingCowboy.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 3200;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.FlyingCowboy.State(10f, new LevelProperties.FlyingCowboy.Pattern[][]
						{
							new LevelProperties.FlyingCowboy.Pattern[1]
						}, LevelProperties.FlyingCowboy.States.Main, new LevelProperties.FlyingCowboy.Cart(new string[]
						{
							"S,B,M,S,M,S,M,B,S,M,S,M,B,S,M",
							"B,M,S,M,B,M,S,M,S,B,M"
						}, 550f, 0.25f), new LevelProperties.FlyingCowboy.SnakeAttack(65f, new string[]
						{
							"15,10,0,-10,0,15,0,-10,5,-15,5"
						}, new string[]
						{
							"200,150,100,150",
							"130,190,120,160",
							"120,180,130,170",
							"160,190,140,110"
						}, 1.1f, 1005f, new string[]
						{
							"1,3,2,2,3,1,2,3,2",
							"3,1,2,2,1,3,2,1,2,2"
						}, 0.6f, 0.55f, 250f), new LevelProperties.FlyingCowboy.BeamAttack(0f, 0f, 0f), new LevelProperties.FlyingCowboy.UFOEnemy(0f, 0f, 0f, 0f, new string[0], 0f, 0f, 0, 0f, 0f, string.Empty), new LevelProperties.FlyingCowboy.BackshotEnemy(555f, 6f, 495f, new string[]
						{
							"200,100,150",
							"200,150,100"
						}, new string[]
						{
							"-200,-100,-150",
							"-200,-150,-100"
						}, new string[]
						{
							"0.5,1.2,1.7,0.8,1.4,1.9",
							"0.9,1.5,0.8,1.9,0.6,1.6"
						}, "N,N,P,N,N,N,P", new string[]
						{
							"200,1000"
						}), new LevelProperties.FlyingCowboy.Debris(new MinMax(1.7f, 1.8f), new MinMax(365f, 680f), new MinMax(405f, 780f), new MinMax(475f, 880f), 700f, new string[]
						{
							"3,1,2,5,4,2,3",
							"2,3,4,5,2,3,1",
							"0,2,4,3,1,4,3",
							"4,1,2,3,4,2,0",
							"3,2,5,3,4,1,2",
							"2,4,1,0,2,1,3",
							"0,3,2,4,5,2,4"
						}, new string[]
						{
							"0,5,4,3,5,2,4",
							"1,3,0,4,5,2",
							"3,0,5,4,1,3,5",
							"5,2,3,0,4,1",
							"4,1,2,5,3,1,4",
							"0,5,3,4,2,3",
							"2,4,0,3,5,4,1"
						}, new string[]
						{
							"5,3,2,4,0,3,1",
							"2,0,5,1,0,5",
							"0,2,5,1,4,0,2",
							"4,2,3,1,5,2",
							"5,3,0,4,1,2,5",
							"3,1,5,0,4,3",
							"2,0,5,4,1,3,4"
						}, "1,2,3,2,1,3,2,2,3,1,2,3,2,1,3,2,3,2,1,2,3,3", 0.51f, 0.3f, new string[]
						{
							"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
						}, 1.2f, -605f, 2.1f, "N,N,N", new string[]
						{
							"5,3,2,0",
							"4,3,1,5"
						}, new string[]
						{
							"3,2,1,5",
							"0,4,5,1"
						}, new string[]
						{
							"0,2,1,5",
							"5,0,3,1"
						}, new string[]
						{
							"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
						}), new LevelProperties.FlyingCowboy.Can(new string[]
						{
							"3,2,3,2,4",
							"2,3,4,2,2"
						}, new string[]
						{
							"4,2,2,3,3,1",
							"2,4,3,2,1,3"
						}, new string[]
						{
							"1,2,1,2,3,1,1,3",
							"2,2,1,3,1,2,1"
						}, new string[]
						{
							"3,2,1,2,1,2",
							"1,1,3,1,2"
						}, 460f, 6f, 45f, true, 0.215f, new string[]
						{
							"5,6"
						}, 365f, 115f, "N,N,N,N,N,P,N,N,N,N,N,N,P", 1f, new MinMax(400f, 550f), new string[]
						{
							"300:D,200:U"
						}, new string[]
						{
							"-225:U,-175:D"
						}, "0,0.4,0.8", 75f, 40f, 2.3f, 1.5f), new LevelProperties.FlyingCowboy.SausageRun(0.5f, new string[]
						{
							"2.3,5,4.5"
						}, new MinMax(550f, 750f), new string[]
						{
							"-250:U,200:D,0:U,-110:U,50:D,-180:U,210:D,0:U,285:D,-50:U,100:U,0:D,200:U,-50:D,190:D,-100:U,-250:U,100:D,-180:U,-120:D",
							"285:D,110:D,200:U,-150:D,-50:U,150:D,-250:U,-110:U,170:U,80:D,-10:D,-200:U,80:D,210:D,40:D,-180:U,-60:U,100:D",
							"110:D,240:D,-110:U,0:D,100:U,-100:U,20:D,160:U,-60:D,285:D,90:U,-120:D,210:D,40:U,285:D,150:U,-260:U,-80:D"
						}, new MinMax(0.9f, 1.2f), new string[]
						{
							"1.5,2"
						}, "0.5,0.7,0.1,0.8,0.6,0.4,0.3,0.6,1,0.1", true, 2.8f, 265f, 305f, 135f, 0f, 45f, false, 45f, 0f, true, "N,N,N,P"), new LevelProperties.FlyingCowboy.Ricochet(true, "1,1,0.6,1,0.8,0.6,1,0.6,1,0.6,0.7,1,0.7,0.8,1,0.6", "550,500,505,515", "R,R,R,R", "400,100,600,-150,300,100,500,0,200,-100,450,50,250,550,300,50,-150,600,400,-100,350,0,550,-50,450,0,600,100,350,-150,250,550,300,50", 5.1f, 0.3f, 0, 0f, 525f, "N,N,N,N,N,N,P", new MinMax(1f, 3f), new MinMax(50f, 150f), 1200f, new MinMax(-375f, 250f)), new LevelProperties.FlyingCowboy.Bird(new MinMax(3.5f, 5.5f), 495f, 70f, 855f, new string[]
						{
							"-400,-250,-350,-450,-200,-150,-450,-250",
							"-450,-300,-500,-250,-350,-450,-150,-250",
							"-400,-150,-300,-500,-200,-450,-350,-250",
							"-500,-300,-450,-200,-350,-500,-150,-250"
						}, 535f, 7, 125f, 0.65f, 1.5f)));
						list.Add(new LevelProperties.FlyingCowboy.State(0.82f, new LevelProperties.FlyingCowboy.Pattern[][]
						{
							new LevelProperties.FlyingCowboy.Pattern[]
							{
								LevelProperties.FlyingCowboy.Pattern.Ricochet,
								LevelProperties.FlyingCowboy.Pattern.Vacuum
							}
						}, LevelProperties.FlyingCowboy.States.Vacuum, new LevelProperties.FlyingCowboy.Cart(new string[]
						{
							"S,B,M,S,M,S,M,B,S,M,S,M,B,S,M",
							"B,M,S,M,B,M,S,M,S,B,M"
						}, 550f, 0.25f), new LevelProperties.FlyingCowboy.SnakeAttack(65f, new string[]
						{
							"15,10,0,-10,0,15,0,-10,5,-15,5"
						}, new string[]
						{
							"200,150,100,150",
							"130,190,120,160",
							"120,180,130,170",
							"160,190,140,110"
						}, 1.1f, 1005f, new string[]
						{
							"1,3,2,2,3,1,2,3,2",
							"3,1,2,2,1,3,2,1,2,2"
						}, 0.6f, 0.55f, 250f), new LevelProperties.FlyingCowboy.BeamAttack(0f, 0f, 0f), new LevelProperties.FlyingCowboy.UFOEnemy(0f, 0f, 0f, 0f, new string[0], 0f, 0f, 0, 0f, 0f, string.Empty), new LevelProperties.FlyingCowboy.BackshotEnemy(555f, 6f, 495f, new string[]
						{
							"200,100,150",
							"200,150,100"
						}, new string[]
						{
							"-200,-100,-150",
							"-200,-150,-100"
						}, new string[]
						{
							"0.5,1.2,1.7,0.8,1.4,1.9",
							"0.9,1.5,0.8,1.9,0.6,1.6"
						}, "N,N,P,N,N,N,P", new string[]
						{
							"200,1000"
						}), new LevelProperties.FlyingCowboy.Debris(new MinMax(1.7f, 1.8f), new MinMax(365f, 680f), new MinMax(405f, 780f), new MinMax(475f, 880f), 700f, new string[]
						{
							"3,1,2,5,4,2,3",
							"2,3,4,5,2,3,1",
							"0,2,4,3,1,4,3",
							"4,1,2,3,4,2,0",
							"3,2,5,3,4,1,2",
							"2,4,1,0,2,1,3",
							"0,3,2,4,5,2,4"
						}, new string[]
						{
							"0,5,4,3,5,2,4",
							"1,3,0,4,5,2",
							"3,0,5,4,1,3,5",
							"5,2,3,0,4,1",
							"4,1,2,5,3,1,4",
							"0,5,3,4,2,3",
							"2,4,0,3,5,4,1"
						}, new string[]
						{
							"5,3,2,4,0,3,1",
							"2,0,5,1,0,5",
							"0,2,5,1,4,0,2",
							"4,2,3,1,5,2",
							"5,3,0,4,1,2,5",
							"3,1,5,0,4,3",
							"2,0,5,4,1,3,4"
						}, "1,2,3,2,1,3,2,2,3,1,2,3,2,1,3,2,3,2,1,2,3,3", 0.51f, 0.3f, new string[]
						{
							"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
						}, 1.2f, -605f, 2.1f, "N,N,N", new string[]
						{
							"5,3,2,0",
							"4,3,1,5"
						}, new string[]
						{
							"3,2,1,5",
							"0,4,5,1"
						}, new string[]
						{
							"0,2,1,5",
							"5,0,3,1"
						}, new string[]
						{
							"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
						}), new LevelProperties.FlyingCowboy.Can(new string[]
						{
							"3,2,3,2,4",
							"2,3,4,2,2"
						}, new string[]
						{
							"4,2,2,3,3,1",
							"2,4,3,2,1,3"
						}, new string[]
						{
							"1,2,1,2,3,1,1,3",
							"2,2,1,3,1,2,1"
						}, new string[]
						{
							"3,2,1,2,1,2",
							"1,1,3,1,2"
						}, 460f, 6f, 45f, true, 0.215f, new string[]
						{
							"5,6"
						}, 365f, 115f, "N,N,N,N,N,P,N,N,N,N,N,N,P", 1f, new MinMax(400f, 550f), new string[]
						{
							"300:D,200:U"
						}, new string[]
						{
							"-225:U,-175:D"
						}, "0,0.4,0.8", 75f, 40f, 2.3f, 1.5f), new LevelProperties.FlyingCowboy.SausageRun(0.5f, new string[]
						{
							"2.3,5,4.5"
						}, new MinMax(550f, 750f), new string[]
						{
							"-250:U,200:D,0:U,-110:U,50:D,-180:U,210:D,0:U,285:D,-50:U,100:U,0:D,200:U,-50:D,190:D,-100:U,-250:U,100:D,-180:U,-120:D",
							"285:D,110:D,200:U,-150:D,-50:U,150:D,-250:U,-110:U,170:U,80:D,-10:D,-200:U,80:D,210:D,40:D,-180:U,-60:U,100:D",
							"110:D,240:D,-110:U,0:D,100:U,-100:U,20:D,160:U,-60:D,285:D,90:U,-120:D,210:D,40:U,285:D,150:U,-260:U,-80:D"
						}, new MinMax(0.9f, 1.2f), new string[]
						{
							"1.5,2"
						}, "0.5,0.7,0.1,0.8,0.6,0.4,0.3,0.6,1,0.1", true, 2.8f, 265f, 305f, 135f, 0f, 45f, false, 45f, 0f, true, "N,N,N,P"), new LevelProperties.FlyingCowboy.Ricochet(true, "1,1,0.6,1,0.8,0.6,1,0.6,1,0.6,0.7,1,0.7,0.8,1,0.6", "550,500,505,515", "R,R,R,R", "400,100,600,-150,300,100,500,0,200,-100,450,50,250,550,300,50,-150,600,400,-100,350,0,550,-50,450,0,600,100,350,-150,250,550,300,50", 5.1f, 0.3f, 0, 0f, 525f, "N,N,N,N,N,N,P", new MinMax(1f, 3f), new MinMax(50f, 150f), 1200f, new MinMax(-375f, 250f)), new LevelProperties.FlyingCowboy.Bird(new MinMax(3.5f, 5.5f), 495f, 70f, 855f, new string[]
						{
							"-400,-250,-350,-450,-200,-150,-450,-250",
							"-450,-300,-500,-250,-350,-450,-150,-250",
							"-400,-150,-300,-500,-200,-450,-350,-250",
							"-500,-300,-450,-200,-350,-500,-150,-250"
						}, 535f, 7, 125f, 0.65f, 1.5f)));
						list.Add(new LevelProperties.FlyingCowboy.State(0.52f, new LevelProperties.FlyingCowboy.Pattern[][]
						{
							new LevelProperties.FlyingCowboy.Pattern[0]
						}, LevelProperties.FlyingCowboy.States.Meatball, new LevelProperties.FlyingCowboy.Cart(new string[]
						{
							"S,B,M,S,M,S,M,B,S,M,S,M,B,S,M",
							"B,M,S,M,B,M,S,M,S,B,M"
						}, 550f, 0.25f), new LevelProperties.FlyingCowboy.SnakeAttack(65f, new string[]
						{
							"15,10,0,-10,0,15,0,-10,5,-15,5"
						}, new string[]
						{
							"200,150,100,150",
							"130,190,120,160",
							"120,180,130,170",
							"160,190,140,110"
						}, 1.1f, 1005f, new string[]
						{
							"1,3,2,2,3,1,2,3,2",
							"3,1,2,2,1,3,2,1,2,2"
						}, 0.6f, 0.55f, 250f), new LevelProperties.FlyingCowboy.BeamAttack(0f, 0f, 0f), new LevelProperties.FlyingCowboy.UFOEnemy(0f, 0f, 0f, 0f, new string[0], 0f, 0f, 0, 0f, 0f, string.Empty), new LevelProperties.FlyingCowboy.BackshotEnemy(555f, 6f, 495f, new string[]
						{
							"200,100,150",
							"200,150,100"
						}, new string[]
						{
							"-200,-100,-150",
							"-200,-150,-100"
						}, new string[]
						{
							"0.5,1.2,1.7,0.8,1.4,1.9",
							"0.9,1.5,0.8,1.9,0.6,1.6"
						}, "N,N,P,N,N,N,P", new string[]
						{
							"200,1000"
						}), new LevelProperties.FlyingCowboy.Debris(new MinMax(1.7f, 1.8f), new MinMax(365f, 680f), new MinMax(405f, 780f), new MinMax(475f, 880f), 700f, new string[]
						{
							"3,1,2,5,4,2,3",
							"2,3,4,5,2,3,1",
							"0,2,4,3,1,4,3",
							"4,1,2,3,4,2,0",
							"3,2,5,3,4,1,2",
							"2,4,1,0,2,1,3",
							"0,3,2,4,5,2,4"
						}, new string[]
						{
							"0,5,4,3,5,2,4",
							"1,3,0,4,5,2",
							"3,0,5,4,1,3,5",
							"5,2,3,0,4,1",
							"4,1,2,5,3,1,4",
							"0,5,3,4,2,3",
							"2,4,0,3,5,4,1"
						}, new string[]
						{
							"5,3,2,4,0,3,1",
							"2,0,5,1,0,5",
							"0,2,5,1,4,0,2",
							"4,2,3,1,5,2",
							"5,3,0,4,1,2,5",
							"3,1,5,0,4,3",
							"2,0,5,4,1,3,4"
						}, "1,2,3,2,1,3,2,2,3,1,2,3,2,1,3,2,3,2,1,2,3,3", 0.51f, 0.3f, new string[]
						{
							"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
						}, 1.2f, -605f, 2.1f, "N,N,N", new string[]
						{
							"5,3,2,0",
							"4,3,1,5"
						}, new string[]
						{
							"3,2,1,5",
							"0,4,5,1"
						}, new string[]
						{
							"0,2,1,5",
							"5,0,3,1"
						}, new string[]
						{
							"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
						}), new LevelProperties.FlyingCowboy.Can(new string[]
						{
							"3,2,3,2,4",
							"2,3,4,2,2"
						}, new string[]
						{
							"4,2,2,3,3,1",
							"2,4,3,2,1,3"
						}, new string[]
						{
							"1,2,1,2,3,1,1,3",
							"2,2,1,3,1,2,1"
						}, new string[]
						{
							"3,2,1,2,1,2",
							"1,1,3,1,2"
						}, 460f, 6f, 45f, true, 0.215f, new string[]
						{
							"5,6"
						}, 365f, 115f, "N,N,N,N,N,P,N,N,N,N,N,N,P", 1f, new MinMax(400f, 550f), new string[]
						{
							"300:D,200:U"
						}, new string[]
						{
							"-225:U,-175:D"
						}, "0,0.4,0.8", 75f, 40f, 2.3f, 1.5f), new LevelProperties.FlyingCowboy.SausageRun(0.5f, new string[]
						{
							"2.3,5,4.5"
						}, new MinMax(550f, 750f), new string[]
						{
							"-250:U,200:D,0:U,-110:U,50:D,-180:U,210:D,0:U,285:D,-50:U,100:U,0:D,200:U,-50:D,190:D,-100:U,-250:U,100:D,-180:U,-120:D",
							"285:D,110:D,200:U,-150:D,-50:U,150:D,-250:U,-110:U,170:U,80:D,-10:D,-200:U,80:D,210:D,40:D,-180:U,-60:U,100:D",
							"110:D,240:D,-110:U,0:D,100:U,-100:U,20:D,160:U,-60:D,285:D,90:U,-120:D,210:D,40:U,285:D,150:U,-260:U,-80:D"
						}, new MinMax(0.9f, 1.2f), new string[]
						{
							"1.5,2"
						}, "0.5,0.7,0.1,0.8,0.6,0.4,0.3,0.6,1,0.1", true, 2.8f, 265f, 305f, 135f, 0f, 45f, false, 45f, 0f, true, "N,N,N,P"), new LevelProperties.FlyingCowboy.Ricochet(true, "1,1,0.6,1,0.8,0.6,1,0.6,1,0.6,0.7,1,0.7,0.8,1,0.6", "550,500,505,515", "R,R,R,R", "400,100,600,-150,300,100,500,0,200,-100,450,50,250,550,300,50,-150,600,400,-100,350,0,550,-50,450,0,600,100,350,-150,250,550,300,50", 5.1f, 0.3f, 0, 0f, 525f, "N,N,N,N,N,N,P", new MinMax(1f, 3f), new MinMax(50f, 150f), 1200f, new MinMax(-375f, 250f)), new LevelProperties.FlyingCowboy.Bird(new MinMax(3.5f, 5.5f), 495f, 70f, 855f, new string[]
						{
							"-400,-250,-350,-450,-200,-150,-450,-250",
							"-450,-300,-500,-250,-350,-450,-150,-250",
							"-400,-150,-300,-500,-200,-450,-350,-250",
							"-500,-300,-450,-200,-350,-500,-150,-250"
						}, 535f, 7, 125f, 0.65f, 1.5f)));
						list.Add(new LevelProperties.FlyingCowboy.State(0.27f, new LevelProperties.FlyingCowboy.Pattern[][]
						{
							new LevelProperties.FlyingCowboy.Pattern[0]
						}, LevelProperties.FlyingCowboy.States.Sausage, new LevelProperties.FlyingCowboy.Cart(new string[]
						{
							"S,B,M,S,M,S,M,B,S,M,S,M,B,S,M",
							"B,M,S,M,B,M,S,M,S,B,M"
						}, 550f, 0.25f), new LevelProperties.FlyingCowboy.SnakeAttack(65f, new string[]
						{
							"15,10,0,-10,0,15,0,-10,5,-15,5"
						}, new string[]
						{
							"200,150,100,150",
							"130,190,120,160",
							"120,180,130,170",
							"160,190,140,110"
						}, 1.1f, 1005f, new string[]
						{
							"1,3,2,2,3,1,2,3,2",
							"3,1,2,2,1,3,2,1,2,2"
						}, 0.6f, 0.55f, 250f), new LevelProperties.FlyingCowboy.BeamAttack(0f, 0f, 0f), new LevelProperties.FlyingCowboy.UFOEnemy(0f, 0f, 0f, 0f, new string[0], 0f, 0f, 0, 0f, 0f, string.Empty), new LevelProperties.FlyingCowboy.BackshotEnemy(555f, 6f, 495f, new string[]
						{
							"200,100,150",
							"200,150,100"
						}, new string[]
						{
							"-200,-100,-150",
							"-200,-150,-100"
						}, new string[]
						{
							"0.5,1.2,1.7,0.8,1.4,1.9",
							"0.9,1.5,0.8,1.9,0.6,1.6"
						}, "N,N,P,N,N,N,P", new string[]
						{
							"200,1000"
						}), new LevelProperties.FlyingCowboy.Debris(new MinMax(1.7f, 1.8f), new MinMax(365f, 680f), new MinMax(405f, 780f), new MinMax(475f, 880f), 700f, new string[]
						{
							"3,1,2,5,4,2,3",
							"2,3,4,5,2,3,1",
							"0,2,4,3,1,4,3",
							"4,1,2,3,4,2,0",
							"3,2,5,3,4,1,2",
							"2,4,1,0,2,1,3",
							"0,3,2,4,5,2,4"
						}, new string[]
						{
							"0,5,4,3,5,2,4",
							"1,3,0,4,5,2",
							"3,0,5,4,1,3,5",
							"5,2,3,0,4,1",
							"4,1,2,5,3,1,4",
							"0,5,3,4,2,3",
							"2,4,0,3,5,4,1"
						}, new string[]
						{
							"5,3,2,4,0,3,1",
							"2,0,5,1,0,5",
							"0,2,5,1,4,0,2",
							"4,2,3,1,5,2",
							"5,3,0,4,1,2,5",
							"3,1,5,0,4,3",
							"2,0,5,4,1,3,4"
						}, "1,2,3,2,1,3,2,2,3,1,2,3,2,1,3,2,3,2,1,2,3,3", 0.51f, 0.3f, new string[]
						{
							"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
						}, 1.2f, -605f, 2.1f, "N,N,N", new string[]
						{
							"5,3,2,0",
							"4,3,1,5"
						}, new string[]
						{
							"3,2,1,5",
							"0,4,5,1"
						}, new string[]
						{
							"0,2,1,5",
							"5,0,3,1"
						}, new string[]
						{
							"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
						}), new LevelProperties.FlyingCowboy.Can(new string[]
						{
							"3,2,3,2,4",
							"2,3,4,2,2"
						}, new string[]
						{
							"4,2,2,3,3,1",
							"2,4,3,2,1,3"
						}, new string[]
						{
							"1,2,1,2,3,1,1,3",
							"2,2,1,3,1,2,1"
						}, new string[]
						{
							"3,2,1,2,1,2",
							"1,1,3,1,2"
						}, 460f, 6f, 45f, true, 0.215f, new string[]
						{
							"5,6"
						}, 365f, 115f, "N,N,N,N,N,P,N,N,N,N,N,N,P", 1f, new MinMax(400f, 550f), new string[]
						{
							"300:D,200:U"
						}, new string[]
						{
							"-225:U,-175:D"
						}, "0,0.4,0.8", 75f, 40f, 2.3f, 1.5f), new LevelProperties.FlyingCowboy.SausageRun(0.5f, new string[]
						{
							"2.3,5,4.5"
						}, new MinMax(550f, 750f), new string[]
						{
							"-250:U,200:D,0:U,-110:U,50:D,-180:U,210:D,0:U,285:D,-50:U,100:U,0:D,200:U,-50:D,190:D,-100:U,-250:U,100:D,-180:U,-120:D",
							"285:D,110:D,200:U,-150:D,-50:U,150:D,-250:U,-110:U,170:U,80:D,-10:D,-200:U,80:D,210:D,40:D,-180:U,-60:U,100:D",
							"110:D,240:D,-110:U,0:D,100:U,-100:U,20:D,160:U,-60:D,285:D,90:U,-120:D,210:D,40:U,285:D,150:U,-260:U,-80:D"
						}, new MinMax(0.9f, 1.2f), new string[]
						{
							"1.5,2"
						}, "0.5,0.7,0.1,0.8,0.6,0.4,0.3,0.6,1,0.1", true, 2.8f, 265f, 305f, 135f, 0f, 45f, false, 45f, 0f, true, "N,N,N,P"), new LevelProperties.FlyingCowboy.Ricochet(true, "1,1,0.6,1,0.8,0.6,1,0.6,1,0.6,0.7,1,0.7,0.8,1,0.6", "550,500,505,515", "R,R,R,R", "400,100,600,-150,300,100,500,0,200,-100,450,50,250,550,300,50,-150,600,400,-100,350,0,550,-50,450,0,600,100,350,-150,250,550,300,50", 5.1f, 0.3f, 0, 0f, 525f, "N,N,N,N,N,N,P", new MinMax(1f, 3f), new MinMax(50f, 150f), 1200f, new MinMax(-375f, 250f)), new LevelProperties.FlyingCowboy.Bird(new MinMax(3.5f, 5.5f), 495f, 70f, 855f, new string[]
						{
							"-400,-250,-350,-450,-200,-150,-450,-250",
							"-450,-300,-500,-250,-350,-450,-150,-250",
							"-400,-150,-300,-500,-200,-450,-350,-250",
							"-500,-300,-450,-200,-350,-500,-150,-250"
						}, 535f, 7, 125f, 0.65f, 1.5f)));
					}
				}
				else
				{
					hp = 2850;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.FlyingCowboy.State(10f, new LevelProperties.FlyingCowboy.Pattern[][]
					{
						new LevelProperties.FlyingCowboy.Pattern[1]
					}, LevelProperties.FlyingCowboy.States.Main, new LevelProperties.FlyingCowboy.Cart(new string[]
					{
						"S,B,M,S,M,S,M,B,S,M,S,M,B,S,M",
						"B,M,S,M,B,M,S,M,S,B,M"
					}, 550f, 0.25f), new LevelProperties.FlyingCowboy.SnakeAttack(65f, new string[]
					{
						"15,10,0,-10,0,15,0,-10,5,-15,5"
					}, new string[]
					{
						"200,150,130,150",
						"170,190,140,130",
						"130,180,150,170",
						"130,190,140,170"
					}, 1.5f, 850f, new string[]
					{
						"1,3,2,2,1,2,2,1,2,3,2",
						"3,1,2,2,1,2,3,2,1,2,2"
					}, 0.6f, 0.55f, 250f), new LevelProperties.FlyingCowboy.BeamAttack(0f, 0f, 0f), new LevelProperties.FlyingCowboy.UFOEnemy(16f, 1000f, 270f, 315f, new string[]
					{
						"3.5,4,3,3.5,2.5"
					}, 640f, 4.6f, 3, 100f, 250f, "N,N,P,N,N,N,P"), new LevelProperties.FlyingCowboy.BackshotEnemy(505f, 6f, 455f, new string[]
					{
						"200,100,150",
						"200,150,100"
					}, new string[]
					{
						"-200,-100,-150",
						"-200,-150,-100"
					}, new string[]
					{
						"0.5,1,1.5,0.8,1.3,1.8",
						"0.9,1.2,0.5,1.7,0.7,1"
					}, "N,N,P,N,N,N,P", new string[]
					{
						"500,700,800,600"
					}), new LevelProperties.FlyingCowboy.Debris(new MinMax(1.7f, 1.8f), new MinMax(315f, 650f), new MinMax(365f, 750f), new MinMax(425f, 850f), 700f, new string[]
					{
						"5,3,2,4,3,1",
						"0,3,4,5,1,3",
						"3,5,0,2,4,2",
						"2,1,5,4,2,3",
						"4,0,2,1,3,5",
						"1,2,5,3,2,0",
						"0,3,4,1,3,2"
					}, new string[]
					{
						"3,2,1,0,4,5",
						"0,5,2,1,4",
						"3,0,4,3,1,2",
						"5,1,4,3,0",
						"2,5,0,3,4,1",
						"4,1,3,5,2",
						"1,4,5,2,4,3"
					}, new string[]
					{
						"0,2,1,5,0,3",
						"3,1,0,4,1",
						"5,2,0,4,3,1",
						"0,2,3,5,1",
						"4,1,3,2,0,5",
						"1,3,2,5,4",
						"5,4,0,2,1,4"
					}, "1,2,3,2,1,3,2,2,3,1,2,3,2,1,3,2,3,2,1,2,3,3", 0.65f, 0.3f, new string[]
					{
						"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
					}, 1.2f, -500f, 2.1f, "N,N", new string[]
					{
						"5,3,2,4",
						"4,0,2,3"
					}, new string[]
					{
						"3,2,1,0",
						"5,3,4,1"
					}, new string[]
					{
						"0,2,1,5",
						"4,1,3,2"
					}, new string[]
					{
						"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
					}), new LevelProperties.FlyingCowboy.Can(new string[]
					{
						"3,2,3,2,1",
						"2,2,4,1,3"
					}, new string[]
					{
						"4,2,1,3,3,1",
						"2,4,1,3,2,3"
					}, new string[]
					{
						"2,3,1,3",
						"2,3,1,2"
					}, new string[]
					{
						"2,2,1,2,3",
						"3,2,1,2,2"
					}, 410f, 6f, 45f, true, 0.285f, new string[]
					{
						"4,5"
					}, 325f, 115f, "N,N,N,N,P,N,N,N,N,N,P", 1f, new MinMax(400f, 500f), new string[]
					{
						"300:D,200:U"
					}, new string[]
					{
						"-225:U,-175:D"
					}, "0,0.4,0.8", 75f, 40f, 2.5f, 1.7f), new LevelProperties.FlyingCowboy.SausageRun(0.5f, new string[]
					{
						"2.3,5,4.5"
					}, new MinMax(550f, 750f), new string[]
					{
						"-250:U,-90:U,10:D,110:U,285:D,130:D,20:D,-80:U,-250:U,-110:D,-10:U,120:D,285:D,100:U,5:U,-90:D,-250:U,-70:U,30:D,130:D,285:D,90:D,-10:U,-110:U",
						"-250:U,-110:D,0:D,110:U,285:D,100:D,-10:U,-90:D,-250:U,-80:U,30:D,120:U,285:D,90:U,-20:D,-120:D,-250:U,-90:U,0:U,130:D,285:D,100:U,-10:D,-110:U",
						"-250:U,-90:D,10:U,110:D,285:D,130:U,20:D,-80:U,-250:U,-110:D,-10:D,120:U,285:D,100:U,5:D,-90:U,-250:U,-70:D,30:U,130:D,285:D,90:D,-10:D,-110:U",
						"-250:U,-110:D,0:U,110:U,285:D,100:D,-10:D,-90:U,-250:U,-80:D,30:U,120:D,285:D,90:D,-20:U,-120:D,-250:U,-90:U,0:D,130:D,285:D,100:D,-10:U,-110:U"
					}, new MinMax(1.2f, 1.5f), new string[]
					{
						"2,2.5"
					}, "0.5,0.7,0.1,0.8,2.5,0.6,0.4,0.3,2.5,0.6,1,0.1,2.5,0.6", true, 3.2f, 265f, 305f, 135f, 0f, 45f, false, 45f, 0f, true, "N,N,P"), new LevelProperties.FlyingCowboy.Ricochet(true, "0.4,0.5,0.4,0.5,1.4,0.4,0.5,0.4,0.5,0.4,1.4,0.4,0.5,0.4,0.5,0.4,0.5,1.5", "700,725,685,705,695,715,685", "R,R,R,R", "600,-150,550,-100,575,-125", 4.51f, 0.3f, 3, 100f, 505f, "N,N,N,N,N,N,P", new MinMax(1f, 3f), new MinMax(50f, 150f), 1200f, new MinMax(-375f, 250f)), new LevelProperties.FlyingCowboy.Bird(new MinMax(4.5f, 6.5f), 495f, 70f, 800f, new string[]
					{
						"-500,-300,-450,-200,-350,-500,-150,-250",
						"-400,-150,-300,-500,-200,-450,-350,-250",
						"-450,-300,-500,-250,-350,-450,-150,-250",
						"-400,-250,-350,-450,-200,-150,-450,-250"
					}, 515f, 5, 95f, 0.65f, 1.5f)));
					list.Add(new LevelProperties.FlyingCowboy.State(0.82f, new LevelProperties.FlyingCowboy.Pattern[][]
					{
						new LevelProperties.FlyingCowboy.Pattern[]
						{
							LevelProperties.FlyingCowboy.Pattern.Ricochet,
							LevelProperties.FlyingCowboy.Pattern.Vacuum
						}
					}, LevelProperties.FlyingCowboy.States.Vacuum, new LevelProperties.FlyingCowboy.Cart(new string[]
					{
						"S,B,M,S,M,S,M,B,S,M,S,M,B,S,M",
						"B,M,S,M,B,M,S,M,S,B,M"
					}, 550f, 0.25f), new LevelProperties.FlyingCowboy.SnakeAttack(65f, new string[]
					{
						"15,10,0,-10,0,15,0,-10,5,-15,5"
					}, new string[]
					{
						"200,150,130,150",
						"170,190,140,130",
						"130,180,150,170",
						"130,190,140,170"
					}, 1.5f, 850f, new string[]
					{
						"1,3,2,2,1,2,2,1,2,3,2",
						"3,1,2,2,1,2,3,2,1,2,2"
					}, 0.6f, 0.55f, 250f), new LevelProperties.FlyingCowboy.BeamAttack(0f, 0f, 0f), new LevelProperties.FlyingCowboy.UFOEnemy(16f, 1000f, 270f, 315f, new string[]
					{
						"3.5,4,3,3.5,2.5"
					}, 640f, 4.6f, 3, 100f, 250f, "N,N,P,N,N,N,P"), new LevelProperties.FlyingCowboy.BackshotEnemy(505f, 6f, 455f, new string[]
					{
						"200,100,150",
						"200,150,100"
					}, new string[]
					{
						"-200,-100,-150",
						"-200,-150,-100"
					}, new string[]
					{
						"0.5,1,1.5,0.8,1.3,1.8",
						"0.9,1.2,0.5,1.7,0.7,1"
					}, "N,N,P,N,N,N,P", new string[]
					{
						"500,700,800,600"
					}), new LevelProperties.FlyingCowboy.Debris(new MinMax(1.7f, 1.8f), new MinMax(315f, 650f), new MinMax(365f, 750f), new MinMax(425f, 850f), 700f, new string[]
					{
						"5,3,2,4,3,1",
						"0,3,4,5,1,3",
						"3,5,0,2,4,2",
						"2,1,5,4,2,3",
						"4,0,2,1,3,5",
						"1,2,5,3,2,0",
						"0,3,4,1,3,2"
					}, new string[]
					{
						"3,2,1,0,4,5",
						"0,5,2,1,4",
						"3,0,4,3,1,2",
						"5,1,4,3,0",
						"2,5,0,3,4,1",
						"4,1,3,5,2",
						"1,4,5,2,4,3"
					}, new string[]
					{
						"0,2,1,5,0,3",
						"3,1,0,4,1",
						"5,2,0,4,3,1",
						"0,2,3,5,1",
						"4,1,3,2,0,5",
						"1,3,2,5,4",
						"5,4,0,2,1,4"
					}, "1,2,3,2,1,3,2,2,3,1,2,3,2,1,3,2,3,2,1,2,3,3", 0.65f, 0.3f, new string[]
					{
						"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
					}, 1.2f, -500f, 2.1f, "N,N", new string[]
					{
						"5,3,2,4",
						"4,0,2,3"
					}, new string[]
					{
						"3,2,1,0",
						"5,3,4,1"
					}, new string[]
					{
						"0,2,1,5",
						"4,1,3,2"
					}, new string[]
					{
						"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
					}), new LevelProperties.FlyingCowboy.Can(new string[]
					{
						"3,2,3,2,1",
						"2,2,4,1,3"
					}, new string[]
					{
						"4,2,1,3,3,1",
						"2,4,1,3,2,3"
					}, new string[]
					{
						"2,3,1,3",
						"2,3,1,2"
					}, new string[]
					{
						"2,2,1,2,3",
						"3,2,1,2,2"
					}, 410f, 6f, 45f, true, 0.285f, new string[]
					{
						"4,5"
					}, 325f, 115f, "N,N,N,N,P,N,N,N,N,N,P", 1f, new MinMax(400f, 500f), new string[]
					{
						"300:D,200:U"
					}, new string[]
					{
						"-225:U,-175:D"
					}, "0,0.4,0.8", 75f, 40f, 2.5f, 1.7f), new LevelProperties.FlyingCowboy.SausageRun(0.5f, new string[]
					{
						"2.3,5,4.5"
					}, new MinMax(550f, 750f), new string[]
					{
						"-250:U,-90:U,10:D,110:U,285:D,130:D,20:D,-80:U,-250:U,-110:D,-10:U,120:D,285:D,100:U,5:U,-90:D,-250:U,-70:U,30:D,130:D,285:D,90:D,-10:U,-110:U",
						"-250:U,-110:D,0:D,110:U,285:D,100:D,-10:U,-90:D,-250:U,-80:U,30:D,120:U,285:D,90:U,-20:D,-120:D,-250:U,-90:U,0:U,130:D,285:D,100:U,-10:D,-110:U",
						"-250:U,-90:D,10:U,110:D,285:D,130:U,20:D,-80:U,-250:U,-110:D,-10:D,120:U,285:D,100:U,5:D,-90:U,-250:U,-70:D,30:U,130:D,285:D,90:D,-10:D,-110:U",
						"-250:U,-110:D,0:U,110:U,285:D,100:D,-10:D,-90:U,-250:U,-80:D,30:U,120:D,285:D,90:D,-20:U,-120:D,-250:U,-90:U,0:D,130:D,285:D,100:D,-10:U,-110:U"
					}, new MinMax(1.2f, 1.5f), new string[]
					{
						"2,2.5"
					}, "0.5,0.7,0.1,0.8,2.5,0.6,0.4,0.3,2.5,0.6,1,0.1,2.5,0.6", true, 3.2f, 265f, 305f, 135f, 0f, 45f, false, 45f, 0f, true, "N,N,P"), new LevelProperties.FlyingCowboy.Ricochet(true, "0.4,0.5,0.4,0.5,1.4,0.4,0.5,0.4,0.5,0.4,1.4,0.4,0.5,0.4,0.5,0.4,0.5,1.5", "700,725,685,705,695,715,685", "R,R,R,R", "600,-150,550,-100,575,-125", 4.51f, 0.3f, 3, 100f, 505f, "N,N,N,N,N,N,P", new MinMax(1f, 3f), new MinMax(50f, 150f), 1200f, new MinMax(-375f, 250f)), new LevelProperties.FlyingCowboy.Bird(new MinMax(4.5f, 6.5f), 495f, 70f, 800f, new string[]
					{
						"-500,-300,-450,-200,-350,-500,-150,-250",
						"-400,-150,-300,-500,-200,-450,-350,-250",
						"-450,-300,-500,-250,-350,-450,-150,-250",
						"-400,-250,-350,-450,-200,-150,-450,-250"
					}, 515f, 5, 95f, 0.65f, 1.5f)));
					list.Add(new LevelProperties.FlyingCowboy.State(0.52f, new LevelProperties.FlyingCowboy.Pattern[][]
					{
						new LevelProperties.FlyingCowboy.Pattern[0]
					}, LevelProperties.FlyingCowboy.States.Meatball, new LevelProperties.FlyingCowboy.Cart(new string[]
					{
						"S,B,M,S,M,S,M,B,S,M,S,M,B,S,M",
						"B,M,S,M,B,M,S,M,S,B,M"
					}, 550f, 0.25f), new LevelProperties.FlyingCowboy.SnakeAttack(65f, new string[]
					{
						"15,10,0,-10,0,15,0,-10,5,-15,5"
					}, new string[]
					{
						"200,150,130,150",
						"170,190,140,130",
						"130,180,150,170",
						"130,190,140,170"
					}, 1.5f, 850f, new string[]
					{
						"1,3,2,2,1,2,2,1,2,3,2",
						"3,1,2,2,1,2,3,2,1,2,2"
					}, 0.6f, 0.55f, 250f), new LevelProperties.FlyingCowboy.BeamAttack(0f, 0f, 0f), new LevelProperties.FlyingCowboy.UFOEnemy(16f, 1000f, 270f, 315f, new string[]
					{
						"3.5,4,3,3.5,2.5"
					}, 640f, 4.6f, 3, 100f, 250f, "N,N,P,N,N,N,P"), new LevelProperties.FlyingCowboy.BackshotEnemy(505f, 6f, 455f, new string[]
					{
						"200,100,150",
						"200,150,100"
					}, new string[]
					{
						"-200,-100,-150",
						"-200,-150,-100"
					}, new string[]
					{
						"0.5,1,1.5,0.8,1.3,1.8",
						"0.9,1.2,0.5,1.7,0.7,1"
					}, "N,N,P,N,N,N,P", new string[]
					{
						"500,700,800,600"
					}), new LevelProperties.FlyingCowboy.Debris(new MinMax(1.7f, 1.8f), new MinMax(315f, 650f), new MinMax(365f, 750f), new MinMax(425f, 850f), 700f, new string[]
					{
						"5,3,2,4,3,1",
						"0,3,4,5,1,3",
						"3,5,0,2,4,2",
						"2,1,5,4,2,3",
						"4,0,2,1,3,5",
						"1,2,5,3,2,0",
						"0,3,4,1,3,2"
					}, new string[]
					{
						"3,2,1,0,4,5",
						"0,5,2,1,4",
						"3,0,4,3,1,2",
						"5,1,4,3,0",
						"2,5,0,3,4,1",
						"4,1,3,5,2",
						"1,4,5,2,4,3"
					}, new string[]
					{
						"0,2,1,5,0,3",
						"3,1,0,4,1",
						"5,2,0,4,3,1",
						"0,2,3,5,1",
						"4,1,3,2,0,5",
						"1,3,2,5,4",
						"5,4,0,2,1,4"
					}, "1,2,3,2,1,3,2,2,3,1,2,3,2,1,3,2,3,2,1,2,3,3", 0.65f, 0.3f, new string[]
					{
						"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
					}, 1.2f, -500f, 2.1f, "N,N", new string[]
					{
						"5,3,2,4",
						"4,0,2,3"
					}, new string[]
					{
						"3,2,1,0",
						"5,3,4,1"
					}, new string[]
					{
						"0,2,1,5",
						"4,1,3,2"
					}, new string[]
					{
						"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
					}), new LevelProperties.FlyingCowboy.Can(new string[]
					{
						"3,2,3,2,1",
						"2,2,4,1,3"
					}, new string[]
					{
						"4,2,1,3,3,1",
						"2,4,1,3,2,3"
					}, new string[]
					{
						"2,3,1,3",
						"2,3,1,2"
					}, new string[]
					{
						"2,2,1,2,3",
						"3,2,1,2,2"
					}, 410f, 6f, 45f, true, 0.285f, new string[]
					{
						"4,5"
					}, 325f, 115f, "N,N,N,N,P,N,N,N,N,N,P", 1f, new MinMax(400f, 500f), new string[]
					{
						"300:D,200:U"
					}, new string[]
					{
						"-225:U,-175:D"
					}, "0,0.4,0.8", 75f, 40f, 2.5f, 1.7f), new LevelProperties.FlyingCowboy.SausageRun(0.5f, new string[]
					{
						"2.3,5,4.5"
					}, new MinMax(550f, 750f), new string[]
					{
						"-250:U,-90:U,10:D,110:U,285:D,130:D,20:D,-80:U,-250:U,-110:D,-10:U,120:D,285:D,100:U,5:U,-90:D,-250:U,-70:U,30:D,130:D,285:D,90:D,-10:U,-110:U",
						"-250:U,-110:D,0:D,110:U,285:D,100:D,-10:U,-90:D,-250:U,-80:U,30:D,120:U,285:D,90:U,-20:D,-120:D,-250:U,-90:U,0:U,130:D,285:D,100:U,-10:D,-110:U",
						"-250:U,-90:D,10:U,110:D,285:D,130:U,20:D,-80:U,-250:U,-110:D,-10:D,120:U,285:D,100:U,5:D,-90:U,-250:U,-70:D,30:U,130:D,285:D,90:D,-10:D,-110:U",
						"-250:U,-110:D,0:U,110:U,285:D,100:D,-10:D,-90:U,-250:U,-80:D,30:U,120:D,285:D,90:D,-20:U,-120:D,-250:U,-90:U,0:D,130:D,285:D,100:D,-10:U,-110:U"
					}, new MinMax(1.2f, 1.5f), new string[]
					{
						"2,2.5"
					}, "0.5,0.7,0.1,0.8,2.5,0.6,0.4,0.3,2.5,0.6,1,0.1,2.5,0.6", true, 3.2f, 265f, 305f, 135f, 0f, 45f, false, 45f, 0f, true, "N,N,P"), new LevelProperties.FlyingCowboy.Ricochet(true, "0.4,0.5,0.4,0.5,1.4,0.4,0.5,0.4,0.5,0.4,1.4,0.4,0.5,0.4,0.5,0.4,0.5,1.5", "700,725,685,705,695,715,685", "R,R,R,R", "600,-150,550,-100,575,-125", 4.51f, 0.3f, 3, 100f, 505f, "N,N,N,N,N,N,P", new MinMax(1f, 3f), new MinMax(50f, 150f), 1200f, new MinMax(-375f, 250f)), new LevelProperties.FlyingCowboy.Bird(new MinMax(4.5f, 6.5f), 495f, 70f, 800f, new string[]
					{
						"-500,-300,-450,-200,-350,-500,-150,-250",
						"-400,-150,-300,-500,-200,-450,-350,-250",
						"-450,-300,-500,-250,-350,-450,-150,-250",
						"-400,-250,-350,-450,-200,-150,-450,-250"
					}, 515f, 5, 95f, 0.65f, 1.5f)));
					list.Add(new LevelProperties.FlyingCowboy.State(0.27f, new LevelProperties.FlyingCowboy.Pattern[][]
					{
						new LevelProperties.FlyingCowboy.Pattern[0]
					}, LevelProperties.FlyingCowboy.States.Sausage, new LevelProperties.FlyingCowboy.Cart(new string[]
					{
						"S,B,M,S,M,S,M,B,S,M,S,M,B,S,M",
						"B,M,S,M,B,M,S,M,S,B,M"
					}, 550f, 0.25f), new LevelProperties.FlyingCowboy.SnakeAttack(65f, new string[]
					{
						"15,10,0,-10,0,15,0,-10,5,-15,5"
					}, new string[]
					{
						"200,150,130,150",
						"170,190,140,130",
						"130,180,150,170",
						"130,190,140,170"
					}, 1.5f, 850f, new string[]
					{
						"1,3,2,2,1,2,2,1,2,3,2",
						"3,1,2,2,1,2,3,2,1,2,2"
					}, 0.6f, 0.55f, 250f), new LevelProperties.FlyingCowboy.BeamAttack(0f, 0f, 0f), new LevelProperties.FlyingCowboy.UFOEnemy(16f, 1000f, 270f, 315f, new string[]
					{
						"3.5,4,3,3.5,2.5"
					}, 640f, 4.6f, 3, 100f, 250f, "N,N,P,N,N,N,P"), new LevelProperties.FlyingCowboy.BackshotEnemy(505f, 6f, 455f, new string[]
					{
						"200,100,150",
						"200,150,100"
					}, new string[]
					{
						"-200,-100,-150",
						"-200,-150,-100"
					}, new string[]
					{
						"0.5,1,1.5,0.8,1.3,1.8",
						"0.9,1.2,0.5,1.7,0.7,1"
					}, "N,N,P,N,N,N,P", new string[]
					{
						"500,700,800,600"
					}), new LevelProperties.FlyingCowboy.Debris(new MinMax(1.7f, 1.8f), new MinMax(315f, 650f), new MinMax(365f, 750f), new MinMax(425f, 850f), 700f, new string[]
					{
						"5,3,2,4,3,1",
						"0,3,4,5,1,3",
						"3,5,0,2,4,2",
						"2,1,5,4,2,3",
						"4,0,2,1,3,5",
						"1,2,5,3,2,0",
						"0,3,4,1,3,2"
					}, new string[]
					{
						"3,2,1,0,4,5",
						"0,5,2,1,4",
						"3,0,4,3,1,2",
						"5,1,4,3,0",
						"2,5,0,3,4,1",
						"4,1,3,5,2",
						"1,4,5,2,4,3"
					}, new string[]
					{
						"0,2,1,5,0,3",
						"3,1,0,4,1",
						"5,2,0,4,3,1",
						"0,2,3,5,1",
						"4,1,3,2,0,5",
						"1,3,2,5,4",
						"5,4,0,2,1,4"
					}, "1,2,3,2,1,3,2,2,3,1,2,3,2,1,3,2,3,2,1,2,3,3", 0.65f, 0.3f, new string[]
					{
						"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
					}, 1.2f, -500f, 2.1f, "N,N", new string[]
					{
						"5,3,2,4",
						"4,0,2,3"
					}, new string[]
					{
						"3,2,1,0",
						"5,3,4,1"
					}, new string[]
					{
						"0,2,1,5",
						"4,1,3,2"
					}, new string[]
					{
						"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
					}), new LevelProperties.FlyingCowboy.Can(new string[]
					{
						"3,2,3,2,1",
						"2,2,4,1,3"
					}, new string[]
					{
						"4,2,1,3,3,1",
						"2,4,1,3,2,3"
					}, new string[]
					{
						"2,3,1,3",
						"2,3,1,2"
					}, new string[]
					{
						"2,2,1,2,3",
						"3,2,1,2,2"
					}, 410f, 6f, 45f, true, 0.285f, new string[]
					{
						"4,5"
					}, 325f, 115f, "N,N,N,N,P,N,N,N,N,N,P", 1f, new MinMax(400f, 500f), new string[]
					{
						"300:D,200:U"
					}, new string[]
					{
						"-225:U,-175:D"
					}, "0,0.4,0.8", 75f, 40f, 2.5f, 1.7f), new LevelProperties.FlyingCowboy.SausageRun(0.5f, new string[]
					{
						"2.3,5,4.5"
					}, new MinMax(550f, 750f), new string[]
					{
						"-250:U,-90:U,10:D,110:U,285:D,130:D,20:D,-80:U,-250:U,-110:D,-10:U,120:D,285:D,100:U,5:U,-90:D,-250:U,-70:U,30:D,130:D,285:D,90:D,-10:U,-110:U",
						"-250:U,-110:D,0:D,110:U,285:D,100:D,-10:U,-90:D,-250:U,-80:U,30:D,120:U,285:D,90:U,-20:D,-120:D,-250:U,-90:U,0:U,130:D,285:D,100:U,-10:D,-110:U",
						"-250:U,-90:D,10:U,110:D,285:D,130:U,20:D,-80:U,-250:U,-110:D,-10:D,120:U,285:D,100:U,5:D,-90:U,-250:U,-70:D,30:U,130:D,285:D,90:D,-10:D,-110:U",
						"-250:U,-110:D,0:U,110:U,285:D,100:D,-10:D,-90:U,-250:U,-80:D,30:U,120:D,285:D,90:D,-20:U,-120:D,-250:U,-90:U,0:D,130:D,285:D,100:D,-10:U,-110:U"
					}, new MinMax(1.2f, 1.5f), new string[]
					{
						"2,2.5"
					}, "0.5,0.7,0.1,0.8,2.5,0.6,0.4,0.3,2.5,0.6,1,0.1,2.5,0.6", true, 3.2f, 265f, 305f, 135f, 0f, 45f, false, 45f, 0f, true, "N,N,P"), new LevelProperties.FlyingCowboy.Ricochet(true, "0.4,0.5,0.4,0.5,1.4,0.4,0.5,0.4,0.5,0.4,1.4,0.4,0.5,0.4,0.5,0.4,0.5,1.5", "700,725,685,705,695,715,685", "R,R,R,R", "600,-150,550,-100,575,-125", 4.51f, 0.3f, 3, 100f, 505f, "N,N,N,N,N,N,P", new MinMax(1f, 3f), new MinMax(50f, 150f), 1200f, new MinMax(-375f, 250f)), new LevelProperties.FlyingCowboy.Bird(new MinMax(4.5f, 6.5f), 495f, 70f, 800f, new string[]
					{
						"-500,-300,-450,-200,-350,-500,-150,-250",
						"-400,-150,-300,-500,-200,-450,-350,-250",
						"-450,-300,-500,-250,-350,-450,-150,-250",
						"-400,-250,-350,-450,-200,-150,-450,-250"
					}, 515f, 5, 95f, 0.65f, 1.5f)));
				}
			}
			else
			{
				hp = 2250;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.FlyingCowboy.State(10f, new LevelProperties.FlyingCowboy.Pattern[][]
				{
					new LevelProperties.FlyingCowboy.Pattern[1]
				}, LevelProperties.FlyingCowboy.States.Main, new LevelProperties.FlyingCowboy.Cart(new string[]
				{
					"S,S,B,M,B,S,M,S,M",
					"S,M,S,B,M,S,S,M,S,B"
				}, 550f, 0.25f), new LevelProperties.FlyingCowboy.SnakeAttack(65f, new string[]
				{
					"15,10,0,-10,0,15,0,-10,5,-15,5"
				}, new string[]
				{
					"150,200,150,170",
					"150,190,160,170",
					"180,190,160,140",
					"200,160,150,160"
				}, 2.1f, 750f, new string[]
				{
					"1,2,1,1,2,2,1,2,1,2,2",
					"1,2,2,1,2,1,2,1,1,2,1"
				}, 1f, 0.55f, 250f), new LevelProperties.FlyingCowboy.BeamAttack(1f, 0f, 1f), new LevelProperties.FlyingCowboy.UFOEnemy(16f, 1000f, 270f, 315f, new string[]
				{
					"3.5,4,3,3.5,2.5"
				}, 640f, 4.6f, 3, 100f, 250f, "N,N,P,N,N,N,P"), new LevelProperties.FlyingCowboy.BackshotEnemy(405f, 6f, 405f, new string[]
				{
					"200,100,150",
					"200,150,100"
				}, new string[]
				{
					"-200,-100,-150",
					"-200,-150,-100"
				}, new string[]
				{
					"0.4,1,0.8,0.9,1.3,1",
					"0.5,0.9,1.1,0.5,1.4"
				}, "N,N,P,N,P", new string[]
				{
					"500,700,800,600"
				}), new LevelProperties.FlyingCowboy.Debris(new MinMax(1.7f, 1.8f), new MinMax(315f, 600f), new MinMax(365f, 700f), new MinMax(425f, 800f), 600f, new string[]
				{
					"5,3,2,4,0",
					"0,3,4,2,1",
					"3,5,0,1,2",
					"1,3,5,2,4",
					"3,0,4,2,1",
					"2,5,1,3,0",
					"4,3,0,2,1"
				}, new string[]
				{
					"3,2,1,4,0",
					"0,4,5,3",
					"1,4,3,0,2",
					"2,5,0,4",
					"5,3,4,0,1",
					"2,1,5,4",
					"4,0,3,1,5"
				}, new string[]
				{
					"0,4,1,5,3",
					"5,0,3,2",
					"0,5,2,3,1",
					"4,1,3,2",
					"3,5,2,0,1",
					"5,1,4,3",
					"4,0,5,2,3"
				}, "1,2,3,2,1,2,3,2,1,2,3,3,1,2,3,2,2,1,3,2,2,3,2,1,2", 0.75f, 0.3f, new string[]
				{
					"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
				}, 1.2f, -450f, 0.81f, "N,N", new string[]
				{
					"5,2,3",
					"4,3,1"
				}, new string[]
				{
					"3,4,1",
					"2,1,5"
				}, new string[]
				{
					"4,5,0",
					"2,1,4"
				}, new string[]
				{
					"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
				}), new LevelProperties.FlyingCowboy.Can(new string[]
				{
					"2,3,2,4"
				}, new string[]
				{
					"4,2,2,4,1"
				}, new string[0], new string[0], 400f, 5f, 45f, true, 3.1f, new string[0], 265f, 0f, "N,N,P,N,N,N,P", 0f, new MinMax(0f, 1f), new string[0], new string[0], string.Empty, 0f, 0f, 0f, 0f), new LevelProperties.FlyingCowboy.SausageRun(0.5f, new string[]
				{
					"4.3,6,5.5"
				}, new MinMax(605f, 805f), new string[]
				{
					"110:D,240:D,-110:U,0:D,100:U,-100:U,20:D,160:U,-60:D,285:D,90:U,-120:D,210:D,40:U,285:D,150:U,-260:U,-80:D",
					"-250:U,200:D,0:U,-110:U,50:D,-180:U,210:D,0:U,285:D,-50:U,100:U,0:D,200:U,-50:D,190:D,-100:U,-250:U,100:D,-180:U,-120:D",
					"285:D,110:D,200:U,-150:D,-50:U,150:D,-250:U,-110:U,170:U,80:D,-10:D,-200:U,80:D,210:D,40:D,-180:U,-60:U,100:D"
				}, new MinMax(1.4f, 1.8f), new string[]
				{
					"2.5,3"
				}, "0.5,0.7,3,0.8,0.6,1,3,0.5,0.6,1,3,0.8,3", true, 4.1f, 285f, 245f, 85f, 0f, 45f, false, 45f, 0f, true, "N,P"), new LevelProperties.FlyingCowboy.Ricochet(true, "0.5,0.6,0.4,0.7,0.4,0.6,0.4,0.6,0.5,0.4,0.7", "650,610,605,625,600,635", "R,R,R,R", "-150,100,-50,50,-150,150,0,200,-100,200,-100,150,-100", 3.51f, 0.3f, 3, 100f, 475f, "N,N,N,P,N,N,N,N,P", new MinMax(1f, 3f), new MinMax(50f, 150f), 1200f, new MinMax(-375f, 250f)), new LevelProperties.FlyingCowboy.Bird(new MinMax(5.5f, 7.5f), 495f, 70f, 800f, new string[]
				{
					"-500,-300,-450,-200,-350,-500,-250",
					"-450,-300,-500,-200,-450,-350,-250",
					"-450,-300,-500,-250,-350,-450,-250",
					"-400,-250,-350,-450,-200,-450,-250"
				}, 465f, 3, 95f, 0f, 1.5f)));
				list.Add(new LevelProperties.FlyingCowboy.State(0.7f, new LevelProperties.FlyingCowboy.Pattern[][]
				{
					new LevelProperties.FlyingCowboy.Pattern[]
					{
						LevelProperties.FlyingCowboy.Pattern.Ricochet,
						LevelProperties.FlyingCowboy.Pattern.Vacuum
					}
				}, LevelProperties.FlyingCowboy.States.Vacuum, new LevelProperties.FlyingCowboy.Cart(new string[]
				{
					"S,S,B,M,B,S,M,S,M",
					"S,M,S,B,M,S,S,M,S,B"
				}, 550f, 0.25f), new LevelProperties.FlyingCowboy.SnakeAttack(65f, new string[]
				{
					"15,10,0,-10,0,15,0,-10,5,-15,5"
				}, new string[]
				{
					"150,200,150,170",
					"150,190,160,170",
					"180,190,160,140",
					"200,160,150,160"
				}, 2.1f, 750f, new string[]
				{
					"1,2,1,1,2,2,1,2,1,2,2",
					"1,2,2,1,2,1,2,1,1,2,1"
				}, 1f, 0.55f, 250f), new LevelProperties.FlyingCowboy.BeamAttack(1f, 0f, 1f), new LevelProperties.FlyingCowboy.UFOEnemy(16f, 1000f, 270f, 315f, new string[]
				{
					"3.5,4,3,3.5,2.5"
				}, 640f, 4.6f, 3, 100f, 250f, "N,N,P,N,N,N,P"), new LevelProperties.FlyingCowboy.BackshotEnemy(405f, 6f, 405f, new string[]
				{
					"200,100,150",
					"200,150,100"
				}, new string[]
				{
					"-200,-100,-150",
					"-200,-150,-100"
				}, new string[]
				{
					"0.4,1,0.8,0.9,1.3,1",
					"0.5,0.9,1.1,0.5,1.4"
				}, "N,N,P,N,P", new string[]
				{
					"500,700,800,600"
				}), new LevelProperties.FlyingCowboy.Debris(new MinMax(1.7f, 1.8f), new MinMax(315f, 600f), new MinMax(365f, 700f), new MinMax(425f, 800f), 600f, new string[]
				{
					"5,3,2,4,0",
					"0,3,4,2,1",
					"3,5,0,1,2",
					"1,3,5,2,4",
					"3,0,4,2,1",
					"2,5,1,3,0",
					"4,3,0,2,1"
				}, new string[]
				{
					"3,2,1,4,0",
					"0,4,5,3",
					"1,4,3,0,2",
					"2,5,0,4",
					"5,3,4,0,1",
					"2,1,5,4",
					"4,0,3,1,5"
				}, new string[]
				{
					"0,4,1,5,3",
					"5,0,3,2",
					"0,5,2,3,1",
					"4,1,3,2",
					"3,5,2,0,1",
					"5,1,4,3",
					"4,0,5,2,3"
				}, "1,2,3,2,1,2,3,2,1,2,3,3,1,2,3,2,2,1,3,2,2,3,2,1,2", 0.75f, 0.3f, new string[]
				{
					"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
				}, 1.2f, -450f, 0.81f, "N,N", new string[]
				{
					"5,2,3",
					"4,3,1"
				}, new string[]
				{
					"3,4,1",
					"2,1,5"
				}, new string[]
				{
					"4,5,0",
					"2,1,4"
				}, new string[]
				{
					"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
				}), new LevelProperties.FlyingCowboy.Can(new string[]
				{
					"2,3,2,4"
				}, new string[]
				{
					"4,2,2,4,1"
				}, new string[0], new string[0], 400f, 5f, 45f, true, 3.1f, new string[0], 265f, 0f, "N,N,P,N,N,N,P", 0f, new MinMax(0f, 1f), new string[0], new string[0], string.Empty, 0f, 0f, 0f, 0f), new LevelProperties.FlyingCowboy.SausageRun(0.5f, new string[]
				{
					"4.3,6,5.5"
				}, new MinMax(605f, 805f), new string[]
				{
					"110:D,240:D,-110:U,0:D,100:U,-100:U,20:D,160:U,-60:D,285:D,90:U,-120:D,210:D,40:U,285:D,150:U,-260:U,-80:D",
					"-250:U,200:D,0:U,-110:U,50:D,-180:U,210:D,0:U,285:D,-50:U,100:U,0:D,200:U,-50:D,190:D,-100:U,-250:U,100:D,-180:U,-120:D",
					"285:D,110:D,200:U,-150:D,-50:U,150:D,-250:U,-110:U,170:U,80:D,-10:D,-200:U,80:D,210:D,40:D,-180:U,-60:U,100:D"
				}, new MinMax(1.4f, 1.8f), new string[]
				{
					"2.5,3"
				}, "0.5,0.7,3,0.8,0.6,1,3,0.5,0.6,1,3,0.8,3", true, 4.1f, 285f, 245f, 85f, 0f, 45f, false, 45f, 0f, true, "N,P"), new LevelProperties.FlyingCowboy.Ricochet(true, "0.5,0.6,0.4,0.7,0.4,0.6,0.4,0.6,0.5,0.4,0.7", "650,610,605,625,600,635", "R,R,R,R", "-150,100,-50,50,-150,150,0,200,-100,200,-100,150,-100", 3.51f, 0.3f, 3, 100f, 475f, "N,N,N,P,N,N,N,N,P", new MinMax(1f, 3f), new MinMax(50f, 150f), 1200f, new MinMax(-375f, 250f)), new LevelProperties.FlyingCowboy.Bird(new MinMax(5.5f, 7.5f), 495f, 70f, 800f, new string[]
				{
					"-500,-300,-450,-200,-350,-500,-250",
					"-450,-300,-500,-200,-450,-350,-250",
					"-450,-300,-500,-250,-350,-450,-250",
					"-400,-250,-350,-450,-200,-450,-250"
				}, 465f, 3, 95f, 0f, 1.5f)));
				list.Add(new LevelProperties.FlyingCowboy.State(0.33f, new LevelProperties.FlyingCowboy.Pattern[][]
				{
					new LevelProperties.FlyingCowboy.Pattern[0]
				}, LevelProperties.FlyingCowboy.States.Meatball, new LevelProperties.FlyingCowboy.Cart(new string[]
				{
					"S,S,B,M,B,S,M,S,M",
					"S,M,S,B,M,S,S,M,S,B"
				}, 550f, 0.25f), new LevelProperties.FlyingCowboy.SnakeAttack(65f, new string[]
				{
					"15,10,0,-10,0,15,0,-10,5,-15,5"
				}, new string[]
				{
					"150,200,150,170",
					"150,190,160,170",
					"180,190,160,140",
					"200,160,150,160"
				}, 2.1f, 750f, new string[]
				{
					"1,2,1,1,2,2,1,2,1,2,2",
					"1,2,2,1,2,1,2,1,1,2,1"
				}, 1f, 0.55f, 250f), new LevelProperties.FlyingCowboy.BeamAttack(1f, 0f, 1f), new LevelProperties.FlyingCowboy.UFOEnemy(16f, 1000f, 270f, 315f, new string[]
				{
					"3.5,4,3,3.5,2.5"
				}, 640f, 4.6f, 3, 100f, 250f, "N,N,P,N,N,N,P"), new LevelProperties.FlyingCowboy.BackshotEnemy(405f, 6f, 405f, new string[]
				{
					"200,100,150",
					"200,150,100"
				}, new string[]
				{
					"-200,-100,-150",
					"-200,-150,-100"
				}, new string[]
				{
					"0.4,1,0.8,0.9,1.3,1",
					"0.5,0.9,1.1,0.5,1.4"
				}, "N,N,P,N,P", new string[]
				{
					"500,700,800,600"
				}), new LevelProperties.FlyingCowboy.Debris(new MinMax(1.7f, 1.8f), new MinMax(315f, 600f), new MinMax(365f, 700f), new MinMax(425f, 800f), 600f, new string[]
				{
					"5,3,2,4,0",
					"0,3,4,2,1",
					"3,5,0,1,2",
					"1,3,5,2,4",
					"3,0,4,2,1",
					"2,5,1,3,0",
					"4,3,0,2,1"
				}, new string[]
				{
					"3,2,1,4,0",
					"0,4,5,3",
					"1,4,3,0,2",
					"2,5,0,4",
					"5,3,4,0,1",
					"2,1,5,4",
					"4,0,3,1,5"
				}, new string[]
				{
					"0,4,1,5,3",
					"5,0,3,2",
					"0,5,2,3,1",
					"4,1,3,2",
					"3,5,2,0,1",
					"5,1,4,3",
					"4,0,5,2,3"
				}, "1,2,3,2,1,2,3,2,1,2,3,3,1,2,3,2,2,1,3,2,2,3,2,1,2", 0.75f, 0.3f, new string[]
				{
					"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
				}, 1.2f, -450f, 0.81f, "N,N", new string[]
				{
					"5,2,3",
					"4,3,1"
				}, new string[]
				{
					"3,4,1",
					"2,1,5"
				}, new string[]
				{
					"4,5,0",
					"2,1,4"
				}, new string[]
				{
					"B:0,T:1,T:3,B:2,B:3,B:3,T:2,T:0"
				}), new LevelProperties.FlyingCowboy.Can(new string[]
				{
					"2,3,2,4"
				}, new string[]
				{
					"4,2,2,4,1"
				}, new string[0], new string[0], 400f, 5f, 45f, true, 3.1f, new string[0], 265f, 0f, "N,N,P,N,N,N,P", 0f, new MinMax(0f, 1f), new string[0], new string[0], string.Empty, 0f, 0f, 0f, 0f), new LevelProperties.FlyingCowboy.SausageRun(0.5f, new string[]
				{
					"4.3,6,5.5"
				}, new MinMax(605f, 805f), new string[]
				{
					"110:D,240:D,-110:U,0:D,100:U,-100:U,20:D,160:U,-60:D,285:D,90:U,-120:D,210:D,40:U,285:D,150:U,-260:U,-80:D",
					"-250:U,200:D,0:U,-110:U,50:D,-180:U,210:D,0:U,285:D,-50:U,100:U,0:D,200:U,-50:D,190:D,-100:U,-250:U,100:D,-180:U,-120:D",
					"285:D,110:D,200:U,-150:D,-50:U,150:D,-250:U,-110:U,170:U,80:D,-10:D,-200:U,80:D,210:D,40:D,-180:U,-60:U,100:D"
				}, new MinMax(1.4f, 1.8f), new string[]
				{
					"2.5,3"
				}, "0.5,0.7,3,0.8,0.6,1,3,0.5,0.6,1,3,0.8,3", true, 4.1f, 285f, 245f, 85f, 0f, 45f, false, 45f, 0f, true, "N,P"), new LevelProperties.FlyingCowboy.Ricochet(true, "0.5,0.6,0.4,0.7,0.4,0.6,0.4,0.6,0.5,0.4,0.7", "650,610,605,625,600,635", "R,R,R,R", "-150,100,-50,50,-150,150,0,200,-100,200,-100,150,-100", 3.51f, 0.3f, 3, 100f, 475f, "N,N,N,P,N,N,N,N,P", new MinMax(1f, 3f), new MinMax(50f, 150f), 1200f, new MinMax(-375f, 250f)), new LevelProperties.FlyingCowboy.Bird(new MinMax(5.5f, 7.5f), 495f, 70f, 800f, new string[]
				{
					"-500,-300,-450,-200,-350,-500,-250",
					"-450,-300,-500,-200,-450,-350,-250",
					"-450,-300,-500,-250,-350,-450,-250",
					"-400,-250,-350,-450,-200,-450,-250"
				}, 465f, 3, 95f, 0f, 1.5f)));
			}
			return new LevelProperties.FlyingCowboy(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020001A6 RID: 422
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000DB RID: 219
			// (get) Token: 0x060004C0 RID: 1216 RVA: 0x0002509D File Offset: 0x0002349D
			// (set) Token: 0x060004C1 RID: 1217 RVA: 0x000250A5 File Offset: 0x000234A5
			private protected LevelProperties.FlyingCowboy properties { protected get; private set; }

			// Token: 0x060004C2 RID: 1218 RVA: 0x000250AE File Offset: 0x000234AE
			public virtual void LevelInit(LevelProperties.FlyingCowboy properties)
			{
				this.properties = properties;
			}

			// Token: 0x060004C3 RID: 1219 RVA: 0x000250B7 File Offset: 0x000234B7
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020001A7 RID: 423
		public enum States
		{
			// Token: 0x0400083E RID: 2110
			Main,
			// Token: 0x0400083F RID: 2111
			Generic,
			// Token: 0x04000840 RID: 2112
			Vacuum,
			// Token: 0x04000841 RID: 2113
			Sausage,
			// Token: 0x04000842 RID: 2114
			Meatball,
			// Token: 0x04000843 RID: 2115
			TBone
		}

		// Token: 0x020001A8 RID: 424
		public enum Pattern
		{
			// Token: 0x04000845 RID: 2117
			Default,
			// Token: 0x04000846 RID: 2118
			Vacuum,
			// Token: 0x04000847 RID: 2119
			Ricochet,
			// Token: 0x04000848 RID: 2120
			Uninitialized
		}

		// Token: 0x020001A9 RID: 425
		public class State : AbstractLevelState<LevelProperties.FlyingCowboy.Pattern, LevelProperties.FlyingCowboy.States>
		{
			// Token: 0x060004C4 RID: 1220 RVA: 0x000250BC File Offset: 0x000234BC
			public State(float healthTrigger, LevelProperties.FlyingCowboy.Pattern[][] patterns, LevelProperties.FlyingCowboy.States stateName, LevelProperties.FlyingCowboy.Cart cart, LevelProperties.FlyingCowboy.SnakeAttack snakeAttack, LevelProperties.FlyingCowboy.BeamAttack beamAttack, LevelProperties.FlyingCowboy.UFOEnemy uFOEnemy, LevelProperties.FlyingCowboy.BackshotEnemy backshotEnemy, LevelProperties.FlyingCowboy.Debris debris, LevelProperties.FlyingCowboy.Can can, LevelProperties.FlyingCowboy.SausageRun sausageRun, LevelProperties.FlyingCowboy.Ricochet ricochet, LevelProperties.FlyingCowboy.Bird bird) : base(healthTrigger, patterns, stateName)
			{
				this.cart = cart;
				this.snakeAttack = snakeAttack;
				this.beamAttack = beamAttack;
				this.uFOEnemy = uFOEnemy;
				this.backshotEnemy = backshotEnemy;
				this.debris = debris;
				this.can = can;
				this.sausageRun = sausageRun;
				this.ricochet = ricochet;
				this.bird = bird;
			}

			// Token: 0x04000849 RID: 2121
			public readonly LevelProperties.FlyingCowboy.Cart cart;

			// Token: 0x0400084A RID: 2122
			public readonly LevelProperties.FlyingCowboy.SnakeAttack snakeAttack;

			// Token: 0x0400084B RID: 2123
			public readonly LevelProperties.FlyingCowboy.BeamAttack beamAttack;

			// Token: 0x0400084C RID: 2124
			public readonly LevelProperties.FlyingCowboy.UFOEnemy uFOEnemy;

			// Token: 0x0400084D RID: 2125
			public readonly LevelProperties.FlyingCowboy.BackshotEnemy backshotEnemy;

			// Token: 0x0400084E RID: 2126
			public readonly LevelProperties.FlyingCowboy.Debris debris;

			// Token: 0x0400084F RID: 2127
			public readonly LevelProperties.FlyingCowboy.Can can;

			// Token: 0x04000850 RID: 2128
			public readonly LevelProperties.FlyingCowboy.SausageRun sausageRun;

			// Token: 0x04000851 RID: 2129
			public readonly LevelProperties.FlyingCowboy.Ricochet ricochet;

			// Token: 0x04000852 RID: 2130
			public readonly LevelProperties.FlyingCowboy.Bird bird;
		}

		// Token: 0x020001AA RID: 426
		public class Cart : AbstractLevelPropertyGroup
		{
			// Token: 0x060004C5 RID: 1221 RVA: 0x00025122 File Offset: 0x00023522
			public Cart(string[] cartAttackString, float cartMoveSpeed, float cartPopinTime)
			{
				this.cartAttackString = cartAttackString;
				this.cartMoveSpeed = cartMoveSpeed;
				this.cartPopinTime = cartPopinTime;
			}

			// Token: 0x04000853 RID: 2131
			public readonly string[] cartAttackString;

			// Token: 0x04000854 RID: 2132
			public readonly float cartMoveSpeed;

			// Token: 0x04000855 RID: 2133
			public readonly float cartPopinTime;
		}

		// Token: 0x020001AB RID: 427
		public class SnakeAttack : AbstractLevelPropertyGroup
		{
			// Token: 0x060004C6 RID: 1222 RVA: 0x00025140 File Offset: 0x00023540
			public SnakeAttack(float breakLinePosition, string[] snakeOffsetString, string[] snakeWidthString, float attackDelay, float snakeSpeed, string[] shotsPerAttack, float attackRecovery, float timeToApex, float apexHeight)
			{
				this.breakLinePosition = breakLinePosition;
				this.snakeOffsetString = snakeOffsetString;
				this.snakeWidthString = snakeWidthString;
				this.attackDelay = attackDelay;
				this.snakeSpeed = snakeSpeed;
				this.shotsPerAttack = shotsPerAttack;
				this.attackRecovery = attackRecovery;
				this.timeToApex = timeToApex;
				this.apexHeight = apexHeight;
			}

			// Token: 0x04000856 RID: 2134
			public readonly float breakLinePosition;

			// Token: 0x04000857 RID: 2135
			public readonly string[] snakeOffsetString;

			// Token: 0x04000858 RID: 2136
			public readonly string[] snakeWidthString;

			// Token: 0x04000859 RID: 2137
			public readonly float attackDelay;

			// Token: 0x0400085A RID: 2138
			public readonly float snakeSpeed;

			// Token: 0x0400085B RID: 2139
			public readonly string[] shotsPerAttack;

			// Token: 0x0400085C RID: 2140
			public readonly float attackRecovery;

			// Token: 0x0400085D RID: 2141
			public readonly float timeToApex;

			// Token: 0x0400085E RID: 2142
			public readonly float apexHeight;
		}

		// Token: 0x020001AC RID: 428
		public class BeamAttack : AbstractLevelPropertyGroup
		{
			// Token: 0x060004C7 RID: 1223 RVA: 0x00025198 File Offset: 0x00023598
			public BeamAttack(float beamWarningTime, float beamDuration, float attackRecovery)
			{
				this.beamWarningTime = beamWarningTime;
				this.beamDuration = beamDuration;
				this.attackRecovery = attackRecovery;
			}

			// Token: 0x0400085F RID: 2143
			public readonly float beamWarningTime;

			// Token: 0x04000860 RID: 2144
			public readonly float beamDuration;

			// Token: 0x04000861 RID: 2145
			public readonly float attackRecovery;
		}

		// Token: 0x020001AD RID: 429
		public class UFOEnemy : AbstractLevelPropertyGroup
		{
			// Token: 0x060004C8 RID: 1224 RVA: 0x000251B8 File Offset: 0x000235B8
			public UFOEnemy(float UFOHealth, float introUFOSpeed, float topUFOSpeed, float topUFOVerticalPosition, string[] topUFOShootString, float ufoPathLength, float topUFORespawnDelay, int bulletCount, float spreadAngle, float bulletSpeed, string bulletParryString)
			{
				this.UFOHealth = UFOHealth;
				this.introUFOSpeed = introUFOSpeed;
				this.topUFOSpeed = topUFOSpeed;
				this.topUFOVerticalPosition = topUFOVerticalPosition;
				this.topUFOShootString = topUFOShootString;
				this.ufoPathLength = ufoPathLength;
				this.topUFORespawnDelay = topUFORespawnDelay;
				this.bulletCount = bulletCount;
				this.spreadAngle = spreadAngle;
				this.bulletSpeed = bulletSpeed;
				this.bulletParryString = bulletParryString;
			}

			// Token: 0x04000862 RID: 2146
			public readonly float UFOHealth;

			// Token: 0x04000863 RID: 2147
			public readonly float introUFOSpeed;

			// Token: 0x04000864 RID: 2148
			public readonly float topUFOSpeed;

			// Token: 0x04000865 RID: 2149
			public readonly float topUFOVerticalPosition;

			// Token: 0x04000866 RID: 2150
			public readonly string[] topUFOShootString;

			// Token: 0x04000867 RID: 2151
			public readonly float ufoPathLength;

			// Token: 0x04000868 RID: 2152
			public readonly float topUFORespawnDelay;

			// Token: 0x04000869 RID: 2153
			public readonly int bulletCount;

			// Token: 0x0400086A RID: 2154
			public readonly float spreadAngle;

			// Token: 0x0400086B RID: 2155
			public readonly float bulletSpeed;

			// Token: 0x0400086C RID: 2156
			public readonly string bulletParryString;
		}

		// Token: 0x020001AE RID: 430
		public class BackshotEnemy : AbstractLevelPropertyGroup
		{
			// Token: 0x060004C9 RID: 1225 RVA: 0x00025220 File Offset: 0x00023620
			public BackshotEnemy(float enemySpeed, float enemyHealth, float bulletSpeed, string[] highSpawnPosition, string[] lowSpawnPosition, string[] spawnDelay, string bulletParryString, string[] anticipationStartDistance)
			{
				this.enemySpeed = enemySpeed;
				this.enemyHealth = enemyHealth;
				this.bulletSpeed = bulletSpeed;
				this.highSpawnPosition = highSpawnPosition;
				this.lowSpawnPosition = lowSpawnPosition;
				this.spawnDelay = spawnDelay;
				this.bulletParryString = bulletParryString;
				this.anticipationStartDistance = anticipationStartDistance;
			}

			// Token: 0x0400086D RID: 2157
			public readonly float enemySpeed;

			// Token: 0x0400086E RID: 2158
			public readonly float enemyHealth;

			// Token: 0x0400086F RID: 2159
			public readonly float bulletSpeed;

			// Token: 0x04000870 RID: 2160
			public readonly string[] highSpawnPosition;

			// Token: 0x04000871 RID: 2161
			public readonly string[] lowSpawnPosition;

			// Token: 0x04000872 RID: 2162
			public readonly string[] spawnDelay;

			// Token: 0x04000873 RID: 2163
			public readonly string bulletParryString;

			// Token: 0x04000874 RID: 2164
			public readonly string[] anticipationStartDistance;
		}

		// Token: 0x020001AF RID: 431
		public class Debris : AbstractLevelPropertyGroup
		{
			// Token: 0x060004CA RID: 1226 RVA: 0x00025270 File Offset: 0x00023670
			public Debris(MinMax warningDelayRange, MinMax debrisOneSpeedStartEnd, MinMax debrisTwoSpeedStartEnd, MinMax debrisThreeSpeedStartEnd, float debrisSpeedUpDistance, string[] debrisSideSpawn, string[] debrisTopSpawn, string[] debrisBottomSpawn, string debrisTypeString, float debrisDelay, float hesitate, string[] debrisCurveShotString, float debrisCurveApexTime, float vacuumWindStrength, float vacuumTimeToFullStrength, string debrisParryString, string[] transitionSideSpawn, string[] transitionTopSpawn, string[] transitionBottomSpawn, string[] transitionCurveShotString)
			{
				this.warningDelayRange = warningDelayRange;
				this.debrisOneSpeedStartEnd = debrisOneSpeedStartEnd;
				this.debrisTwoSpeedStartEnd = debrisTwoSpeedStartEnd;
				this.debrisThreeSpeedStartEnd = debrisThreeSpeedStartEnd;
				this.debrisSpeedUpDistance = debrisSpeedUpDistance;
				this.debrisSideSpawn = debrisSideSpawn;
				this.debrisTopSpawn = debrisTopSpawn;
				this.debrisBottomSpawn = debrisBottomSpawn;
				this.debrisTypeString = debrisTypeString;
				this.debrisDelay = debrisDelay;
				this.hesitate = hesitate;
				this.debrisCurveShotString = debrisCurveShotString;
				this.debrisCurveApexTime = debrisCurveApexTime;
				this.vacuumWindStrength = vacuumWindStrength;
				this.vacuumTimeToFullStrength = vacuumTimeToFullStrength;
				this.debrisParryString = debrisParryString;
				this.transitionSideSpawn = transitionSideSpawn;
				this.transitionTopSpawn = transitionTopSpawn;
				this.transitionBottomSpawn = transitionBottomSpawn;
				this.transitionCurveShotString = transitionCurveShotString;
			}

			// Token: 0x04000875 RID: 2165
			public readonly MinMax warningDelayRange;

			// Token: 0x04000876 RID: 2166
			public readonly MinMax debrisOneSpeedStartEnd;

			// Token: 0x04000877 RID: 2167
			public readonly MinMax debrisTwoSpeedStartEnd;

			// Token: 0x04000878 RID: 2168
			public readonly MinMax debrisThreeSpeedStartEnd;

			// Token: 0x04000879 RID: 2169
			public readonly float debrisSpeedUpDistance;

			// Token: 0x0400087A RID: 2170
			public readonly string[] debrisSideSpawn;

			// Token: 0x0400087B RID: 2171
			public readonly string[] debrisTopSpawn;

			// Token: 0x0400087C RID: 2172
			public readonly string[] debrisBottomSpawn;

			// Token: 0x0400087D RID: 2173
			public readonly string debrisTypeString;

			// Token: 0x0400087E RID: 2174
			public readonly float debrisDelay;

			// Token: 0x0400087F RID: 2175
			public readonly float hesitate;

			// Token: 0x04000880 RID: 2176
			public readonly string[] debrisCurveShotString;

			// Token: 0x04000881 RID: 2177
			public readonly float debrisCurveApexTime;

			// Token: 0x04000882 RID: 2178
			public readonly float vacuumWindStrength;

			// Token: 0x04000883 RID: 2179
			public readonly float vacuumTimeToFullStrength;

			// Token: 0x04000884 RID: 2180
			public readonly string debrisParryString;

			// Token: 0x04000885 RID: 2181
			public readonly string[] transitionSideSpawn;

			// Token: 0x04000886 RID: 2182
			public readonly string[] transitionTopSpawn;

			// Token: 0x04000887 RID: 2183
			public readonly string[] transitionBottomSpawn;

			// Token: 0x04000888 RID: 2184
			public readonly string[] transitionCurveShotString;
		}

		// Token: 0x020001B0 RID: 432
		public class Can : AbstractLevelPropertyGroup
		{
			// Token: 0x060004CB RID: 1227 RVA: 0x00025320 File Offset: 0x00023720
			public Can(string[] sausageStringA, string[] sausageStringB, string[] gapDistA, string[] gapDistB, float sausageTrainSpeed, float sausageSweepSpeed, float maxSausageAngle, bool shootBullets, float shotDelay, string[] bulletCount, float bulletSpeed, float bulletSpreadAngle, string bulletParryString, float beanCanTriggerTime, MinMax beanCanSpeed, string[] beanCanPostionUpper, string[] beanCanPositionLower, string beanCanExtendTimer, float wobbleRadiusX, float wobbleRadiusY, float wobbleDurationX, float wobbleDurationY)
			{
				this.sausageStringA = sausageStringA;
				this.sausageStringB = sausageStringB;
				this.gapDistA = gapDistA;
				this.gapDistB = gapDistB;
				this.sausageTrainSpeed = sausageTrainSpeed;
				this.sausageSweepSpeed = sausageSweepSpeed;
				this.maxSausageAngle = maxSausageAngle;
				this.shootBullets = shootBullets;
				this.shotDelay = shotDelay;
				this.bulletCount = bulletCount;
				this.bulletSpeed = bulletSpeed;
				this.bulletSpreadAngle = bulletSpreadAngle;
				this.bulletParryString = bulletParryString;
				this.beanCanTriggerTime = beanCanTriggerTime;
				this.beanCanSpeed = beanCanSpeed;
				this.beanCanPostionUpper = beanCanPostionUpper;
				this.beanCanPositionLower = beanCanPositionLower;
				this.beanCanExtendTimer = beanCanExtendTimer;
				this.wobbleRadiusX = wobbleRadiusX;
				this.wobbleRadiusY = wobbleRadiusY;
				this.wobbleDurationX = wobbleDurationX;
				this.wobbleDurationY = wobbleDurationY;
			}

			// Token: 0x04000889 RID: 2185
			public readonly string[] sausageStringA;

			// Token: 0x0400088A RID: 2186
			public readonly string[] sausageStringB;

			// Token: 0x0400088B RID: 2187
			public readonly string[] gapDistA;

			// Token: 0x0400088C RID: 2188
			public readonly string[] gapDistB;

			// Token: 0x0400088D RID: 2189
			public readonly float sausageTrainSpeed;

			// Token: 0x0400088E RID: 2190
			public readonly float sausageSweepSpeed;

			// Token: 0x0400088F RID: 2191
			public readonly float maxSausageAngle;

			// Token: 0x04000890 RID: 2192
			public readonly bool shootBullets;

			// Token: 0x04000891 RID: 2193
			public readonly float shotDelay;

			// Token: 0x04000892 RID: 2194
			public readonly string[] bulletCount;

			// Token: 0x04000893 RID: 2195
			public readonly float bulletSpeed;

			// Token: 0x04000894 RID: 2196
			public readonly float bulletSpreadAngle;

			// Token: 0x04000895 RID: 2197
			public readonly string bulletParryString;

			// Token: 0x04000896 RID: 2198
			public readonly float beanCanTriggerTime;

			// Token: 0x04000897 RID: 2199
			public readonly MinMax beanCanSpeed;

			// Token: 0x04000898 RID: 2200
			public readonly string[] beanCanPostionUpper;

			// Token: 0x04000899 RID: 2201
			public readonly string[] beanCanPositionLower;

			// Token: 0x0400089A RID: 2202
			public readonly string beanCanExtendTimer;

			// Token: 0x0400089B RID: 2203
			public readonly float wobbleRadiusX;

			// Token: 0x0400089C RID: 2204
			public readonly float wobbleRadiusY;

			// Token: 0x0400089D RID: 2205
			public readonly float wobbleDurationX;

			// Token: 0x0400089E RID: 2206
			public readonly float wobbleDurationY;
		}

		// Token: 0x020001B1 RID: 433
		public class SausageRun : AbstractLevelPropertyGroup
		{
			// Token: 0x060004CC RID: 1228 RVA: 0x000253E0 File Offset: 0x000237E0
			public SausageRun(float mirrorTime, string[] timeTillSwitch, MinMax beansSpeed, string[] beansPositionString, MinMax beansSpawnDelay, string[] groupBeansDelayString, string beansExtendTimer, bool shootBullets, float bulletDelay, float bulletSpeed, float bulletRotationSpeed, float bulletRotationRadius, float bulletTopMaxUpAngle, float bulletTopMaxDownAngle, bool bulletTopRotateClockwise, float bulletBottomMaxUpAngle, float bulletBottomMaxDownAngle, bool bulletBottomRotateClockwise, string bulletParry)
			{
				this.mirrorTime = mirrorTime;
				this.timeTillSwitch = timeTillSwitch;
				this.beansSpeed = beansSpeed;
				this.beansPositionString = beansPositionString;
				this.beansSpawnDelay = beansSpawnDelay;
				this.groupBeansDelayString = groupBeansDelayString;
				this.beansExtendTimer = beansExtendTimer;
				this.shootBullets = shootBullets;
				this.bulletDelay = bulletDelay;
				this.bulletSpeed = bulletSpeed;
				this.bulletRotationSpeed = bulletRotationSpeed;
				this.bulletRotationRadius = bulletRotationRadius;
				this.bulletTopMaxUpAngle = bulletTopMaxUpAngle;
				this.bulletTopMaxDownAngle = bulletTopMaxDownAngle;
				this.bulletTopRotateClockwise = bulletTopRotateClockwise;
				this.bulletBottomMaxUpAngle = bulletBottomMaxUpAngle;
				this.bulletBottomMaxDownAngle = bulletBottomMaxDownAngle;
				this.bulletBottomRotateClockwise = bulletBottomRotateClockwise;
				this.bulletParry = bulletParry;
			}

			// Token: 0x0400089F RID: 2207
			public readonly float mirrorTime;

			// Token: 0x040008A0 RID: 2208
			public readonly string[] timeTillSwitch;

			// Token: 0x040008A1 RID: 2209
			public readonly MinMax beansSpeed;

			// Token: 0x040008A2 RID: 2210
			public readonly string[] beansPositionString;

			// Token: 0x040008A3 RID: 2211
			public readonly MinMax beansSpawnDelay;

			// Token: 0x040008A4 RID: 2212
			public readonly string[] groupBeansDelayString;

			// Token: 0x040008A5 RID: 2213
			public readonly string beansExtendTimer;

			// Token: 0x040008A6 RID: 2214
			public readonly bool shootBullets;

			// Token: 0x040008A7 RID: 2215
			public readonly float bulletDelay;

			// Token: 0x040008A8 RID: 2216
			public readonly float bulletSpeed;

			// Token: 0x040008A9 RID: 2217
			public readonly float bulletRotationSpeed;

			// Token: 0x040008AA RID: 2218
			public readonly float bulletRotationRadius;

			// Token: 0x040008AB RID: 2219
			public readonly float bulletTopMaxUpAngle;

			// Token: 0x040008AC RID: 2220
			public readonly float bulletTopMaxDownAngle;

			// Token: 0x040008AD RID: 2221
			public readonly bool bulletTopRotateClockwise;

			// Token: 0x040008AE RID: 2222
			public readonly float bulletBottomMaxUpAngle;

			// Token: 0x040008AF RID: 2223
			public readonly float bulletBottomMaxDownAngle;

			// Token: 0x040008B0 RID: 2224
			public readonly bool bulletBottomRotateClockwise;

			// Token: 0x040008B1 RID: 2225
			public readonly string bulletParry;
		}

		// Token: 0x020001B2 RID: 434
		public class Ricochet : AbstractLevelPropertyGroup
		{
			// Token: 0x060004CD RID: 1229 RVA: 0x00025488 File Offset: 0x00023888
			public Ricochet(bool useRicochet, string rainDelayString, string rainSpeedString, string rainTypeString, string rainSpawnString, float rainDuration, float rainRecoveryTime, int splitBulletCount, float splitSpreadAngle, float splitBulletSpeed, string splitParryString, MinMax coinCountRange, MinMax coinHeightRange, float coinGravity, MinMax coinSpeedXRange)
			{
				this.useRicochet = useRicochet;
				this.rainDelayString = rainDelayString;
				this.rainSpeedString = rainSpeedString;
				this.rainTypeString = rainTypeString;
				this.rainSpawnString = rainSpawnString;
				this.rainDuration = rainDuration;
				this.rainRecoveryTime = rainRecoveryTime;
				this.splitBulletCount = splitBulletCount;
				this.splitSpreadAngle = splitSpreadAngle;
				this.splitBulletSpeed = splitBulletSpeed;
				this.splitParryString = splitParryString;
				this.coinCountRange = coinCountRange;
				this.coinHeightRange = coinHeightRange;
				this.coinGravity = coinGravity;
				this.coinSpeedXRange = coinSpeedXRange;
			}

			// Token: 0x040008B2 RID: 2226
			public readonly bool useRicochet;

			// Token: 0x040008B3 RID: 2227
			public readonly string rainDelayString;

			// Token: 0x040008B4 RID: 2228
			public readonly string rainSpeedString;

			// Token: 0x040008B5 RID: 2229
			public readonly string rainTypeString;

			// Token: 0x040008B6 RID: 2230
			public readonly string rainSpawnString;

			// Token: 0x040008B7 RID: 2231
			public readonly float rainDuration;

			// Token: 0x040008B8 RID: 2232
			public readonly float rainRecoveryTime;

			// Token: 0x040008B9 RID: 2233
			public readonly int splitBulletCount;

			// Token: 0x040008BA RID: 2234
			public readonly float splitSpreadAngle;

			// Token: 0x040008BB RID: 2235
			public readonly float splitBulletSpeed;

			// Token: 0x040008BC RID: 2236
			public readonly string splitParryString;

			// Token: 0x040008BD RID: 2237
			public readonly MinMax coinCountRange;

			// Token: 0x040008BE RID: 2238
			public readonly MinMax coinHeightRange;

			// Token: 0x040008BF RID: 2239
			public readonly float coinGravity;

			// Token: 0x040008C0 RID: 2240
			public readonly MinMax coinSpeedXRange;
		}

		// Token: 0x020001B3 RID: 435
		public class Bird : AbstractLevelPropertyGroup
		{
			// Token: 0x060004CE RID: 1230 RVA: 0x00025510 File Offset: 0x00023910
			public Bird(MinMax spawnDelayRange, float speed, float bulletArcHeight, float bulletGravity, string[] bulletLandingPosition, float shrapnelSpeed, int shrapnelCount, float shrapnelSpreadAngle, float shrapnelSecondStageDelay, float safetyZoneMaxDuration)
			{
				this.spawnDelayRange = spawnDelayRange;
				this.speed = speed;
				this.bulletArcHeight = bulletArcHeight;
				this.bulletGravity = bulletGravity;
				this.bulletLandingPosition = bulletLandingPosition;
				this.shrapnelSpeed = shrapnelSpeed;
				this.shrapnelCount = shrapnelCount;
				this.shrapnelSpreadAngle = shrapnelSpreadAngle;
				this.shrapnelSecondStageDelay = shrapnelSecondStageDelay;
				this.safetyZoneMaxDuration = safetyZoneMaxDuration;
			}

			// Token: 0x040008C1 RID: 2241
			public readonly MinMax spawnDelayRange;

			// Token: 0x040008C2 RID: 2242
			public readonly float speed;

			// Token: 0x040008C3 RID: 2243
			public readonly float bulletArcHeight;

			// Token: 0x040008C4 RID: 2244
			public readonly float bulletGravity;

			// Token: 0x040008C5 RID: 2245
			public readonly string[] bulletLandingPosition;

			// Token: 0x040008C6 RID: 2246
			public readonly float shrapnelSpeed;

			// Token: 0x040008C7 RID: 2247
			public readonly int shrapnelCount;

			// Token: 0x040008C8 RID: 2248
			public readonly float shrapnelSpreadAngle;

			// Token: 0x040008C9 RID: 2249
			public readonly float shrapnelSecondStageDelay;

			// Token: 0x040008CA RID: 2250
			public readonly float safetyZoneMaxDuration;
		}
	}

	// Token: 0x020001B5 RID: 437
	public class FlyingGenie : AbstractLevelProperties<LevelProperties.FlyingGenie.State, LevelProperties.FlyingGenie.Pattern, LevelProperties.FlyingGenie.States>
	{
		// Token: 0x060004E0 RID: 1248 RVA: 0x00025570 File Offset: 0x00023970
		public FlyingGenie(int hp, Level.GoalTimes goalTimes, LevelProperties.FlyingGenie.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060004E1 RID: 1249 RVA: 0x0002557C File Offset: 0x0002397C
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 2200f;
				timeline.events.Add(new Level.Timeline.Event("Disappear", 0.8f));
				timeline.events.Add(new Level.Timeline.Event("Marionette", 0.4f));
				break;
			case Level.Mode.Normal:
				timeline.health = 2600f;
				timeline.events.Add(new Level.Timeline.Event("Disappear", 0.85f));
				timeline.events.Add(new Level.Timeline.Event("Marionette", 0.6f));
				timeline.events.Add(new Level.Timeline.Event("Giant", 0.25f));
				break;
			case Level.Mode.Hard:
				timeline.health = 3000f;
				timeline.events.Add(new Level.Timeline.Event("Disappear", 0.85f));
				timeline.events.Add(new Level.Timeline.Event("Marionette", 0.6f));
				timeline.events.Add(new Level.Timeline.Event("Giant", 0.25f));
				break;
			}
			return timeline;
		}

		// Token: 0x060004E2 RID: 1250 RVA: 0x000256A7 File Offset: 0x00023AA7
		public static LevelProperties.FlyingGenie.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.FlyingGenie.Pattern.Default;
				}
			}
			Debug.LogError("Pattern FlyingGenie.Pattern for  " + id + " not found.", null);
			return LevelProperties.FlyingGenie.Pattern.Uninitialized;
		}

		// Token: 0x060004E3 RID: 1251 RVA: 0x000256E8 File Offset: 0x00023AE8
		public static LevelProperties.FlyingGenie GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.FlyingGenie.State> list = new List<LevelProperties.FlyingGenie.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 3000;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.FlyingGenie.State(10f, new LevelProperties.FlyingGenie.Pattern[][]
						{
							new LevelProperties.FlyingGenie.Pattern[1]
						}, LevelProperties.FlyingGenie.States.Main, new LevelProperties.FlyingGenie.Pyramids(0.9f, 1f, 1.05f, new string[]
						{
							"3,3.4,2.5,4,2.8,2,3.4",
							"3.2,2.6,3.5,2.3,3,2.7,2"
						}, new string[]
						{
							"2,3,1,2,1,3,1,2,3",
							"1,2,3,2,1,3,2,3,1,3"
						}, 320f), new LevelProperties.FlyingGenie.GemStone(350f, 1f, new string[]
						{
							"2.7,3,2.5,3.5,2.6,4,3.3,2.5,3.1,4.1,2.7,3.6,2.8"
						}, 1, "R"), new LevelProperties.FlyingGenie.Swords(600f, 1f, 0.9f, 2.4f, new string[]
						{
							"650-50,650-650,350-50,350-650,50-50,50-650,50-300,50-500",
							"650-650,650-50,350-650-350-50,50-650,50-50,50-500,50-300"
						}, 2.5f, 0f, "P,R,R,R,R,P,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Gems(600f, 400f, new MinMax(0.11f, 0.25f), new MinMax(1.5f, 2.5f), new string[]
						{
							"0,200,-150,25,300,45,400,0,100,-350,-150,25,200,-200,0,400,-50,-400,0,50,-100,15,300,-300,0,-100,0,-400,25,-100,-250,0,50,-400,150,0,350",
							"50,150,-100,0,300,0,-300,-50,15,100,400,0,-200,250,0,-400,175,0,-45,0,300,-75,15,50,-200,30,350",
							"0,200,-100,400,-100,0,45,100,-400,0,250,-175,45,-60,0,225,-100,15,450,165,-40,0,-450,80,150,-225,-68"
						}, new string[]
						{
							"0,100,25,125,-40,0,50,-50,150",
							"50,0,-50,200,150,-100,0,-150"
						}, 8f, 7f, 0f, 2.5f, "P,R,R,R,R,R,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Sphinx(400f, 300f, new string[]
						{
							"3,3,2,4,3,4"
						}, 1f, 0.6f, 3.3f, new string[]
						{
							"0,255,145,160,360,200",
							"400,50,300,188,340,110"
						}, new string[]
						{
							"100,600,350,477",
							"75,550,255,435",
							"400,300,500,125",
							"325,525,115,425"
						}, 6f, 20f, new MinMax(2.5f, 3.4f), 0f, false, 4.3f, 0.1f, 200f, 2.4f, "P,R,R,R,R,R,P,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Coffin(200f, new MinMax(0.6f, 1.3f), 8.3f, 300f, 5.5f, 30f, 1f, 0.8f, 16f, new string[]
						{
							"250,0,100,250,-100,200,-200,250,50,-150,0,250,50,-150,250,-250,-50",
							"0,-250,250,100,200,50,250,-150,0,250,-150,50,200,0,250,-100,-250,50,250,-200,100,250,0,-150"
						}, new string[]
						{
							"0,3,0,5,3,-4,0,-4,1,0,0,-5,2,-2,0,-4,3,-3",
							"1,3,-3,0,2,0,-5,4,-1,2,-2,-5,0,1,2,-1,3,-4,2,-3,0,1,-1"
						}, new string[]
						{
							"A,B,C,A,C,B,C,A,B,C,B",
							"A,B,C,B,A,B,C,A,B,C,A,C",
							"A,B,A,B,C,A,B,C,B,A,C"
						}, 430f, 630f, 530f, true, false), new LevelProperties.FlyingGenie.Obelisk(285f, 8, 2.45f, new string[]
						{
							"1,4,2,5,1-4,5,1,3,2-5",
							"3,1,2-5,4,2,3,1-4,2,5",
							"4,1,2,1-4,3,5,1,3,2-5"
						}, 20f, 3f, 300f, new string[0], new string[0], 485f, new string[]
						{
							"R,P,R,R,P"
						}, new string[]
						{
							"45,300,40,290,50,310",
							"295,40,310,50,305,45"
						}, true, false, 5f), new LevelProperties.FlyingGenie.Scan(1f, 0.6f, 2.5f, 2f, 565f, 0.7f, new string[]
						{
							"R,P,R,P"
						}, 605f, -870f), new LevelProperties.FlyingGenie.Bomb(0f, 0f, 0f, 0f, 0f, new string[0], 0f), new LevelProperties.FlyingGenie.Main(1f), new LevelProperties.FlyingGenie.Skull(new MinMax(2.5f, 5.4f), 575f, 2), new LevelProperties.FlyingGenie.Bullets(635f, new string[]
						{
							"5,4,4",
							"3,4,6",
							"4,3,6",
							"4,5,4",
							"3,6,4"
						}, 0.55f, 325f, 44f, 4, 0.65f, 335f, new MinMax(4f, 6f), 1.75f, 4, 0.6f, 225f, new MinMax(2.75f, 2.75f), "R,R,R,P", 145f, 100f)));
						list.Add(new LevelProperties.FlyingGenie.State(0.85f, new LevelProperties.FlyingGenie.Pattern[][]
						{
							new LevelProperties.FlyingGenie.Pattern[0]
						}, LevelProperties.FlyingGenie.States.Disappear, new LevelProperties.FlyingGenie.Pyramids(0.9f, 1f, 1.05f, new string[]
						{
							"3,3.4,2.5,4,2.8,2,3.4",
							"3.2,2.6,3.5,2.3,3,2.7,2"
						}, new string[]
						{
							"2,3,1,2,1,3,1,2,3",
							"1,2,3,2,1,3,2,3,1,3"
						}, 320f), new LevelProperties.FlyingGenie.GemStone(350f, 1f, new string[]
						{
							"2.7,3,2.5,3.5,2.6,4,3.3,2.5,3.1,4.1,2.7,3.6,2.8"
						}, 1, "R"), new LevelProperties.FlyingGenie.Swords(600f, 1f, 0.9f, 2.4f, new string[]
						{
							"650-50,650-650,350-50,350-650,50-50,50-650,50-300,50-500",
							"650-650,650-50,350-650-350-50,50-650,50-50,50-500,50-300"
						}, 2.5f, 0f, "P,R,R,R,R,P,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Gems(600f, 400f, new MinMax(0.11f, 0.25f), new MinMax(1.5f, 2.5f), new string[]
						{
							"0,200,-150,25,300,45,400,0,100,-350,-150,25,200,-200,0,400,-50,-400,0,50,-100,15,300,-300,0,-100,0,-400,25,-100,-250,0,50,-400,150,0,350",
							"50,150,-100,0,300,0,-300,-50,15,100,400,0,-200,250,0,-400,175,0,-45,0,300,-75,15,50,-200,30,350",
							"0,200,-100,400,-100,0,45,100,-400,0,250,-175,45,-60,0,225,-100,15,450,165,-40,0,-450,80,150,-225,-68"
						}, new string[]
						{
							"0,100,25,125,-40,0,50,-50,150",
							"50,0,-50,200,150,-100,0,-150"
						}, 8f, 7f, 0f, 2.5f, "P,R,R,R,R,R,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Sphinx(400f, 300f, new string[]
						{
							"3,3,2,4,3,4"
						}, 1f, 0.6f, 3.3f, new string[]
						{
							"0,255,145,160,360,200",
							"400,50,300,188,340,110"
						}, new string[]
						{
							"100,600,350,477",
							"75,550,255,435",
							"400,300,500,125",
							"325,525,115,425"
						}, 6f, 20f, new MinMax(2.5f, 3.4f), 0f, false, 4.3f, 0.1f, 200f, 2.4f, "P,R,R,R,R,R,P,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Coffin(200f, new MinMax(0.6f, 1.3f), 8.3f, 300f, 5.5f, 30f, 1f, 0.8f, 16f, new string[]
						{
							"250,0,100,250,-100,200,-200,250,50,-150,0,250,50,-150,250,-250,-50",
							"0,-250,250,100,200,50,250,-150,0,250,-150,50,200,0,250,-100,-250,50,250,-200,100,250,0,-150"
						}, new string[]
						{
							"0,3,0,5,3,-4,0,-4,1,0,0,-5,2,-2,0,-4,3,-3",
							"1,3,-3,0,2,0,-5,4,-1,2,-2,-5,0,1,2,-1,3,-4,2,-3,0,1,-1"
						}, new string[]
						{
							"A,B,C,A,C,B,C,A,B,C,B",
							"A,B,C,B,A,B,C,A,B,C,A,C",
							"A,B,A,B,C,A,B,C,B,A,C"
						}, 430f, 630f, 530f, true, false), new LevelProperties.FlyingGenie.Obelisk(285f, 8, 2.45f, new string[]
						{
							"1,4,2,5,1-4,5,1,3,2-5",
							"3,1,2-5,4,2,3,1-4,2,5",
							"4,1,2,1-4,3,5,1,3,2-5"
						}, 20f, 3f, 300f, new string[0], new string[0], 485f, new string[]
						{
							"R,P,R,R,P"
						}, new string[]
						{
							"45,300,40,290,50,310",
							"295,40,310,50,305,45"
						}, true, false, 5f), new LevelProperties.FlyingGenie.Scan(1f, 0.6f, 2.5f, 2f, 565f, 0.7f, new string[]
						{
							"R,P,R,P"
						}, 605f, -870f), new LevelProperties.FlyingGenie.Bomb(0f, 0f, 0f, 0f, 0f, new string[0], 0f), new LevelProperties.FlyingGenie.Main(1f), new LevelProperties.FlyingGenie.Skull(new MinMax(2.5f, 5.4f), 575f, 2), new LevelProperties.FlyingGenie.Bullets(635f, new string[]
						{
							"5,4,4",
							"3,4,6",
							"4,3,6",
							"4,5,4",
							"3,6,4"
						}, 0.55f, 325f, 44f, 4, 0.65f, 335f, new MinMax(4f, 6f), 1.75f, 4, 0.6f, 225f, new MinMax(2.75f, 2.75f), "R,R,R,P", 145f, 100f)));
						list.Add(new LevelProperties.FlyingGenie.State(0.6f, new LevelProperties.FlyingGenie.Pattern[][]
						{
							new LevelProperties.FlyingGenie.Pattern[0]
						}, LevelProperties.FlyingGenie.States.Marionette, new LevelProperties.FlyingGenie.Pyramids(0.9f, 1f, 1.05f, new string[]
						{
							"3,3.4,2.5,4,2.8,2,3.4",
							"3.2,2.6,3.5,2.3,3,2.7,2"
						}, new string[]
						{
							"2,3,1,2,1,3,1,2,3",
							"1,2,3,2,1,3,2,3,1,3"
						}, 320f), new LevelProperties.FlyingGenie.GemStone(350f, 1f, new string[]
						{
							"2.7,3,2.5,3.5,2.6,4,3.3,2.5,3.1,4.1,2.7,3.6,2.8"
						}, 1, "R"), new LevelProperties.FlyingGenie.Swords(600f, 1f, 0.9f, 2.4f, new string[]
						{
							"650-50,650-650,350-50,350-650,50-50,50-650,50-300,50-500",
							"650-650,650-50,350-650-350-50,50-650,50-50,50-500,50-300"
						}, 2.5f, 0f, "P,R,R,R,R,P,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Gems(600f, 400f, new MinMax(0.11f, 0.25f), new MinMax(1.5f, 2.5f), new string[]
						{
							"0,200,-150,25,300,45,400,0,100,-350,-150,25,200,-200,0,400,-50,-400,0,50,-100,15,300,-300,0,-100,0,-400,25,-100,-250,0,50,-400,150,0,350",
							"50,150,-100,0,300,0,-300,-50,15,100,400,0,-200,250,0,-400,175,0,-45,0,300,-75,15,50,-200,30,350",
							"0,200,-100,400,-100,0,45,100,-400,0,250,-175,45,-60,0,225,-100,15,450,165,-40,0,-450,80,150,-225,-68"
						}, new string[]
						{
							"0,100,25,125,-40,0,50,-50,150",
							"50,0,-50,200,150,-100,0,-150"
						}, 8f, 7f, 0f, 2.5f, "P,R,R,R,R,R,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Sphinx(400f, 300f, new string[]
						{
							"3,3,2,4,3,4"
						}, 1f, 0.6f, 3.3f, new string[]
						{
							"0,255,145,160,360,200",
							"400,50,300,188,340,110"
						}, new string[]
						{
							"100,600,350,477",
							"75,550,255,435",
							"400,300,500,125",
							"325,525,115,425"
						}, 6f, 20f, new MinMax(2.5f, 3.4f), 0f, false, 4.3f, 0.1f, 200f, 2.4f, "P,R,R,R,R,R,P,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Coffin(200f, new MinMax(0.6f, 1.3f), 8.3f, 300f, 5.5f, 30f, 1f, 0.8f, 16f, new string[]
						{
							"250,0,100,250,-100,200,-200,250,50,-150,0,250,50,-150,250,-250,-50",
							"0,-250,250,100,200,50,250,-150,0,250,-150,50,200,0,250,-100,-250,50,250,-200,100,250,0,-150"
						}, new string[]
						{
							"0,3,0,5,3,-4,0,-4,1,0,0,-5,2,-2,0,-4,3,-3",
							"1,3,-3,0,2,0,-5,4,-1,2,-2,-5,0,1,2,-1,3,-4,2,-3,0,1,-1"
						}, new string[]
						{
							"A,B,C,A,C,B,C,A,B,C,B",
							"A,B,C,B,A,B,C,A,B,C,A,C",
							"A,B,A,B,C,A,B,C,B,A,C"
						}, 430f, 630f, 530f, true, false), new LevelProperties.FlyingGenie.Obelisk(285f, 8, 2.45f, new string[]
						{
							"1,4,2,5,1-4,5,1,3,2-5",
							"3,1,2-5,4,2,3,1-4,2,5",
							"4,1,2,1-4,3,5,1,3,2-5"
						}, 20f, 3f, 300f, new string[0], new string[0], 485f, new string[]
						{
							"R,P,R,R,P"
						}, new string[]
						{
							"45,300,40,290,50,310",
							"295,40,310,50,305,45"
						}, true, false, 5f), new LevelProperties.FlyingGenie.Scan(1f, 0.6f, 2.5f, 2f, 565f, 0.7f, new string[]
						{
							"R,P,R,P"
						}, 605f, -870f), new LevelProperties.FlyingGenie.Bomb(0f, 0f, 0f, 0f, 0f, new string[0], 0f), new LevelProperties.FlyingGenie.Main(1f), new LevelProperties.FlyingGenie.Skull(new MinMax(2.5f, 5.4f), 575f, 2), new LevelProperties.FlyingGenie.Bullets(635f, new string[]
						{
							"5,4,4",
							"3,4,6",
							"4,3,6",
							"4,5,4",
							"3,6,4"
						}, 0.55f, 325f, 44f, 4, 0.65f, 335f, new MinMax(4f, 6f), 1.75f, 4, 0.6f, 225f, new MinMax(2.75f, 2.75f), "R,R,R,P", 145f, 100f)));
						list.Add(new LevelProperties.FlyingGenie.State(0.25f, new LevelProperties.FlyingGenie.Pattern[][]
						{
							new LevelProperties.FlyingGenie.Pattern[0]
						}, LevelProperties.FlyingGenie.States.Giant, new LevelProperties.FlyingGenie.Pyramids(0.9f, 1f, 1.05f, new string[]
						{
							"3,3.4,2.5,4,2.8,2,3.4",
							"3.2,2.6,3.5,2.3,3,2.7,2"
						}, new string[]
						{
							"2,3,1,2,1,3,1,2,3",
							"1,2,3,2,1,3,2,3,1,3"
						}, 320f), new LevelProperties.FlyingGenie.GemStone(350f, 1f, new string[]
						{
							"2.7,3,2.5,3.5,2.6,4,3.3,2.5,3.1,4.1,2.7,3.6,2.8"
						}, 1, "R"), new LevelProperties.FlyingGenie.Swords(600f, 1f, 0.9f, 2.4f, new string[]
						{
							"650-50,650-650,350-50,350-650,50-50,50-650,50-300,50-500",
							"650-650,650-50,350-650-350-50,50-650,50-50,50-500,50-300"
						}, 2.5f, 0f, "P,R,R,R,R,P,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Gems(600f, 400f, new MinMax(0.11f, 0.25f), new MinMax(1.5f, 2.5f), new string[]
						{
							"0,200,-150,25,300,45,400,0,100,-350,-150,25,200,-200,0,400,-50,-400,0,50,-100,15,300,-300,0,-100,0,-400,25,-100,-250,0,50,-400,150,0,350",
							"50,150,-100,0,300,0,-300,-50,15,100,400,0,-200,250,0,-400,175,0,-45,0,300,-75,15,50,-200,30,350",
							"0,200,-100,400,-100,0,45,100,-400,0,250,-175,45,-60,0,225,-100,15,450,165,-40,0,-450,80,150,-225,-68"
						}, new string[]
						{
							"0,100,25,125,-40,0,50,-50,150",
							"50,0,-50,200,150,-100,0,-150"
						}, 8f, 7f, 0f, 2.5f, "P,R,R,R,R,R,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Sphinx(400f, 300f, new string[]
						{
							"3,3,2,4,3,4"
						}, 1f, 0.6f, 3.3f, new string[]
						{
							"0,255,145,160,360,200",
							"400,50,300,188,340,110"
						}, new string[]
						{
							"100,600,350,477",
							"75,550,255,435",
							"400,300,500,125",
							"325,525,115,425"
						}, 6f, 20f, new MinMax(2.5f, 3.4f), 0f, false, 4.3f, 0.1f, 200f, 2.4f, "P,R,R,R,R,R,P,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Coffin(200f, new MinMax(0.6f, 1.3f), 8.3f, 300f, 5.5f, 30f, 1f, 0.8f, 16f, new string[]
						{
							"250,0,100,250,-100,200,-200,250,50,-150,0,250,50,-150,250,-250,-50",
							"0,-250,250,100,200,50,250,-150,0,250,-150,50,200,0,250,-100,-250,50,250,-200,100,250,0,-150"
						}, new string[]
						{
							"0,3,0,5,3,-4,0,-4,1,0,0,-5,2,-2,0,-4,3,-3",
							"1,3,-3,0,2,0,-5,4,-1,2,-2,-5,0,1,2,-1,3,-4,2,-3,0,1,-1"
						}, new string[]
						{
							"A,B,C,A,C,B,C,A,B,C,B",
							"A,B,C,B,A,B,C,A,B,C,A,C",
							"A,B,A,B,C,A,B,C,B,A,C"
						}, 430f, 630f, 530f, true, false), new LevelProperties.FlyingGenie.Obelisk(285f, 8, 2.45f, new string[]
						{
							"1,4,2,5,1-4,5,1,3,2-5",
							"3,1,2-5,4,2,3,1-4,2,5",
							"4,1,2,1-4,3,5,1,3,2-5"
						}, 20f, 3f, 300f, new string[0], new string[0], 485f, new string[]
						{
							"R,P,R,R,P"
						}, new string[]
						{
							"45,300,40,290,50,310",
							"295,40,310,50,305,45"
						}, true, false, 5f), new LevelProperties.FlyingGenie.Scan(1f, 0.6f, 2.5f, 2f, 565f, 0.7f, new string[]
						{
							"R,P,R,P"
						}, 605f, -870f), new LevelProperties.FlyingGenie.Bomb(0f, 0f, 0f, 0f, 0f, new string[0], 0f), new LevelProperties.FlyingGenie.Main(1f), new LevelProperties.FlyingGenie.Skull(new MinMax(2.5f, 5.4f), 575f, 2), new LevelProperties.FlyingGenie.Bullets(635f, new string[]
						{
							"5,4,4",
							"3,4,6",
							"4,3,6",
							"4,5,4",
							"3,6,4"
						}, 0.55f, 325f, 44f, 4, 0.65f, 335f, new MinMax(4f, 6f), 1.75f, 4, 0.6f, 225f, new MinMax(2.75f, 2.75f), "R,R,R,P", 145f, 100f)));
					}
				}
				else
				{
					hp = 2600;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.FlyingGenie.State(10f, new LevelProperties.FlyingGenie.Pattern[][]
					{
						new LevelProperties.FlyingGenie.Pattern[1]
					}, LevelProperties.FlyingGenie.States.Main, new LevelProperties.FlyingGenie.Pyramids(0.9f, 1f, 0.85f, new string[]
					{
						"3,4,2.5,4.3,3,2,3.4",
						"3.2,2.6,4,2,3,4.5,2.8"
					}, new string[]
					{
						"2,3,1,2,1,3,1,2,3",
						"1,2,3,2,1,3,2,3,1,3"
					}, 320f), new LevelProperties.FlyingGenie.GemStone(350f, 1f, new string[]
					{
						"5.5,4.8,4.6,5.2,4.9,4,5.5,4.7,5.2,5.8,4.4"
					}, 1, "R"), new LevelProperties.FlyingGenie.Swords(600f, 1f, 1f, 2f, new string[]
					{
						"50-50,250-50,450-50,650-50",
						"50-650,50-500,50-300,50-50",
						"50-650,250-650,450-650,650-650",
						"50-50,50-300,50-500,50-650",
						"650-50,450-50,250-50,50-50",
						"50-650,50-500,50-300,50-50",
						"650-650,450-650,250-650,50-650",
						"50-50,50-300,50-500,50-650"
					}, 2.4f, 0f, "P,R,R,R,R,P,R,R,R,R,R"), new LevelProperties.FlyingGenie.Gems(550f, 350f, new MinMax(0.17f, 0.3f), new MinMax(1.8f, 2.7f), new string[]
					{
						"50,150,-100,0,300,0,-300,-50,15,100,400,0,-200,250,0,-400,175,0,-45,0,300,-75,15,50,-200,30,350",
						"0,200,-100,400,-100,0,45,100,-400,0,250,-175,45,-60,0,225,-100,15,450,165,-40,0,-450,80,150,-225,-68",
						"0,200,-150,25,300,45,400,0,100,-350,-150,25,200,-200,0,400,-50,-400,0,50,-100,15,300,-300,0,-100,0,-400,25,-100,-250,0,50,-400,150,0,350"
					}, new string[]
					{
						"0,100,25,125,-40,0,50,-50,150",
						"50,0,-50,200,150,-100,0,-150"
					}, 8f, 7f, 0f, 3f, "P,R,R,R,R,R,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Sphinx(400f, 330f, new string[]
					{
						"2,3,3,2,4"
					}, 1f, 0.65f, 3.3f, new string[]
					{
						"0,255,145,160,360,200",
						"400,50,300,188,340,110"
					}, new string[]
					{
						"100,600,350,477",
						"75,550,255,435",
						"400,300,500,125",
						"325,525,115,425"
					}, 4f, 20f, new MinMax(2.5f, 3.4f), 0f, false, 4.3f, 0.1f, 200f, 2.4f, "P,R,R,R,R,R,P,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Coffin(200f, new MinMax(1.3f, 2.3f), 8.3f, 300f, 4.5f, 30f, 1f, 1.25f, 16f, new string[]
					{
						"0,100,250,-100,250,200,-200,250,50,-150,0,250,50,-150,250,-250",
						"0,-250,100,250,50,-150,0,250,-150,250,50,200,0,-100,250,-250,50,-200,100,250,0,-150"
					}, new string[]
					{
						"0,3,0,5,3,-4,0,-4,1,0,0,-5,2,-2,0,-4,3,-3",
						"1,3,-3,0,2,0,-5,4,-1,2,-2,-5,0,1,2,-1,3,-4,2,-3,0,1,-1"
					}, new string[]
					{
						"A,B,C,A,C,B,C,A,B,C,B",
						"A,B,C,B,A,B,C,A,B,C,A,C",
						"A,B,A,B,C,A,B,C,B,A,C"
					}, 400f, 600f, 500f, true, false), new LevelProperties.FlyingGenie.Obelisk(265f, 6, 2.95f, new string[]
					{
						"1,4,2,5,1-4,5,1,3,2-5",
						"3,1,2-5,4,2,3,1-4,2,5",
						"4,1,2,1-4,3,5,1,3,2-5"
					}, 20f, 3f, 300f, new string[]
					{
						"40,300"
					}, new string[]
					{
						"R,R,P,R,R,R,P"
					}, 435f, new string[]
					{
						"R,P,R,R,P"
					}, new string[]
					{
						"45,300,40,290,50,310",
						"295,40,310,50,305,45"
					}, true, false, 5f), new LevelProperties.FlyingGenie.Scan(1f, 0.6f, 3f, 2f, 515f, 1f, new string[]
					{
						"R,P,R,P"
					}, 505f, -754f), new LevelProperties.FlyingGenie.Bomb(200f, 1f, 1f, 1.5f, 1.2f, new string[]
					{
						"R:200-400,D:400-550,P:100-300",
						"R:600-600,R:200-350,R:300-500"
					}, 5f), new LevelProperties.FlyingGenie.Main(1f), new LevelProperties.FlyingGenie.Skull(new MinMax(1f, 2f), 575f, 1), new LevelProperties.FlyingGenie.Bullets(590f, new string[]
					{
						"3,5",
						"4,4",
						"5,3",
						"4,4",
						"3,5",
						"5,3"
					}, 0.7f, 275f, 44f, 4, 0.75f, 300f, new MinMax(4f, 6f), 1.75f, 3, 0.8f, 200f, new MinMax(2.75f, 2.75f), "R,R,R,P", 125f, 100f)));
					list.Add(new LevelProperties.FlyingGenie.State(0.85f, new LevelProperties.FlyingGenie.Pattern[][]
					{
						new LevelProperties.FlyingGenie.Pattern[0]
					}, LevelProperties.FlyingGenie.States.Disappear, new LevelProperties.FlyingGenie.Pyramids(0.9f, 1f, 0.85f, new string[]
					{
						"3,4,2.5,4.3,3,2,3.4",
						"3.2,2.6,4,2,3,4.5,2.8"
					}, new string[]
					{
						"2,3,1,2,1,3,1,2,3",
						"1,2,3,2,1,3,2,3,1,3"
					}, 320f), new LevelProperties.FlyingGenie.GemStone(350f, 1f, new string[]
					{
						"5.5,4.8,4.6,5.2,4.9,4,5.5,4.7,5.2,5.8,4.4"
					}, 1, "R"), new LevelProperties.FlyingGenie.Swords(600f, 1f, 1f, 2f, new string[]
					{
						"50-50,250-50,450-50,650-50",
						"50-650,50-500,50-300,50-50",
						"50-650,250-650,450-650,650-650",
						"50-50,50-300,50-500,50-650",
						"650-50,450-50,250-50,50-50",
						"50-650,50-500,50-300,50-50",
						"650-650,450-650,250-650,50-650",
						"50-50,50-300,50-500,50-650"
					}, 2.4f, 0f, "P,R,R,R,R,P,R,R,R,R,R"), new LevelProperties.FlyingGenie.Gems(550f, 350f, new MinMax(0.17f, 0.3f), new MinMax(1.8f, 2.7f), new string[]
					{
						"50,150,-100,0,300,0,-300,-50,15,100,400,0,-200,250,0,-400,175,0,-45,0,300,-75,15,50,-200,30,350",
						"0,200,-100,400,-100,0,45,100,-400,0,250,-175,45,-60,0,225,-100,15,450,165,-40,0,-450,80,150,-225,-68",
						"0,200,-150,25,300,45,400,0,100,-350,-150,25,200,-200,0,400,-50,-400,0,50,-100,15,300,-300,0,-100,0,-400,25,-100,-250,0,50,-400,150,0,350"
					}, new string[]
					{
						"0,100,25,125,-40,0,50,-50,150",
						"50,0,-50,200,150,-100,0,-150"
					}, 8f, 7f, 0f, 3f, "P,R,R,R,R,R,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Sphinx(400f, 330f, new string[]
					{
						"2,3,3,2,4"
					}, 1f, 0.65f, 3.3f, new string[]
					{
						"0,255,145,160,360,200",
						"400,50,300,188,340,110"
					}, new string[]
					{
						"100,600,350,477",
						"75,550,255,435",
						"400,300,500,125",
						"325,525,115,425"
					}, 4f, 20f, new MinMax(2.5f, 3.4f), 0f, false, 4.3f, 0.1f, 200f, 2.4f, "P,R,R,R,R,R,P,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Coffin(200f, new MinMax(1.3f, 2.3f), 8.3f, 300f, 4.5f, 30f, 1f, 1.25f, 16f, new string[]
					{
						"0,100,250,-100,250,200,-200,250,50,-150,0,250,50,-150,250,-250",
						"0,-250,100,250,50,-150,0,250,-150,250,50,200,0,-100,250,-250,50,-200,100,250,0,-150"
					}, new string[]
					{
						"0,3,0,5,3,-4,0,-4,1,0,0,-5,2,-2,0,-4,3,-3",
						"1,3,-3,0,2,0,-5,4,-1,2,-2,-5,0,1,2,-1,3,-4,2,-3,0,1,-1"
					}, new string[]
					{
						"A,B,C,A,C,B,C,A,B,C,B",
						"A,B,C,B,A,B,C,A,B,C,A,C",
						"A,B,A,B,C,A,B,C,B,A,C"
					}, 400f, 600f, 500f, true, false), new LevelProperties.FlyingGenie.Obelisk(265f, 6, 2.95f, new string[]
					{
						"1,4,2,5,1-4,5,1,3,2-5",
						"3,1,2-5,4,2,3,1-4,2,5",
						"4,1,2,1-4,3,5,1,3,2-5"
					}, 20f, 3f, 300f, new string[]
					{
						"40,300"
					}, new string[]
					{
						"R,R,P,R,R,R,P"
					}, 435f, new string[]
					{
						"R,P,R,R,P"
					}, new string[]
					{
						"45,300,40,290,50,310",
						"295,40,310,50,305,45"
					}, true, false, 5f), new LevelProperties.FlyingGenie.Scan(1f, 0.6f, 3f, 2f, 515f, 1f, new string[]
					{
						"R,P,R,P"
					}, 505f, -754f), new LevelProperties.FlyingGenie.Bomb(200f, 1f, 1f, 1.5f, 1.2f, new string[]
					{
						"R:200-400,D:400-550,P:100-300",
						"R:600-600,R:200-350,R:300-500"
					}, 5f), new LevelProperties.FlyingGenie.Main(1f), new LevelProperties.FlyingGenie.Skull(new MinMax(1f, 2f), 575f, 1), new LevelProperties.FlyingGenie.Bullets(590f, new string[]
					{
						"3,5",
						"4,4",
						"5,3",
						"4,4",
						"3,5",
						"5,3"
					}, 0.7f, 275f, 44f, 4, 0.75f, 300f, new MinMax(4f, 6f), 1.75f, 3, 0.8f, 200f, new MinMax(2.75f, 2.75f), "R,R,R,P", 125f, 100f)));
					list.Add(new LevelProperties.FlyingGenie.State(0.6f, new LevelProperties.FlyingGenie.Pattern[][]
					{
						new LevelProperties.FlyingGenie.Pattern[0]
					}, LevelProperties.FlyingGenie.States.Marionette, new LevelProperties.FlyingGenie.Pyramids(0.9f, 1f, 0.85f, new string[]
					{
						"3,4,2.5,4.3,3,2,3.4",
						"3.2,2.6,4,2,3,4.5,2.8"
					}, new string[]
					{
						"2,3,1,2,1,3,1,2,3",
						"1,2,3,2,1,3,2,3,1,3"
					}, 320f), new LevelProperties.FlyingGenie.GemStone(350f, 1f, new string[]
					{
						"5.5,4.8,4.6,5.2,4.9,4,5.5,4.7,5.2,5.8,4.4"
					}, 1, "R"), new LevelProperties.FlyingGenie.Swords(600f, 1f, 1f, 2f, new string[]
					{
						"50-50,250-50,450-50,650-50",
						"50-650,50-500,50-300,50-50",
						"50-650,250-650,450-650,650-650",
						"50-50,50-300,50-500,50-650",
						"650-50,450-50,250-50,50-50",
						"50-650,50-500,50-300,50-50",
						"650-650,450-650,250-650,50-650",
						"50-50,50-300,50-500,50-650"
					}, 2.4f, 0f, "P,R,R,R,R,P,R,R,R,R,R"), new LevelProperties.FlyingGenie.Gems(550f, 350f, new MinMax(0.17f, 0.3f), new MinMax(1.8f, 2.7f), new string[]
					{
						"50,150,-100,0,300,0,-300,-50,15,100,400,0,-200,250,0,-400,175,0,-45,0,300,-75,15,50,-200,30,350",
						"0,200,-100,400,-100,0,45,100,-400,0,250,-175,45,-60,0,225,-100,15,450,165,-40,0,-450,80,150,-225,-68",
						"0,200,-150,25,300,45,400,0,100,-350,-150,25,200,-200,0,400,-50,-400,0,50,-100,15,300,-300,0,-100,0,-400,25,-100,-250,0,50,-400,150,0,350"
					}, new string[]
					{
						"0,100,25,125,-40,0,50,-50,150",
						"50,0,-50,200,150,-100,0,-150"
					}, 8f, 7f, 0f, 3f, "P,R,R,R,R,R,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Sphinx(400f, 330f, new string[]
					{
						"2,3,3,2,4"
					}, 1f, 0.65f, 3.3f, new string[]
					{
						"0,255,145,160,360,200",
						"400,50,300,188,340,110"
					}, new string[]
					{
						"100,600,350,477",
						"75,550,255,435",
						"400,300,500,125",
						"325,525,115,425"
					}, 4f, 20f, new MinMax(2.5f, 3.4f), 0f, false, 4.3f, 0.1f, 200f, 2.4f, "P,R,R,R,R,R,P,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Coffin(200f, new MinMax(1.3f, 2.3f), 8.3f, 300f, 4.5f, 30f, 1f, 1.25f, 16f, new string[]
					{
						"0,100,250,-100,250,200,-200,250,50,-150,0,250,50,-150,250,-250",
						"0,-250,100,250,50,-150,0,250,-150,250,50,200,0,-100,250,-250,50,-200,100,250,0,-150"
					}, new string[]
					{
						"0,3,0,5,3,-4,0,-4,1,0,0,-5,2,-2,0,-4,3,-3",
						"1,3,-3,0,2,0,-5,4,-1,2,-2,-5,0,1,2,-1,3,-4,2,-3,0,1,-1"
					}, new string[]
					{
						"A,B,C,A,C,B,C,A,B,C,B",
						"A,B,C,B,A,B,C,A,B,C,A,C",
						"A,B,A,B,C,A,B,C,B,A,C"
					}, 400f, 600f, 500f, true, false), new LevelProperties.FlyingGenie.Obelisk(265f, 6, 2.95f, new string[]
					{
						"1,4,2,5,1-4,5,1,3,2-5",
						"3,1,2-5,4,2,3,1-4,2,5",
						"4,1,2,1-4,3,5,1,3,2-5"
					}, 20f, 3f, 300f, new string[]
					{
						"40,300"
					}, new string[]
					{
						"R,R,P,R,R,R,P"
					}, 435f, new string[]
					{
						"R,P,R,R,P"
					}, new string[]
					{
						"45,300,40,290,50,310",
						"295,40,310,50,305,45"
					}, true, false, 5f), new LevelProperties.FlyingGenie.Scan(1f, 0.6f, 3f, 2f, 515f, 1f, new string[]
					{
						"R,P,R,P"
					}, 505f, -754f), new LevelProperties.FlyingGenie.Bomb(200f, 1f, 1f, 1.5f, 1.2f, new string[]
					{
						"R:200-400,D:400-550,P:100-300",
						"R:600-600,R:200-350,R:300-500"
					}, 5f), new LevelProperties.FlyingGenie.Main(1f), new LevelProperties.FlyingGenie.Skull(new MinMax(1f, 2f), 575f, 1), new LevelProperties.FlyingGenie.Bullets(590f, new string[]
					{
						"3,5",
						"4,4",
						"5,3",
						"4,4",
						"3,5",
						"5,3"
					}, 0.7f, 275f, 44f, 4, 0.75f, 300f, new MinMax(4f, 6f), 1.75f, 3, 0.8f, 200f, new MinMax(2.75f, 2.75f), "R,R,R,P", 125f, 100f)));
					list.Add(new LevelProperties.FlyingGenie.State(0.25f, new LevelProperties.FlyingGenie.Pattern[][]
					{
						new LevelProperties.FlyingGenie.Pattern[0]
					}, LevelProperties.FlyingGenie.States.Giant, new LevelProperties.FlyingGenie.Pyramids(0.9f, 1f, 0.85f, new string[]
					{
						"3,4,2.5,4.3,3,2,3.4",
						"3.2,2.6,4,2,3,4.5,2.8"
					}, new string[]
					{
						"2,3,1,2,1,3,1,2,3",
						"1,2,3,2,1,3,2,3,1,3"
					}, 320f), new LevelProperties.FlyingGenie.GemStone(350f, 1f, new string[]
					{
						"5.5,4.8,4.6,5.2,4.9,4,5.5,4.7,5.2,5.8,4.4"
					}, 1, "R"), new LevelProperties.FlyingGenie.Swords(600f, 1f, 1f, 2f, new string[]
					{
						"50-50,250-50,450-50,650-50",
						"50-650,50-500,50-300,50-50",
						"50-650,250-650,450-650,650-650",
						"50-50,50-300,50-500,50-650",
						"650-50,450-50,250-50,50-50",
						"50-650,50-500,50-300,50-50",
						"650-650,450-650,250-650,50-650",
						"50-50,50-300,50-500,50-650"
					}, 2.4f, 0f, "P,R,R,R,R,P,R,R,R,R,R"), new LevelProperties.FlyingGenie.Gems(550f, 350f, new MinMax(0.17f, 0.3f), new MinMax(1.8f, 2.7f), new string[]
					{
						"50,150,-100,0,300,0,-300,-50,15,100,400,0,-200,250,0,-400,175,0,-45,0,300,-75,15,50,-200,30,350",
						"0,200,-100,400,-100,0,45,100,-400,0,250,-175,45,-60,0,225,-100,15,450,165,-40,0,-450,80,150,-225,-68",
						"0,200,-150,25,300,45,400,0,100,-350,-150,25,200,-200,0,400,-50,-400,0,50,-100,15,300,-300,0,-100,0,-400,25,-100,-250,0,50,-400,150,0,350"
					}, new string[]
					{
						"0,100,25,125,-40,0,50,-50,150",
						"50,0,-50,200,150,-100,0,-150"
					}, 8f, 7f, 0f, 3f, "P,R,R,R,R,R,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Sphinx(400f, 330f, new string[]
					{
						"2,3,3,2,4"
					}, 1f, 0.65f, 3.3f, new string[]
					{
						"0,255,145,160,360,200",
						"400,50,300,188,340,110"
					}, new string[]
					{
						"100,600,350,477",
						"75,550,255,435",
						"400,300,500,125",
						"325,525,115,425"
					}, 4f, 20f, new MinMax(2.5f, 3.4f), 0f, false, 4.3f, 0.1f, 200f, 2.4f, "P,R,R,R,R,R,P,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Coffin(200f, new MinMax(1.3f, 2.3f), 8.3f, 300f, 4.5f, 30f, 1f, 1.25f, 16f, new string[]
					{
						"0,100,250,-100,250,200,-200,250,50,-150,0,250,50,-150,250,-250",
						"0,-250,100,250,50,-150,0,250,-150,250,50,200,0,-100,250,-250,50,-200,100,250,0,-150"
					}, new string[]
					{
						"0,3,0,5,3,-4,0,-4,1,0,0,-5,2,-2,0,-4,3,-3",
						"1,3,-3,0,2,0,-5,4,-1,2,-2,-5,0,1,2,-1,3,-4,2,-3,0,1,-1"
					}, new string[]
					{
						"A,B,C,A,C,B,C,A,B,C,B",
						"A,B,C,B,A,B,C,A,B,C,A,C",
						"A,B,A,B,C,A,B,C,B,A,C"
					}, 400f, 600f, 500f, true, false), new LevelProperties.FlyingGenie.Obelisk(265f, 6, 2.95f, new string[]
					{
						"1,4,2,5,1-4,5,1,3,2-5",
						"3,1,2-5,4,2,3,1-4,2,5",
						"4,1,2,1-4,3,5,1,3,2-5"
					}, 20f, 3f, 300f, new string[]
					{
						"40,300"
					}, new string[]
					{
						"R,R,P,R,R,R,P"
					}, 435f, new string[]
					{
						"R,P,R,R,P"
					}, new string[]
					{
						"45,300,40,290,50,310",
						"295,40,310,50,305,45"
					}, true, false, 5f), new LevelProperties.FlyingGenie.Scan(1f, 0.6f, 3f, 2f, 515f, 1f, new string[]
					{
						"R,P,R,P"
					}, 505f, -754f), new LevelProperties.FlyingGenie.Bomb(200f, 1f, 1f, 1.5f, 1.2f, new string[]
					{
						"R:200-400,D:400-550,P:100-300",
						"R:600-600,R:200-350,R:300-500"
					}, 5f), new LevelProperties.FlyingGenie.Main(1f), new LevelProperties.FlyingGenie.Skull(new MinMax(1f, 2f), 575f, 1), new LevelProperties.FlyingGenie.Bullets(590f, new string[]
					{
						"3,5",
						"4,4",
						"5,3",
						"4,4",
						"3,5",
						"5,3"
					}, 0.7f, 275f, 44f, 4, 0.75f, 300f, new MinMax(4f, 6f), 1.75f, 3, 0.8f, 200f, new MinMax(2.75f, 2.75f), "R,R,R,P", 125f, 100f)));
				}
			}
			else
			{
				hp = 2200;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.FlyingGenie.State(10f, new LevelProperties.FlyingGenie.Pattern[][]
				{
					new LevelProperties.FlyingGenie.Pattern[1]
				}, LevelProperties.FlyingGenie.States.Main, new LevelProperties.FlyingGenie.Pyramids(0.9f, 1f, 1f, new string[]
				{
					"3,4,2.5,4.3,3,2,3.4"
				}, new string[]
				{
					"2,3,1,2,1,3,1,2,3"
				}, 320f), new LevelProperties.FlyingGenie.GemStone(350f, 1f, new string[]
				{
					"1,3,2,2,1,1.5,3,1,3,1.5"
				}, 1, string.Empty), new LevelProperties.FlyingGenie.Swords(550f, 1f, 0.9f, 2.3f, new string[]
				{
					"650-650,350-650,50-650,50-500,50-300,50-50,350-50,650-50",
					"650-50,350-50,50-50,50-300,50-500,50-650,350-650,650-650"
				}, 3f, 0f, "P,R,R,R,R,P,R,R,R,R,R"), new LevelProperties.FlyingGenie.Gems(550f, 350f, new MinMax(0.25f, 0.4f), new MinMax(2.5f, 3.5f), new string[]
				{
					"0,200,-150,400,-200,0,145,60,-400,0,350,-275,45,-60,0,375,-400,15,450,105,-80,0,-450,80,250,-225,-68",
					"50,250,-300,0,300,0,-350,-50,15,100,430,0,-250,250,0,-400,175,0,-45,0,300,-75,15,-50,-200,30,350"
				}, new string[]
				{
					"0,50,25,-75,40,0,50,-50,100",
					"50,0,-50,200,150,-100,0,-150"
				}, 8f, 7f, 0f, 3f, "P,R,R,R,R,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Sphinx(400f, 300f, new string[]
				{
					"2,3,3,2,3"
				}, 1f, 0.75f, 3.6f, new string[]
				{
					"0,255,145,160,360,200",
					"400,50,300,188,340,110"
				}, new string[]
				{
					"100,600,350,477",
					"75,550,255,435",
					"400,300,500,125",
					"325,525,115,425"
				}, 4f, 20f, new MinMax(0.7f, 1.4f), 0f, false, 4.5f, 0.1f, 200f, 2.4f, "P,R,R,R,R,R,P,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Coffin(100f, new MinMax(1.5f, 2.5f), 8.3f, 300f, 15f, 30f, 1f, 1.75f, 16f, new string[]
				{
					"100,250,-100,200,-200,50,250,-150,0,250,50,-150,250,-250",
					"0,-250,100,250,50,-150,0,250,-150,250,50,200,0,-100,250,-250,50,-200,100,250,0,-150"
				}, new string[]
				{
					"0,3,0,5,3,-4,0,-4,1,0,0,-5,2,-2,0,-4,3,-3",
					"1,3,-3,0,2,0,-5,4,-1,2,-2,-5,0,1,2,-1,3,-4,2,-3,0,1,-1"
				}, new string[]
				{
					"A,B,C,A,C,B,C,A,B,C,B",
					"A,B,C,B,A,B,C,A,B,C,A,C",
					"A,B,A,B,C,A,B,C,B,A,C"
				}, 350f, 550f, 450f, true, false), new LevelProperties.FlyingGenie.Obelisk(325f, 8, 2.25f, new string[]
				{
					"1,4,2,5,1-4,5,1,3,2-5",
					"3,1,2-5,4,2,3,1-4,2,5",
					"4,1,2,1-4,3,5,1,3,2-5"
				}, 20f, 3f, 300f, new string[0], new string[]
				{
					"R,P,R,R,P"
				}, 475f, new string[]
				{
					"R,P,R,R,P"
				}, new string[]
				{
					"45,300,40,290,50,310",
					"295,40,310,50,305,45"
				}, false, false, 5f), new LevelProperties.FlyingGenie.Scan(1f, 1f, 0f, 0f, 0f, 0f, new string[0], 0f, 0f), new LevelProperties.FlyingGenie.Bomb(0f, 0f, 0f, 0f, 0f, new string[0], 0f), new LevelProperties.FlyingGenie.Main(0f), new LevelProperties.FlyingGenie.Skull(new MinMax(3f, 5.4f), 575f, 0), new LevelProperties.FlyingGenie.Bullets(555f, new string[]
				{
					"3",
					"4",
					"3",
					"5",
					"2",
					"3",
					"5"
				}, 0.8f, 300f, 45f, 4, 0.6f, 275f, new MinMax(9999f, 9999f), 2f, 0, 1f, 200f, new MinMax(2.75f, 2.75f), "R,R,P", 125f, 100f)));
				list.Add(new LevelProperties.FlyingGenie.State(0.8f, new LevelProperties.FlyingGenie.Pattern[][]
				{
					new LevelProperties.FlyingGenie.Pattern[0]
				}, LevelProperties.FlyingGenie.States.Disappear, new LevelProperties.FlyingGenie.Pyramids(0.9f, 1f, 1f, new string[]
				{
					"3,4,2.5,4.3,3,2,3.4"
				}, new string[]
				{
					"2,3,1,2,1,3,1,2,3"
				}, 320f), new LevelProperties.FlyingGenie.GemStone(350f, 1f, new string[]
				{
					"1,3,2,2,1,1.5,3,1,3,1.5"
				}, 1, string.Empty), new LevelProperties.FlyingGenie.Swords(550f, 1f, 0.9f, 2.3f, new string[]
				{
					"650-650,350-650,50-650,50-500,50-300,50-50,350-50,650-50",
					"650-50,350-50,50-50,50-300,50-500,50-650,350-650,650-650"
				}, 3f, 0f, "P,R,R,R,R,P,R,R,R,R,R"), new LevelProperties.FlyingGenie.Gems(550f, 350f, new MinMax(0.25f, 0.4f), new MinMax(2.5f, 3.5f), new string[]
				{
					"0,200,-150,400,-200,0,145,60,-400,0,350,-275,45,-60,0,375,-400,15,450,105,-80,0,-450,80,250,-225,-68",
					"50,250,-300,0,300,0,-350,-50,15,100,430,0,-250,250,0,-400,175,0,-45,0,300,-75,15,-50,-200,30,350"
				}, new string[]
				{
					"0,50,25,-75,40,0,50,-50,100",
					"50,0,-50,200,150,-100,0,-150"
				}, 8f, 7f, 0f, 3f, "P,R,R,R,R,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Sphinx(400f, 300f, new string[]
				{
					"2,3,3,2,3"
				}, 1f, 0.75f, 3.6f, new string[]
				{
					"0,255,145,160,360,200",
					"400,50,300,188,340,110"
				}, new string[]
				{
					"100,600,350,477",
					"75,550,255,435",
					"400,300,500,125",
					"325,525,115,425"
				}, 4f, 20f, new MinMax(0.7f, 1.4f), 0f, false, 4.5f, 0.1f, 200f, 2.4f, "P,R,R,R,R,R,P,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Coffin(100f, new MinMax(1.5f, 2.5f), 8.3f, 300f, 15f, 30f, 1f, 1.75f, 16f, new string[]
				{
					"100,250,-100,200,-200,50,250,-150,0,250,50,-150,250,-250",
					"0,-250,100,250,50,-150,0,250,-150,250,50,200,0,-100,250,-250,50,-200,100,250,0,-150"
				}, new string[]
				{
					"0,3,0,5,3,-4,0,-4,1,0,0,-5,2,-2,0,-4,3,-3",
					"1,3,-3,0,2,0,-5,4,-1,2,-2,-5,0,1,2,-1,3,-4,2,-3,0,1,-1"
				}, new string[]
				{
					"A,B,C,A,C,B,C,A,B,C,B",
					"A,B,C,B,A,B,C,A,B,C,A,C",
					"A,B,A,B,C,A,B,C,B,A,C"
				}, 350f, 550f, 450f, true, false), new LevelProperties.FlyingGenie.Obelisk(325f, 8, 2.25f, new string[]
				{
					"1,4,2,5,1-4,5,1,3,2-5",
					"3,1,2-5,4,2,3,1-4,2,5",
					"4,1,2,1-4,3,5,1,3,2-5"
				}, 20f, 3f, 300f, new string[0], new string[]
				{
					"R,P,R,R,P"
				}, 475f, new string[]
				{
					"R,P,R,R,P"
				}, new string[]
				{
					"45,300,40,290,50,310",
					"295,40,310,50,305,45"
				}, false, false, 5f), new LevelProperties.FlyingGenie.Scan(1f, 1f, 0f, 0f, 0f, 0f, new string[0], 0f, 0f), new LevelProperties.FlyingGenie.Bomb(0f, 0f, 0f, 0f, 0f, new string[0], 0f), new LevelProperties.FlyingGenie.Main(0f), new LevelProperties.FlyingGenie.Skull(new MinMax(3f, 5.4f), 575f, 0), new LevelProperties.FlyingGenie.Bullets(555f, new string[]
				{
					"3",
					"4",
					"3",
					"5",
					"2",
					"3",
					"5"
				}, 0.8f, 300f, 45f, 4, 0.6f, 275f, new MinMax(9999f, 9999f), 2f, 0, 1f, 200f, new MinMax(2.75f, 2.75f), "R,R,P", 125f, 100f)));
				list.Add(new LevelProperties.FlyingGenie.State(0.4f, new LevelProperties.FlyingGenie.Pattern[][]
				{
					new LevelProperties.FlyingGenie.Pattern[0]
				}, LevelProperties.FlyingGenie.States.Marionette, new LevelProperties.FlyingGenie.Pyramids(0.9f, 1f, 1f, new string[]
				{
					"3,4,2.5,4.3,3,2,3.4"
				}, new string[]
				{
					"2,3,1,2,1,3,1,2,3"
				}, 320f), new LevelProperties.FlyingGenie.GemStone(350f, 1f, new string[]
				{
					"1,3,2,2,1,1.5,3,1,3,1.5"
				}, 1, string.Empty), new LevelProperties.FlyingGenie.Swords(550f, 1f, 0.9f, 2.3f, new string[]
				{
					"650-650,350-650,50-650,50-500,50-300,50-50,350-50,650-50",
					"650-50,350-50,50-50,50-300,50-500,50-650,350-650,650-650"
				}, 3f, 0f, "P,R,R,R,R,P,R,R,R,R,R"), new LevelProperties.FlyingGenie.Gems(550f, 350f, new MinMax(0.25f, 0.4f), new MinMax(2.5f, 3.5f), new string[]
				{
					"0,200,-150,400,-200,0,145,60,-400,0,350,-275,45,-60,0,375,-400,15,450,105,-80,0,-450,80,250,-225,-68",
					"50,250,-300,0,300,0,-350,-50,15,100,430,0,-250,250,0,-400,175,0,-45,0,300,-75,15,-50,-200,30,350"
				}, new string[]
				{
					"0,50,25,-75,40,0,50,-50,100",
					"50,0,-50,200,150,-100,0,-150"
				}, 8f, 7f, 0f, 3f, "P,R,R,R,R,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Sphinx(400f, 300f, new string[]
				{
					"2,3,3,2,3"
				}, 1f, 0.75f, 3.6f, new string[]
				{
					"0,255,145,160,360,200",
					"400,50,300,188,340,110"
				}, new string[]
				{
					"100,600,350,477",
					"75,550,255,435",
					"400,300,500,125",
					"325,525,115,425"
				}, 4f, 20f, new MinMax(0.7f, 1.4f), 0f, false, 4.5f, 0.1f, 200f, 2.4f, "P,R,R,R,R,R,P,R,R,R,R,R,R,R"), new LevelProperties.FlyingGenie.Coffin(100f, new MinMax(1.5f, 2.5f), 8.3f, 300f, 15f, 30f, 1f, 1.75f, 16f, new string[]
				{
					"100,250,-100,200,-200,50,250,-150,0,250,50,-150,250,-250",
					"0,-250,100,250,50,-150,0,250,-150,250,50,200,0,-100,250,-250,50,-200,100,250,0,-150"
				}, new string[]
				{
					"0,3,0,5,3,-4,0,-4,1,0,0,-5,2,-2,0,-4,3,-3",
					"1,3,-3,0,2,0,-5,4,-1,2,-2,-5,0,1,2,-1,3,-4,2,-3,0,1,-1"
				}, new string[]
				{
					"A,B,C,A,C,B,C,A,B,C,B",
					"A,B,C,B,A,B,C,A,B,C,A,C",
					"A,B,A,B,C,A,B,C,B,A,C"
				}, 350f, 550f, 450f, true, false), new LevelProperties.FlyingGenie.Obelisk(325f, 8, 2.25f, new string[]
				{
					"1,4,2,5,1-4,5,1,3,2-5",
					"3,1,2-5,4,2,3,1-4,2,5",
					"4,1,2,1-4,3,5,1,3,2-5"
				}, 20f, 3f, 300f, new string[0], new string[]
				{
					"R,P,R,R,P"
				}, 475f, new string[]
				{
					"R,P,R,R,P"
				}, new string[]
				{
					"45,300,40,290,50,310",
					"295,40,310,50,305,45"
				}, false, false, 5f), new LevelProperties.FlyingGenie.Scan(1f, 1f, 0f, 0f, 0f, 0f, new string[0], 0f, 0f), new LevelProperties.FlyingGenie.Bomb(0f, 0f, 0f, 0f, 0f, new string[0], 0f), new LevelProperties.FlyingGenie.Main(0f), new LevelProperties.FlyingGenie.Skull(new MinMax(3f, 5.4f), 575f, 0), new LevelProperties.FlyingGenie.Bullets(555f, new string[]
				{
					"3",
					"4",
					"3",
					"5",
					"2",
					"3",
					"5"
				}, 0.8f, 300f, 45f, 4, 0.6f, 275f, new MinMax(9999f, 9999f), 2f, 0, 1f, 200f, new MinMax(2.75f, 2.75f), "R,R,P", 125f, 100f)));
			}
			return new LevelProperties.FlyingGenie(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020001B6 RID: 438
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000E0 RID: 224
			// (get) Token: 0x060004E5 RID: 1253 RVA: 0x00028522 File Offset: 0x00026922
			// (set) Token: 0x060004E6 RID: 1254 RVA: 0x0002852A File Offset: 0x0002692A
			private protected LevelProperties.FlyingGenie properties { protected get; private set; }

			// Token: 0x060004E7 RID: 1255 RVA: 0x00028533 File Offset: 0x00026933
			public virtual void LevelInit(LevelProperties.FlyingGenie properties)
			{
				this.properties = properties;
			}

			// Token: 0x060004E8 RID: 1256 RVA: 0x0002853C File Offset: 0x0002693C
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020001B7 RID: 439
		public enum States
		{
			// Token: 0x040008DD RID: 2269
			Main,
			// Token: 0x040008DE RID: 2270
			Generic,
			// Token: 0x040008DF RID: 2271
			Giant,
			// Token: 0x040008E0 RID: 2272
			Marionette,
			// Token: 0x040008E1 RID: 2273
			Disappear
		}

		// Token: 0x020001B8 RID: 440
		public enum Pattern
		{
			// Token: 0x040008E3 RID: 2275
			Default,
			// Token: 0x040008E4 RID: 2276
			Uninitialized
		}

		// Token: 0x020001B9 RID: 441
		public class State : AbstractLevelState<LevelProperties.FlyingGenie.Pattern, LevelProperties.FlyingGenie.States>
		{
			// Token: 0x060004E9 RID: 1257 RVA: 0x00028540 File Offset: 0x00026940
			public State(float healthTrigger, LevelProperties.FlyingGenie.Pattern[][] patterns, LevelProperties.FlyingGenie.States stateName, LevelProperties.FlyingGenie.Pyramids pyramids, LevelProperties.FlyingGenie.GemStone gemStone, LevelProperties.FlyingGenie.Swords swords, LevelProperties.FlyingGenie.Gems gems, LevelProperties.FlyingGenie.Sphinx sphinx, LevelProperties.FlyingGenie.Coffin coffin, LevelProperties.FlyingGenie.Obelisk obelisk, LevelProperties.FlyingGenie.Scan scan, LevelProperties.FlyingGenie.Bomb bomb, LevelProperties.FlyingGenie.Main main, LevelProperties.FlyingGenie.Skull skull, LevelProperties.FlyingGenie.Bullets bullets) : base(healthTrigger, patterns, stateName)
			{
				this.pyramids = pyramids;
				this.gemStone = gemStone;
				this.swords = swords;
				this.gems = gems;
				this.sphinx = sphinx;
				this.coffin = coffin;
				this.obelisk = obelisk;
				this.scan = scan;
				this.bomb = bomb;
				this.main = main;
				this.skull = skull;
				this.bullets = bullets;
			}

			// Token: 0x040008E5 RID: 2277
			public readonly LevelProperties.FlyingGenie.Pyramids pyramids;

			// Token: 0x040008E6 RID: 2278
			public readonly LevelProperties.FlyingGenie.GemStone gemStone;

			// Token: 0x040008E7 RID: 2279
			public readonly LevelProperties.FlyingGenie.Swords swords;

			// Token: 0x040008E8 RID: 2280
			public readonly LevelProperties.FlyingGenie.Gems gems;

			// Token: 0x040008E9 RID: 2281
			public readonly LevelProperties.FlyingGenie.Sphinx sphinx;

			// Token: 0x040008EA RID: 2282
			public readonly LevelProperties.FlyingGenie.Coffin coffin;

			// Token: 0x040008EB RID: 2283
			public readonly LevelProperties.FlyingGenie.Obelisk obelisk;

			// Token: 0x040008EC RID: 2284
			public readonly LevelProperties.FlyingGenie.Scan scan;

			// Token: 0x040008ED RID: 2285
			public readonly LevelProperties.FlyingGenie.Bomb bomb;

			// Token: 0x040008EE RID: 2286
			public readonly LevelProperties.FlyingGenie.Main main;

			// Token: 0x040008EF RID: 2287
			public readonly LevelProperties.FlyingGenie.Skull skull;

			// Token: 0x040008F0 RID: 2288
			public readonly LevelProperties.FlyingGenie.Bullets bullets;
		}

		// Token: 0x020001BA RID: 442
		public class Pyramids : AbstractLevelPropertyGroup
		{
			// Token: 0x060004EA RID: 1258 RVA: 0x000285B6 File Offset: 0x000269B6
			public Pyramids(float speedRotation, float warningDuration, float beamDuration, string[] attackDelayString, string[] pyramidAttackString, float pyramidLoopSize)
			{
				this.speedRotation = speedRotation;
				this.warningDuration = warningDuration;
				this.beamDuration = beamDuration;
				this.attackDelayString = attackDelayString;
				this.pyramidAttackString = pyramidAttackString;
				this.pyramidLoopSize = pyramidLoopSize;
			}

			// Token: 0x040008F1 RID: 2289
			public readonly float speedRotation;

			// Token: 0x040008F2 RID: 2290
			public readonly float warningDuration;

			// Token: 0x040008F3 RID: 2291
			public readonly float beamDuration;

			// Token: 0x040008F4 RID: 2292
			public readonly string[] attackDelayString;

			// Token: 0x040008F5 RID: 2293
			public readonly string[] pyramidAttackString;

			// Token: 0x040008F6 RID: 2294
			public readonly float pyramidLoopSize;
		}

		// Token: 0x020001BB RID: 443
		public class GemStone : AbstractLevelPropertyGroup
		{
			// Token: 0x060004EB RID: 1259 RVA: 0x000285EB File Offset: 0x000269EB
			public GemStone(float bulletSpeed, float warningDuration, string[] attackDelayString, int ringAmount, string pinkString)
			{
				this.bulletSpeed = bulletSpeed;
				this.warningDuration = warningDuration;
				this.attackDelayString = attackDelayString;
				this.ringAmount = ringAmount;
				this.pinkString = pinkString;
			}

			// Token: 0x040008F7 RID: 2295
			public readonly float bulletSpeed;

			// Token: 0x040008F8 RID: 2296
			public readonly float warningDuration;

			// Token: 0x040008F9 RID: 2297
			public readonly string[] attackDelayString;

			// Token: 0x040008FA RID: 2298
			public readonly int ringAmount;

			// Token: 0x040008FB RID: 2299
			public readonly string pinkString;
		}

		// Token: 0x020001BC RID: 444
		public class Swords : AbstractLevelPropertyGroup
		{
			// Token: 0x060004EC RID: 1260 RVA: 0x00028618 File Offset: 0x00026A18
			public Swords(float swordSpeed, float appearDelay, float spawnDelay, float attackDelay, string[] patternPositionStrings, float repeatDelay, float hesitate, string swordPinkString)
			{
				this.swordSpeed = swordSpeed;
				this.appearDelay = appearDelay;
				this.spawnDelay = spawnDelay;
				this.attackDelay = attackDelay;
				this.patternPositionStrings = patternPositionStrings;
				this.repeatDelay = repeatDelay;
				this.hesitate = hesitate;
				this.swordPinkString = swordPinkString;
			}

			// Token: 0x040008FC RID: 2300
			public readonly float swordSpeed;

			// Token: 0x040008FD RID: 2301
			public readonly float appearDelay;

			// Token: 0x040008FE RID: 2302
			public readonly float spawnDelay;

			// Token: 0x040008FF RID: 2303
			public readonly float attackDelay;

			// Token: 0x04000900 RID: 2304
			public readonly string[] patternPositionStrings;

			// Token: 0x04000901 RID: 2305
			public readonly float repeatDelay;

			// Token: 0x04000902 RID: 2306
			public readonly float hesitate;

			// Token: 0x04000903 RID: 2307
			public readonly string swordPinkString;
		}

		// Token: 0x020001BD RID: 445
		public class Gems : AbstractLevelPropertyGroup
		{
			// Token: 0x060004ED RID: 1261 RVA: 0x00028668 File Offset: 0x00026A68
			public Gems(float gemSmallSpeed, float gemBigSpeed, MinMax gemSmallDelayRange, MinMax gemBigDelayRange, string[] gemSmallAimOffset, string[] gemBigAimOffset, float gemSmallAttackDuration, float gemBigAttackDuration, float hesitate, float repeatDelay, string gemPinkString)
			{
				this.gemSmallSpeed = gemSmallSpeed;
				this.gemBigSpeed = gemBigSpeed;
				this.gemSmallDelayRange = gemSmallDelayRange;
				this.gemBigDelayRange = gemBigDelayRange;
				this.gemSmallAimOffset = gemSmallAimOffset;
				this.gemBigAimOffset = gemBigAimOffset;
				this.gemSmallAttackDuration = gemSmallAttackDuration;
				this.gemBigAttackDuration = gemBigAttackDuration;
				this.hesitate = hesitate;
				this.repeatDelay = repeatDelay;
				this.gemPinkString = gemPinkString;
			}

			// Token: 0x04000904 RID: 2308
			public readonly float gemSmallSpeed;

			// Token: 0x04000905 RID: 2309
			public readonly float gemBigSpeed;

			// Token: 0x04000906 RID: 2310
			public readonly MinMax gemSmallDelayRange;

			// Token: 0x04000907 RID: 2311
			public readonly MinMax gemBigDelayRange;

			// Token: 0x04000908 RID: 2312
			public readonly string[] gemSmallAimOffset;

			// Token: 0x04000909 RID: 2313
			public readonly string[] gemBigAimOffset;

			// Token: 0x0400090A RID: 2314
			public readonly float gemSmallAttackDuration;

			// Token: 0x0400090B RID: 2315
			public readonly float gemBigAttackDuration;

			// Token: 0x0400090C RID: 2316
			public readonly float hesitate;

			// Token: 0x0400090D RID: 2317
			public readonly float repeatDelay;

			// Token: 0x0400090E RID: 2318
			public readonly string gemPinkString;
		}

		// Token: 0x020001BE RID: 446
		public class Sphinx : AbstractLevelPropertyGroup
		{
			// Token: 0x060004EE RID: 1262 RVA: 0x000286D0 File Offset: 0x00026AD0
			public Sphinx(float sphinxSpeed, float sphinxSplitSpeed, string[] sphinxCount, float splitDelay, float miniSpawnDelay, float sphinxMainDelay, string[] sphinxAimX, string[] sphinxAimY, float sphinxSpawnNum, float miniHP, MinMax miniHomingDurationRange, float hesitate, bool dieOnCollisionPlayer, float repeatDelay, float miniInitialSpawnDelay, float homingSpeed, float homingRotation, string scarabPinkString)
			{
				this.sphinxSpeed = sphinxSpeed;
				this.sphinxSplitSpeed = sphinxSplitSpeed;
				this.sphinxCount = sphinxCount;
				this.splitDelay = splitDelay;
				this.miniSpawnDelay = miniSpawnDelay;
				this.sphinxMainDelay = sphinxMainDelay;
				this.sphinxAimX = sphinxAimX;
				this.sphinxAimY = sphinxAimY;
				this.sphinxSpawnNum = sphinxSpawnNum;
				this.miniHP = miniHP;
				this.miniHomingDurationRange = miniHomingDurationRange;
				this.hesitate = hesitate;
				this.dieOnCollisionPlayer = dieOnCollisionPlayer;
				this.repeatDelay = repeatDelay;
				this.miniInitialSpawnDelay = miniInitialSpawnDelay;
				this.homingSpeed = homingSpeed;
				this.homingRotation = homingRotation;
				this.scarabPinkString = scarabPinkString;
			}

			// Token: 0x0400090F RID: 2319
			public readonly float sphinxSpeed;

			// Token: 0x04000910 RID: 2320
			public readonly float sphinxSplitSpeed;

			// Token: 0x04000911 RID: 2321
			public readonly string[] sphinxCount;

			// Token: 0x04000912 RID: 2322
			public readonly float splitDelay;

			// Token: 0x04000913 RID: 2323
			public readonly float miniSpawnDelay;

			// Token: 0x04000914 RID: 2324
			public readonly float sphinxMainDelay;

			// Token: 0x04000915 RID: 2325
			public readonly string[] sphinxAimX;

			// Token: 0x04000916 RID: 2326
			public readonly string[] sphinxAimY;

			// Token: 0x04000917 RID: 2327
			public readonly float sphinxSpawnNum;

			// Token: 0x04000918 RID: 2328
			public readonly float miniHP;

			// Token: 0x04000919 RID: 2329
			public readonly MinMax miniHomingDurationRange;

			// Token: 0x0400091A RID: 2330
			public readonly float hesitate;

			// Token: 0x0400091B RID: 2331
			public readonly bool dieOnCollisionPlayer;

			// Token: 0x0400091C RID: 2332
			public readonly float repeatDelay;

			// Token: 0x0400091D RID: 2333
			public readonly float miniInitialSpawnDelay;

			// Token: 0x0400091E RID: 2334
			public readonly float homingSpeed;

			// Token: 0x0400091F RID: 2335
			public readonly float homingRotation;

			// Token: 0x04000920 RID: 2336
			public readonly string scarabPinkString;
		}

		// Token: 0x020001BF RID: 447
		public class Coffin : AbstractLevelPropertyGroup
		{
			// Token: 0x060004EF RID: 1263 RVA: 0x00028770 File Offset: 0x00026B70
			public Coffin(float heartMovement, MinMax heartShotDelayRange, float attackDuration, float heartShotXSpeed, float heartShotYSpeed, float heartLoopYSize, float hesitate, float mummyGenieDelay, float mummyGenieHP, string[] mummyAppearString, string[] mummyGenieDirection, string[] mummyTypeString, float mummyASpeed, float mummyBSpeed, float mummyCSpeed, bool mummyASinWave, bool mummyCSlowdown)
			{
				this.heartMovement = heartMovement;
				this.heartShotDelayRange = heartShotDelayRange;
				this.attackDuration = attackDuration;
				this.heartShotXSpeed = heartShotXSpeed;
				this.heartShotYSpeed = heartShotYSpeed;
				this.heartLoopYSize = heartLoopYSize;
				this.hesitate = hesitate;
				this.mummyGenieDelay = mummyGenieDelay;
				this.mummyGenieHP = mummyGenieHP;
				this.mummyAppearString = mummyAppearString;
				this.mummyGenieDirection = mummyGenieDirection;
				this.mummyTypeString = mummyTypeString;
				this.mummyASpeed = mummyASpeed;
				this.mummyBSpeed = mummyBSpeed;
				this.mummyCSpeed = mummyCSpeed;
				this.mummyASinWave = mummyASinWave;
				this.mummyCSlowdown = mummyCSlowdown;
			}

			// Token: 0x04000921 RID: 2337
			public readonly float heartMovement;

			// Token: 0x04000922 RID: 2338
			public readonly MinMax heartShotDelayRange;

			// Token: 0x04000923 RID: 2339
			public readonly float attackDuration;

			// Token: 0x04000924 RID: 2340
			public readonly float heartShotXSpeed;

			// Token: 0x04000925 RID: 2341
			public readonly float heartShotYSpeed;

			// Token: 0x04000926 RID: 2342
			public readonly float heartLoopYSize;

			// Token: 0x04000927 RID: 2343
			public readonly float hesitate;

			// Token: 0x04000928 RID: 2344
			public readonly float mummyGenieDelay;

			// Token: 0x04000929 RID: 2345
			public readonly float mummyGenieHP;

			// Token: 0x0400092A RID: 2346
			public readonly string[] mummyAppearString;

			// Token: 0x0400092B RID: 2347
			public readonly string[] mummyGenieDirection;

			// Token: 0x0400092C RID: 2348
			public readonly string[] mummyTypeString;

			// Token: 0x0400092D RID: 2349
			public readonly float mummyASpeed;

			// Token: 0x0400092E RID: 2350
			public readonly float mummyBSpeed;

			// Token: 0x0400092F RID: 2351
			public readonly float mummyCSpeed;

			// Token: 0x04000930 RID: 2352
			public readonly bool mummyASinWave;

			// Token: 0x04000931 RID: 2353
			public readonly bool mummyCSlowdown;
		}

		// Token: 0x020001C0 RID: 448
		public class Obelisk : AbstractLevelPropertyGroup
		{
			// Token: 0x060004F0 RID: 1264 RVA: 0x00028808 File Offset: 0x00026C08
			public Obelisk(float obeliskMovementSpeed, int obeliskCount, float obeliskAppearDelay, string[] obeliskGeniePos, float obeliskGenieHP, float obeliskShootDelay, float obeliskShootSpeed, string[] obeliskShotDirection, string[] obeliskPinkString, float bouncerSpeed, string[] bouncerPinkString, string[] bouncerAngleString, bool bounceShotOn, bool normalShotOn, float hesitate)
			{
				this.obeliskMovementSpeed = obeliskMovementSpeed;
				this.obeliskCount = obeliskCount;
				this.obeliskAppearDelay = obeliskAppearDelay;
				this.obeliskGeniePos = obeliskGeniePos;
				this.obeliskGenieHP = obeliskGenieHP;
				this.obeliskShootDelay = obeliskShootDelay;
				this.obeliskShootSpeed = obeliskShootSpeed;
				this.obeliskShotDirection = obeliskShotDirection;
				this.obeliskPinkString = obeliskPinkString;
				this.bouncerSpeed = bouncerSpeed;
				this.bouncerPinkString = bouncerPinkString;
				this.bouncerAngleString = bouncerAngleString;
				this.bounceShotOn = bounceShotOn;
				this.normalShotOn = normalShotOn;
				this.hesitate = hesitate;
			}

			// Token: 0x04000932 RID: 2354
			public readonly float obeliskMovementSpeed;

			// Token: 0x04000933 RID: 2355
			public readonly int obeliskCount;

			// Token: 0x04000934 RID: 2356
			public readonly float obeliskAppearDelay;

			// Token: 0x04000935 RID: 2357
			public readonly string[] obeliskGeniePos;

			// Token: 0x04000936 RID: 2358
			public readonly float obeliskGenieHP;

			// Token: 0x04000937 RID: 2359
			public readonly float obeliskShootDelay;

			// Token: 0x04000938 RID: 2360
			public readonly float obeliskShootSpeed;

			// Token: 0x04000939 RID: 2361
			public readonly string[] obeliskShotDirection;

			// Token: 0x0400093A RID: 2362
			public readonly string[] obeliskPinkString;

			// Token: 0x0400093B RID: 2363
			public readonly float bouncerSpeed;

			// Token: 0x0400093C RID: 2364
			public readonly string[] bouncerPinkString;

			// Token: 0x0400093D RID: 2365
			public readonly string[] bouncerAngleString;

			// Token: 0x0400093E RID: 2366
			public readonly bool bounceShotOn;

			// Token: 0x0400093F RID: 2367
			public readonly bool normalShotOn;

			// Token: 0x04000940 RID: 2368
			public readonly float hesitate;
		}

		// Token: 0x020001C1 RID: 449
		public class Scan : AbstractLevelPropertyGroup
		{
			// Token: 0x060004F1 RID: 1265 RVA: 0x00028890 File Offset: 0x00026C90
			public Scan(float scanDuration, float miniDuration, float movementSpeed, float initialDelay, float bulletSpeed, float shootDelay, string[] bulletString, float miniHP, float transitionDamage)
			{
				this.scanDuration = scanDuration;
				this.miniDuration = miniDuration;
				this.movementSpeed = movementSpeed;
				this.initialDelay = initialDelay;
				this.bulletSpeed = bulletSpeed;
				this.shootDelay = shootDelay;
				this.bulletString = bulletString;
				this.miniHP = miniHP;
				this.transitionDamage = transitionDamage;
			}

			// Token: 0x04000941 RID: 2369
			public readonly float scanDuration;

			// Token: 0x04000942 RID: 2370
			public readonly float miniDuration;

			// Token: 0x04000943 RID: 2371
			public readonly float movementSpeed;

			// Token: 0x04000944 RID: 2372
			public readonly float initialDelay;

			// Token: 0x04000945 RID: 2373
			public readonly float bulletSpeed;

			// Token: 0x04000946 RID: 2374
			public readonly float shootDelay;

			// Token: 0x04000947 RID: 2375
			public readonly string[] bulletString;

			// Token: 0x04000948 RID: 2376
			public readonly float miniHP;

			// Token: 0x04000949 RID: 2377
			public readonly float transitionDamage;
		}

		// Token: 0x020001C2 RID: 450
		public class Bomb : AbstractLevelPropertyGroup
		{
			// Token: 0x060004F2 RID: 1266 RVA: 0x000288E8 File Offset: 0x00026CE8
			public Bomb(float bombSpeed, float bombDelay, float bombRegularSize, float bombPlusSize, float bombDiagonalSize, string[] bombPlacementString, float hesitate)
			{
				this.bombSpeed = bombSpeed;
				this.bombDelay = bombDelay;
				this.bombRegularSize = bombRegularSize;
				this.bombPlusSize = bombPlusSize;
				this.bombDiagonalSize = bombDiagonalSize;
				this.bombPlacementString = bombPlacementString;
				this.hesitate = hesitate;
			}

			// Token: 0x0400094A RID: 2378
			public readonly float bombSpeed;

			// Token: 0x0400094B RID: 2379
			public readonly float bombDelay;

			// Token: 0x0400094C RID: 2380
			public readonly float bombRegularSize;

			// Token: 0x0400094D RID: 2381
			public readonly float bombPlusSize;

			// Token: 0x0400094E RID: 2382
			public readonly float bombDiagonalSize;

			// Token: 0x0400094F RID: 2383
			public readonly string[] bombPlacementString;

			// Token: 0x04000950 RID: 2384
			public readonly float hesitate;
		}

		// Token: 0x020001C3 RID: 451
		public class Main : AbstractLevelPropertyGroup
		{
			// Token: 0x060004F3 RID: 1267 RVA: 0x00028925 File Offset: 0x00026D25
			public Main(float introHesitate)
			{
				this.introHesitate = introHesitate;
			}

			// Token: 0x04000951 RID: 2385
			public readonly float introHesitate;
		}

		// Token: 0x020001C4 RID: 452
		public class Skull : AbstractLevelPropertyGroup
		{
			// Token: 0x060004F4 RID: 1268 RVA: 0x00028934 File Offset: 0x00026D34
			public Skull(MinMax skullDelayRange, float skullSpeed, int skullCount)
			{
				this.skullDelayRange = skullDelayRange;
				this.skullSpeed = skullSpeed;
				this.skullCount = skullCount;
			}

			// Token: 0x04000952 RID: 2386
			public readonly MinMax skullDelayRange;

			// Token: 0x04000953 RID: 2387
			public readonly float skullSpeed;

			// Token: 0x04000954 RID: 2388
			public readonly int skullCount;
		}

		// Token: 0x020001C5 RID: 453
		public class Bullets : AbstractLevelPropertyGroup
		{
			// Token: 0x060004F5 RID: 1269 RVA: 0x00028954 File Offset: 0x00026D54
			public Bullets(float shotSpeed, string[] shotCount, float shotDelay, float spawnerSpeed, float spawnerRotateSpeed, int spawnerCount, float spawnerShotDelay, float spawnerDistance, MinMax spawnerMoveCountRange, float spawnerHesitate, int spawnerShotCount, float spawnerMoveDelay, float childSpeed, MinMax hesitateRange, string pinkString, float marionetteMoveSpeed, float marionetteReturnSpeed)
			{
				this.shotSpeed = shotSpeed;
				this.shotCount = shotCount;
				this.shotDelay = shotDelay;
				this.spawnerSpeed = spawnerSpeed;
				this.spawnerRotateSpeed = spawnerRotateSpeed;
				this.spawnerCount = spawnerCount;
				this.spawnerShotDelay = spawnerShotDelay;
				this.spawnerDistance = spawnerDistance;
				this.spawnerMoveCountRange = spawnerMoveCountRange;
				this.spawnerHesitate = spawnerHesitate;
				this.spawnerShotCount = spawnerShotCount;
				this.spawnerMoveDelay = spawnerMoveDelay;
				this.childSpeed = childSpeed;
				this.hesitateRange = hesitateRange;
				this.pinkString = pinkString;
				this.marionetteMoveSpeed = marionetteMoveSpeed;
				this.marionetteReturnSpeed = marionetteReturnSpeed;
			}

			// Token: 0x04000955 RID: 2389
			public readonly float shotSpeed;

			// Token: 0x04000956 RID: 2390
			public readonly string[] shotCount;

			// Token: 0x04000957 RID: 2391
			public readonly float shotDelay;

			// Token: 0x04000958 RID: 2392
			public readonly float spawnerSpeed;

			// Token: 0x04000959 RID: 2393
			public readonly float spawnerRotateSpeed;

			// Token: 0x0400095A RID: 2394
			public readonly int spawnerCount;

			// Token: 0x0400095B RID: 2395
			public readonly float spawnerShotDelay;

			// Token: 0x0400095C RID: 2396
			public readonly float spawnerDistance;

			// Token: 0x0400095D RID: 2397
			public readonly MinMax spawnerMoveCountRange;

			// Token: 0x0400095E RID: 2398
			public readonly float spawnerHesitate;

			// Token: 0x0400095F RID: 2399
			public readonly int spawnerShotCount;

			// Token: 0x04000960 RID: 2400
			public readonly float spawnerMoveDelay;

			// Token: 0x04000961 RID: 2401
			public readonly float childSpeed;

			// Token: 0x04000962 RID: 2402
			public readonly MinMax hesitateRange;

			// Token: 0x04000963 RID: 2403
			public readonly string pinkString;

			// Token: 0x04000964 RID: 2404
			public readonly float marionetteMoveSpeed;

			// Token: 0x04000965 RID: 2405
			public readonly float marionetteReturnSpeed;
		}
	}

	// Token: 0x020001C7 RID: 455
	public class FlyingMermaid : AbstractLevelProperties<LevelProperties.FlyingMermaid.State, LevelProperties.FlyingMermaid.Pattern, LevelProperties.FlyingMermaid.States>
	{
		// Token: 0x06000509 RID: 1289 RVA: 0x000289EC File Offset: 0x00026DEC
		public FlyingMermaid(int hp, Level.GoalTimes goalTimes, LevelProperties.FlyingMermaid.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600050A RID: 1290 RVA: 0x000289F8 File Offset: 0x00026DF8
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1900f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.75f));
				timeline.events.Add(new Level.Timeline.Event("Merdusa", 0.35f));
				break;
			case Level.Mode.Normal:
				timeline.health = 2500f;
				timeline.events.Add(new Level.Timeline.Event("Merdusa", 0.55f));
				timeline.events.Add(new Level.Timeline.Event("Head", 0.3f));
				break;
			case Level.Mode.Hard:
				timeline.health = 3000f;
				timeline.events.Add(new Level.Timeline.Event("Merdusa", 0.6f));
				timeline.events.Add(new Level.Timeline.Event("Head", 0.3f));
				break;
			}
			return timeline;
		}

		// Token: 0x0600050B RID: 1291 RVA: 0x00028AF0 File Offset: 0x00026EF0
		public static LevelProperties.FlyingMermaid.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			switch (id)
			{
			case "Y":
				return LevelProperties.FlyingMermaid.Pattern.Yell;
			case "S":
				return LevelProperties.FlyingMermaid.Pattern.Summon;
			case "F":
				return LevelProperties.FlyingMermaid.Pattern.Fish;
			case "Z":
				return LevelProperties.FlyingMermaid.Pattern.Zap;
			case "E":
				return LevelProperties.FlyingMermaid.Pattern.Eel;
			case "B":
				return LevelProperties.FlyingMermaid.Pattern.Bubble;
			case "H":
				return LevelProperties.FlyingMermaid.Pattern.HeadBlast;
			case "D":
				return LevelProperties.FlyingMermaid.Pattern.BubbleHeadBlast;
			}
			Debug.LogError("Pattern FlyingMermaid.Pattern for  " + id + " not found.", null);
			return LevelProperties.FlyingMermaid.Pattern.Uninitialized;
		}

		// Token: 0x0600050C RID: 1292 RVA: 0x00028BEC File Offset: 0x00026FEC
		public static LevelProperties.FlyingMermaid GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.FlyingMermaid.State> list = new List<LevelProperties.FlyingMermaid.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 3000;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.FlyingMermaid.State(10f, new LevelProperties.FlyingMermaid.Pattern[][]
						{
							new LevelProperties.FlyingMermaid.Pattern[]
							{
								LevelProperties.FlyingMermaid.Pattern.Fish,
								LevelProperties.FlyingMermaid.Pattern.Summon,
								LevelProperties.FlyingMermaid.Pattern.Yell,
								LevelProperties.FlyingMermaid.Pattern.Summon
							}
						}, LevelProperties.FlyingMermaid.States.Main, new LevelProperties.FlyingMermaid.Yell(new string[]
						{
							"Y1,D0.5,Y1,D0.5,Y1"
						}, 0.5f, 0.5f, new MinMax(140f, 240f), 3, 1600f, 0.25f, 0f), new LevelProperties.FlyingMermaid.Summon(0.25f, 1f, 0f), new LevelProperties.FlyingMermaid.Seahorse(100f, 800f, 1300f, 1f, 480f, 6.2f), new LevelProperties.FlyingMermaid.Pufferfish(10f, 320f, 1.1f, 8f, new string[]
						{
							"50-300-550-800,175-425-675,275-525,175-425-675",
							"50-200-350,450-600-750,150-300-450,550-700-850",
							"50-850-450,150-300,50-850-450,550-700"
						}, new MinMax(7f, 10f)), new LevelProperties.FlyingMermaid.Turtle(180f, new MinMax(900f, 1050f), 200f, 900f, new MinMax(1f, 1.8f), new MinMax(0.4f, 0.65f), 445f, new string[]
						{
							"350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305",
							"350-35-80-125-180-225-260-305,D0.7,350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305",
							"350-35-80-125-180-225-260-305,D0.5,350-35-80-125-180-225-260-305,D0.5,350-35-80-125-180-225-260-305"
						}, 0f), new LevelProperties.FlyingMermaid.Fish(1f, 1.9f, 1150f, 300f, 3200f, 0f), new LevelProperties.FlyingMermaid.SpreadshotFish(0.1f, new string[]
						{
							"S600,N6,100-220",
							"S700,N5,112-208",
							"S600,N6,90-210",
							"S700,N5,102-198",
							"S600,N6,80-200",
							"S700,N5,92-188"
						}, new string[]
						{
							"S1,S2,S1,S2",
							"S3,S4,S3,S4",
							"S5,S6,S5,S6"
						}, "R,R,R,R,R,R,P,R,R,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.SpinnerFish(320f, 0.3f, 215f, 0.9f, new string[]
						{
							"S,S,D1.5,S",
							"S,D1.4,S,S",
							"S,S,D1.3,S",
							"S,D1.6,S,S"
						}), new LevelProperties.FlyingMermaid.HomerFish(1000f, 0.78f, 475f, 3.3f, 2.6f, 1.5f, new string[]
						{
							"S,S"
						}), new LevelProperties.FlyingMermaid.Eel(45f, new MinMax(0f, 1f), new MinMax(1.2f, 2.7f), new MinMax(3f, 7f), new MinMax(105f, 225f), 5f, 540f, 0.1f, "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.Zap(0.5f, new MinMax(3.5f, 7f), 2.3f), new LevelProperties.FlyingMermaid.Bubbles(205f, 3f, 5f, 1f, new MinMax(1f, 2f)), new LevelProperties.FlyingMermaid.HeadBlast(745f, new MinMax(3f, 4.1f)), new LevelProperties.FlyingMermaid.Coral(415f, new string[]
						{
							"0,60,120",
							"-60,-120",
							"0,60",
							"60,120",
							"0,-60,-120",
							"0,-60",
							"-60,-120"
						}, new MinMax(2.5f, 3.8f), new MinMax(3f, 4.1f))));
						list.Add(new LevelProperties.FlyingMermaid.State(0.6f, new LevelProperties.FlyingMermaid.Pattern[][]
						{
							new LevelProperties.FlyingMermaid.Pattern[]
							{
								LevelProperties.FlyingMermaid.Pattern.Eel,
								LevelProperties.FlyingMermaid.Pattern.Zap
							}
						}, LevelProperties.FlyingMermaid.States.Merdusa, new LevelProperties.FlyingMermaid.Yell(new string[]
						{
							"Y1,D0.5,Y1,D0.5,Y1"
						}, 0.5f, 0.5f, new MinMax(140f, 240f), 3, 1600f, 0.25f, 0f), new LevelProperties.FlyingMermaid.Summon(0.25f, 1f, 0f), new LevelProperties.FlyingMermaid.Seahorse(100f, 800f, 1300f, 1f, 480f, 6.2f), new LevelProperties.FlyingMermaid.Pufferfish(10f, 320f, 1.1f, 8f, new string[]
						{
							"50-300-550-800,175-425-675,275-525,175-425-675",
							"50-200-350,450-600-750,150-300-450,550-700-850",
							"50-850-450,150-300,50-850-450,550-700"
						}, new MinMax(7f, 10f)), new LevelProperties.FlyingMermaid.Turtle(180f, new MinMax(900f, 1050f), 200f, 900f, new MinMax(1f, 1.8f), new MinMax(0.4f, 0.65f), 445f, new string[]
						{
							"350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305",
							"350-35-80-125-180-225-260-305,D0.7,350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305",
							"350-35-80-125-180-225-260-305,D0.5,350-35-80-125-180-225-260-305,D0.5,350-35-80-125-180-225-260-305"
						}, 0f), new LevelProperties.FlyingMermaid.Fish(1f, 1.9f, 1150f, 300f, 3200f, 0f), new LevelProperties.FlyingMermaid.SpreadshotFish(0.1f, new string[]
						{
							"S600,N6,100-220",
							"S700,N5,112-208",
							"S600,N6,90-210",
							"S700,N5,102-198",
							"S600,N6,80-200",
							"S700,N5,92-188"
						}, new string[]
						{
							"S1,S2,S1,S2",
							"S3,S4,S3,S4",
							"S5,S6,S5,S6"
						}, "R,R,R,R,R,R,P,R,R,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.SpinnerFish(320f, 0.3f, 215f, 0.9f, new string[]
						{
							"S,S,D1.5,S",
							"S,D1.4,S,S",
							"S,S,D1.3,S",
							"S,D1.6,S,S"
						}), new LevelProperties.FlyingMermaid.HomerFish(1000f, 0.78f, 475f, 3.3f, 2.6f, 1.5f, new string[]
						{
							"S,S"
						}), new LevelProperties.FlyingMermaid.Eel(45f, new MinMax(0f, 1f), new MinMax(1.2f, 2.7f), new MinMax(3f, 7f), new MinMax(105f, 225f), 5f, 540f, 0.1f, "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.Zap(0.5f, new MinMax(3.5f, 7f), 2.3f), new LevelProperties.FlyingMermaid.Bubbles(205f, 3f, 5f, 1f, new MinMax(1f, 2f)), new LevelProperties.FlyingMermaid.HeadBlast(745f, new MinMax(3f, 4.1f)), new LevelProperties.FlyingMermaid.Coral(415f, new string[]
						{
							"0,60,120",
							"-60,-120",
							"0,60",
							"60,120",
							"0,-60,-120",
							"0,-60",
							"-60,-120"
						}, new MinMax(2.5f, 3.8f), new MinMax(3f, 4.1f))));
						list.Add(new LevelProperties.FlyingMermaid.State(0.3f, new LevelProperties.FlyingMermaid.Pattern[][]
						{
							new LevelProperties.FlyingMermaid.Pattern[]
							{
								LevelProperties.FlyingMermaid.Pattern.BubbleHeadBlast,
								LevelProperties.FlyingMermaid.Pattern.Bubble,
								LevelProperties.FlyingMermaid.Pattern.BubbleHeadBlast,
								LevelProperties.FlyingMermaid.Pattern.Bubble,
								LevelProperties.FlyingMermaid.Pattern.Bubble,
								LevelProperties.FlyingMermaid.Pattern.BubbleHeadBlast,
								LevelProperties.FlyingMermaid.Pattern.Bubble,
								LevelProperties.FlyingMermaid.Pattern.Bubble,
								LevelProperties.FlyingMermaid.Pattern.BubbleHeadBlast,
								LevelProperties.FlyingMermaid.Pattern.Bubble,
								LevelProperties.FlyingMermaid.Pattern.BubbleHeadBlast,
								LevelProperties.FlyingMermaid.Pattern.Bubble,
								LevelProperties.FlyingMermaid.Pattern.BubbleHeadBlast
							}
						}, LevelProperties.FlyingMermaid.States.Head, new LevelProperties.FlyingMermaid.Yell(new string[]
						{
							"Y1,D0.5,Y1,D0.5,Y1"
						}, 0.5f, 0.5f, new MinMax(140f, 240f), 3, 1600f, 0.25f, 0f), new LevelProperties.FlyingMermaid.Summon(0.25f, 1f, 0f), new LevelProperties.FlyingMermaid.Seahorse(100f, 800f, 1300f, 1f, 480f, 6.2f), new LevelProperties.FlyingMermaid.Pufferfish(10f, 320f, 1.1f, 8f, new string[]
						{
							"50-300-550-800,175-425-675,275-525,175-425-675",
							"50-200-350,450-600-750,150-300-450,550-700-850",
							"50-850-450,150-300,50-850-450,550-700"
						}, new MinMax(7f, 10f)), new LevelProperties.FlyingMermaid.Turtle(180f, new MinMax(900f, 1050f), 200f, 900f, new MinMax(1f, 1.8f), new MinMax(0.4f, 0.65f), 445f, new string[]
						{
							"350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305",
							"350-35-80-125-180-225-260-305,D0.7,350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305",
							"350-35-80-125-180-225-260-305,D0.5,350-35-80-125-180-225-260-305,D0.5,350-35-80-125-180-225-260-305"
						}, 0f), new LevelProperties.FlyingMermaid.Fish(1f, 1.9f, 1150f, 300f, 3200f, 0f), new LevelProperties.FlyingMermaid.SpreadshotFish(0.1f, new string[]
						{
							"S600,N6,100-220",
							"S700,N5,112-208",
							"S600,N6,90-210",
							"S700,N5,102-198",
							"S600,N6,80-200",
							"S700,N5,92-188"
						}, new string[]
						{
							"S1,S2,S1,S2",
							"S3,S4,S3,S4",
							"S5,S6,S5,S6"
						}, "R,R,R,R,R,R,P,R,R,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.SpinnerFish(320f, 0.3f, 215f, 0.9f, new string[]
						{
							"S,S,D1.5,S",
							"S,D1.4,S,S",
							"S,S,D1.3,S",
							"S,D1.6,S,S"
						}), new LevelProperties.FlyingMermaid.HomerFish(1000f, 0.78f, 475f, 3.3f, 2.6f, 1.5f, new string[]
						{
							"S,S"
						}), new LevelProperties.FlyingMermaid.Eel(45f, new MinMax(0f, 1f), new MinMax(1.2f, 2.7f), new MinMax(3f, 7f), new MinMax(105f, 225f), 5f, 540f, 0.1f, "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.Zap(0.5f, new MinMax(3.5f, 7f), 2.3f), new LevelProperties.FlyingMermaid.Bubbles(205f, 3f, 5f, 1f, new MinMax(1f, 2f)), new LevelProperties.FlyingMermaid.HeadBlast(745f, new MinMax(3f, 4.1f)), new LevelProperties.FlyingMermaid.Coral(415f, new string[]
						{
							"0,60,120",
							"-60,-120",
							"0,60",
							"60,120",
							"0,-60,-120",
							"0,-60",
							"-60,-120"
						}, new MinMax(2.5f, 3.8f), new MinMax(3f, 4.1f))));
					}
				}
				else
				{
					hp = 2500;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.FlyingMermaid.State(10f, new LevelProperties.FlyingMermaid.Pattern[][]
					{
						new LevelProperties.FlyingMermaid.Pattern[]
						{
							LevelProperties.FlyingMermaid.Pattern.Yell,
							LevelProperties.FlyingMermaid.Pattern.Summon,
							LevelProperties.FlyingMermaid.Pattern.Fish,
							LevelProperties.FlyingMermaid.Pattern.Summon
						}
					}, LevelProperties.FlyingMermaid.States.Main, new LevelProperties.FlyingMermaid.Yell(new string[]
					{
						"Y1,D0.6,Y1,D0.6,Y1"
					}, 0.5f, 0.5f, new MinMax(140f, 240f), 3, 1300f, 0.25f, 0f), new LevelProperties.FlyingMermaid.Summon(0.25f, 1f, 0f), new LevelProperties.FlyingMermaid.Seahorse(90f, 700f, 1100f, 0.7f, 435f, 6.2f), new LevelProperties.FlyingMermaid.Pufferfish(10f, 300f, 1f, 8f, new string[]
					{
						"50-400-750,150-500-850,100-450-800",
						"50-750,150-650,250-550,350-450,250-550,150-650",
						"50-750-400,250-600,100-800-450,250-600"
					}, new MinMax(6f, 8f)), new LevelProperties.FlyingMermaid.Turtle(150f, new MinMax(925f, 1100f), 200f, 850f, new MinMax(0.9f, 1.7f), new MinMax(0.3f, 0.55f), 415f, new string[]
					{
						"350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305",
						"350-35-80-125-180-225-260-305,D0.7,350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305",
						"350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305,D0.5,350-35-80-125-180-225-260-305"
					}, 0f), new LevelProperties.FlyingMermaid.Fish(1f, 2.1f, 1000f, 300f, 3200f, 0f), new LevelProperties.FlyingMermaid.SpreadshotFish(0.4f, new string[]
					{
						"S600,N6,100-210",
						"S600,N6,110-220",
						"S600,N6,120-230",
						"S550,N6,90-200",
						"S550,N6,100-210",
						"S550,N6,110-220"
					}, new string[]
					{
						"S1,S2,S3",
						"S4,S5,S6",
						"S3,S2,S1",
						"S6,S5,S4"
					}, "R,R,R,R,P,R,R,R,R,P,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.SpinnerFish(330f, 0.3f, 185f, 1f, new string[]
					{
						"S,S,D1.5,S",
						"S,D1.5,S,S"
					}), new LevelProperties.FlyingMermaid.HomerFish(900f, 0.78f, 440f, 3.1f, 5.2f, 0.4f, new string[]
					{
						"S"
					}), new LevelProperties.FlyingMermaid.Eel(45f, new MinMax(0f, 0f), new MinMax(1.2f, 2.7f), new MinMax(3f, 8f), new MinMax(110f, 215f), 5f, 500f, 0.1f, "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.Zap(0.5f, new MinMax(4f, 8f), 2.3f), new LevelProperties.FlyingMermaid.Bubbles(205f, 3f, 5f, 1f, new MinMax(1.5f, 2.3f)), new LevelProperties.FlyingMermaid.HeadBlast(745f, new MinMax(3.9f, 4.5f)), new LevelProperties.FlyingMermaid.Coral(335f, new string[]
					{
						"0,60,120",
						"-60,-120",
						"0,60",
						"60,120",
						"0,-60,-120",
						"0,-60",
						"-60,-120"
					}, new MinMax(3f, 4.5f), new MinMax(4f, 5f))));
					list.Add(new LevelProperties.FlyingMermaid.State(0.55f, new LevelProperties.FlyingMermaid.Pattern[][]
					{
						new LevelProperties.FlyingMermaid.Pattern[]
						{
							LevelProperties.FlyingMermaid.Pattern.Eel,
							LevelProperties.FlyingMermaid.Pattern.Zap
						}
					}, LevelProperties.FlyingMermaid.States.Merdusa, new LevelProperties.FlyingMermaid.Yell(new string[]
					{
						"Y1,D0.6,Y1,D0.6,Y1"
					}, 0.5f, 0.5f, new MinMax(140f, 240f), 3, 1300f, 0.25f, 0f), new LevelProperties.FlyingMermaid.Summon(0.25f, 1f, 0f), new LevelProperties.FlyingMermaid.Seahorse(90f, 700f, 1100f, 0.7f, 435f, 6.2f), new LevelProperties.FlyingMermaid.Pufferfish(10f, 300f, 1f, 8f, new string[]
					{
						"50-400-750,150-500-850,100-450-800",
						"50-750,150-650,250-550,350-450,250-550,150-650",
						"50-750-400,250-600,100-800-450,250-600"
					}, new MinMax(6f, 8f)), new LevelProperties.FlyingMermaid.Turtle(150f, new MinMax(925f, 1100f), 200f, 850f, new MinMax(0.9f, 1.7f), new MinMax(0.3f, 0.55f), 415f, new string[]
					{
						"350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305",
						"350-35-80-125-180-225-260-305,D0.7,350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305",
						"350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305,D0.5,350-35-80-125-180-225-260-305"
					}, 0f), new LevelProperties.FlyingMermaid.Fish(1f, 2.1f, 1000f, 300f, 3200f, 0f), new LevelProperties.FlyingMermaid.SpreadshotFish(0.4f, new string[]
					{
						"S600,N6,100-210",
						"S600,N6,110-220",
						"S600,N6,120-230",
						"S550,N6,90-200",
						"S550,N6,100-210",
						"S550,N6,110-220"
					}, new string[]
					{
						"S1,S2,S3",
						"S4,S5,S6",
						"S3,S2,S1",
						"S6,S5,S4"
					}, "R,R,R,R,P,R,R,R,R,P,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.SpinnerFish(330f, 0.3f, 185f, 1f, new string[]
					{
						"S,S,D1.5,S",
						"S,D1.5,S,S"
					}), new LevelProperties.FlyingMermaid.HomerFish(900f, 0.78f, 440f, 3.1f, 5.2f, 0.4f, new string[]
					{
						"S"
					}), new LevelProperties.FlyingMermaid.Eel(45f, new MinMax(0f, 0f), new MinMax(1.2f, 2.7f), new MinMax(3f, 8f), new MinMax(110f, 215f), 5f, 500f, 0.1f, "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.Zap(0.5f, new MinMax(4f, 8f), 2.3f), new LevelProperties.FlyingMermaid.Bubbles(205f, 3f, 5f, 1f, new MinMax(1.5f, 2.3f)), new LevelProperties.FlyingMermaid.HeadBlast(745f, new MinMax(3.9f, 4.5f)), new LevelProperties.FlyingMermaid.Coral(335f, new string[]
					{
						"0,60,120",
						"-60,-120",
						"0,60",
						"60,120",
						"0,-60,-120",
						"0,-60",
						"-60,-120"
					}, new MinMax(3f, 4.5f), new MinMax(4f, 5f))));
					list.Add(new LevelProperties.FlyingMermaid.State(0.3f, new LevelProperties.FlyingMermaid.Pattern[][]
					{
						new LevelProperties.FlyingMermaid.Pattern[]
						{
							LevelProperties.FlyingMermaid.Pattern.Bubble,
							LevelProperties.FlyingMermaid.Pattern.HeadBlast,
							LevelProperties.FlyingMermaid.Pattern.Bubble,
							LevelProperties.FlyingMermaid.Pattern.BubbleHeadBlast,
							LevelProperties.FlyingMermaid.Pattern.Bubble,
							LevelProperties.FlyingMermaid.Pattern.Bubble,
							LevelProperties.FlyingMermaid.Pattern.BubbleHeadBlast,
							LevelProperties.FlyingMermaid.Pattern.Bubble,
							LevelProperties.FlyingMermaid.Pattern.BubbleHeadBlast,
							LevelProperties.FlyingMermaid.Pattern.Bubble,
							LevelProperties.FlyingMermaid.Pattern.Bubble,
							LevelProperties.FlyingMermaid.Pattern.BubbleHeadBlast
						}
					}, LevelProperties.FlyingMermaid.States.Head, new LevelProperties.FlyingMermaid.Yell(new string[]
					{
						"Y1,D0.6,Y1,D0.6,Y1"
					}, 0.5f, 0.5f, new MinMax(140f, 240f), 3, 1300f, 0.25f, 0f), new LevelProperties.FlyingMermaid.Summon(0.25f, 1f, 0f), new LevelProperties.FlyingMermaid.Seahorse(90f, 700f, 1100f, 0.7f, 435f, 6.2f), new LevelProperties.FlyingMermaid.Pufferfish(10f, 300f, 1f, 8f, new string[]
					{
						"50-400-750,150-500-850,100-450-800",
						"50-750,150-650,250-550,350-450,250-550,150-650",
						"50-750-400,250-600,100-800-450,250-600"
					}, new MinMax(6f, 8f)), new LevelProperties.FlyingMermaid.Turtle(150f, new MinMax(925f, 1100f), 200f, 850f, new MinMax(0.9f, 1.7f), new MinMax(0.3f, 0.55f), 415f, new string[]
					{
						"350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305",
						"350-35-80-125-180-225-260-305,D0.7,350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305",
						"350-35-80-125-180-225-260-305,D0.6,350-35-80-125-180-225-260-305,D0.5,350-35-80-125-180-225-260-305"
					}, 0f), new LevelProperties.FlyingMermaid.Fish(1f, 2.1f, 1000f, 300f, 3200f, 0f), new LevelProperties.FlyingMermaid.SpreadshotFish(0.4f, new string[]
					{
						"S600,N6,100-210",
						"S600,N6,110-220",
						"S600,N6,120-230",
						"S550,N6,90-200",
						"S550,N6,100-210",
						"S550,N6,110-220"
					}, new string[]
					{
						"S1,S2,S3",
						"S4,S5,S6",
						"S3,S2,S1",
						"S6,S5,S4"
					}, "R,R,R,R,P,R,R,R,R,P,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.SpinnerFish(330f, 0.3f, 185f, 1f, new string[]
					{
						"S,S,D1.5,S",
						"S,D1.5,S,S"
					}), new LevelProperties.FlyingMermaid.HomerFish(900f, 0.78f, 440f, 3.1f, 5.2f, 0.4f, new string[]
					{
						"S"
					}), new LevelProperties.FlyingMermaid.Eel(45f, new MinMax(0f, 0f), new MinMax(1.2f, 2.7f), new MinMax(3f, 8f), new MinMax(110f, 215f), 5f, 500f, 0.1f, "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.Zap(0.5f, new MinMax(4f, 8f), 2.3f), new LevelProperties.FlyingMermaid.Bubbles(205f, 3f, 5f, 1f, new MinMax(1.5f, 2.3f)), new LevelProperties.FlyingMermaid.HeadBlast(745f, new MinMax(3.9f, 4.5f)), new LevelProperties.FlyingMermaid.Coral(335f, new string[]
					{
						"0,60,120",
						"-60,-120",
						"0,60",
						"60,120",
						"0,-60,-120",
						"0,-60",
						"-60,-120"
					}, new MinMax(3f, 4.5f), new MinMax(4f, 5f))));
				}
			}
			else
			{
				hp = 1900;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.FlyingMermaid.State(10f, new LevelProperties.FlyingMermaid.Pattern[][]
				{
					new LevelProperties.FlyingMermaid.Pattern[]
					{
						LevelProperties.FlyingMermaid.Pattern.Yell,
						LevelProperties.FlyingMermaid.Pattern.Summon
					}
				}, LevelProperties.FlyingMermaid.States.Main, new LevelProperties.FlyingMermaid.Yell(new string[]
				{
					"Y1,D0.6,Y1,D0.8,Y1",
					"Y1,D0.8,Y1,D0.6,Y1"
				}, 0.7f, 0.7f, new MinMax(140f, 240f), 3, 1100f, 0.25f, 0f), new LevelProperties.FlyingMermaid.Summon(0.25f, 1f, 0f), new LevelProperties.FlyingMermaid.Seahorse(80f, 550f, 1000f, 1.2f, 390f, 6.2f), new LevelProperties.FlyingMermaid.Pufferfish(10f, 300f, 1.25f, 6.4f, new string[]
				{
					"50-850-450,250-700",
					"50,200,350,500,650,800,650,500,350,200",
					"100-800,300-600,450,300-600",
					"850,700,550,400,250,100,250,400,550,700"
				}, new MinMax(5f, 7f)), new LevelProperties.FlyingMermaid.Turtle(140f, new MinMax(950f, 1150f), 210f, 850f, new MinMax(0.9f, 1.7f), new MinMax(0.3f, 0.55f), 400f, new string[]
				{
					"0-90-180-270,D0.5,0-90-180-270,D0.6,0-90-180-270",
					"0-90-180-270,D0.6,0-90-180-270,D0.7,0-90-180-270",
					"0-90-180-270,D0.7,0-90-180-270,D0.7,0-90-180-270"
				}, 0f), new LevelProperties.FlyingMermaid.Fish(1f, 2.3f, 900f, 300f, 3200f, 0f), new LevelProperties.FlyingMermaid.SpreadshotFish(0.5f, new string[]
				{
					"S500,N5,100-220",
					"S500,N4,130-190",
					"S500,N5,90-210",
					"S500,N4,120-180",
					"S500,N5,80-200",
					"S500,N4,110-170"
				}, new string[]
				{
					"S1,S2",
					"S3,S4",
					"S2,S1",
					"S5,S6",
					"S4,S3",
					"S6,S5"
				}, "R,R,P,R,R,P,R,R,R,P"), new LevelProperties.FlyingMermaid.SpinnerFish(300f, 0.3f, 150f, 1.8f, new string[]
				{
					"S,S"
				}), new LevelProperties.FlyingMermaid.HomerFish(750f, 0.75f, 385f, 2.8f, 4.4f, 0.4f, new string[]
				{
					"S"
				}), new LevelProperties.FlyingMermaid.Eel(40f, new MinMax(0f, 0f), new MinMax(1.2f, 2.3f), new MinMax(3f, 7f), new MinMax(110f, 195f), 4f, 460f, 0.1f, "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.Zap(0.5f, new MinMax(5f, 9f), 2.5f), new LevelProperties.FlyingMermaid.Bubbles(0f, 0f, 0f, 0f, new MinMax(0f, 1f)), new LevelProperties.FlyingMermaid.HeadBlast(0f, new MinMax(0f, 1f)), new LevelProperties.FlyingMermaid.Coral(0f, new string[0], new MinMax(0f, 1f), new MinMax(0f, 1f))));
				list.Add(new LevelProperties.FlyingMermaid.State(0.75f, new LevelProperties.FlyingMermaid.Pattern[][]
				{
					new LevelProperties.FlyingMermaid.Pattern[]
					{
						LevelProperties.FlyingMermaid.Pattern.Fish,
						LevelProperties.FlyingMermaid.Pattern.Summon
					}
				}, LevelProperties.FlyingMermaid.States.Generic, new LevelProperties.FlyingMermaid.Yell(new string[]
				{
					"Y1,D0.6,Y1,D0.8,Y1",
					"Y1,D0.8,Y1,D0.6,Y1"
				}, 0.7f, 0.7f, new MinMax(140f, 240f), 3, 1100f, 0.25f, 0f), new LevelProperties.FlyingMermaid.Summon(0.25f, 1f, 0f), new LevelProperties.FlyingMermaid.Seahorse(80f, 550f, 1000f, 1.2f, 390f, 6.2f), new LevelProperties.FlyingMermaid.Pufferfish(10f, 300f, 1.25f, 6.4f, new string[]
				{
					"50-850-450,250-700",
					"50,200,350,500,650,800,650,500,350,200",
					"100-800,300-600,450,300-600",
					"850,700,550,400,250,100,250,400,550,700"
				}, new MinMax(5f, 7f)), new LevelProperties.FlyingMermaid.Turtle(140f, new MinMax(950f, 1150f), 210f, 850f, new MinMax(0.9f, 1.7f), new MinMax(0.3f, 0.55f), 400f, new string[]
				{
					"0-90-180-270,D0.5,0-90-180-270,D0.6,0-90-180-270",
					"0-90-180-270,D0.6,0-90-180-270,D0.7,0-90-180-270",
					"0-90-180-270,D0.7,0-90-180-270,D0.7,0-90-180-270"
				}, 0f), new LevelProperties.FlyingMermaid.Fish(1f, 2.3f, 900f, 300f, 3200f, 0f), new LevelProperties.FlyingMermaid.SpreadshotFish(0.5f, new string[]
				{
					"S500,N5,100-220",
					"S500,N4,130-190",
					"S500,N5,90-210",
					"S500,N4,120-180",
					"S500,N5,80-200",
					"S500,N4,110-170"
				}, new string[]
				{
					"S1,S2",
					"S3,S4",
					"S2,S1",
					"S5,S6",
					"S4,S3",
					"S6,S5"
				}, "R,R,P,R,R,P,R,R,R,P"), new LevelProperties.FlyingMermaid.SpinnerFish(300f, 0.3f, 150f, 1.8f, new string[]
				{
					"S,S"
				}), new LevelProperties.FlyingMermaid.HomerFish(750f, 0.75f, 385f, 2.8f, 4.4f, 0.4f, new string[]
				{
					"S"
				}), new LevelProperties.FlyingMermaid.Eel(40f, new MinMax(0f, 0f), new MinMax(1.2f, 2.3f), new MinMax(3f, 7f), new MinMax(110f, 195f), 4f, 460f, 0.1f, "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.Zap(0.5f, new MinMax(5f, 9f), 2.5f), new LevelProperties.FlyingMermaid.Bubbles(0f, 0f, 0f, 0f, new MinMax(0f, 1f)), new LevelProperties.FlyingMermaid.HeadBlast(0f, new MinMax(0f, 1f)), new LevelProperties.FlyingMermaid.Coral(0f, new string[0], new MinMax(0f, 1f), new MinMax(0f, 1f))));
				list.Add(new LevelProperties.FlyingMermaid.State(0.35f, new LevelProperties.FlyingMermaid.Pattern[][]
				{
					new LevelProperties.FlyingMermaid.Pattern[]
					{
						LevelProperties.FlyingMermaid.Pattern.Eel,
						LevelProperties.FlyingMermaid.Pattern.Zap
					}
				}, LevelProperties.FlyingMermaid.States.Merdusa, new LevelProperties.FlyingMermaid.Yell(new string[]
				{
					"Y1,D0.6,Y1,D0.8,Y1",
					"Y1,D0.8,Y1,D0.6,Y1"
				}, 0.7f, 0.7f, new MinMax(140f, 240f), 3, 1100f, 0.25f, 0f), new LevelProperties.FlyingMermaid.Summon(0.25f, 1f, 0f), new LevelProperties.FlyingMermaid.Seahorse(80f, 550f, 1000f, 1.2f, 390f, 6.2f), new LevelProperties.FlyingMermaid.Pufferfish(10f, 300f, 1.25f, 6.4f, new string[]
				{
					"50-850-450,250-700",
					"50,200,350,500,650,800,650,500,350,200",
					"100-800,300-600,450,300-600",
					"850,700,550,400,250,100,250,400,550,700"
				}, new MinMax(5f, 7f)), new LevelProperties.FlyingMermaid.Turtle(140f, new MinMax(950f, 1150f), 210f, 850f, new MinMax(0.9f, 1.7f), new MinMax(0.3f, 0.55f), 400f, new string[]
				{
					"0-90-180-270,D0.5,0-90-180-270,D0.6,0-90-180-270",
					"0-90-180-270,D0.6,0-90-180-270,D0.7,0-90-180-270",
					"0-90-180-270,D0.7,0-90-180-270,D0.7,0-90-180-270"
				}, 0f), new LevelProperties.FlyingMermaid.Fish(1f, 2.3f, 900f, 300f, 3200f, 0f), new LevelProperties.FlyingMermaid.SpreadshotFish(0.5f, new string[]
				{
					"S500,N5,100-220",
					"S500,N4,130-190",
					"S500,N5,90-210",
					"S500,N4,120-180",
					"S500,N5,80-200",
					"S500,N4,110-170"
				}, new string[]
				{
					"S1,S2",
					"S3,S4",
					"S2,S1",
					"S5,S6",
					"S4,S3",
					"S6,S5"
				}, "R,R,P,R,R,P,R,R,R,P"), new LevelProperties.FlyingMermaid.SpinnerFish(300f, 0.3f, 150f, 1.8f, new string[]
				{
					"S,S"
				}), new LevelProperties.FlyingMermaid.HomerFish(750f, 0.75f, 385f, 2.8f, 4.4f, 0.4f, new string[]
				{
					"S"
				}), new LevelProperties.FlyingMermaid.Eel(40f, new MinMax(0f, 0f), new MinMax(1.2f, 2.3f), new MinMax(3f, 7f), new MinMax(110f, 195f), 4f, 460f, 0.1f, "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.FlyingMermaid.Zap(0.5f, new MinMax(5f, 9f), 2.5f), new LevelProperties.FlyingMermaid.Bubbles(0f, 0f, 0f, 0f, new MinMax(0f, 1f)), new LevelProperties.FlyingMermaid.HeadBlast(0f, new MinMax(0f, 1f)), new LevelProperties.FlyingMermaid.Coral(0f, new string[0], new MinMax(0f, 1f), new MinMax(0f, 1f))));
			}
			return new LevelProperties.FlyingMermaid(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020001C8 RID: 456
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000E5 RID: 229
			// (get) Token: 0x0600050E RID: 1294 RVA: 0x0002AA62 File Offset: 0x00028E62
			// (set) Token: 0x0600050F RID: 1295 RVA: 0x0002AA6A File Offset: 0x00028E6A
			private protected LevelProperties.FlyingMermaid properties { protected get; private set; }

			// Token: 0x06000510 RID: 1296 RVA: 0x0002AA73 File Offset: 0x00028E73
			public virtual void LevelInit(LevelProperties.FlyingMermaid properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000511 RID: 1297 RVA: 0x0002AA7C File Offset: 0x00028E7C
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020001C9 RID: 457
		public enum States
		{
			// Token: 0x0400097B RID: 2427
			Main,
			// Token: 0x0400097C RID: 2428
			Generic,
			// Token: 0x0400097D RID: 2429
			Merdusa,
			// Token: 0x0400097E RID: 2430
			Head
		}

		// Token: 0x020001CA RID: 458
		public enum Pattern
		{
			// Token: 0x04000980 RID: 2432
			Yell,
			// Token: 0x04000981 RID: 2433
			Summon,
			// Token: 0x04000982 RID: 2434
			Fish,
			// Token: 0x04000983 RID: 2435
			Zap,
			// Token: 0x04000984 RID: 2436
			Eel,
			// Token: 0x04000985 RID: 2437
			Bubble,
			// Token: 0x04000986 RID: 2438
			HeadBlast,
			// Token: 0x04000987 RID: 2439
			BubbleHeadBlast,
			// Token: 0x04000988 RID: 2440
			Uninitialized
		}

		// Token: 0x020001CB RID: 459
		public class State : AbstractLevelState<LevelProperties.FlyingMermaid.Pattern, LevelProperties.FlyingMermaid.States>
		{
			// Token: 0x06000512 RID: 1298 RVA: 0x0002AA80 File Offset: 0x00028E80
			public State(float healthTrigger, LevelProperties.FlyingMermaid.Pattern[][] patterns, LevelProperties.FlyingMermaid.States stateName, LevelProperties.FlyingMermaid.Yell yell, LevelProperties.FlyingMermaid.Summon summon, LevelProperties.FlyingMermaid.Seahorse seahorse, LevelProperties.FlyingMermaid.Pufferfish pufferfish, LevelProperties.FlyingMermaid.Turtle turtle, LevelProperties.FlyingMermaid.Fish fish, LevelProperties.FlyingMermaid.SpreadshotFish spreadshotFish, LevelProperties.FlyingMermaid.SpinnerFish spinnerFish, LevelProperties.FlyingMermaid.HomerFish homerFish, LevelProperties.FlyingMermaid.Eel eel, LevelProperties.FlyingMermaid.Zap zap, LevelProperties.FlyingMermaid.Bubbles bubbles, LevelProperties.FlyingMermaid.HeadBlast headBlast, LevelProperties.FlyingMermaid.Coral coral) : base(healthTrigger, patterns, stateName)
			{
				this.yell = yell;
				this.summon = summon;
				this.seahorse = seahorse;
				this.pufferfish = pufferfish;
				this.turtle = turtle;
				this.fish = fish;
				this.spreadshotFish = spreadshotFish;
				this.spinnerFish = spinnerFish;
				this.homerFish = homerFish;
				this.eel = eel;
				this.zap = zap;
				this.bubbles = bubbles;
				this.headBlast = headBlast;
				this.coral = coral;
			}

			// Token: 0x04000989 RID: 2441
			public readonly LevelProperties.FlyingMermaid.Yell yell;

			// Token: 0x0400098A RID: 2442
			public readonly LevelProperties.FlyingMermaid.Summon summon;

			// Token: 0x0400098B RID: 2443
			public readonly LevelProperties.FlyingMermaid.Seahorse seahorse;

			// Token: 0x0400098C RID: 2444
			public readonly LevelProperties.FlyingMermaid.Pufferfish pufferfish;

			// Token: 0x0400098D RID: 2445
			public readonly LevelProperties.FlyingMermaid.Turtle turtle;

			// Token: 0x0400098E RID: 2446
			public readonly LevelProperties.FlyingMermaid.Fish fish;

			// Token: 0x0400098F RID: 2447
			public readonly LevelProperties.FlyingMermaid.SpreadshotFish spreadshotFish;

			// Token: 0x04000990 RID: 2448
			public readonly LevelProperties.FlyingMermaid.SpinnerFish spinnerFish;

			// Token: 0x04000991 RID: 2449
			public readonly LevelProperties.FlyingMermaid.HomerFish homerFish;

			// Token: 0x04000992 RID: 2450
			public readonly LevelProperties.FlyingMermaid.Eel eel;

			// Token: 0x04000993 RID: 2451
			public readonly LevelProperties.FlyingMermaid.Zap zap;

			// Token: 0x04000994 RID: 2452
			public readonly LevelProperties.FlyingMermaid.Bubbles bubbles;

			// Token: 0x04000995 RID: 2453
			public readonly LevelProperties.FlyingMermaid.HeadBlast headBlast;

			// Token: 0x04000996 RID: 2454
			public readonly LevelProperties.FlyingMermaid.Coral coral;
		}

		// Token: 0x020001CC RID: 460
		public class Yell : AbstractLevelPropertyGroup
		{
			// Token: 0x06000513 RID: 1299 RVA: 0x0002AB08 File Offset: 0x00028F08
			public Yell(string[] patternString, float anticipateInitialHold, float mouthHold, MinMax spreadAngle, int numBullets, float bulletSpeed, float anticipateHold, float hesitateAfterAttack)
			{
				this.patternString = patternString;
				this.anticipateInitialHold = anticipateInitialHold;
				this.mouthHold = mouthHold;
				this.spreadAngle = spreadAngle;
				this.numBullets = numBullets;
				this.bulletSpeed = bulletSpeed;
				this.anticipateHold = anticipateHold;
				this.hesitateAfterAttack = hesitateAfterAttack;
			}

			// Token: 0x04000997 RID: 2455
			public readonly string[] patternString;

			// Token: 0x04000998 RID: 2456
			public readonly float anticipateInitialHold;

			// Token: 0x04000999 RID: 2457
			public readonly float mouthHold;

			// Token: 0x0400099A RID: 2458
			public readonly MinMax spreadAngle;

			// Token: 0x0400099B RID: 2459
			public readonly int numBullets;

			// Token: 0x0400099C RID: 2460
			public readonly float bulletSpeed;

			// Token: 0x0400099D RID: 2461
			public readonly float anticipateHold;

			// Token: 0x0400099E RID: 2462
			public readonly float hesitateAfterAttack;
		}

		// Token: 0x020001CD RID: 461
		public class Summon : AbstractLevelPropertyGroup
		{
			// Token: 0x06000514 RID: 1300 RVA: 0x0002AB58 File Offset: 0x00028F58
			public Summon(float holdBeforeCreature, float holdAfterCreature, float hesitateAfterAttack)
			{
				this.holdBeforeCreature = holdBeforeCreature;
				this.holdAfterCreature = holdAfterCreature;
				this.hesitateAfterAttack = hesitateAfterAttack;
			}

			// Token: 0x0400099F RID: 2463
			public readonly float holdBeforeCreature;

			// Token: 0x040009A0 RID: 2464
			public readonly float holdAfterCreature;

			// Token: 0x040009A1 RID: 2465
			public readonly float hesitateAfterAttack;
		}

		// Token: 0x020001CE RID: 462
		public class Seahorse : AbstractLevelPropertyGroup
		{
			// Token: 0x06000515 RID: 1301 RVA: 0x0002AB75 File Offset: 0x00028F75
			public Seahorse(float hp, float maxSpeed, float acceleration, float bounceRatio, float waterForce, float homingDuration)
			{
				this.hp = hp;
				this.maxSpeed = maxSpeed;
				this.acceleration = acceleration;
				this.bounceRatio = bounceRatio;
				this.waterForce = waterForce;
				this.homingDuration = homingDuration;
			}

			// Token: 0x040009A2 RID: 2466
			public readonly float hp;

			// Token: 0x040009A3 RID: 2467
			public readonly float maxSpeed;

			// Token: 0x040009A4 RID: 2468
			public readonly float acceleration;

			// Token: 0x040009A5 RID: 2469
			public readonly float bounceRatio;

			// Token: 0x040009A6 RID: 2470
			public readonly float waterForce;

			// Token: 0x040009A7 RID: 2471
			public readonly float homingDuration;
		}

		// Token: 0x020001CF RID: 463
		public class Pufferfish : AbstractLevelPropertyGroup
		{
			// Token: 0x06000516 RID: 1302 RVA: 0x0002ABAA File Offset: 0x00028FAA
			public Pufferfish(float hp, float floatSpeed, float delay, float spawnDuration, string[] spawnString, MinMax pinkPufferSpawnRange)
			{
				this.hp = hp;
				this.floatSpeed = floatSpeed;
				this.delay = delay;
				this.spawnDuration = spawnDuration;
				this.spawnString = spawnString;
				this.pinkPufferSpawnRange = pinkPufferSpawnRange;
			}

			// Token: 0x040009A8 RID: 2472
			public readonly float hp;

			// Token: 0x040009A9 RID: 2473
			public readonly float floatSpeed;

			// Token: 0x040009AA RID: 2474
			public readonly float delay;

			// Token: 0x040009AB RID: 2475
			public readonly float spawnDuration;

			// Token: 0x040009AC RID: 2476
			public readonly string[] spawnString;

			// Token: 0x040009AD RID: 2477
			public readonly MinMax pinkPufferSpawnRange;
		}

		// Token: 0x020001D0 RID: 464
		public class Turtle : AbstractLevelPropertyGroup
		{
			// Token: 0x06000517 RID: 1303 RVA: 0x0002ABE0 File Offset: 0x00028FE0
			public Turtle(float hp, MinMax appearPosition, float speed, float bulletSpeed, MinMax timeUntilShoot, MinMax bulletTimeToExplode, float spreadshotBulletSpeed, string[] explodeSpreadshotString, float spiralRate)
			{
				this.hp = hp;
				this.appearPosition = appearPosition;
				this.speed = speed;
				this.bulletSpeed = bulletSpeed;
				this.timeUntilShoot = timeUntilShoot;
				this.bulletTimeToExplode = bulletTimeToExplode;
				this.spreadshotBulletSpeed = spreadshotBulletSpeed;
				this.explodeSpreadshotString = explodeSpreadshotString;
				this.spiralRate = spiralRate;
			}

			// Token: 0x040009AE RID: 2478
			public readonly float hp;

			// Token: 0x040009AF RID: 2479
			public readonly MinMax appearPosition;

			// Token: 0x040009B0 RID: 2480
			public readonly float speed;

			// Token: 0x040009B1 RID: 2481
			public readonly float bulletSpeed;

			// Token: 0x040009B2 RID: 2482
			public readonly MinMax timeUntilShoot;

			// Token: 0x040009B3 RID: 2483
			public readonly MinMax bulletTimeToExplode;

			// Token: 0x040009B4 RID: 2484
			public readonly float spreadshotBulletSpeed;

			// Token: 0x040009B5 RID: 2485
			public readonly string[] explodeSpreadshotString;

			// Token: 0x040009B6 RID: 2486
			public readonly float spiralRate;
		}

		// Token: 0x020001D1 RID: 465
		public class Fish : AbstractLevelPropertyGroup
		{
			// Token: 0x06000518 RID: 1304 RVA: 0x0002AC38 File Offset: 0x00029038
			public Fish(float delayBeforeFirstAttack, float delayBeforeFly, float flyingSpeed, float flyingUpSpeed, float flyingGravity, float hesitateAfterAttack)
			{
				this.delayBeforeFirstAttack = delayBeforeFirstAttack;
				this.delayBeforeFly = delayBeforeFly;
				this.flyingSpeed = flyingSpeed;
				this.flyingUpSpeed = flyingUpSpeed;
				this.flyingGravity = flyingGravity;
				this.hesitateAfterAttack = hesitateAfterAttack;
			}

			// Token: 0x040009B7 RID: 2487
			public readonly float delayBeforeFirstAttack;

			// Token: 0x040009B8 RID: 2488
			public readonly float delayBeforeFly;

			// Token: 0x040009B9 RID: 2489
			public readonly float flyingSpeed;

			// Token: 0x040009BA RID: 2490
			public readonly float flyingUpSpeed;

			// Token: 0x040009BB RID: 2491
			public readonly float flyingGravity;

			// Token: 0x040009BC RID: 2492
			public readonly float hesitateAfterAttack;
		}

		// Token: 0x020001D2 RID: 466
		public class SpreadshotFish : AbstractLevelPropertyGroup
		{
			// Token: 0x06000519 RID: 1305 RVA: 0x0002AC6D File Offset: 0x0002906D
			public SpreadshotFish(float attackDelay, string[] spreadVariableGroups, string[] shootString, string spreadshotPinkString)
			{
				this.attackDelay = attackDelay;
				this.spreadVariableGroups = spreadVariableGroups;
				this.shootString = shootString;
				this.spreadshotPinkString = spreadshotPinkString;
			}

			// Token: 0x040009BD RID: 2493
			public readonly float attackDelay;

			// Token: 0x040009BE RID: 2494
			public readonly string[] spreadVariableGroups;

			// Token: 0x040009BF RID: 2495
			public readonly string[] shootString;

			// Token: 0x040009C0 RID: 2496
			public readonly string spreadshotPinkString;
		}

		// Token: 0x020001D3 RID: 467
		public class SpinnerFish : AbstractLevelPropertyGroup
		{
			// Token: 0x0600051A RID: 1306 RVA: 0x0002AC92 File Offset: 0x00029092
			public SpinnerFish(float bulletSpeed, float timeBeforeTails, float rotationSpeed, float attackDelay, string[] shootString)
			{
				this.bulletSpeed = bulletSpeed;
				this.timeBeforeTails = timeBeforeTails;
				this.rotationSpeed = rotationSpeed;
				this.attackDelay = attackDelay;
				this.shootString = shootString;
			}

			// Token: 0x040009C1 RID: 2497
			public readonly float bulletSpeed;

			// Token: 0x040009C2 RID: 2498
			public readonly float timeBeforeTails;

			// Token: 0x040009C3 RID: 2499
			public readonly float rotationSpeed;

			// Token: 0x040009C4 RID: 2500
			public readonly float attackDelay;

			// Token: 0x040009C5 RID: 2501
			public readonly string[] shootString;
		}

		// Token: 0x020001D4 RID: 468
		public class HomerFish : AbstractLevelPropertyGroup
		{
			// Token: 0x0600051B RID: 1307 RVA: 0x0002ACBF File Offset: 0x000290BF
			public HomerFish(float initSpeed, float timeBeforeHoming, float bulletSpeed, float rotationSpeed, float timeBeforeDeath, float attackDelay, string[] shootString)
			{
				this.initSpeed = initSpeed;
				this.timeBeforeHoming = timeBeforeHoming;
				this.bulletSpeed = bulletSpeed;
				this.rotationSpeed = rotationSpeed;
				this.timeBeforeDeath = timeBeforeDeath;
				this.attackDelay = attackDelay;
				this.shootString = shootString;
			}

			// Token: 0x040009C6 RID: 2502
			public readonly float initSpeed;

			// Token: 0x040009C7 RID: 2503
			public readonly float timeBeforeHoming;

			// Token: 0x040009C8 RID: 2504
			public readonly float bulletSpeed;

			// Token: 0x040009C9 RID: 2505
			public readonly float rotationSpeed;

			// Token: 0x040009CA RID: 2506
			public readonly float timeBeforeDeath;

			// Token: 0x040009CB RID: 2507
			public readonly float attackDelay;

			// Token: 0x040009CC RID: 2508
			public readonly string[] shootString;
		}

		// Token: 0x020001D5 RID: 469
		public class Eel : AbstractLevelPropertyGroup
		{
			// Token: 0x0600051C RID: 1308 RVA: 0x0002ACFC File Offset: 0x000290FC
			public Eel(float hp, MinMax attackAmount, MinMax idleTime, MinMax appearDelay, MinMax spreadAngle, float numBullets, float bulletSpeed, float hesitateAfterAttack, string bulletPinkString)
			{
				this.hp = hp;
				this.attackAmount = attackAmount;
				this.idleTime = idleTime;
				this.appearDelay = appearDelay;
				this.spreadAngle = spreadAngle;
				this.numBullets = numBullets;
				this.bulletSpeed = bulletSpeed;
				this.hesitateAfterAttack = hesitateAfterAttack;
				this.bulletPinkString = bulletPinkString;
			}

			// Token: 0x040009CD RID: 2509
			public readonly float hp;

			// Token: 0x040009CE RID: 2510
			public readonly MinMax attackAmount;

			// Token: 0x040009CF RID: 2511
			public readonly MinMax idleTime;

			// Token: 0x040009D0 RID: 2512
			public readonly MinMax appearDelay;

			// Token: 0x040009D1 RID: 2513
			public readonly MinMax spreadAngle;

			// Token: 0x040009D2 RID: 2514
			public readonly float numBullets;

			// Token: 0x040009D3 RID: 2515
			public readonly float bulletSpeed;

			// Token: 0x040009D4 RID: 2516
			public readonly float hesitateAfterAttack;

			// Token: 0x040009D5 RID: 2517
			public readonly string bulletPinkString;
		}

		// Token: 0x020001D6 RID: 470
		public class Zap : AbstractLevelPropertyGroup
		{
			// Token: 0x0600051D RID: 1309 RVA: 0x0002AD54 File Offset: 0x00029154
			public Zap(float attackTime, MinMax hesitateAfterAttack, float stoneTime)
			{
				this.attackTime = attackTime;
				this.hesitateAfterAttack = hesitateAfterAttack;
				this.stoneTime = stoneTime;
			}

			// Token: 0x040009D6 RID: 2518
			public readonly float attackTime;

			// Token: 0x040009D7 RID: 2519
			public readonly MinMax hesitateAfterAttack;

			// Token: 0x040009D8 RID: 2520
			public readonly float stoneTime;
		}

		// Token: 0x020001D7 RID: 471
		public class Bubbles : AbstractLevelPropertyGroup
		{
			// Token: 0x0600051E RID: 1310 RVA: 0x0002AD71 File Offset: 0x00029171
			public Bubbles(float movementSpeed, float waveSpeed, float waveAmount, float hp, MinMax attackDelayRange)
			{
				this.movementSpeed = movementSpeed;
				this.waveSpeed = waveSpeed;
				this.waveAmount = waveAmount;
				this.hp = hp;
				this.attackDelayRange = attackDelayRange;
			}

			// Token: 0x040009D9 RID: 2521
			public readonly float movementSpeed;

			// Token: 0x040009DA RID: 2522
			public readonly float waveSpeed;

			// Token: 0x040009DB RID: 2523
			public readonly float waveAmount;

			// Token: 0x040009DC RID: 2524
			public readonly float hp;

			// Token: 0x040009DD RID: 2525
			public readonly MinMax attackDelayRange;
		}

		// Token: 0x020001D8 RID: 472
		public class HeadBlast : AbstractLevelPropertyGroup
		{
			// Token: 0x0600051F RID: 1311 RVA: 0x0002AD9E File Offset: 0x0002919E
			public HeadBlast(float movementSpeed, MinMax attackDelayRange)
			{
				this.movementSpeed = movementSpeed;
				this.attackDelayRange = attackDelayRange;
			}

			// Token: 0x040009DE RID: 2526
			public readonly float movementSpeed;

			// Token: 0x040009DF RID: 2527
			public readonly MinMax attackDelayRange;
		}

		// Token: 0x020001D9 RID: 473
		public class Coral : AbstractLevelPropertyGroup
		{
			// Token: 0x06000520 RID: 1312 RVA: 0x0002ADB4 File Offset: 0x000291B4
			public Coral(float coralMoveSpeed, string[] yellowDotPosString, MinMax yellowSpawnDelayRange, MinMax bubbleEyewaveSpawnDelayRange)
			{
				this.coralMoveSpeed = coralMoveSpeed;
				this.yellowDotPosString = yellowDotPosString;
				this.yellowSpawnDelayRange = yellowSpawnDelayRange;
				this.bubbleEyewaveSpawnDelayRange = bubbleEyewaveSpawnDelayRange;
			}

			// Token: 0x040009E0 RID: 2528
			public readonly float coralMoveSpeed;

			// Token: 0x040009E1 RID: 2529
			public readonly string[] yellowDotPosString;

			// Token: 0x040009E2 RID: 2530
			public readonly MinMax yellowSpawnDelayRange;

			// Token: 0x040009E3 RID: 2531
			public readonly MinMax bubbleEyewaveSpawnDelayRange;
		}
	}

	// Token: 0x020001DB RID: 475
	public class FlyingTest : AbstractLevelProperties<LevelProperties.FlyingTest.State, LevelProperties.FlyingTest.Pattern, LevelProperties.FlyingTest.States>
	{
		// Token: 0x06000538 RID: 1336 RVA: 0x0002ADD9 File Offset: 0x000291D9
		public FlyingTest(int hp, Level.GoalTimes goalTimes, LevelProperties.FlyingTest.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000539 RID: 1337 RVA: 0x0002ADE8 File Offset: 0x000291E8
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 200f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x0600053A RID: 1338 RVA: 0x0002AE43 File Offset: 0x00029243
		public static LevelProperties.FlyingTest.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "M")
				{
					return LevelProperties.FlyingTest.Pattern.Main;
				}
			}
			Debug.LogError("Pattern FlyingTest.Pattern for  " + id + " not found.", null);
			return LevelProperties.FlyingTest.Pattern.Uninitialized;
		}

		// Token: 0x0600053B RID: 1339 RVA: 0x0002AE84 File Offset: 0x00029284
		public static LevelProperties.FlyingTest GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.FlyingTest.State> list = new List<LevelProperties.FlyingTest.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.FlyingTest.State(10f, new LevelProperties.FlyingTest.Pattern[][]
						{
							new LevelProperties.FlyingTest.Pattern[0]
						}, LevelProperties.FlyingTest.States.Main));
					}
				}
				else
				{
					hp = 200;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.FlyingTest.State(10f, new LevelProperties.FlyingTest.Pattern[][]
					{
						new LevelProperties.FlyingTest.Pattern[1]
					}, LevelProperties.FlyingTest.States.Main));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.FlyingTest.State(10f, new LevelProperties.FlyingTest.Pattern[][]
				{
					new LevelProperties.FlyingTest.Pattern[0]
				}, LevelProperties.FlyingTest.States.Main));
			}
			return new LevelProperties.FlyingTest(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020001DC RID: 476
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000EB RID: 235
			// (get) Token: 0x0600053D RID: 1341 RVA: 0x0002AF83 File Offset: 0x00029383
			// (set) Token: 0x0600053E RID: 1342 RVA: 0x0002AF8B File Offset: 0x0002938B
			private protected LevelProperties.FlyingTest properties { protected get; private set; }

			// Token: 0x0600053F RID: 1343 RVA: 0x0002AF94 File Offset: 0x00029394
			public virtual void LevelInit(LevelProperties.FlyingTest properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000540 RID: 1344 RVA: 0x0002AF9D File Offset: 0x0002939D
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020001DD RID: 477
		public enum States
		{
			// Token: 0x040009F2 RID: 2546
			Main,
			// Token: 0x040009F3 RID: 2547
			Generic
		}

		// Token: 0x020001DE RID: 478
		public enum Pattern
		{
			// Token: 0x040009F5 RID: 2549
			Main,
			// Token: 0x040009F6 RID: 2550
			Uninitialized
		}

		// Token: 0x020001DF RID: 479
		public class State : AbstractLevelState<LevelProperties.FlyingTest.Pattern, LevelProperties.FlyingTest.States>
		{
			// Token: 0x06000541 RID: 1345 RVA: 0x0002AF9F File Offset: 0x0002939F
			public State(float healthTrigger, LevelProperties.FlyingTest.Pattern[][] patterns, LevelProperties.FlyingTest.States stateName) : base(healthTrigger, patterns, stateName)
			{
			}
		}
	}

	// Token: 0x020001E1 RID: 481
	public class Frogs : AbstractLevelProperties<LevelProperties.Frogs.State, LevelProperties.Frogs.Pattern, LevelProperties.Frogs.States>
	{
		// Token: 0x0600054C RID: 1356 RVA: 0x0002AFAA File Offset: 0x000293AA
		public Frogs(int hp, Level.GoalTimes goalTimes, LevelProperties.Frogs.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600054D RID: 1357 RVA: 0x0002AFB8 File Offset: 0x000293B8
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1400f;
				timeline.events.Add(new Level.Timeline.Event("Roll", 0.61f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1700f;
				timeline.events.Add(new Level.Timeline.Event("Roll", 0.76f));
				timeline.events.Add(new Level.Timeline.Event("Morph", 0.34f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1900f;
				timeline.events.Add(new Level.Timeline.Event("Roll", 0.74f));
				timeline.events.Add(new Level.Timeline.Event("Morph", 0.35f));
				break;
			}
			return timeline;
		}

		// Token: 0x0600054E RID: 1358 RVA: 0x0002B098 File Offset: 0x00029498
		public static LevelProperties.Frogs.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "F")
				{
					return LevelProperties.Frogs.Pattern.TallFan;
				}
				if (id == "R")
				{
					return LevelProperties.Frogs.Pattern.ShortRage;
				}
				if (id == "S")
				{
					return LevelProperties.Frogs.Pattern.TallFireflies;
				}
				if (id == "C")
				{
					return LevelProperties.Frogs.Pattern.ShortClap;
				}
				if (id == "M")
				{
					return LevelProperties.Frogs.Pattern.Morph;
				}
				if (id == "P")
				{
					return LevelProperties.Frogs.Pattern.RagePlusFireflies;
				}
			}
			Debug.LogError("Pattern Frogs.Pattern for  " + id + " not found.", null);
			return LevelProperties.Frogs.Pattern.Uninitialized;
		}

		// Token: 0x0600054F RID: 1359 RVA: 0x0002B13C File Offset: 0x0002953C
		public static LevelProperties.Frogs GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Frogs.State> list = new List<LevelProperties.Frogs.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1900;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Frogs.State(10f, new LevelProperties.Frogs.Pattern[][]
						{
							new LevelProperties.Frogs.Pattern[]
							{
								LevelProperties.Frogs.Pattern.RagePlusFireflies
							}
						}, LevelProperties.Frogs.States.Main, new LevelProperties.Frogs.TallFan(-410f, 2, new MinMax(2.5f, 3.5f), 1), new LevelProperties.Frogs.TallFireflies(new string[]
						{
							"D:1, S:2, D:2.5, S:2, D:1.5, S:1",
							"D:0.5, S:1, D:2, S:1, D:1.5, S:2",
							"D:1, S:2, D:2.2, S:2",
							"D:1, S:2, D:2, S:1, D:1, S:1",
							"D:0.5, S:1, D:2.5, S:2, D:2.1, S:2",
							"D:1.4, S:2, D:2.4, S:2",
							"D:1, S:1, D:1.8, S:2, D:1.5, S:1"
						}, 1000f, 0.4f, 1f, 180f, 4, 2f, 0.15f), new LevelProperties.Frogs.ShortRage(1f, 900f, 0.5f, 5, new string[]
						{
							"RRPRP",
							"RPRPR",
							"PRRRP"
						}, 2f), new LevelProperties.Frogs.ShortRoll(1.5f, 1.5f, 0.8f, 0.1f), new LevelProperties.Frogs.ShortClap(new string[]
						{
							"S:1, D:1.5, S:1, D:1.8, S:1",
							"S:1, D:1.7, S:1",
							"S:1, D:1.6, S:1, D:1.7, S:1",
							"S:1, D:2, S:1",
							"S:1, D:1.4, S:1, D:1.9, S:1",
							"S:1, D:2, S:1"
						}, new float[]
						{
							73f,
							68f,
							70f,
							75f,
							76f,
							69f,
							74f,
							70f,
							67f,
							77f,
							72f,
							67f
						}, 1030f, 0.8f, 1f), new LevelProperties.Frogs.Morph(3f, 0.7f, new MinMax(800f, 1000f), new MinMax(0.7f, 0.5f), 5f, new MinMax(700f, 1150f), new MinMax(0.7f, 0.3f), 6f, 10f, new MinMax(600f, 920f), new MinMax(1f, 0.65f), 6f, 600f, 300f, 10, 488f, new MinMax(1.2f, 0.7f), 6f, 10f), new LevelProperties.Frogs.Demon(8f, 15f, new MinMax(530f, 690f), new MinMax(1.2f, 0.7f), 13f, new string[]
						{
							"S,S,T,S,B,S,S,S,O,S,S,T",
							"S,T,B,S,S,O,S,B,T,S,S,B",
							"S,S,O,S,T,B,S,S,B,T,S,O",
							"S,S,B,S,B,S,S,T,S,O,S,S,B",
							"S,S,T,B,S,S,B,S,O,S,S,B",
							"S,S,T,S,B,O,S,S,B,S,S,T",
							"S,S,T,S,T,S,S,B,O,S,B,S",
							"S,S,O,S,T,S,S,B,B,S,S,O"
						})));
						list.Add(new LevelProperties.Frogs.State(0.74f, new LevelProperties.Frogs.Pattern[][]
						{
							new LevelProperties.Frogs.Pattern[]
							{
								LevelProperties.Frogs.Pattern.ShortRage,
								LevelProperties.Frogs.Pattern.ShortClap,
								LevelProperties.Frogs.Pattern.ShortRage,
								LevelProperties.Frogs.Pattern.ShortClap,
								LevelProperties.Frogs.Pattern.ShortRage,
								LevelProperties.Frogs.Pattern.ShortClap,
								LevelProperties.Frogs.Pattern.ShortRage,
								LevelProperties.Frogs.Pattern.ShortClap,
								LevelProperties.Frogs.Pattern.ShortClap
							}
						}, LevelProperties.Frogs.States.Roll, new LevelProperties.Frogs.TallFan(-410f, 2, new MinMax(2.5f, 3.5f), 1), new LevelProperties.Frogs.TallFireflies(new string[]
						{
							"D:1, S:2, D:2.5, S:2, D:1.5, S:1",
							"D:0.5, S:1, D:2, S:1, D:1.5, S:2",
							"D:1, S:2, D:2.2, S:2",
							"D:1, S:2, D:2, S:1, D:1, S:1",
							"D:0.5, S:1, D:2.5, S:2, D:2.1, S:2",
							"D:1.4, S:2, D:2.4, S:2",
							"D:1, S:1, D:1.8, S:2, D:1.5, S:1"
						}, 1000f, 0.4f, 1f, 180f, 4, 2f, 0.15f), new LevelProperties.Frogs.ShortRage(1f, 850f, 0.6f, 3, new string[]
						{
							"RRP",
							"PRR",
							"RPR",
							"PRR"
						}, 2f), new LevelProperties.Frogs.ShortRoll(1.5f, 1.5f, 0.8f, 0.1f), new LevelProperties.Frogs.ShortClap(new string[]
						{
							"S:1, D:1.5, S:1, D:1.8, S:1",
							"S:1, D:1.7, S:1",
							"S:1, D:1.6, S:1, D:1.7, S:1",
							"S:1, D:2, S:1",
							"S:1, D:1.4, S:1, D:1.9, S:1",
							"S:1, D:2, S:1"
						}, new float[]
						{
							73f,
							68f,
							70f,
							75f,
							76f,
							69f,
							74f,
							70f,
							67f,
							77f,
							72f,
							67f
						}, 1030f, 0.8f, 1f), new LevelProperties.Frogs.Morph(3f, 0.7f, new MinMax(800f, 1000f), new MinMax(0.7f, 0.5f), 5f, new MinMax(700f, 1150f), new MinMax(0.7f, 0.3f), 6f, 10f, new MinMax(600f, 920f), new MinMax(1f, 0.65f), 6f, 600f, 300f, 10, 488f, new MinMax(1.2f, 0.7f), 6f, 10f), new LevelProperties.Frogs.Demon(8f, 15f, new MinMax(530f, 690f), new MinMax(1.2f, 0.7f), 13f, new string[]
						{
							"S,S,T,S,B,S,S,S,O,S,S,T",
							"S,T,B,S,S,O,S,B,T,S,S,B",
							"S,S,O,S,T,B,S,S,B,T,S,O",
							"S,S,B,S,B,S,S,T,S,O,S,S,B",
							"S,S,T,B,S,S,B,S,O,S,S,B",
							"S,S,T,S,B,O,S,S,B,S,S,T",
							"S,S,T,S,T,S,S,B,O,S,B,S",
							"S,S,O,S,T,S,S,B,B,S,S,O"
						})));
						list.Add(new LevelProperties.Frogs.State(0.35f, new LevelProperties.Frogs.Pattern[][]
						{
							new LevelProperties.Frogs.Pattern[0]
						}, LevelProperties.Frogs.States.Morph, new LevelProperties.Frogs.TallFan(-410f, 2, new MinMax(2.5f, 3.5f), 1), new LevelProperties.Frogs.TallFireflies(new string[]
						{
							"D:1, S:2, D:2.5, S:2, D:1.5, S:1",
							"D:0.5, S:1, D:2, S:1, D:1.5, S:2",
							"D:1, S:2, D:2.2, S:2",
							"D:1, S:2, D:2, S:1, D:1, S:1",
							"D:0.5, S:1, D:2.5, S:2, D:2.1, S:2",
							"D:1.4, S:2, D:2.4, S:2",
							"D:1, S:1, D:1.8, S:2, D:1.5, S:1"
						}, 1000f, 0.4f, 1f, 180f, 4, 2f, 0.15f), new LevelProperties.Frogs.ShortRage(1f, 850f, 0.6f, 3, new string[]
						{
							"RRP",
							"PRR",
							"RPR",
							"PRR"
						}, 2f), new LevelProperties.Frogs.ShortRoll(1.5f, 1.5f, 0.8f, 0.1f), new LevelProperties.Frogs.ShortClap(new string[]
						{
							"S:1, D:1.5, S:1, D:1.8, S:1",
							"S:1, D:1.7, S:1",
							"S:1, D:1.6, S:1, D:1.7, S:1",
							"S:1, D:2, S:1",
							"S:1, D:1.4, S:1, D:1.9, S:1",
							"S:1, D:2, S:1"
						}, new float[]
						{
							73f,
							68f,
							70f,
							75f,
							76f,
							69f,
							74f,
							70f,
							67f,
							77f,
							72f,
							67f
						}, 1030f, 0.8f, 1f), new LevelProperties.Frogs.Morph(3f, 0.7f, new MinMax(800f, 1000f), new MinMax(0.7f, 0.5f), 5f, new MinMax(700f, 1150f), new MinMax(0.7f, 0.3f), 6f, 10f, new MinMax(600f, 920f), new MinMax(1f, 0.65f), 6f, 600f, 300f, 10, 488f, new MinMax(1.2f, 0.7f), 6f, 10f), new LevelProperties.Frogs.Demon(8f, 15f, new MinMax(530f, 690f), new MinMax(1.2f, 0.7f), 13f, new string[]
						{
							"S,S,T,S,B,S,S,S,O,S,S,T",
							"S,T,B,S,S,O,S,B,T,S,S,B",
							"S,S,O,S,T,B,S,S,B,T,S,O",
							"S,S,B,S,B,S,S,T,S,O,S,S,B",
							"S,S,T,B,S,S,B,S,O,S,S,B",
							"S,S,T,S,B,O,S,S,B,S,S,T",
							"S,S,T,S,T,S,S,B,O,S,B,S",
							"S,S,O,S,T,S,S,B,B,S,S,O"
						})));
					}
				}
				else
				{
					hp = 1700;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Frogs.State(10f, new LevelProperties.Frogs.Pattern[][]
					{
						new LevelProperties.Frogs.Pattern[]
						{
							LevelProperties.Frogs.Pattern.ShortRage,
							LevelProperties.Frogs.Pattern.TallFireflies
						}
					}, LevelProperties.Frogs.States.Main, new LevelProperties.Frogs.TallFan(-300f, 2, new MinMax(3f, 4f), 1), new LevelProperties.Frogs.TallFireflies(new string[]
					{
						"D:1, S:2, D:1, S:2, D:1, S:1, D:1, S:2",
						"D:1, S:2, D:1, S:2, D:1, S:2",
						"D:1, S:2, D:1, S:1, D:1, S:2, D:1, S:2",
						"D:1, S:2, D:1, S:2, D:1, S:1"
					}, 1000f, 0.4f, 1.3f, 210f, 4, 2f, 0.15f), new LevelProperties.Frogs.ShortRage(1f, 900f, 0.65f, 9, new string[]
					{
						"RRP",
						"PRR",
						"RPR"
					}, 1f), new LevelProperties.Frogs.ShortRoll(2f, 1.7f, 0.8f, 0.1f), new LevelProperties.Frogs.ShortClap(new string[]
					{
						"S:1, D:1.5, S:1, D:1.7, S:1",
						"S:1, D:1.7, S:1, D:1.5, S:1",
						"S:1, D:1.6, S:1, D:1.6, S:1"
					}, new float[]
					{
						72f,
						68f,
						70f,
						69f,
						66f,
						71f,
						68f,
						70f,
						67f
					}, 950f, 0.8f, 2f), new LevelProperties.Frogs.Morph(3f, 0.7f, new MinMax(700f, 950f), new MinMax(1.3f, 0.9f), 7f, new MinMax(600f, 900f), new MinMax(0.6f, 0.3f), 5f, 10f, new MinMax(500f, 700f), new MinMax(1.2f, 0.8f), 5f, 600f, 300f, 10, 478f, new MinMax(1.3f, 0.8f), 5f, 10f), new LevelProperties.Frogs.Demon(8f, 15f, new MinMax(480f, 620f), new MinMax(1.4f, 0.85f), 13f, new string[]
					{
						"S,S,T,S,B,B,S,S,O,S,S,T",
						"S,S,O,S,T,B,S,S,B,B,S,O",
						"S,T,B,S,S,T,S,B,T,S,S,O",
						"S,B,B,S,S,S,T,O,S,S,B,S",
						"S,T,S,O,S,S,S,B,B,B,S,T",
						"S,S,T,S,B,B,S,S,O,S,B,S"
					})));
					list.Add(new LevelProperties.Frogs.State(0.76f, new LevelProperties.Frogs.Pattern[][]
					{
						new LevelProperties.Frogs.Pattern[]
						{
							LevelProperties.Frogs.Pattern.ShortClap
						}
					}, LevelProperties.Frogs.States.Roll, new LevelProperties.Frogs.TallFan(-300f, 2, new MinMax(3f, 4f), 1), new LevelProperties.Frogs.TallFireflies(new string[]
					{
						"D:1, S:2, D:1, S:2, D:1, S:1, D:1, S:2",
						"D:1, S:2, D:1, S:2, D:1, S:2",
						"D:1, S:2, D:1, S:1, D:1, S:2, D:1, S:2",
						"D:1, S:2, D:1, S:2, D:1, S:1"
					}, 1000f, 0.4f, 1.3f, 210f, 4, 2f, 0.15f), new LevelProperties.Frogs.ShortRage(1f, 900f, 0.65f, 9, new string[]
					{
						"RRP",
						"PRR",
						"RPR"
					}, 1f), new LevelProperties.Frogs.ShortRoll(2f, 1.7f, 0.8f, 0.1f), new LevelProperties.Frogs.ShortClap(new string[]
					{
						"S:1, D:1.5, S:1, D:1.7, S:1",
						"S:1, D:1.7, S:1, D:1.5, S:1",
						"S:1, D:1.6, S:1, D:1.6, S:1"
					}, new float[]
					{
						72f,
						68f,
						70f,
						69f,
						66f,
						71f,
						68f,
						70f,
						67f
					}, 950f, 0.8f, 2f), new LevelProperties.Frogs.Morph(3f, 0.7f, new MinMax(700f, 950f), new MinMax(1.3f, 0.9f), 7f, new MinMax(600f, 900f), new MinMax(0.6f, 0.3f), 5f, 10f, new MinMax(500f, 700f), new MinMax(1.2f, 0.8f), 5f, 600f, 300f, 10, 478f, new MinMax(1.3f, 0.8f), 5f, 10f), new LevelProperties.Frogs.Demon(8f, 15f, new MinMax(480f, 620f), new MinMax(1.4f, 0.85f), 13f, new string[]
					{
						"S,S,T,S,B,B,S,S,O,S,S,T",
						"S,S,O,S,T,B,S,S,B,B,S,O",
						"S,T,B,S,S,T,S,B,T,S,S,O",
						"S,B,B,S,S,S,T,O,S,S,B,S",
						"S,T,S,O,S,S,S,B,B,B,S,T",
						"S,S,T,S,B,B,S,S,O,S,B,S"
					})));
					list.Add(new LevelProperties.Frogs.State(0.34f, new LevelProperties.Frogs.Pattern[][]
					{
						new LevelProperties.Frogs.Pattern[]
						{
							LevelProperties.Frogs.Pattern.Morph
						}
					}, LevelProperties.Frogs.States.Morph, new LevelProperties.Frogs.TallFan(-300f, 2, new MinMax(3f, 4f), 1), new LevelProperties.Frogs.TallFireflies(new string[]
					{
						"D:1, S:2, D:1, S:2, D:1, S:1, D:1, S:2",
						"D:1, S:2, D:1, S:2, D:1, S:2",
						"D:1, S:2, D:1, S:1, D:1, S:2, D:1, S:2",
						"D:1, S:2, D:1, S:2, D:1, S:1"
					}, 1000f, 0.4f, 1.3f, 210f, 4, 2f, 0.15f), new LevelProperties.Frogs.ShortRage(1f, 900f, 0.65f, 9, new string[]
					{
						"RRP",
						"PRR",
						"RPR"
					}, 1f), new LevelProperties.Frogs.ShortRoll(2f, 1.7f, 0.8f, 0.1f), new LevelProperties.Frogs.ShortClap(new string[]
					{
						"S:1, D:1.5, S:1, D:1.7, S:1",
						"S:1, D:1.7, S:1, D:1.5, S:1",
						"S:1, D:1.6, S:1, D:1.6, S:1"
					}, new float[]
					{
						72f,
						68f,
						70f,
						69f,
						66f,
						71f,
						68f,
						70f,
						67f
					}, 950f, 0.8f, 2f), new LevelProperties.Frogs.Morph(3f, 0.7f, new MinMax(700f, 950f), new MinMax(1.3f, 0.9f), 7f, new MinMax(600f, 900f), new MinMax(0.6f, 0.3f), 5f, 10f, new MinMax(500f, 700f), new MinMax(1.2f, 0.8f), 5f, 600f, 300f, 10, 478f, new MinMax(1.3f, 0.8f), 5f, 10f), new LevelProperties.Frogs.Demon(8f, 15f, new MinMax(480f, 620f), new MinMax(1.4f, 0.85f), 13f, new string[]
					{
						"S,S,T,S,B,B,S,S,O,S,S,T",
						"S,S,O,S,T,B,S,S,B,B,S,O",
						"S,T,B,S,S,T,S,B,T,S,S,O",
						"S,B,B,S,S,S,T,O,S,S,B,S",
						"S,T,S,O,S,S,S,B,B,B,S,T",
						"S,S,T,S,B,B,S,S,O,S,B,S"
					})));
				}
			}
			else
			{
				hp = 1400;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Frogs.State(10f, new LevelProperties.Frogs.Pattern[][]
				{
					new LevelProperties.Frogs.Pattern[]
					{
						LevelProperties.Frogs.Pattern.TallFireflies,
						LevelProperties.Frogs.Pattern.ShortRage
					}
				}, LevelProperties.Frogs.States.Main, new LevelProperties.Frogs.TallFan(-225f, 2, new MinMax(3.5f, 4.5f), 2), new LevelProperties.Frogs.TallFireflies(new string[]
				{
					"D:1, S:2, D:1.5, S:1, D:1, S:1",
					"D:1.5, S:1, D:1.5, S:1, D:1, S:2",
					"D:0.5, S:2, D:1, S:1, D:0.5, S:1"
				}, 1000f, 0.5f, 1.5f, 180f, 4, 2f, 0.15f), new LevelProperties.Frogs.ShortRage(1f, 800f, 0.8f, 5, new string[]
				{
					"PRPPR",
					"RPPRP",
					"PRPRP"
				}, 1f), new LevelProperties.Frogs.ShortRoll(3f, 2f, 0.8f, 0.1f), new LevelProperties.Frogs.ShortClap(new string[]
				{
					"S:1, D:2.8, S:1",
					"S:1, D:2, S:1",
					"S:1",
					"S:1, D:1.8, S:1",
					"S:1, D:2.5, S:1"
				}, new float[]
				{
					65f,
					68f,
					66f,
					69f,
					67f,
					67f,
					69f
				}, 850f, 1.5f, 2f), new LevelProperties.Frogs.Morph(0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f, 0f, 0, 0f, new MinMax(0f, 1f), 0f, 0f), new LevelProperties.Frogs.Demon(0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new string[0])));
				list.Add(new LevelProperties.Frogs.State(0.61f, new LevelProperties.Frogs.Pattern[][]
				{
					new LevelProperties.Frogs.Pattern[]
					{
						LevelProperties.Frogs.Pattern.ShortClap,
						LevelProperties.Frogs.Pattern.ShortRage
					}
				}, LevelProperties.Frogs.States.Roll, new LevelProperties.Frogs.TallFan(-225f, 2, new MinMax(3.5f, 4.5f), 2), new LevelProperties.Frogs.TallFireflies(new string[]
				{
					"D:1, S:2, D:1.5, S:1, D:1, S:1",
					"D:1.5, S:1, D:1.5, S:1, D:1, S:2",
					"D:0.5, S:2, D:1, S:1, D:0.5, S:1"
				}, 1000f, 0.5f, 1.5f, 180f, 4, 2f, 0.15f), new LevelProperties.Frogs.ShortRage(1f, 800f, 1f, 3, new string[]
				{
					"PRR",
					"RPR",
					"PRR",
					"RRP",
					"PRR"
				}, 2f), new LevelProperties.Frogs.ShortRoll(3f, 2f, 0.8f, 0.1f), new LevelProperties.Frogs.ShortClap(new string[]
				{
					"S:1, D:2.8, S:1",
					"S:1, D:2, S:1",
					"S:1",
					"S:1, D:1.8, S:1",
					"S:1, D:2.5, S:1"
				}, new float[]
				{
					65f,
					68f,
					66f,
					69f,
					67f,
					67f,
					69f
				}, 850f, 1.5f, 2f), new LevelProperties.Frogs.Morph(0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, 0f, 0f, 0, 0f, new MinMax(0f, 1f), 0f, 0f), new LevelProperties.Frogs.Demon(0f, 0f, new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, new string[0])));
			}
			return new LevelProperties.Frogs(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020001E2 RID: 482
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000F0 RID: 240
			// (get) Token: 0x06000551 RID: 1361 RVA: 0x0002C3E8 File Offset: 0x0002A7E8
			// (set) Token: 0x06000552 RID: 1362 RVA: 0x0002C3F0 File Offset: 0x0002A7F0
			private protected LevelProperties.Frogs properties { protected get; private set; }

			// Token: 0x06000553 RID: 1363 RVA: 0x0002C3F9 File Offset: 0x0002A7F9
			public virtual void LevelInit(LevelProperties.Frogs properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000554 RID: 1364 RVA: 0x0002C402 File Offset: 0x0002A802
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020001E3 RID: 483
		public enum States
		{
			// Token: 0x040009FC RID: 2556
			Main,
			// Token: 0x040009FD RID: 2557
			Generic,
			// Token: 0x040009FE RID: 2558
			Roll,
			// Token: 0x040009FF RID: 2559
			Morph
		}

		// Token: 0x020001E4 RID: 484
		public enum Pattern
		{
			// Token: 0x04000A01 RID: 2561
			TallFan,
			// Token: 0x04000A02 RID: 2562
			ShortRage,
			// Token: 0x04000A03 RID: 2563
			TallFireflies,
			// Token: 0x04000A04 RID: 2564
			ShortClap,
			// Token: 0x04000A05 RID: 2565
			Morph,
			// Token: 0x04000A06 RID: 2566
			RagePlusFireflies,
			// Token: 0x04000A07 RID: 2567
			Uninitialized
		}

		// Token: 0x020001E5 RID: 485
		public class State : AbstractLevelState<LevelProperties.Frogs.Pattern, LevelProperties.Frogs.States>
		{
			// Token: 0x06000555 RID: 1365 RVA: 0x0002C404 File Offset: 0x0002A804
			public State(float healthTrigger, LevelProperties.Frogs.Pattern[][] patterns, LevelProperties.Frogs.States stateName, LevelProperties.Frogs.TallFan tallFan, LevelProperties.Frogs.TallFireflies tallFireflies, LevelProperties.Frogs.ShortRage shortRage, LevelProperties.Frogs.ShortRoll shortRoll, LevelProperties.Frogs.ShortClap shortClap, LevelProperties.Frogs.Morph morph, LevelProperties.Frogs.Demon demon) : base(healthTrigger, patterns, stateName)
			{
				this.tallFan = tallFan;
				this.tallFireflies = tallFireflies;
				this.shortRage = shortRage;
				this.shortRoll = shortRoll;
				this.shortClap = shortClap;
				this.morph = morph;
				this.demon = demon;
			}

			// Token: 0x04000A08 RID: 2568
			public readonly LevelProperties.Frogs.TallFan tallFan;

			// Token: 0x04000A09 RID: 2569
			public readonly LevelProperties.Frogs.TallFireflies tallFireflies;

			// Token: 0x04000A0A RID: 2570
			public readonly LevelProperties.Frogs.ShortRage shortRage;

			// Token: 0x04000A0B RID: 2571
			public readonly LevelProperties.Frogs.ShortRoll shortRoll;

			// Token: 0x04000A0C RID: 2572
			public readonly LevelProperties.Frogs.ShortClap shortClap;

			// Token: 0x04000A0D RID: 2573
			public readonly LevelProperties.Frogs.Morph morph;

			// Token: 0x04000A0E RID: 2574
			public readonly LevelProperties.Frogs.Demon demon;
		}

		// Token: 0x020001E6 RID: 486
		public class TallFan : AbstractLevelPropertyGroup
		{
			// Token: 0x06000556 RID: 1366 RVA: 0x0002C452 File Offset: 0x0002A852
			public TallFan(float power, int accelerationTime, MinMax duration, int hesitate)
			{
				this.power = power;
				this.accelerationTime = accelerationTime;
				this.duration = duration;
				this.hesitate = hesitate;
			}

			// Token: 0x04000A0F RID: 2575
			public readonly float power;

			// Token: 0x04000A10 RID: 2576
			public readonly int accelerationTime;

			// Token: 0x04000A11 RID: 2577
			public readonly MinMax duration;

			// Token: 0x04000A12 RID: 2578
			public readonly int hesitate;
		}

		// Token: 0x020001E7 RID: 487
		public class TallFireflies : AbstractLevelPropertyGroup
		{
			// Token: 0x06000557 RID: 1367 RVA: 0x0002C478 File Offset: 0x0002A878
			public TallFireflies(string[] patterns, float speed, float followTime, float followDelay, float followDistance, int hp, float hesitate, float invincibleDuration)
			{
				this.patterns = patterns;
				this.speed = speed;
				this.followTime = followTime;
				this.followDelay = followDelay;
				this.followDistance = followDistance;
				this.hp = hp;
				this.hesitate = hesitate;
				this.invincibleDuration = invincibleDuration;
			}

			// Token: 0x04000A13 RID: 2579
			public readonly string[] patterns;

			// Token: 0x04000A14 RID: 2580
			public readonly float speed;

			// Token: 0x04000A15 RID: 2581
			public readonly float followTime;

			// Token: 0x04000A16 RID: 2582
			public readonly float followDelay;

			// Token: 0x04000A17 RID: 2583
			public readonly float followDistance;

			// Token: 0x04000A18 RID: 2584
			public readonly int hp;

			// Token: 0x04000A19 RID: 2585
			public readonly float hesitate;

			// Token: 0x04000A1A RID: 2586
			public readonly float invincibleDuration;
		}

		// Token: 0x020001E8 RID: 488
		public class ShortRage : AbstractLevelPropertyGroup
		{
			// Token: 0x06000558 RID: 1368 RVA: 0x0002C4C8 File Offset: 0x0002A8C8
			public ShortRage(float anticipationDelay, float shotSpeed, float shotDelay, int shotCount, string[] parryPatterns, float hesitate)
			{
				this.anticipationDelay = anticipationDelay;
				this.shotSpeed = shotSpeed;
				this.shotDelay = shotDelay;
				this.shotCount = shotCount;
				this.parryPatterns = parryPatterns;
				this.hesitate = hesitate;
			}

			// Token: 0x04000A1B RID: 2587
			public readonly float anticipationDelay;

			// Token: 0x04000A1C RID: 2588
			public readonly float shotSpeed;

			// Token: 0x04000A1D RID: 2589
			public readonly float shotDelay;

			// Token: 0x04000A1E RID: 2590
			public readonly int shotCount;

			// Token: 0x04000A1F RID: 2591
			public readonly string[] parryPatterns;

			// Token: 0x04000A20 RID: 2592
			public readonly float hesitate;
		}

		// Token: 0x020001E9 RID: 489
		public class ShortRoll : AbstractLevelPropertyGroup
		{
			// Token: 0x06000559 RID: 1369 RVA: 0x0002C4FD File Offset: 0x0002A8FD
			public ShortRoll(float delay, float time, float returnDelay, float hesitate)
			{
				this.delay = delay;
				this.time = time;
				this.returnDelay = returnDelay;
				this.hesitate = hesitate;
			}

			// Token: 0x04000A21 RID: 2593
			public readonly float delay;

			// Token: 0x04000A22 RID: 2594
			public readonly float time;

			// Token: 0x04000A23 RID: 2595
			public readonly float returnDelay;

			// Token: 0x04000A24 RID: 2596
			public readonly float hesitate;
		}

		// Token: 0x020001EA RID: 490
		public class ShortClap : AbstractLevelPropertyGroup
		{
			// Token: 0x0600055A RID: 1370 RVA: 0x0002C522 File Offset: 0x0002A922
			public ShortClap(string[] patterns, float[] angles, float bulletSpeed, float shotDelay, float hesitate)
			{
				this.patterns = patterns;
				this.angles = angles;
				this.bulletSpeed = bulletSpeed;
				this.shotDelay = shotDelay;
				this.hesitate = hesitate;
			}

			// Token: 0x04000A25 RID: 2597
			public readonly string[] patterns;

			// Token: 0x04000A26 RID: 2598
			public readonly float[] angles;

			// Token: 0x04000A27 RID: 2599
			public readonly float bulletSpeed;

			// Token: 0x04000A28 RID: 2600
			public readonly float shotDelay;

			// Token: 0x04000A29 RID: 2601
			public readonly float hesitate;
		}

		// Token: 0x020001EB RID: 491
		public class Morph : AbstractLevelPropertyGroup
		{
			// Token: 0x0600055B RID: 1371 RVA: 0x0002C550 File Offset: 0x0002A950
			public Morph(float armDownDelay, float slotSelectionDurationPercentage, MinMax coinSpeed, MinMax coinDelay, float coinMinMaxTime, MinMax snakeSpeed, MinMax snakeDelay, float snakeMinMaxTime, float snakeDuration, MinMax bisonSpeed, MinMax bisonDelay, float bisonMinMaxTime, float bisonSmallX, float bisonBigX, int bisonDuration, float tigerSpeed, MinMax tigerDelay, float tigerMinMaxTime, float tigerDuration)
			{
				this.armDownDelay = armDownDelay;
				this.slotSelectionDurationPercentage = slotSelectionDurationPercentage;
				this.coinSpeed = coinSpeed;
				this.coinDelay = coinDelay;
				this.coinMinMaxTime = coinMinMaxTime;
				this.snakeSpeed = snakeSpeed;
				this.snakeDelay = snakeDelay;
				this.snakeMinMaxTime = snakeMinMaxTime;
				this.snakeDuration = snakeDuration;
				this.bisonSpeed = bisonSpeed;
				this.bisonDelay = bisonDelay;
				this.bisonMinMaxTime = bisonMinMaxTime;
				this.bisonSmallX = bisonSmallX;
				this.bisonBigX = bisonBigX;
				this.bisonDuration = bisonDuration;
				this.tigerSpeed = tigerSpeed;
				this.tigerDelay = tigerDelay;
				this.tigerMinMaxTime = tigerMinMaxTime;
				this.tigerDuration = tigerDuration;
			}

			// Token: 0x04000A2A RID: 2602
			public readonly float armDownDelay;

			// Token: 0x04000A2B RID: 2603
			public readonly float slotSelectionDurationPercentage;

			// Token: 0x04000A2C RID: 2604
			public readonly MinMax coinSpeed;

			// Token: 0x04000A2D RID: 2605
			public readonly MinMax coinDelay;

			// Token: 0x04000A2E RID: 2606
			public readonly float coinMinMaxTime;

			// Token: 0x04000A2F RID: 2607
			public readonly MinMax snakeSpeed;

			// Token: 0x04000A30 RID: 2608
			public readonly MinMax snakeDelay;

			// Token: 0x04000A31 RID: 2609
			public readonly float snakeMinMaxTime;

			// Token: 0x04000A32 RID: 2610
			public readonly float snakeDuration;

			// Token: 0x04000A33 RID: 2611
			public readonly MinMax bisonSpeed;

			// Token: 0x04000A34 RID: 2612
			public readonly MinMax bisonDelay;

			// Token: 0x04000A35 RID: 2613
			public readonly float bisonMinMaxTime;

			// Token: 0x04000A36 RID: 2614
			public readonly float bisonSmallX;

			// Token: 0x04000A37 RID: 2615
			public readonly float bisonBigX;

			// Token: 0x04000A38 RID: 2616
			public readonly int bisonDuration;

			// Token: 0x04000A39 RID: 2617
			public readonly float tigerSpeed;

			// Token: 0x04000A3A RID: 2618
			public readonly MinMax tigerDelay;

			// Token: 0x04000A3B RID: 2619
			public readonly float tigerMinMaxTime;

			// Token: 0x04000A3C RID: 2620
			public readonly float tigerDuration;
		}

		// Token: 0x020001EC RID: 492
		public class Demon : AbstractLevelPropertyGroup
		{
			// Token: 0x0600055C RID: 1372 RVA: 0x0002C5F8 File Offset: 0x0002A9F8
			public Demon(float demonFlameHeight, float demonParryHeight, MinMax demonSpeed, MinMax demonDelay, float demonMaxTime, string[] demonString)
			{
				this.demonFlameHeight = demonFlameHeight;
				this.demonParryHeight = demonParryHeight;
				this.demonSpeed = demonSpeed;
				this.demonDelay = demonDelay;
				this.demonMaxTime = demonMaxTime;
				this.demonString = demonString;
			}

			// Token: 0x04000A3D RID: 2621
			public readonly float demonFlameHeight;

			// Token: 0x04000A3E RID: 2622
			public readonly float demonParryHeight;

			// Token: 0x04000A3F RID: 2623
			public readonly MinMax demonSpeed;

			// Token: 0x04000A40 RID: 2624
			public readonly MinMax demonDelay;

			// Token: 0x04000A41 RID: 2625
			public readonly float demonMaxTime;

			// Token: 0x04000A42 RID: 2626
			public readonly string[] demonString;
		}
	}

	// Token: 0x020001EE RID: 494
	public class Graveyard : AbstractLevelProperties<LevelProperties.Graveyard.State, LevelProperties.Graveyard.Pattern, LevelProperties.Graveyard.States>
	{
		// Token: 0x0600057A RID: 1402 RVA: 0x0002C62D File Offset: 0x0002AA2D
		public Graveyard(int hp, Level.GoalTimes goalTimes, LevelProperties.Graveyard.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600057B RID: 1403 RVA: 0x0002C63C File Offset: 0x0002AA3C
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 800f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x0600057C RID: 1404 RVA: 0x0002C697 File Offset: 0x0002AA97
		public static LevelProperties.Graveyard.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.Graveyard.Pattern.Default;
				}
			}
			Debug.LogError("Pattern Graveyard.Pattern for  " + id + " not found.", null);
			return LevelProperties.Graveyard.Pattern.Uninitialized;
		}

		// Token: 0x0600057D RID: 1405 RVA: 0x0002C6D8 File Offset: 0x0002AAD8
		public static LevelProperties.Graveyard GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Graveyard.State> list = new List<LevelProperties.Graveyard.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Graveyard.State(10f, new LevelProperties.Graveyard.Pattern[][]
						{
							new LevelProperties.Graveyard.Pattern[1]
						}, LevelProperties.Graveyard.States.Main, new LevelProperties.Graveyard.SplitDevilBeam(new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, string.Empty, 0f), new LevelProperties.Graveyard.SplitDevilProjectiles(new string[0], new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), string.Empty, string.Empty)));
					}
				}
				else
				{
					hp = 800;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Graveyard.State(10f, new LevelProperties.Graveyard.Pattern[][]
					{
						new LevelProperties.Graveyard.Pattern[0]
					}, LevelProperties.Graveyard.States.Main, new LevelProperties.Graveyard.SplitDevilBeam(new MinMax(550f, 675f), new MinMax(0.8f, 1.3f), 150f, "2,1,2,1,1", 0.25f), new LevelProperties.Graveyard.SplitDevilProjectiles(new string[]
					{
						"6,3,5,6,3,2",
						"4,6,5,2,7"
					}, new MinMax(0.75f, 1.1f), 565f, new MinMax(1.5f, 2.1f), "0,-12,2,-2,5,0,0,-5,8,0,0,-8,2,3,-2,1,10,12,-3,7", "N,N,P,N,N,N,P")));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Graveyard.State(10f, new LevelProperties.Graveyard.Pattern[][]
				{
					new LevelProperties.Graveyard.Pattern[1]
				}, LevelProperties.Graveyard.States.Main, new LevelProperties.Graveyard.SplitDevilBeam(new MinMax(0f, 1f), new MinMax(0f, 1f), 0f, string.Empty, 0f), new LevelProperties.Graveyard.SplitDevilProjectiles(new string[0], new MinMax(0f, 1f), 0f, new MinMax(0f, 1f), string.Empty, string.Empty)));
			}
			return new LevelProperties.Graveyard(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020001EF RID: 495
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000F7 RID: 247
			// (get) Token: 0x0600057F RID: 1407 RVA: 0x0002C925 File Offset: 0x0002AD25
			// (set) Token: 0x06000580 RID: 1408 RVA: 0x0002C92D File Offset: 0x0002AD2D
			private protected LevelProperties.Graveyard properties { protected get; private set; }

			// Token: 0x06000581 RID: 1409 RVA: 0x0002C936 File Offset: 0x0002AD36
			public virtual void LevelInit(LevelProperties.Graveyard properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000582 RID: 1410 RVA: 0x0002C93F File Offset: 0x0002AD3F
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020001F0 RID: 496
		public enum States
		{
			// Token: 0x04000A56 RID: 2646
			Main,
			// Token: 0x04000A57 RID: 2647
			Generic
		}

		// Token: 0x020001F1 RID: 497
		public enum Pattern
		{
			// Token: 0x04000A59 RID: 2649
			Default,
			// Token: 0x04000A5A RID: 2650
			Uninitialized
		}

		// Token: 0x020001F2 RID: 498
		public class State : AbstractLevelState<LevelProperties.Graveyard.Pattern, LevelProperties.Graveyard.States>
		{
			// Token: 0x06000583 RID: 1411 RVA: 0x0002C941 File Offset: 0x0002AD41
			public State(float healthTrigger, LevelProperties.Graveyard.Pattern[][] patterns, LevelProperties.Graveyard.States stateName, LevelProperties.Graveyard.SplitDevilBeam splitDevilBeam, LevelProperties.Graveyard.SplitDevilProjectiles splitDevilProjectiles) : base(healthTrigger, patterns, stateName)
			{
				this.splitDevilBeam = splitDevilBeam;
				this.splitDevilProjectiles = splitDevilProjectiles;
			}

			// Token: 0x04000A5B RID: 2651
			public readonly LevelProperties.Graveyard.SplitDevilBeam splitDevilBeam;

			// Token: 0x04000A5C RID: 2652
			public readonly LevelProperties.Graveyard.SplitDevilProjectiles splitDevilProjectiles;
		}

		// Token: 0x020001F3 RID: 499
		public class SplitDevilBeam : AbstractLevelPropertyGroup
		{
			// Token: 0x06000584 RID: 1412 RVA: 0x0002C95C File Offset: 0x0002AD5C
			public SplitDevilBeam(MinMax speed, MinMax hesitateAfterAttack, float yPos, string attacksBeforeBeamString, float warning)
			{
				this.speed = speed;
				this.hesitateAfterAttack = hesitateAfterAttack;
				this.yPos = yPos;
				this.attacksBeforeBeamString = attacksBeforeBeamString;
				this.warning = warning;
			}

			// Token: 0x04000A5D RID: 2653
			public readonly MinMax speed;

			// Token: 0x04000A5E RID: 2654
			public readonly MinMax hesitateAfterAttack;

			// Token: 0x04000A5F RID: 2655
			public readonly float yPos;

			// Token: 0x04000A60 RID: 2656
			public readonly string attacksBeforeBeamString;

			// Token: 0x04000A61 RID: 2657
			public readonly float warning;
		}

		// Token: 0x020001F4 RID: 500
		public class SplitDevilProjectiles : AbstractLevelPropertyGroup
		{
			// Token: 0x06000585 RID: 1413 RVA: 0x0002C989 File Offset: 0x0002AD89
			public SplitDevilProjectiles(string[] numProjectiles, MinMax delayBetweenProjectiles, float projectileSpeed, MinMax hesitateAfterAttack, string angleOffsetString, string pinkString)
			{
				this.numProjectiles = numProjectiles;
				this.delayBetweenProjectiles = delayBetweenProjectiles;
				this.projectileSpeed = projectileSpeed;
				this.hesitateAfterAttack = hesitateAfterAttack;
				this.angleOffsetString = angleOffsetString;
				this.pinkString = pinkString;
			}

			// Token: 0x04000A62 RID: 2658
			public readonly string[] numProjectiles;

			// Token: 0x04000A63 RID: 2659
			public readonly MinMax delayBetweenProjectiles;

			// Token: 0x04000A64 RID: 2660
			public readonly float projectileSpeed;

			// Token: 0x04000A65 RID: 2661
			public readonly MinMax hesitateAfterAttack;

			// Token: 0x04000A66 RID: 2662
			public readonly string angleOffsetString;

			// Token: 0x04000A67 RID: 2663
			public readonly string pinkString;
		}
	}

	// Token: 0x020001F6 RID: 502
	public class House : AbstractLevelProperties<LevelProperties.House.State, LevelProperties.House.Pattern, LevelProperties.House.States>
	{
		// Token: 0x06000596 RID: 1430 RVA: 0x0002C9BE File Offset: 0x0002ADBE
		public House(int hp, Level.GoalTimes goalTimes, LevelProperties.House.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000597 RID: 1431 RVA: 0x0002C9CC File Offset: 0x0002ADCC
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000598 RID: 1432 RVA: 0x0002CA27 File Offset: 0x0002AE27
		public static LevelProperties.House.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.House.Pattern.Default;
				}
			}
			Debug.LogError("Pattern House.Pattern for  " + id + " not found.", null);
			return LevelProperties.House.Pattern.Uninitialized;
		}

		// Token: 0x06000599 RID: 1433 RVA: 0x0002CA68 File Offset: 0x0002AE68
		public static LevelProperties.House GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.House.State> list = new List<LevelProperties.House.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.House.State(10f, new LevelProperties.House.Pattern[][]
						{
							new LevelProperties.House.Pattern[1]
						}, LevelProperties.House.States.Main));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.House.State(10f, new LevelProperties.House.Pattern[][]
					{
						new LevelProperties.House.Pattern[1]
					}, LevelProperties.House.States.Main));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.House.State(10f, new LevelProperties.House.Pattern[][]
				{
					new LevelProperties.House.Pattern[1]
				}, LevelProperties.House.States.Main));
			}
			return new LevelProperties.House(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020001F7 RID: 503
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x170000FC RID: 252
			// (get) Token: 0x0600059B RID: 1435 RVA: 0x0002CB64 File Offset: 0x0002AF64
			// (set) Token: 0x0600059C RID: 1436 RVA: 0x0002CB6C File Offset: 0x0002AF6C
			private protected LevelProperties.House properties { protected get; private set; }

			// Token: 0x0600059D RID: 1437 RVA: 0x0002CB75 File Offset: 0x0002AF75
			public virtual void LevelInit(LevelProperties.House properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600059E RID: 1438 RVA: 0x0002CB7E File Offset: 0x0002AF7E
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020001F8 RID: 504
		public enum States
		{
			// Token: 0x04000A71 RID: 2673
			Main,
			// Token: 0x04000A72 RID: 2674
			Generic
		}

		// Token: 0x020001F9 RID: 505
		public enum Pattern
		{
			// Token: 0x04000A74 RID: 2676
			Default,
			// Token: 0x04000A75 RID: 2677
			Uninitialized
		}

		// Token: 0x020001FA RID: 506
		public class State : AbstractLevelState<LevelProperties.House.Pattern, LevelProperties.House.States>
		{
			// Token: 0x0600059F RID: 1439 RVA: 0x0002CB80 File Offset: 0x0002AF80
			public State(float healthTrigger, LevelProperties.House.Pattern[][] patterns, LevelProperties.House.States stateName) : base(healthTrigger, patterns, stateName)
			{
			}
		}
	}

	// Token: 0x020001FC RID: 508
	public class Kitchen : AbstractLevelProperties<LevelProperties.Kitchen.State, LevelProperties.Kitchen.Pattern, LevelProperties.Kitchen.States>
	{
		// Token: 0x060005B1 RID: 1457 RVA: 0x0002CB8B File Offset: 0x0002AF8B
		public Kitchen(int hp, Level.GoalTimes goalTimes, LevelProperties.Kitchen.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060005B2 RID: 1458 RVA: 0x0002CB98 File Offset: 0x0002AF98
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x060005B3 RID: 1459 RVA: 0x0002CBF3 File Offset: 0x0002AFF3
		public static LevelProperties.Kitchen.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.Kitchen.Pattern.Default;
				}
			}
			Debug.LogError("Pattern Kitchen.Pattern for  " + id + " not found.", null);
			return LevelProperties.Kitchen.Pattern.Uninitialized;
		}

		// Token: 0x060005B4 RID: 1460 RVA: 0x0002CC34 File Offset: 0x0002B034
		public static LevelProperties.Kitchen GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Kitchen.State> list = new List<LevelProperties.Kitchen.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Kitchen.State(10f, new LevelProperties.Kitchen.Pattern[][]
						{
							new LevelProperties.Kitchen.Pattern[1]
						}, LevelProperties.Kitchen.States.Main));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Kitchen.State(10f, new LevelProperties.Kitchen.Pattern[][]
					{
						new LevelProperties.Kitchen.Pattern[1]
					}, LevelProperties.Kitchen.States.Main));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Kitchen.State(10f, new LevelProperties.Kitchen.Pattern[][]
				{
					new LevelProperties.Kitchen.Pattern[1]
				}, LevelProperties.Kitchen.States.Main));
			}
			return new LevelProperties.Kitchen(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020001FD RID: 509
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000101 RID: 257
			// (get) Token: 0x060005B6 RID: 1462 RVA: 0x0002CD30 File Offset: 0x0002B130
			// (set) Token: 0x060005B7 RID: 1463 RVA: 0x0002CD38 File Offset: 0x0002B138
			private protected LevelProperties.Kitchen properties { protected get; private set; }

			// Token: 0x060005B8 RID: 1464 RVA: 0x0002CD41 File Offset: 0x0002B141
			public virtual void LevelInit(LevelProperties.Kitchen properties)
			{
				this.properties = properties;
			}

			// Token: 0x060005B9 RID: 1465 RVA: 0x0002CD4A File Offset: 0x0002B14A
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020001FE RID: 510
		public enum States
		{
			// Token: 0x04000A7F RID: 2687
			Main,
			// Token: 0x04000A80 RID: 2688
			Generic
		}

		// Token: 0x020001FF RID: 511
		public enum Pattern
		{
			// Token: 0x04000A82 RID: 2690
			Default,
			// Token: 0x04000A83 RID: 2691
			Uninitialized
		}

		// Token: 0x02000200 RID: 512
		public class State : AbstractLevelState<LevelProperties.Kitchen.Pattern, LevelProperties.Kitchen.States>
		{
			// Token: 0x060005BA RID: 1466 RVA: 0x0002CD4C File Offset: 0x0002B14C
			public State(float healthTrigger, LevelProperties.Kitchen.Pattern[][] patterns, LevelProperties.Kitchen.States stateName) : base(healthTrigger, patterns, stateName)
			{
			}
		}
	}

	// Token: 0x02000202 RID: 514
	public class Mausoleum : AbstractLevelProperties<LevelProperties.Mausoleum.State, LevelProperties.Mausoleum.Pattern, LevelProperties.Mausoleum.States>
	{
		// Token: 0x060005CE RID: 1486 RVA: 0x0002CD57 File Offset: 0x0002B157
		public Mausoleum(int hp, Level.GoalTimes goalTimes, LevelProperties.Mausoleum.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060005CF RID: 1487 RVA: 0x0002CD64 File Offset: 0x0002B164
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				timeline.events.Add(new Level.Timeline.Event("WaveTwo", 0.67f));
				timeline.events.Add(new Level.Timeline.Event("WaveThree", 0.34f));
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				timeline.events.Add(new Level.Timeline.Event("WaveTwo", 0.67f));
				timeline.events.Add(new Level.Timeline.Event("WaveThree", 0.34f));
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				timeline.events.Add(new Level.Timeline.Event("WaveTwo", 0.67f));
				timeline.events.Add(new Level.Timeline.Event("WaveThree", 0.34f));
				break;
			}
			return timeline;
		}

		// Token: 0x060005D0 RID: 1488 RVA: 0x0002CE5B File Offset: 0x0002B25B
		public static LevelProperties.Mausoleum.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.Mausoleum.Pattern.Default;
				}
			}
			Debug.LogError("Pattern Mausoleum.Pattern for  " + id + " not found.", null);
			return LevelProperties.Mausoleum.Pattern.Uninitialized;
		}

		// Token: 0x060005D1 RID: 1489 RVA: 0x0002CE9C File Offset: 0x0002B29C
		public static LevelProperties.Mausoleum GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Mausoleum.State> list = new List<LevelProperties.Mausoleum.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Mausoleum.State(10f, new LevelProperties.Mausoleum.Pattern[][]
						{
							new LevelProperties.Mausoleum.Pattern[1]
						}, LevelProperties.Mausoleum.States.Main, new LevelProperties.Mausoleum.Main(new string[]
						{
							"1,1,1.5,1,0.8,1.6,0.8,1,1.7",
							"1,1.2,1.2,1,0.8,1.5,0.8,1.2,1.3",
							"1,1,1.4,0.9,0.9,1.6,1.1,1.1,1.4"
						}, new string[]
						{
							"1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6",
							"1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6",
							"1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9",
							"7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3"
						}, 9, new string[]
						{
							"R,S,R2,S,R-R-R,R2,S,R,S,R,S-S,R,R,S2",
							"R-S,R,S,S-S,R2,S,R,R,S2,R-R-R,S,R,S2",
							"R-R,S,R2,S-S,S,R,S2,R2,S,R-R-R,S2"
						}), new LevelProperties.Mausoleum.RegularGhost(190f, 0.7f, 0.2f), new LevelProperties.Mausoleum.CircleGhost(0.3f, 85f, 0.3f), new LevelProperties.Mausoleum.BigGhost(125f, 170f, 0f, 0.1f), new LevelProperties.Mausoleum.DelayGhost(0f, 0f), new LevelProperties.Mausoleum.SineGhost(0.6f, 0.4f, 250f, 6f, 3f)));
						list.Add(new LevelProperties.Mausoleum.State(0.67f, new LevelProperties.Mausoleum.Pattern[][]
						{
							new LevelProperties.Mausoleum.Pattern[1]
						}, LevelProperties.Mausoleum.States.WaveTwo, new LevelProperties.Mausoleum.Main(new string[]
						{
							"1.5,1.8,2,1.2,1.5,1.8",
							"1.6,1.7,2,1.3,1.4,1.9",
							"2,1.6,1.9,1.7,1.8,1.9",
							"1.6,1.9,1.5,2,1.6,1.8"
						}, new string[]
						{
							"1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6"
						}, 9, new string[]
						{
							"C-C,R,B,S,R-R,B,C,R2,R,B,C,S",
							"C,B,R2,S,B,C-C,R,R-R,B,C,S",
							"R2,B,S,R,R,B,C,S,R-R,B,C-C,R"
						}), new LevelProperties.Mausoleum.RegularGhost(190f, 0.7f, 0.2f), new LevelProperties.Mausoleum.CircleGhost(0.3f, 85f, 0.3f), new LevelProperties.Mausoleum.BigGhost(125f, 170f, 0f, 0.1f), new LevelProperties.Mausoleum.DelayGhost(0f, 0f), new LevelProperties.Mausoleum.SineGhost(0.6f, 0.4f, 250f, 6f, 3f)));
						list.Add(new LevelProperties.Mausoleum.State(0.34f, new LevelProperties.Mausoleum.Pattern[][]
						{
							new LevelProperties.Mausoleum.Pattern[1]
						}, LevelProperties.Mausoleum.States.WaveThree, new LevelProperties.Mausoleum.Main(new string[]
						{
							"2,1.8,1.6,2,1.8,1.9,1.8,2,1.6,2,1.7",
							"1.8,1.9,2,1.7,2,1.8,1.7,2,1.6,1.9,2",
							"1.7,1.7,1.9,1.6,2,1.8,1.8,1.7,2,1.9",
							"1.9,1.6,2,1.6,2,1.8,1.7,1.8,1.9,2"
						}, new string[]
						{
							"4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7",
							"6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9",
							"9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7",
							"7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9"
						}, 9, new string[]
						{
							"B,C,B,R-R,S,B,S2,R2,B,S-S,C",
							"B,S,C,B,S-S,B,R2,B,R-R,S2,C",
							"B,S-S,C,B,S2,R,S,B,C-C,S,R2"
						}), new LevelProperties.Mausoleum.RegularGhost(190f, 0.7f, 0.2f), new LevelProperties.Mausoleum.CircleGhost(0.3f, 85f, 0.3f), new LevelProperties.Mausoleum.BigGhost(125f, 170f, 0f, 0.1f), new LevelProperties.Mausoleum.DelayGhost(0f, 0f), new LevelProperties.Mausoleum.SineGhost(0.6f, 0.4f, 250f, 6f, 3f)));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Mausoleum.State(10f, new LevelProperties.Mausoleum.Pattern[][]
					{
						new LevelProperties.Mausoleum.Pattern[1]
					}, LevelProperties.Mausoleum.States.Main, new LevelProperties.Mausoleum.Main(new string[]
					{
						"1,0.8,1.3,1,0.8,1.7",
						"0.8,1.3,0.8,1,1,1.7",
						"1,1,0.8,1.3,0.8,1.7"
					}, new string[]
					{
						"1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6",
						"1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6",
						"1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9",
						"7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3"
					}, 8, new string[]
					{
						"R,R,S,R,R2,S,R,S",
						"R,S,R,S,R2,R,S,R",
						"S,R,R,S,R,R,S,R2"
					}), new LevelProperties.Mausoleum.RegularGhost(170f, 0.8f, 0.5f), new LevelProperties.Mausoleum.CircleGhost(0.4f, 85f, 0.3f), new LevelProperties.Mausoleum.BigGhost(120f, 200f, 0f, 2f), new LevelProperties.Mausoleum.DelayGhost(3f, 500f), new LevelProperties.Mausoleum.SineGhost(0.6f, 0.7f, 250f, 6f, 3f)));
					list.Add(new LevelProperties.Mausoleum.State(0.67f, new LevelProperties.Mausoleum.Pattern[][]
					{
						new LevelProperties.Mausoleum.Pattern[0]
					}, LevelProperties.Mausoleum.States.WaveTwo, new LevelProperties.Mausoleum.Main(new string[]
					{
						"1.6,1.8,2.2",
						"1.8,1.6,2.2"
					}, new string[]
					{
						"1,9",
						"7,3",
						"4,6",
						"1,3",
						"7,9",
						"4,6"
					}, 8, new string[]
					{
						"R-R,S,R,C,R,S,R2,C,R-R",
						"R,S,R-R,C,R,R2,S,R-R,C",
						"R,C,S,R,R2,C,R-R,S,R-R"
					}), new LevelProperties.Mausoleum.RegularGhost(170f, 0.8f, 0.5f), new LevelProperties.Mausoleum.CircleGhost(0.4f, 85f, 0.3f), new LevelProperties.Mausoleum.BigGhost(120f, 200f, 0f, 2f), new LevelProperties.Mausoleum.DelayGhost(3f, 500f), new LevelProperties.Mausoleum.SineGhost(0.6f, 0.7f, 250f, 6f, 3f)));
					list.Add(new LevelProperties.Mausoleum.State(0.34f, new LevelProperties.Mausoleum.Pattern[][]
					{
						new LevelProperties.Mausoleum.Pattern[0]
					}, LevelProperties.Mausoleum.States.WaveThree, new LevelProperties.Mausoleum.Main(new string[]
					{
						"1.3,1.3,1.7,1.4,1.4,1.7,1.2,1.2,1.7"
					}, new string[]
					{
						"4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7",
						"6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9",
						"9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7",
						"7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9"
					}, 8, new string[]
					{
						"C-C,R,R,C,S,R2,S,C,R,R2,C,S,R2,R",
						"R,C,R,S,C-C,R,R2,C,R2,S,R,C,R2,S"
					}), new LevelProperties.Mausoleum.RegularGhost(170f, 0.8f, 0.5f), new LevelProperties.Mausoleum.CircleGhost(0.4f, 85f, 0.3f), new LevelProperties.Mausoleum.BigGhost(120f, 200f, 0f, 2f), new LevelProperties.Mausoleum.DelayGhost(3f, 500f), new LevelProperties.Mausoleum.SineGhost(0.6f, 0.7f, 250f, 6f, 3f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Mausoleum.State(10f, new LevelProperties.Mausoleum.Pattern[][]
				{
					new LevelProperties.Mausoleum.Pattern[1]
				}, LevelProperties.Mausoleum.States.Main, new LevelProperties.Mausoleum.Main(new string[]
				{
					"1,1,1.5,1,1,2",
					"1,1.5,1,1,1,2",
					"1,1,1,1.5,1,2"
				}, new string[]
				{
					"1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6,1,3,4,6,7,9,4,6",
					"1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6",
					"1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9,1,4,7,3,6,9",
					"7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3,7,4,1,9,6,3"
				}, 7, new string[]
				{
					"R,R"
				}), new LevelProperties.Mausoleum.RegularGhost(160f, 0.8f, 0.6f), new LevelProperties.Mausoleum.CircleGhost(0f, 0f, 0f), new LevelProperties.Mausoleum.BigGhost(0f, 0f, 0f, 0f), new LevelProperties.Mausoleum.DelayGhost(0f, 0f), new LevelProperties.Mausoleum.SineGhost(0.6f, 0.7f, 240f, 6f, 3f)));
				list.Add(new LevelProperties.Mausoleum.State(0.67f, new LevelProperties.Mausoleum.Pattern[][]
				{
					new LevelProperties.Mausoleum.Pattern[1]
				}, LevelProperties.Mausoleum.States.WaveTwo, new LevelProperties.Mausoleum.Main(new string[]
				{
					"1.5,1.4,2",
					"1.4,1.5,2",
					"1.5,1.5,1.9"
				}, new string[]
				{
					"1,9",
					"7,3",
					"4,6",
					"1,3",
					"7,9",
					"4,6"
				}, 7, new string[]
				{
					"R-R,R,R-R,R,R"
				}), new LevelProperties.Mausoleum.RegularGhost(160f, 0.8f, 0.6f), new LevelProperties.Mausoleum.CircleGhost(0f, 0f, 0f), new LevelProperties.Mausoleum.BigGhost(0f, 0f, 0f, 0f), new LevelProperties.Mausoleum.DelayGhost(0f, 0f), new LevelProperties.Mausoleum.SineGhost(0.6f, 0.7f, 240f, 6f, 3f)));
				list.Add(new LevelProperties.Mausoleum.State(0.34f, new LevelProperties.Mausoleum.Pattern[][]
				{
					new LevelProperties.Mausoleum.Pattern[1]
				}, LevelProperties.Mausoleum.States.WaveThree, new LevelProperties.Mausoleum.Main(new string[]
				{
					"1.3,1.3,1.7,1.4,1.4,1.6,1.2,1.2,1.7",
					"1.3,1.2,1.7,1.4,1.3,1.6,1.2,1.4,1.7",
					"1.4,1.2,1.7,1.4,1.3,1.7,1.2,1.3,1.6"
				}, new string[]
				{
					"4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7,4,6,1,9,3,7",
					"6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9,6,4,3,7,1,9",
					"9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7,9,6,3,1,4,7",
					"7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9,7,4,1,3,6,9"
				}, 7, new string[]
				{
					"R,R,S,R,R,S,R,S",
					"S,R,R,R,S,R,S,R",
					"R,S,R,R,S,S,R,R"
				}), new LevelProperties.Mausoleum.RegularGhost(160f, 0.8f, 0.6f), new LevelProperties.Mausoleum.CircleGhost(0f, 0f, 0f), new LevelProperties.Mausoleum.BigGhost(0f, 0f, 0f, 0f), new LevelProperties.Mausoleum.DelayGhost(0f, 0f), new LevelProperties.Mausoleum.SineGhost(0.6f, 0.7f, 240f, 6f, 3f)));
			}
			return new LevelProperties.Mausoleum(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000203 RID: 515
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000106 RID: 262
			// (get) Token: 0x060005D3 RID: 1491 RVA: 0x0002D7B9 File Offset: 0x0002BBB9
			// (set) Token: 0x060005D4 RID: 1492 RVA: 0x0002D7C1 File Offset: 0x0002BBC1
			private protected LevelProperties.Mausoleum properties { protected get; private set; }

			// Token: 0x060005D5 RID: 1493 RVA: 0x0002D7CA File Offset: 0x0002BBCA
			public virtual void LevelInit(LevelProperties.Mausoleum properties)
			{
				this.properties = properties;
			}

			// Token: 0x060005D6 RID: 1494 RVA: 0x0002D7D3 File Offset: 0x0002BBD3
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000204 RID: 516
		public enum States
		{
			// Token: 0x04000A97 RID: 2711
			Main,
			// Token: 0x04000A98 RID: 2712
			Generic,
			// Token: 0x04000A99 RID: 2713
			WaveTwo,
			// Token: 0x04000A9A RID: 2714
			WaveThree
		}

		// Token: 0x02000205 RID: 517
		public enum Pattern
		{
			// Token: 0x04000A9C RID: 2716
			Default,
			// Token: 0x04000A9D RID: 2717
			Uninitialized
		}

		// Token: 0x02000206 RID: 518
		public class State : AbstractLevelState<LevelProperties.Mausoleum.Pattern, LevelProperties.Mausoleum.States>
		{
			// Token: 0x060005D7 RID: 1495 RVA: 0x0002D7D5 File Offset: 0x0002BBD5
			public State(float healthTrigger, LevelProperties.Mausoleum.Pattern[][] patterns, LevelProperties.Mausoleum.States stateName, LevelProperties.Mausoleum.Main main, LevelProperties.Mausoleum.RegularGhost regularGhost, LevelProperties.Mausoleum.CircleGhost circleGhost, LevelProperties.Mausoleum.BigGhost bigGhost, LevelProperties.Mausoleum.DelayGhost delayGhost, LevelProperties.Mausoleum.SineGhost sineGhost) : base(healthTrigger, patterns, stateName)
			{
				this.main = main;
				this.regularGhost = regularGhost;
				this.circleGhost = circleGhost;
				this.bigGhost = bigGhost;
				this.delayGhost = delayGhost;
				this.sineGhost = sineGhost;
			}

			// Token: 0x04000A9E RID: 2718
			public readonly LevelProperties.Mausoleum.Main main;

			// Token: 0x04000A9F RID: 2719
			public readonly LevelProperties.Mausoleum.RegularGhost regularGhost;

			// Token: 0x04000AA0 RID: 2720
			public readonly LevelProperties.Mausoleum.CircleGhost circleGhost;

			// Token: 0x04000AA1 RID: 2721
			public readonly LevelProperties.Mausoleum.BigGhost bigGhost;

			// Token: 0x04000AA2 RID: 2722
			public readonly LevelProperties.Mausoleum.DelayGhost delayGhost;

			// Token: 0x04000AA3 RID: 2723
			public readonly LevelProperties.Mausoleum.SineGhost sineGhost;
		}

		// Token: 0x02000207 RID: 519
		public class Main : AbstractLevelPropertyGroup
		{
			// Token: 0x060005D8 RID: 1496 RVA: 0x0002D810 File Offset: 0x0002BC10
			public Main(string[] delayString, string[] spawnString, int ghostCount, string[] ghostTypeString)
			{
				this.delayString = delayString;
				this.spawnString = spawnString;
				this.ghostCount = ghostCount;
				this.ghostTypeString = ghostTypeString;
			}

			// Token: 0x04000AA4 RID: 2724
			public readonly string[] delayString;

			// Token: 0x04000AA5 RID: 2725
			public readonly string[] spawnString;

			// Token: 0x04000AA6 RID: 2726
			public readonly int ghostCount;

			// Token: 0x04000AA7 RID: 2727
			public readonly string[] ghostTypeString;
		}

		// Token: 0x02000208 RID: 520
		public class RegularGhost : AbstractLevelPropertyGroup
		{
			// Token: 0x060005D9 RID: 1497 RVA: 0x0002D835 File Offset: 0x0002BC35
			public RegularGhost(float speed, float multiDelay, float mainAddDelay)
			{
				this.speed = speed;
				this.multiDelay = multiDelay;
				this.mainAddDelay = mainAddDelay;
			}

			// Token: 0x04000AA8 RID: 2728
			public readonly float speed;

			// Token: 0x04000AA9 RID: 2729
			public readonly float multiDelay;

			// Token: 0x04000AAA RID: 2730
			public readonly float mainAddDelay;
		}

		// Token: 0x02000209 RID: 521
		public class CircleGhost : AbstractLevelPropertyGroup
		{
			// Token: 0x060005DA RID: 1498 RVA: 0x0002D852 File Offset: 0x0002BC52
			public CircleGhost(float extraDelay, float circleSpeed, float circleRate)
			{
				this.extraDelay = extraDelay;
				this.circleSpeed = circleSpeed;
				this.circleRate = circleRate;
			}

			// Token: 0x04000AAB RID: 2731
			public readonly float extraDelay;

			// Token: 0x04000AAC RID: 2732
			public readonly float circleSpeed;

			// Token: 0x04000AAD RID: 2733
			public readonly float circleRate;
		}

		// Token: 0x0200020A RID: 522
		public class BigGhost : AbstractLevelPropertyGroup
		{
			// Token: 0x060005DB RID: 1499 RVA: 0x0002D86F File Offset: 0x0002BC6F
			public BigGhost(float speed, float littleGhostSpeed, float multiDelay, float mainAddDelay)
			{
				this.speed = speed;
				this.littleGhostSpeed = littleGhostSpeed;
				this.multiDelay = multiDelay;
				this.mainAddDelay = mainAddDelay;
			}

			// Token: 0x04000AAE RID: 2734
			public readonly float speed;

			// Token: 0x04000AAF RID: 2735
			public readonly float littleGhostSpeed;

			// Token: 0x04000AB0 RID: 2736
			public readonly float multiDelay;

			// Token: 0x04000AB1 RID: 2737
			public readonly float mainAddDelay;
		}

		// Token: 0x0200020B RID: 523
		public class DelayGhost : AbstractLevelPropertyGroup
		{
			// Token: 0x060005DC RID: 1500 RVA: 0x0002D894 File Offset: 0x0002BC94
			public DelayGhost(float dashDelay, float speed)
			{
				this.dashDelay = dashDelay;
				this.speed = speed;
			}

			// Token: 0x04000AB2 RID: 2738
			public readonly float dashDelay;

			// Token: 0x04000AB3 RID: 2739
			public readonly float speed;
		}

		// Token: 0x0200020C RID: 524
		public class SineGhost : AbstractLevelPropertyGroup
		{
			// Token: 0x060005DD RID: 1501 RVA: 0x0002D8AA File Offset: 0x0002BCAA
			public SineGhost(float multiDelay, float mainAddDelay, float ghostSpeed, float waveSpeed, float waveAmount)
			{
				this.multiDelay = multiDelay;
				this.mainAddDelay = mainAddDelay;
				this.ghostSpeed = ghostSpeed;
				this.waveSpeed = waveSpeed;
				this.waveAmount = waveAmount;
			}

			// Token: 0x04000AB4 RID: 2740
			public readonly float multiDelay;

			// Token: 0x04000AB5 RID: 2741
			public readonly float mainAddDelay;

			// Token: 0x04000AB6 RID: 2742
			public readonly float ghostSpeed;

			// Token: 0x04000AB7 RID: 2743
			public readonly float waveSpeed;

			// Token: 0x04000AB8 RID: 2744
			public readonly float waveAmount;
		}
	}

	// Token: 0x0200020E RID: 526
	public class Mouse : AbstractLevelProperties<LevelProperties.Mouse.State, LevelProperties.Mouse.Pattern, LevelProperties.Mouse.States>
	{
		// Token: 0x060005F9 RID: 1529 RVA: 0x0002D8D7 File Offset: 0x0002BCD7
		public Mouse(int hp, Level.GoalTimes goalTimes, LevelProperties.Mouse.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060005FA RID: 1530 RVA: 0x0002D8E4 File Offset: 0x0002BCE4
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1500f;
				timeline.events.Add(new Level.Timeline.Event("BrokenCan", 0.5f));
				break;
			case Level.Mode.Normal:
				timeline.health = 2000f;
				timeline.events.Add(new Level.Timeline.Event("BrokenCan", 0.73f));
				timeline.events.Add(new Level.Timeline.Event("Cat", 0.37f));
				break;
			case Level.Mode.Hard:
				timeline.health = 2100f;
				timeline.events.Add(new Level.Timeline.Event("BrokenCan", 0.73f));
				timeline.events.Add(new Level.Timeline.Event("Cat", 0.37f));
				break;
			}
			return timeline;
		}

		// Token: 0x060005FB RID: 1531 RVA: 0x0002D9C4 File Offset: 0x0002BDC4
		public static LevelProperties.Mouse.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			switch (id)
			{
			case "M":
				return LevelProperties.Mouse.Pattern.Move;
			case "D":
				return LevelProperties.Mouse.Pattern.Dash;
			case "B":
				return LevelProperties.Mouse.Pattern.CherryBomb;
			case "C":
				return LevelProperties.Mouse.Pattern.Catapult;
			case "R":
				return LevelProperties.Mouse.Pattern.RomanCandle;
			case "S":
				return LevelProperties.Mouse.Pattern.SawBlades;
			case "F":
				return LevelProperties.Mouse.Pattern.Flame;
			case "L":
				return LevelProperties.Mouse.Pattern.LeftClaw;
			case "X":
				return LevelProperties.Mouse.Pattern.RightClaw;
			case "G":
				return LevelProperties.Mouse.Pattern.GhostMouse;
			}
			Debug.LogError("Pattern Mouse.Pattern for  " + id + " not found.", null);
			return LevelProperties.Mouse.Pattern.Uninitialized;
		}

		// Token: 0x060005FC RID: 1532 RVA: 0x0002DAE8 File Offset: 0x0002BEE8
		public static LevelProperties.Mouse GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Mouse.State> list = new List<LevelProperties.Mouse.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 2100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Mouse.State(10f, new LevelProperties.Mouse.Pattern[][]
						{
							new LevelProperties.Mouse.Pattern[]
							{
								LevelProperties.Mouse.Pattern.CherryBomb,
								LevelProperties.Mouse.Pattern.Catapult,
								LevelProperties.Mouse.Pattern.Dash,
								LevelProperties.Mouse.Pattern.CherryBomb,
								LevelProperties.Mouse.Pattern.Dash,
								LevelProperties.Mouse.Pattern.Catapult,
								LevelProperties.Mouse.Pattern.Dash,
								LevelProperties.Mouse.Pattern.Catapult,
								LevelProperties.Mouse.Pattern.CherryBomb,
								LevelProperties.Mouse.Pattern.Dash
							}
						}, LevelProperties.Mouse.States.Main, new LevelProperties.Mouse.CanMove(300f, new MinMax(250f, 450f), 0f, 1f), new LevelProperties.Mouse.CanDash(0.95f, 0.5f, new MinMax[]
						{
							new MinMax(-280f, -330f),
							new MinMax(-400f, -440f)
						}, new MinMax[]
						{
							new MinMax(600f, 650f),
							new MinMax(750f, 790f)
						}, 900f), new LevelProperties.Mouse.CanCherryBomb(new string[]
						{
							"D:0.4, P:3,D:1.3,P:3",
							"D:0.4,P:4,D:1,P:2",
							"D:0.4,P:2,D:0.7,P:2,D:0.4,P:2",
							"D:0.4,P:3,D:1.5,P:3",
							"D:0.4,P:2,D:1,P:4",
							"D:0.4,P:2,D:0.4,P:2,D0.7,P:2"
						}, 0.7f, new MinMax(-200f, -450f), new MinMax(430f, 700f), 1150f, 1000, 0.7f), new LevelProperties.Mouse.CanCatapult(new string[]
						{
							"BNGCG",
							"CBGGN",
							"NGGCB",
							"CGBGN",
							"NBGGC"
						}, 0.7f, 0.7f, 1f, 1f, 770, 15f, 65f, 2, 1), new LevelProperties.Mouse.CanRomanCandle(new MinMax(2f, 4f), 1f, 640f, 4f, 0.8f, 1f), new LevelProperties.Mouse.BrokenCanSawBlades(new string[]
						{
							"1,6,3,5,2,4",
							"3,1,4,6,2,5",
							"1,2,5,3,6,4",
							"2,5,3,6,1,4",
							"6,2,5,1,4,3",
							"6,1,3,5,2,4"
						}, 50f, 1.7f, 1.8f, 300f, new MinMax(7f, 11f)), new LevelProperties.Mouse.BrokenCanFlame(new string[]
						{
							"F"
						}, 1f, 1.5f, 400f, 1.3f, 0.75f), new LevelProperties.Mouse.BrokenCanMove(100f, new MinMax(20f, 50f), 0.25f), new LevelProperties.Mouse.Claw(0.65f, 1500f, 0.083f, 500f, new string[]
						{
							"50,250,450,650,850,1050,1250",
							"1200,1000,800,600,400,200,0"
						}, 30f, 800f, 0.6f, 1f), new LevelProperties.Mouse.GhostMouse(true, 30f, 2f, new MinMax(2f, 3.5f), 0.5f, 720f, 1000f, new MinMax(2f, 2f), 1f)));
						list.Add(new LevelProperties.Mouse.State(0.73f, new LevelProperties.Mouse.Pattern[][]
						{
							new LevelProperties.Mouse.Pattern[]
							{
								LevelProperties.Mouse.Pattern.Flame
							}
						}, LevelProperties.Mouse.States.BrokenCan, new LevelProperties.Mouse.CanMove(300f, new MinMax(250f, 450f), 0f, 1f), new LevelProperties.Mouse.CanDash(0.95f, 0.5f, new MinMax[]
						{
							new MinMax(-280f, -330f),
							new MinMax(-400f, -440f)
						}, new MinMax[]
						{
							new MinMax(600f, 650f),
							new MinMax(750f, 790f)
						}, 900f), new LevelProperties.Mouse.CanCherryBomb(new string[]
						{
							"D:0.4, P:3,D:1.3,P:3",
							"D:0.4,P:4,D:1,P:2",
							"D:0.4,P:2,D:0.7,P:2,D:0.4,P:2",
							"D:0.4,P:3,D:1.5,P:3",
							"D:0.4,P:2,D:1,P:4",
							"D:0.4,P:2,D:0.4,P:2,D0.7,P:2"
						}, 0.7f, new MinMax(-200f, -450f), new MinMax(430f, 700f), 1150f, 1000, 0.7f), new LevelProperties.Mouse.CanCatapult(new string[]
						{
							"BNGCG",
							"CBGGN",
							"NGGCB",
							"CGBGN",
							"NBGGC"
						}, 0.7f, 0.7f, 1f, 1f, 770, 15f, 65f, 2, 1), new LevelProperties.Mouse.CanRomanCandle(new MinMax(2f, 4f), 1f, 640f, 4f, 0.8f, 1f), new LevelProperties.Mouse.BrokenCanSawBlades(new string[]
						{
							"1,6,3,5,2,4",
							"3,1,4,6,2,5",
							"1,2,5,3,6,4",
							"2,5,3,6,1,4",
							"6,2,5,1,4,3",
							"6,1,3,5,2,4"
						}, 50f, 1.7f, 1.8f, 300f, new MinMax(7f, 11f)), new LevelProperties.Mouse.BrokenCanFlame(new string[]
						{
							"F"
						}, 1f, 1.5f, 400f, 1.3f, 0.75f), new LevelProperties.Mouse.BrokenCanMove(100f, new MinMax(20f, 50f), 0.25f), new LevelProperties.Mouse.Claw(0.65f, 1500f, 0.083f, 500f, new string[]
						{
							"50,250,450,650,850,1050,1250",
							"1200,1000,800,600,400,200,0"
						}, 30f, 800f, 0.6f, 1f), new LevelProperties.Mouse.GhostMouse(true, 30f, 2f, new MinMax(2f, 3.5f), 0.5f, 720f, 1000f, new MinMax(2f, 2f), 1f)));
						list.Add(new LevelProperties.Mouse.State(0.37f, new LevelProperties.Mouse.Pattern[][]
						{
							new LevelProperties.Mouse.Pattern[]
							{
								LevelProperties.Mouse.Pattern.RightClaw,
								LevelProperties.Mouse.Pattern.LeftClaw,
								LevelProperties.Mouse.Pattern.GhostMouse,
								LevelProperties.Mouse.Pattern.LeftClaw,
								LevelProperties.Mouse.Pattern.RightClaw,
								LevelProperties.Mouse.Pattern.GhostMouse,
								LevelProperties.Mouse.Pattern.RightClaw,
								LevelProperties.Mouse.Pattern.LeftClaw,
								LevelProperties.Mouse.Pattern.GhostMouse
							}
						}, LevelProperties.Mouse.States.Cat, new LevelProperties.Mouse.CanMove(300f, new MinMax(250f, 450f), 0f, 1f), new LevelProperties.Mouse.CanDash(0.95f, 0.5f, new MinMax[]
						{
							new MinMax(-280f, -330f),
							new MinMax(-400f, -440f)
						}, new MinMax[]
						{
							new MinMax(600f, 650f),
							new MinMax(750f, 790f)
						}, 900f), new LevelProperties.Mouse.CanCherryBomb(new string[]
						{
							"D:0.4, P:3,D:1.3,P:3",
							"D:0.4,P:4,D:1,P:2",
							"D:0.4,P:2,D:0.7,P:2,D:0.4,P:2",
							"D:0.4,P:3,D:1.5,P:3",
							"D:0.4,P:2,D:1,P:4",
							"D:0.4,P:2,D:0.4,P:2,D0.7,P:2"
						}, 0.7f, new MinMax(-200f, -450f), new MinMax(430f, 700f), 1150f, 1000, 0.7f), new LevelProperties.Mouse.CanCatapult(new string[]
						{
							"BNGCG",
							"CBGGN",
							"NGGCB",
							"CGBGN",
							"NBGGC"
						}, 0.7f, 0.7f, 1f, 1f, 770, 15f, 65f, 2, 1), new LevelProperties.Mouse.CanRomanCandle(new MinMax(2f, 4f), 1f, 640f, 4f, 0.8f, 1f), new LevelProperties.Mouse.BrokenCanSawBlades(new string[]
						{
							"1,6,3,5,2,4",
							"3,1,4,6,2,5",
							"1,2,5,3,6,4",
							"2,5,3,6,1,4",
							"6,2,5,1,4,3",
							"6,1,3,5,2,4"
						}, 50f, 1.7f, 1.8f, 300f, new MinMax(7f, 11f)), new LevelProperties.Mouse.BrokenCanFlame(new string[]
						{
							"F"
						}, 1f, 1.5f, 400f, 1.3f, 0.75f), new LevelProperties.Mouse.BrokenCanMove(100f, new MinMax(20f, 50f), 0.25f), new LevelProperties.Mouse.Claw(0.65f, 1500f, 0.083f, 500f, new string[]
						{
							"50,250,450,650,850,1050,1250",
							"1200,1000,800,600,400,200,0"
						}, 30f, 800f, 0.6f, 1f), new LevelProperties.Mouse.GhostMouse(true, 30f, 2f, new MinMax(2f, 3.5f), 0.5f, 720f, 1000f, new MinMax(2f, 2f), 1f)));
					}
				}
				else
				{
					hp = 2000;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Mouse.State(10f, new LevelProperties.Mouse.Pattern[][]
					{
						new LevelProperties.Mouse.Pattern[]
						{
							LevelProperties.Mouse.Pattern.CherryBomb,
							LevelProperties.Mouse.Pattern.Dash,
							LevelProperties.Mouse.Pattern.Catapult,
							LevelProperties.Mouse.Pattern.Dash,
							LevelProperties.Mouse.Pattern.CherryBomb,
							LevelProperties.Mouse.Pattern.Catapult,
							LevelProperties.Mouse.Pattern.Dash,
							LevelProperties.Mouse.Pattern.CherryBomb,
							LevelProperties.Mouse.Pattern.Catapult,
							LevelProperties.Mouse.Pattern.CherryBomb,
							LevelProperties.Mouse.Pattern.Dash,
							LevelProperties.Mouse.Pattern.CherryBomb,
							LevelProperties.Mouse.Pattern.Catapult,
							LevelProperties.Mouse.Pattern.Dash
						}
					}, LevelProperties.Mouse.States.Main, new LevelProperties.Mouse.CanMove(280f, new MinMax(230f, 425f), 0f, 1f), new LevelProperties.Mouse.CanDash(1.1f, 0.5f, new MinMax[]
					{
						new MinMax(-280f, -330f),
						new MinMax(-360f, -400f)
					}, new MinMax[]
					{
						new MinMax(600f, 650f),
						new MinMax(750f, 790f)
					}, 900f), new LevelProperties.Mouse.CanCherryBomb(new string[]
					{
						"D:0.4, P:2,D:1.3,P:2,D:0.6,P:2",
						"D:0.5,P:3,D:0.7,P:2",
						"D:0.4, P:2,D:0.6,P:2,D:1.3,P:2",
						"D:0.5,P:2,D:0.7,P:3"
					}, 0.8f, new MinMax(-150f, -450f), new MinMax(400f, 700f), 1000f, 850, 1f), new LevelProperties.Mouse.CanCatapult(new string[]
					{
						"BNGCG",
						"CGPGC",
						"PGGCN",
						"BPGGN"
					}, 0.7f, 0.7f, 1f, 1f, 670, 15f, 75f, 2, 1), new LevelProperties.Mouse.CanRomanCandle(new MinMax(2f, 4f), 1f, 600f, 4f, 1f, 1f), new LevelProperties.Mouse.BrokenCanSawBlades(new string[]
					{
						"1,6,3,2,4,5",
						"1,2,5,3,6,4",
						"3,5,1,4,6,2",
						"5,1,3,6,4,2",
						"6,3,1,5,2,4"
					}, 45f, 2.2f, 2.6f, 280f, new MinMax(10f, 15f)), new LevelProperties.Mouse.BrokenCanFlame(new string[]
					{
						"F"
					}, 1f, 1.5f, 400f, 1.3f, 0.75f), new LevelProperties.Mouse.BrokenCanMove(100f, new MinMax(20f, 50f), 0.25f), new LevelProperties.Mouse.Claw(1f, 1500f, 0.083f, 500f, new string[]
					{
						"50,250,450,650,850,1050,1250",
						"1200,1000,800,600,400,200,0"
					}, 30f, 740f, 0.65f, 1f), new LevelProperties.Mouse.GhostMouse(false, 34f, 2f, new MinMax(2.5f, 4f), 0.5f, 630f, 800f, new MinMax(1f, 2f), 1f)));
					list.Add(new LevelProperties.Mouse.State(0.73f, new LevelProperties.Mouse.Pattern[][]
					{
						new LevelProperties.Mouse.Pattern[]
						{
							LevelProperties.Mouse.Pattern.Flame
						}
					}, LevelProperties.Mouse.States.BrokenCan, new LevelProperties.Mouse.CanMove(280f, new MinMax(230f, 425f), 0f, 1f), new LevelProperties.Mouse.CanDash(1.1f, 0.5f, new MinMax[]
					{
						new MinMax(-280f, -330f),
						new MinMax(-360f, -400f)
					}, new MinMax[]
					{
						new MinMax(600f, 650f),
						new MinMax(750f, 790f)
					}, 900f), new LevelProperties.Mouse.CanCherryBomb(new string[]
					{
						"D:0.4, P:2,D:1.3,P:2,D:0.6,P:2",
						"D:0.5,P:3,D:0.7,P:2",
						"D:0.4, P:2,D:0.6,P:2,D:1.3,P:2",
						"D:0.5,P:2,D:0.7,P:3"
					}, 0.8f, new MinMax(-150f, -450f), new MinMax(400f, 700f), 1000f, 850, 1f), new LevelProperties.Mouse.CanCatapult(new string[]
					{
						"BNGCG",
						"CGPGC",
						"PGGCN",
						"BPGGN"
					}, 0.7f, 0.7f, 1f, 1f, 670, 15f, 75f, 2, 1), new LevelProperties.Mouse.CanRomanCandle(new MinMax(2f, 4f), 1f, 600f, 4f, 1f, 1f), new LevelProperties.Mouse.BrokenCanSawBlades(new string[]
					{
						"1,6,3,2,4,5",
						"1,2,5,3,6,4",
						"3,5,1,4,6,2",
						"5,1,3,6,4,2",
						"6,3,1,5,2,4"
					}, 45f, 2.2f, 2.6f, 280f, new MinMax(10f, 15f)), new LevelProperties.Mouse.BrokenCanFlame(new string[]
					{
						"F"
					}, 1f, 1.5f, 400f, 1.3f, 0.75f), new LevelProperties.Mouse.BrokenCanMove(100f, new MinMax(20f, 50f), 0.25f), new LevelProperties.Mouse.Claw(1f, 1500f, 0.083f, 500f, new string[]
					{
						"50,250,450,650,850,1050,1250",
						"1200,1000,800,600,400,200,0"
					}, 30f, 740f, 0.65f, 1f), new LevelProperties.Mouse.GhostMouse(false, 34f, 2f, new MinMax(2.5f, 4f), 0.5f, 630f, 800f, new MinMax(1f, 2f), 1f)));
					list.Add(new LevelProperties.Mouse.State(0.37f, new LevelProperties.Mouse.Pattern[][]
					{
						new LevelProperties.Mouse.Pattern[]
						{
							LevelProperties.Mouse.Pattern.LeftClaw,
							LevelProperties.Mouse.Pattern.RightClaw,
							LevelProperties.Mouse.Pattern.GhostMouse,
							LevelProperties.Mouse.Pattern.RightClaw,
							LevelProperties.Mouse.Pattern.LeftClaw,
							LevelProperties.Mouse.Pattern.GhostMouse,
							LevelProperties.Mouse.Pattern.LeftClaw,
							LevelProperties.Mouse.Pattern.RightClaw,
							LevelProperties.Mouse.Pattern.GhostMouse
						}
					}, LevelProperties.Mouse.States.Cat, new LevelProperties.Mouse.CanMove(280f, new MinMax(230f, 425f), 0f, 1f), new LevelProperties.Mouse.CanDash(1.1f, 0.5f, new MinMax[]
					{
						new MinMax(-280f, -330f),
						new MinMax(-360f, -400f)
					}, new MinMax[]
					{
						new MinMax(600f, 650f),
						new MinMax(750f, 790f)
					}, 900f), new LevelProperties.Mouse.CanCherryBomb(new string[]
					{
						"D:0.4, P:2,D:1.3,P:2,D:0.6,P:2",
						"D:0.5,P:3,D:0.7,P:2",
						"D:0.4, P:2,D:0.6,P:2,D:1.3,P:2",
						"D:0.5,P:2,D:0.7,P:3"
					}, 0.8f, new MinMax(-150f, -450f), new MinMax(400f, 700f), 1000f, 850, 1f), new LevelProperties.Mouse.CanCatapult(new string[]
					{
						"BNGCG",
						"CGPGC",
						"PGGCN",
						"BPGGN"
					}, 0.7f, 0.7f, 1f, 1f, 670, 15f, 75f, 2, 1), new LevelProperties.Mouse.CanRomanCandle(new MinMax(2f, 4f), 1f, 600f, 4f, 1f, 1f), new LevelProperties.Mouse.BrokenCanSawBlades(new string[]
					{
						"1,6,3,2,4,5",
						"1,2,5,3,6,4",
						"3,5,1,4,6,2",
						"5,1,3,6,4,2",
						"6,3,1,5,2,4"
					}, 45f, 2.2f, 2.6f, 280f, new MinMax(10f, 15f)), new LevelProperties.Mouse.BrokenCanFlame(new string[]
					{
						"F"
					}, 1f, 1.5f, 400f, 1.3f, 0.75f), new LevelProperties.Mouse.BrokenCanMove(100f, new MinMax(20f, 50f), 0.25f), new LevelProperties.Mouse.Claw(1f, 1500f, 0.083f, 500f, new string[]
					{
						"50,250,450,650,850,1050,1250",
						"1200,1000,800,600,400,200,0"
					}, 30f, 740f, 0.65f, 1f), new LevelProperties.Mouse.GhostMouse(false, 34f, 2f, new MinMax(2.5f, 4f), 0.5f, 630f, 800f, new MinMax(1f, 2f), 1f)));
				}
			}
			else
			{
				hp = 1500;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Mouse.State(10f, new LevelProperties.Mouse.Pattern[][]
				{
					new LevelProperties.Mouse.Pattern[]
					{
						LevelProperties.Mouse.Pattern.Dash,
						LevelProperties.Mouse.Pattern.Catapult,
						LevelProperties.Mouse.Pattern.CherryBomb,
						LevelProperties.Mouse.Pattern.Dash,
						LevelProperties.Mouse.Pattern.CherryBomb,
						LevelProperties.Mouse.Pattern.Catapult,
						LevelProperties.Mouse.Pattern.Dash,
						LevelProperties.Mouse.Pattern.Catapult
					}
				}, LevelProperties.Mouse.States.Main, new LevelProperties.Mouse.CanMove(230f, new MinMax(250f, 400f), 0f, 1f), new LevelProperties.Mouse.CanDash(1.35f, 1f, new MinMax[]
				{
					new MinMax(-280f, -330f),
					new MinMax(-400f, -440f)
				}, new MinMax[]
				{
					new MinMax(600f, 650f),
					new MinMax(750f, 790f)
				}, 900f), new LevelProperties.Mouse.CanCherryBomb(new string[]
				{
					"D:1,P:3",
					"D:1,P:2,D:0.5,P:1",
					"D:0.5,P:1,D:0.5,P:2"
				}, 1.2f, new MinMax(-210f, -400f), new MinMax(400f, 650f), 1000f, 800, 1f), new LevelProperties.Mouse.CanCatapult(new string[]
				{
					"CGGGN",
					"GGGNC",
					"CGGNG",
					"BGGCG"
				}, 0.7f, 0.7f, 1f, 1f, 640, 15f, 90f, 2, 1), new LevelProperties.Mouse.CanRomanCandle(new MinMax(1f, 1f), 1f, 550f, 4f, 1f, 1f), new LevelProperties.Mouse.BrokenCanSawBlades(new string[0], 50f, 1f, 1f, 300f, new MinMax(10000f, 10005f)), new LevelProperties.Mouse.BrokenCanFlame(new string[]
				{
					"F"
				}, 1f, 1.5f, 400f, 1f, 0.75f), new LevelProperties.Mouse.BrokenCanMove(235f, new MinMax(300f, 400f), 0.25f), new LevelProperties.Mouse.Claw(0f, 0f, 0f, 0f, new string[0], 0f, 0f, 0f, 0f), new LevelProperties.Mouse.GhostMouse(false, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f)));
				list.Add(new LevelProperties.Mouse.State(0.5f, new LevelProperties.Mouse.Pattern[][]
				{
					new LevelProperties.Mouse.Pattern[]
					{
						LevelProperties.Mouse.Pattern.Flame
					}
				}, LevelProperties.Mouse.States.BrokenCan, new LevelProperties.Mouse.CanMove(230f, new MinMax(250f, 400f), 0f, 1f), new LevelProperties.Mouse.CanDash(1.35f, 1f, new MinMax[]
				{
					new MinMax(-280f, -330f),
					new MinMax(-400f, -440f)
				}, new MinMax[]
				{
					new MinMax(600f, 650f),
					new MinMax(750f, 790f)
				}, 900f), new LevelProperties.Mouse.CanCherryBomb(new string[]
				{
					"D:1,P:3",
					"D:1,P:2,D:0.5,P:1",
					"D:0.5,P:1,D:0.5,P:2"
				}, 1.2f, new MinMax(-210f, -400f), new MinMax(400f, 650f), 1000f, 800, 1f), new LevelProperties.Mouse.CanCatapult(new string[]
				{
					"CGGGN",
					"GGGNC",
					"CGGNG",
					"BGGCG"
				}, 0.7f, 0.7f, 1f, 1f, 640, 15f, 90f, 2, 1), new LevelProperties.Mouse.CanRomanCandle(new MinMax(1f, 1f), 1f, 550f, 4f, 1f, 1f), new LevelProperties.Mouse.BrokenCanSawBlades(new string[0], 50f, 1f, 1f, 300f, new MinMax(10000f, 10005f)), new LevelProperties.Mouse.BrokenCanFlame(new string[]
				{
					"F"
				}, 1f, 1.5f, 400f, 1f, 0.75f), new LevelProperties.Mouse.BrokenCanMove(235f, new MinMax(300f, 400f), 0.25f), new LevelProperties.Mouse.Claw(0f, 0f, 0f, 0f, new string[0], 0f, 0f, 0f, 0f), new LevelProperties.Mouse.GhostMouse(false, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f)));
			}
			return new LevelProperties.Mouse(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200020F RID: 527
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700010B RID: 267
			// (get) Token: 0x060005FE RID: 1534 RVA: 0x0002F104 File Offset: 0x0002D504
			// (set) Token: 0x060005FF RID: 1535 RVA: 0x0002F10C File Offset: 0x0002D50C
			private protected LevelProperties.Mouse properties { protected get; private set; }

			// Token: 0x06000600 RID: 1536 RVA: 0x0002F115 File Offset: 0x0002D515
			public virtual void LevelInit(LevelProperties.Mouse properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000601 RID: 1537 RVA: 0x0002F11E File Offset: 0x0002D51E
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000210 RID: 528
		public enum States
		{
			// Token: 0x04000ADC RID: 2780
			Main,
			// Token: 0x04000ADD RID: 2781
			Generic,
			// Token: 0x04000ADE RID: 2782
			BrokenCan,
			// Token: 0x04000ADF RID: 2783
			Cat
		}

		// Token: 0x02000211 RID: 529
		public enum Pattern
		{
			// Token: 0x04000AE1 RID: 2785
			Move,
			// Token: 0x04000AE2 RID: 2786
			Dash,
			// Token: 0x04000AE3 RID: 2787
			CherryBomb,
			// Token: 0x04000AE4 RID: 2788
			Catapult,
			// Token: 0x04000AE5 RID: 2789
			RomanCandle,
			// Token: 0x04000AE6 RID: 2790
			SawBlades,
			// Token: 0x04000AE7 RID: 2791
			Flame,
			// Token: 0x04000AE8 RID: 2792
			LeftClaw,
			// Token: 0x04000AE9 RID: 2793
			RightClaw,
			// Token: 0x04000AEA RID: 2794
			GhostMouse,
			// Token: 0x04000AEB RID: 2795
			Uninitialized
		}

		// Token: 0x02000212 RID: 530
		public class State : AbstractLevelState<LevelProperties.Mouse.Pattern, LevelProperties.Mouse.States>
		{
			// Token: 0x06000602 RID: 1538 RVA: 0x0002F120 File Offset: 0x0002D520
			public State(float healthTrigger, LevelProperties.Mouse.Pattern[][] patterns, LevelProperties.Mouse.States stateName, LevelProperties.Mouse.CanMove canMove, LevelProperties.Mouse.CanDash canDash, LevelProperties.Mouse.CanCherryBomb canCherryBomb, LevelProperties.Mouse.CanCatapult canCatapult, LevelProperties.Mouse.CanRomanCandle canRomanCandle, LevelProperties.Mouse.BrokenCanSawBlades brokenCanSawBlades, LevelProperties.Mouse.BrokenCanFlame brokenCanFlame, LevelProperties.Mouse.BrokenCanMove brokenCanMove, LevelProperties.Mouse.Claw claw, LevelProperties.Mouse.GhostMouse ghostMouse) : base(healthTrigger, patterns, stateName)
			{
				this.canMove = canMove;
				this.canDash = canDash;
				this.canCherryBomb = canCherryBomb;
				this.canCatapult = canCatapult;
				this.canRomanCandle = canRomanCandle;
				this.brokenCanSawBlades = brokenCanSawBlades;
				this.brokenCanFlame = brokenCanFlame;
				this.brokenCanMove = brokenCanMove;
				this.claw = claw;
				this.ghostMouse = ghostMouse;
			}

			// Token: 0x04000AEC RID: 2796
			public readonly LevelProperties.Mouse.CanMove canMove;

			// Token: 0x04000AED RID: 2797
			public readonly LevelProperties.Mouse.CanDash canDash;

			// Token: 0x04000AEE RID: 2798
			public readonly LevelProperties.Mouse.CanCherryBomb canCherryBomb;

			// Token: 0x04000AEF RID: 2799
			public readonly LevelProperties.Mouse.CanCatapult canCatapult;

			// Token: 0x04000AF0 RID: 2800
			public readonly LevelProperties.Mouse.CanRomanCandle canRomanCandle;

			// Token: 0x04000AF1 RID: 2801
			public readonly LevelProperties.Mouse.BrokenCanSawBlades brokenCanSawBlades;

			// Token: 0x04000AF2 RID: 2802
			public readonly LevelProperties.Mouse.BrokenCanFlame brokenCanFlame;

			// Token: 0x04000AF3 RID: 2803
			public readonly LevelProperties.Mouse.BrokenCanMove brokenCanMove;

			// Token: 0x04000AF4 RID: 2804
			public readonly LevelProperties.Mouse.Claw claw;

			// Token: 0x04000AF5 RID: 2805
			public readonly LevelProperties.Mouse.GhostMouse ghostMouse;
		}

		// Token: 0x02000213 RID: 531
		public class CanMove : AbstractLevelPropertyGroup
		{
			// Token: 0x06000603 RID: 1539 RVA: 0x0002F186 File Offset: 0x0002D586
			public CanMove(float speed, MinMax maxXPositionRange, float stopTime, float initialHesitate)
			{
				this.speed = speed;
				this.maxXPositionRange = maxXPositionRange;
				this.stopTime = stopTime;
				this.initialHesitate = initialHesitate;
			}

			// Token: 0x04000AF6 RID: 2806
			public readonly float speed;

			// Token: 0x04000AF7 RID: 2807
			public readonly MinMax maxXPositionRange;

			// Token: 0x04000AF8 RID: 2808
			public readonly float stopTime;

			// Token: 0x04000AF9 RID: 2809
			public readonly float initialHesitate;
		}

		// Token: 0x02000214 RID: 532
		public class CanDash : AbstractLevelPropertyGroup
		{
			// Token: 0x06000604 RID: 1540 RVA: 0x0002F1AB File Offset: 0x0002D5AB
			public CanDash(float time, float hesitate, MinMax[] springVelocityX, MinMax[] springVelocityY, float springGravity)
			{
				this.time = time;
				this.hesitate = hesitate;
				this.springVelocityX = springVelocityX;
				this.springVelocityY = springVelocityY;
				this.springGravity = springGravity;
			}

			// Token: 0x04000AFA RID: 2810
			public readonly float time;

			// Token: 0x04000AFB RID: 2811
			public readonly float hesitate;

			// Token: 0x04000AFC RID: 2812
			public readonly MinMax[] springVelocityX;

			// Token: 0x04000AFD RID: 2813
			public readonly MinMax[] springVelocityY;

			// Token: 0x04000AFE RID: 2814
			public readonly float springGravity;
		}

		// Token: 0x02000215 RID: 533
		public class CanCherryBomb : AbstractLevelPropertyGroup
		{
			// Token: 0x06000605 RID: 1541 RVA: 0x0002F1D8 File Offset: 0x0002D5D8
			public CanCherryBomb(string[] patterns, float delay, MinMax xVelocity, MinMax yVelocity, float gravity, int childSpeed, float hesitate)
			{
				this.patterns = patterns;
				this.delay = delay;
				this.xVelocity = xVelocity;
				this.yVelocity = yVelocity;
				this.gravity = gravity;
				this.childSpeed = childSpeed;
				this.hesitate = hesitate;
			}

			// Token: 0x04000AFF RID: 2815
			public readonly string[] patterns;

			// Token: 0x04000B00 RID: 2816
			public readonly float delay;

			// Token: 0x04000B01 RID: 2817
			public readonly MinMax xVelocity;

			// Token: 0x04000B02 RID: 2818
			public readonly MinMax yVelocity;

			// Token: 0x04000B03 RID: 2819
			public readonly float gravity;

			// Token: 0x04000B04 RID: 2820
			public readonly int childSpeed;

			// Token: 0x04000B05 RID: 2821
			public readonly float hesitate;
		}

		// Token: 0x02000216 RID: 534
		public class CanCatapult : AbstractLevelPropertyGroup
		{
			// Token: 0x06000606 RID: 1542 RVA: 0x0002F218 File Offset: 0x0002D618
			public CanCatapult(string[] patterns, float timeIn, float timeOut, float pumpDelay, float repeatDelay, int projectileSpeed, float angleOffset, float spreadAngle, int count, int hesitate)
			{
				this.patterns = patterns;
				this.timeIn = timeIn;
				this.timeOut = timeOut;
				this.pumpDelay = pumpDelay;
				this.repeatDelay = repeatDelay;
				this.projectileSpeed = projectileSpeed;
				this.angleOffset = angleOffset;
				this.spreadAngle = spreadAngle;
				this.count = count;
				this.hesitate = hesitate;
			}

			// Token: 0x04000B06 RID: 2822
			public readonly string[] patterns;

			// Token: 0x04000B07 RID: 2823
			public readonly float timeIn;

			// Token: 0x04000B08 RID: 2824
			public readonly float timeOut;

			// Token: 0x04000B09 RID: 2825
			public readonly float pumpDelay;

			// Token: 0x04000B0A RID: 2826
			public readonly float repeatDelay;

			// Token: 0x04000B0B RID: 2827
			public readonly int projectileSpeed;

			// Token: 0x04000B0C RID: 2828
			public readonly float angleOffset;

			// Token: 0x04000B0D RID: 2829
			public readonly float spreadAngle;

			// Token: 0x04000B0E RID: 2830
			public readonly int count;

			// Token: 0x04000B0F RID: 2831
			public readonly int hesitate;
		}

		// Token: 0x02000217 RID: 535
		public class CanRomanCandle : AbstractLevelPropertyGroup
		{
			// Token: 0x06000607 RID: 1543 RVA: 0x0002F278 File Offset: 0x0002D678
			public CanRomanCandle(MinMax count, float repeatDelay, float speed, float rotationSpeed, float timeBeforeHoming, float hesitate)
			{
				this.count = count;
				this.repeatDelay = repeatDelay;
				this.speed = speed;
				this.rotationSpeed = rotationSpeed;
				this.timeBeforeHoming = timeBeforeHoming;
				this.hesitate = hesitate;
			}

			// Token: 0x04000B10 RID: 2832
			public readonly MinMax count;

			// Token: 0x04000B11 RID: 2833
			public readonly float repeatDelay;

			// Token: 0x04000B12 RID: 2834
			public readonly float speed;

			// Token: 0x04000B13 RID: 2835
			public readonly float rotationSpeed;

			// Token: 0x04000B14 RID: 2836
			public readonly float timeBeforeHoming;

			// Token: 0x04000B15 RID: 2837
			public readonly float hesitate;
		}

		// Token: 0x02000218 RID: 536
		public class BrokenCanSawBlades : AbstractLevelPropertyGroup
		{
			// Token: 0x06000608 RID: 1544 RVA: 0x0002F2AD File Offset: 0x0002D6AD
			public BrokenCanSawBlades(string[] patternString, float entrySpeed, float delayBeforeAttack, float delayBeforeNextSaw, float speed, MinMax fullAttackTime)
			{
				this.patternString = patternString;
				this.entrySpeed = entrySpeed;
				this.delayBeforeAttack = delayBeforeAttack;
				this.delayBeforeNextSaw = delayBeforeNextSaw;
				this.speed = speed;
				this.fullAttackTime = fullAttackTime;
			}

			// Token: 0x04000B16 RID: 2838
			public readonly string[] patternString;

			// Token: 0x04000B17 RID: 2839
			public readonly float entrySpeed;

			// Token: 0x04000B18 RID: 2840
			public readonly float delayBeforeAttack;

			// Token: 0x04000B19 RID: 2841
			public readonly float delayBeforeNextSaw;

			// Token: 0x04000B1A RID: 2842
			public readonly float speed;

			// Token: 0x04000B1B RID: 2843
			public readonly MinMax fullAttackTime;
		}

		// Token: 0x02000219 RID: 537
		public class BrokenCanFlame : AbstractLevelPropertyGroup
		{
			// Token: 0x06000609 RID: 1545 RVA: 0x0002F2E2 File Offset: 0x0002D6E2
			public BrokenCanFlame(string[] attackString, float delayBeforeShot, float delayAfterShot, float shotSpeed, float chargeTime, float loopTime)
			{
				this.attackString = attackString;
				this.delayBeforeShot = delayBeforeShot;
				this.delayAfterShot = delayAfterShot;
				this.shotSpeed = shotSpeed;
				this.chargeTime = chargeTime;
				this.loopTime = loopTime;
			}

			// Token: 0x04000B1C RID: 2844
			public readonly string[] attackString;

			// Token: 0x04000B1D RID: 2845
			public readonly float delayBeforeShot;

			// Token: 0x04000B1E RID: 2846
			public readonly float delayAfterShot;

			// Token: 0x04000B1F RID: 2847
			public readonly float shotSpeed;

			// Token: 0x04000B20 RID: 2848
			public readonly float chargeTime;

			// Token: 0x04000B21 RID: 2849
			public readonly float loopTime;
		}

		// Token: 0x0200021A RID: 538
		public class BrokenCanMove : AbstractLevelPropertyGroup
		{
			// Token: 0x0600060A RID: 1546 RVA: 0x0002F317 File Offset: 0x0002D717
			public BrokenCanMove(float speed, MinMax maxXPositionRange, float stopTime)
			{
				this.speed = speed;
				this.maxXPositionRange = maxXPositionRange;
				this.stopTime = stopTime;
			}

			// Token: 0x04000B22 RID: 2850
			public readonly float speed;

			// Token: 0x04000B23 RID: 2851
			public readonly MinMax maxXPositionRange;

			// Token: 0x04000B24 RID: 2852
			public readonly float stopTime;
		}

		// Token: 0x0200021B RID: 539
		public class Claw : AbstractLevelPropertyGroup
		{
			// Token: 0x0600060B RID: 1547 RVA: 0x0002F334 File Offset: 0x0002D734
			public Claw(float attackDelay, float moveSpeed, float holdGroundTime, float leaveSpeed, string[] fallingObjectStrings, float objectStartingFallSpeed, float objectGravity, float objectSpawnDelay, float hesitateAfterAttack)
			{
				this.attackDelay = attackDelay;
				this.moveSpeed = moveSpeed;
				this.holdGroundTime = holdGroundTime;
				this.leaveSpeed = leaveSpeed;
				this.fallingObjectStrings = fallingObjectStrings;
				this.objectStartingFallSpeed = objectStartingFallSpeed;
				this.objectGravity = objectGravity;
				this.objectSpawnDelay = objectSpawnDelay;
				this.hesitateAfterAttack = hesitateAfterAttack;
			}

			// Token: 0x04000B25 RID: 2853
			public readonly float attackDelay;

			// Token: 0x04000B26 RID: 2854
			public readonly float moveSpeed;

			// Token: 0x04000B27 RID: 2855
			public readonly float holdGroundTime;

			// Token: 0x04000B28 RID: 2856
			public readonly float leaveSpeed;

			// Token: 0x04000B29 RID: 2857
			public readonly string[] fallingObjectStrings;

			// Token: 0x04000B2A RID: 2858
			public readonly float objectStartingFallSpeed;

			// Token: 0x04000B2B RID: 2859
			public readonly float objectGravity;

			// Token: 0x04000B2C RID: 2860
			public readonly float objectSpawnDelay;

			// Token: 0x04000B2D RID: 2861
			public readonly float hesitateAfterAttack;
		}

		// Token: 0x0200021C RID: 540
		public class GhostMouse : AbstractLevelPropertyGroup
		{
			// Token: 0x0600060C RID: 1548 RVA: 0x0002F38C File Offset: 0x0002D78C
			public GhostMouse(bool fourMice, float hp, float jailDuration, MinMax attackDelayRange, float attackAnticipation, float ballSpeed, float splitSpeed, MinMax pinkBallRange, float hesitateAfterAttack)
			{
				this.fourMice = fourMice;
				this.hp = hp;
				this.jailDuration = jailDuration;
				this.attackDelayRange = attackDelayRange;
				this.attackAnticipation = attackAnticipation;
				this.ballSpeed = ballSpeed;
				this.splitSpeed = splitSpeed;
				this.pinkBallRange = pinkBallRange;
				this.hesitateAfterAttack = hesitateAfterAttack;
			}

			// Token: 0x04000B2E RID: 2862
			public readonly bool fourMice;

			// Token: 0x04000B2F RID: 2863
			public readonly float hp;

			// Token: 0x04000B30 RID: 2864
			public readonly float jailDuration;

			// Token: 0x04000B31 RID: 2865
			public readonly MinMax attackDelayRange;

			// Token: 0x04000B32 RID: 2866
			public readonly float attackAnticipation;

			// Token: 0x04000B33 RID: 2867
			public readonly float ballSpeed;

			// Token: 0x04000B34 RID: 2868
			public readonly float splitSpeed;

			// Token: 0x04000B35 RID: 2869
			public readonly MinMax pinkBallRange;

			// Token: 0x04000B36 RID: 2870
			public readonly float hesitateAfterAttack;
		}
	}

	// Token: 0x0200021E RID: 542
	public class OldMan : AbstractLevelProperties<LevelProperties.OldMan.State, LevelProperties.OldMan.Pattern, LevelProperties.OldMan.States>
	{
		// Token: 0x06000622 RID: 1570 RVA: 0x0002F3E4 File Offset: 0x0002D7E4
		public OldMan(int hp, Level.GoalTimes goalTimes, LevelProperties.OldMan.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000623 RID: 1571 RVA: 0x0002F3F0 File Offset: 0x0002D7F0
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1150f;
				timeline.events.Add(new Level.Timeline.Event("SockPuppet", 0.5f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1500f;
				timeline.events.Add(new Level.Timeline.Event("SockPuppet", 0.7f));
				timeline.events.Add(new Level.Timeline.Event("GnomeLeader", 0.31f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1700f;
				timeline.events.Add(new Level.Timeline.Event("SockPuppet", 0.7f));
				timeline.events.Add(new Level.Timeline.Event("GnomeLeader", 0.31f));
				break;
			}
			return timeline;
		}

		// Token: 0x06000624 RID: 1572 RVA: 0x0002F4D0 File Offset: 0x0002D8D0
		public static LevelProperties.OldMan.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.OldMan.Pattern.Default;
				}
				if (id == "S")
				{
					return LevelProperties.OldMan.Pattern.Spit;
				}
				if (id == "U")
				{
					return LevelProperties.OldMan.Pattern.Duck;
				}
				if (id == "C")
				{
					return LevelProperties.OldMan.Pattern.Camel;
				}
			}
			Debug.LogError("Pattern OldMan.Pattern for  " + id + " not found.", null);
			return LevelProperties.OldMan.Pattern.Uninitialized;
		}

		// Token: 0x06000625 RID: 1573 RVA: 0x0002F550 File Offset: 0x0002D950
		public static LevelProperties.OldMan GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.OldMan.State> list = new List<LevelProperties.OldMan.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1700;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.OldMan.State(10f, new LevelProperties.OldMan.Pattern[][]
						{
							new LevelProperties.OldMan.Pattern[]
							{
								LevelProperties.OldMan.Pattern.Camel,
								LevelProperties.OldMan.Pattern.Spit,
								LevelProperties.OldMan.Pattern.Duck,
								LevelProperties.OldMan.Pattern.Spit
							}
						}, LevelProperties.OldMan.States.Main, new LevelProperties.OldMan.Platforms(3.8f, new string[]
						{
							"0,3,2,1,4",
							"1,4,2,0,3",
							"4,3,1,0,2",
							"0,2,1,4,3",
							"4,0,3,1,2",
							"3,1,2,0,4",
							"1,3,0,2,4"
						}, new MinMax(1.6f, 2.2f), 0f, -180f, new string[]
						{
							"0,3,4",
							"0,2,4",
							"0,4,1",
							"2,0,4",
							"3,0,4",
							"4,0,3",
							"0,4,3",
							"0,4,2",
							"0,3,1"
						}, "0.2,0.4,0.7"), new LevelProperties.OldMan.Turret(1.5f, 1.1f, 350f, 1.5f, new string[]
						{
							"0,320,0,40",
							"0,45,0,315",
							"0,310,0,50",
							"0,40,0,320"
						}, new MinMax(2.8f, 3.8f), 4, new string[]
						{
							"14,2,18,14,10,6,2,10,6,18",
							"2,14,10,6,10,6,14,2,18,6"
						}, true, new string[]
						{
							"R,R"
						}, 101f, 1.251f, 0.5f), new LevelProperties.OldMan.Spikes(0.5f, 0.5f, 3f), new LevelProperties.OldMan.Hands(new string[]
						{
							"2,2,0,1,2,0,1,0"
						}, new string[]
						{
							"0,1,2,0,1,0,2,1,0"
						}, 0.25f, 0f, 0f, 1250f, 0.5f, 0f, 0.3f, 150f, 1.15f), new LevelProperties.OldMan.Dwarf("N,N,N,N,N,P,N,N,N,N,P", 2f, new string[]
						{
							"0.8,1,0.5,0.8,1,0.5,0.8,1,0.5,0.8,0.5,0.9,3.6",
							"0.7,0.8,1,0.6,0.6,1,0.7,0.6,1,0.5,0.7,0.8,0.8,0.6,3.1",
							"0.7,0.6,0.7,1,0.6,0.8,0.6,1,0.7,0.8,1,0.7,0.7,0.8,0.8,3.3"
						}, new string[]
						{
							"0,9,1,8,2,7"
						}, 1f, 0.8f, new string[]
						{
							"575,675,525,625,550,675,600,525,625,650"
						}), new LevelProperties.OldMan.GnomeLeader(0f, 0.381f, 81f, new string[]
						{
							"2,2,3,2,2,2,3,2,2,3,2,1,2,3",
							"2,3,2,2,1,3,2,2,3,1,2,3"
						}, 2.8f, new string[]
						{
							"3,0,4,1,2",
							"1,4,3,2,0",
							"4,1,3,0,2",
							"3,2,0,4,1",
							"4,2,0,3,1",
							"1,3,0,4,2"
						}, new string[]
						{
							"0.1,0.5,0.6,0.1,0.7,0.5,0.6,0.1,0.5,0.7,0.1,0.6,0.6,0.7"
						}, "N,N,N,N,N"), new LevelProperties.OldMan.ScubaGnomes(3.5f, new string[]
						{
							"3,3,3.5,3,3,4",
							"3.5,3,3.5,3,3,4"
						}, 415f, 465f, new string[]
						{
							"A,A,A,B,A,B,A,B,B"
						}, 0.9f, 500f, 100f, "N,N,N,P,N,N,N,N,P"), new LevelProperties.OldMan.SpitAttack(0.8f, new string[]
						{
							"-100,50,325,0,150,-50,200,50,325,-100,150,-50,300",
							"100,-50,200,50,-100,325,0,200,-50,150,325,-100,50",
							"50,200,-50,300,-100,100,200,0,100,-100,150,250,0",
							"-50,100,200,-100,150,325,-100,150,0,-100,250,150",
							"0,200,-100,100,250,-50,200,-100,325,150,0,100,-100",
							"-100,100,200,325,-50,200,100,-50,200,325,-100,150,0",
							"325,150,-100,50,200,0,-100,300,-50,100,250,0,-50"
						}, 0.5f, 0.4f, 35f, 0.251f, "N,N,N,N,P,N,N,N,N,N,P"), new LevelProperties.OldMan.GooseAttack(1.1f, 0f, 2.2f, 0.4f, 1200f, 1800f, 1900f, 2500f, new string[]
						{
							"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350",
							"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350"
						}), new LevelProperties.OldMan.CamelAttack(0.25f, 545f, -415f, -795f, 0f, 0.25f), new LevelProperties.OldMan.ClimberGnomes(new string[]
						{
							"9,4,7,1,3,6,2,8,5,6",
							"9,6,2,5,1,4,8,3,5,7",
							"9,2,4,1,8,6,3,7,2,5"
						}, new MinMax(3.51f, 4.51f), true, 0.31f, 0.31f, 225f, true, 1.5f)));
						list.Add(new LevelProperties.OldMan.State(0.7f, new LevelProperties.OldMan.Pattern[][]
						{
							new LevelProperties.OldMan.Pattern[0]
						}, LevelProperties.OldMan.States.SockPuppet, new LevelProperties.OldMan.Platforms(3.8f, new string[]
						{
							"0,3,2,1,4",
							"1,4,2,0,3",
							"4,3,1,0,2",
							"0,2,1,4,3",
							"4,0,3,1,2",
							"3,1,2,0,4",
							"1,3,0,2,4"
						}, new MinMax(1.6f, 2.2f), 0f, -180f, new string[]
						{
							"0,3,4",
							"0,2,4",
							"0,4,1",
							"2,0,4",
							"3,0,4",
							"4,0,3",
							"0,4,3",
							"0,4,2",
							"0,3,1"
						}, "0.2,0.4,0.7"), new LevelProperties.OldMan.Turret(1.5f, 1.1f, 350f, 1.5f, new string[]
						{
							"0,320,0,40",
							"0,45,0,315",
							"0,310,0,50",
							"0,40,0,320"
						}, new MinMax(2.8f, 3.8f), 4, new string[]
						{
							"14,2,18,14,10,6,2,10,6,18",
							"2,14,10,6,10,6,14,2,18,6"
						}, true, new string[]
						{
							"R,R"
						}, 101f, 1.251f, 0.5f), new LevelProperties.OldMan.Spikes(0.5f, 0.5f, 3f), new LevelProperties.OldMan.Hands(new string[]
						{
							"2,2,0,1,2,0,1,0"
						}, new string[]
						{
							"0,1,2,0,1,0,2,1,0"
						}, 0.25f, 0f, 0f, 1250f, 0.5f, 0f, 0.3f, 150f, 1.15f), new LevelProperties.OldMan.Dwarf("N,N,N,N,N,P,N,N,N,N,P", 2f, new string[]
						{
							"0.8,1,0.5,0.8,1,0.5,0.8,1,0.5,0.8,0.5,0.9,3.6",
							"0.7,0.8,1,0.6,0.6,1,0.7,0.6,1,0.5,0.7,0.8,0.8,0.6,3.1",
							"0.7,0.6,0.7,1,0.6,0.8,0.6,1,0.7,0.8,1,0.7,0.7,0.8,0.8,3.3"
						}, new string[]
						{
							"0,9,1,8,2,7"
						}, 1f, 0.8f, new string[]
						{
							"575,675,525,625,550,675,600,525,625,650"
						}), new LevelProperties.OldMan.GnomeLeader(0f, 0.381f, 81f, new string[]
						{
							"2,2,3,2,2,2,3,2,2,3,2,1,2,3",
							"2,3,2,2,1,3,2,2,3,1,2,3"
						}, 2.8f, new string[]
						{
							"3,0,4,1,2",
							"1,4,3,2,0",
							"4,1,3,0,2",
							"3,2,0,4,1",
							"4,2,0,3,1",
							"1,3,0,4,2"
						}, new string[]
						{
							"0.1,0.5,0.6,0.1,0.7,0.5,0.6,0.1,0.5,0.7,0.1,0.6,0.6,0.7"
						}, "N,N,N,N,N"), new LevelProperties.OldMan.ScubaGnomes(3.5f, new string[]
						{
							"3,3,3.5,3,3,4",
							"3.5,3,3.5,3,3,4"
						}, 415f, 465f, new string[]
						{
							"A,A,A,B,A,B,A,B,B"
						}, 0.9f, 500f, 100f, "N,N,N,P,N,N,N,N,P"), new LevelProperties.OldMan.SpitAttack(0.8f, new string[]
						{
							"-100,50,325,0,150,-50,200,50,325,-100,150,-50,300",
							"100,-50,200,50,-100,325,0,200,-50,150,325,-100,50",
							"50,200,-50,300,-100,100,200,0,100,-100,150,250,0",
							"-50,100,200,-100,150,325,-100,150,0,-100,250,150",
							"0,200,-100,100,250,-50,200,-100,325,150,0,100,-100",
							"-100,100,200,325,-50,200,100,-50,200,325,-100,150,0",
							"325,150,-100,50,200,0,-100,300,-50,100,250,0,-50"
						}, 0.5f, 0.4f, 35f, 0.251f, "N,N,N,N,P,N,N,N,N,N,P"), new LevelProperties.OldMan.GooseAttack(1.1f, 0f, 2.2f, 0.4f, 1200f, 1800f, 1900f, 2500f, new string[]
						{
							"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350",
							"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350"
						}), new LevelProperties.OldMan.CamelAttack(0.25f, 545f, -415f, -795f, 0f, 0.25f), new LevelProperties.OldMan.ClimberGnomes(new string[]
						{
							"9,4,7,1,3,6,2,8,5,6",
							"9,6,2,5,1,4,8,3,5,7",
							"9,2,4,1,8,6,3,7,2,5"
						}, new MinMax(3.51f, 4.51f), true, 0.31f, 0.31f, 225f, true, 1.5f)));
						list.Add(new LevelProperties.OldMan.State(0.31f, new LevelProperties.OldMan.Pattern[][]
						{
							new LevelProperties.OldMan.Pattern[0]
						}, LevelProperties.OldMan.States.GnomeLeader, new LevelProperties.OldMan.Platforms(3.8f, new string[]
						{
							"0,3,2,1,4",
							"1,4,2,0,3",
							"4,3,1,0,2",
							"0,2,1,4,3",
							"4,0,3,1,2",
							"3,1,2,0,4",
							"1,3,0,2,4"
						}, new MinMax(1.6f, 2.2f), 0f, -180f, new string[]
						{
							"0,3,4",
							"0,2,4",
							"0,4,1",
							"2,0,4",
							"3,0,4",
							"4,0,3",
							"0,4,3",
							"0,4,2",
							"0,3,1"
						}, "0.2,0.4,0.7"), new LevelProperties.OldMan.Turret(1.5f, 1.1f, 350f, 1.5f, new string[]
						{
							"0,320,0,40",
							"0,45,0,315",
							"0,310,0,50",
							"0,40,0,320"
						}, new MinMax(2.8f, 3.8f), 4, new string[]
						{
							"14,2,18,14,10,6,2,10,6,18",
							"2,14,10,6,10,6,14,2,18,6"
						}, true, new string[]
						{
							"R,R"
						}, 101f, 1.251f, 0.5f), new LevelProperties.OldMan.Spikes(0.5f, 0.5f, 3f), new LevelProperties.OldMan.Hands(new string[]
						{
							"2,2,0,1,2,0,1,0"
						}, new string[]
						{
							"0,1,2,0,1,0,2,1,0"
						}, 0.25f, 0f, 0f, 1250f, 0.5f, 0f, 0.3f, 150f, 1.15f), new LevelProperties.OldMan.Dwarf("N,N,N,N,N,P,N,N,N,N,P", 2f, new string[]
						{
							"0.8,1,0.5,0.8,1,0.5,0.8,1,0.5,0.8,0.5,0.9,3.6",
							"0.7,0.8,1,0.6,0.6,1,0.7,0.6,1,0.5,0.7,0.8,0.8,0.6,3.1",
							"0.7,0.6,0.7,1,0.6,0.8,0.6,1,0.7,0.8,1,0.7,0.7,0.8,0.8,3.3"
						}, new string[]
						{
							"0,9,1,8,2,7"
						}, 1f, 0.8f, new string[]
						{
							"575,675,525,625,550,675,600,525,625,650"
						}), new LevelProperties.OldMan.GnomeLeader(0f, 0.381f, 81f, new string[]
						{
							"2,2,3,2,2,2,3,2,2,3,2,1,2,3",
							"2,3,2,2,1,3,2,2,3,1,2,3"
						}, 2.8f, new string[]
						{
							"3,0,4,1,2",
							"1,4,3,2,0",
							"4,1,3,0,2",
							"3,2,0,4,1",
							"4,2,0,3,1",
							"1,3,0,4,2"
						}, new string[]
						{
							"0.1,0.5,0.6,0.1,0.7,0.5,0.6,0.1,0.5,0.7,0.1,0.6,0.6,0.7"
						}, "N,N,N,N,N"), new LevelProperties.OldMan.ScubaGnomes(3.5f, new string[]
						{
							"3,3,3.5,3,3,4",
							"3.5,3,3.5,3,3,4"
						}, 415f, 465f, new string[]
						{
							"A,A,A,B,A,B,A,B,B"
						}, 0.9f, 500f, 100f, "N,N,N,P,N,N,N,N,P"), new LevelProperties.OldMan.SpitAttack(0.8f, new string[]
						{
							"-100,50,325,0,150,-50,200,50,325,-100,150,-50,300",
							"100,-50,200,50,-100,325,0,200,-50,150,325,-100,50",
							"50,200,-50,300,-100,100,200,0,100,-100,150,250,0",
							"-50,100,200,-100,150,325,-100,150,0,-100,250,150",
							"0,200,-100,100,250,-50,200,-100,325,150,0,100,-100",
							"-100,100,200,325,-50,200,100,-50,200,325,-100,150,0",
							"325,150,-100,50,200,0,-100,300,-50,100,250,0,-50"
						}, 0.5f, 0.4f, 35f, 0.251f, "N,N,N,N,P,N,N,N,N,N,P"), new LevelProperties.OldMan.GooseAttack(1.1f, 0f, 2.2f, 0.4f, 1200f, 1800f, 1900f, 2500f, new string[]
						{
							"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350",
							"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350"
						}), new LevelProperties.OldMan.CamelAttack(0.25f, 545f, -415f, -795f, 0f, 0.25f), new LevelProperties.OldMan.ClimberGnomes(new string[]
						{
							"9,4,7,1,3,6,2,8,5,6",
							"9,6,2,5,1,4,8,3,5,7",
							"9,2,4,1,8,6,3,7,2,5"
						}, new MinMax(3.51f, 4.51f), true, 0.31f, 0.31f, 225f, true, 1.5f)));
					}
				}
				else
				{
					hp = 1500;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.OldMan.State(10f, new LevelProperties.OldMan.Pattern[][]
					{
						new LevelProperties.OldMan.Pattern[]
						{
							LevelProperties.OldMan.Pattern.Spit,
							LevelProperties.OldMan.Pattern.Camel,
							LevelProperties.OldMan.Pattern.Spit,
							LevelProperties.OldMan.Pattern.Duck
						}
					}, LevelProperties.OldMan.States.Main, new LevelProperties.OldMan.Platforms(4.4f, new string[]
					{
						"0,2,1,4,3",
						"1,3,0,2,4",
						"4,3,1,0,2",
						"3,1,2,0,4",
						"1,4,2,0,3",
						"4,0,3,1,2",
						"0,3,2,1,4"
					}, new MinMax(1.8f, 2.4f), 0f, -180f, new string[]
					{
						"0,2",
						"0,3",
						"0,4",
						"1,3",
						"3,1",
						"2,0",
						"3,0",
						"2,4",
						"0,1",
						"0,2",
						"0,3"
					}, "0.3,0.6"), new LevelProperties.OldMan.Turret(1.5f, 1.1f, 300f, 1.8f, new string[]
					{
						"0,45,0,315",
						"0,320,0,40",
						"0,40,0,320",
						"0,310,0,50"
					}, new MinMax(3.4f, 4.4f), 3, new string[]
					{
						"2,14,10,6,14,2,18,6,14,6",
						"14,2,18,14,6,10,2,10,6,18"
					}, true, new string[]
					{
						"R,R"
					}, 100f, 1.25f, 0.5f), new LevelProperties.OldMan.Spikes(0.55f, 0.5f, 3.5f), new LevelProperties.OldMan.Hands(new string[]
					{
						"0,1,2,0,1,0,2,1,0"
					}, new string[]
					{
						"2,2,0,1,2,0,1,0"
					}, 0.25f, 0f, 0f, 1150f, 0.5f, 0f, 0.3f, 150f, 1.15f), new LevelProperties.OldMan.Dwarf("N,N,N,N,P,N,N,N,P", 2f, new string[]
					{
						"1.4,1.5,1.8,1.6,1.9,1.5,1.3,1.4,1.7,1.6,1.7"
					}, new string[]
					{
						"4,5,9,0,2,3,5,1,6,5,4,2,8,7,1",
						"1,5,3,0,9,4,8,2,6,0,7,1,5,9,3"
					}, 1f, 0.8f, new string[]
					{
						"575,675,525,625,550,675,600,525,625,650"
					}), new LevelProperties.OldMan.GnomeLeader(123f, 0.41f, 80f, new string[]
					{
						"1,2,2,0,1,2,1,2,0,2,2",
						"0,1,2,2,1,0,2,1,1,2,2",
						"2,1,1,2,0,2,2,1,2,0,2"
					}, 3.1f, new string[]
					{
						"1,3,0,4,2",
						"4,2,0,3,1",
						"3,2,0,4,1",
						"4,1,3,0,2",
						"1,4,3,2,0",
						"3,0,4,1,2"
					}, new string[]
					{
						"1,0.6,0.5,0.6,0.7,1,0.7,0.6,0.8,1,0.6,0.7,0.8,0.7",
						"1,0.6,0.5,0.8,1,0.8,0.6,0.5,1,0.6,0.7,0.7,0.6"
					}, "N,N"), new LevelProperties.OldMan.ScubaGnomes(3.5f, new string[]
					{
						"3.5,4,3.5,3.5,4,4.5"
					}, 385f, 445f, new string[]
					{
						"A,A,A,B,A,B,A,B,B"
					}, 0.9f, 500f, 100f, "N,N,N,P,N,N,N,P,N,N,N,N,P"), new LevelProperties.OldMan.SpitAttack(0.8f, new string[]
					{
						"-50,100,200,-100,325,150,-100,200,0,-100,250,150",
						"325,150,-100,0,200,-50,-100,300,-50,200,100,0,-50",
						"50,300,-50,200,-100,100,325,0,100,-100,150,250,0",
						"-100,200,0,325,-50,250,150,-100,200,325,-50,100,0",
						"150,-50,250,100,0,325,-100,200,-50,150,325,-100,50",
						"0,200,-100,100,325,-50,150,-100,325,200,0,150,-100",
						"-100,100,325,0,150,-50,250,100,325,-100,200,-50,300"
					}, 0.6f, 0.8f, 35f, 0.29f, "N,N,N,P,N,N,N,N,P,N,N,N,N,P"), new LevelProperties.OldMan.GooseAttack(1.1f, 0f, 1.7f, 0.8f, 1200f, 1800f, 1900f, 2500f, new string[]
					{
						"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350",
						"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350"
					}), new LevelProperties.OldMan.CamelAttack(0.25f, 495f, -615f, -1000f, 0f, 0.25f), new LevelProperties.OldMan.ClimberGnomes(new string[]
					{
						"9,2,4,1,8,6,3,7,2,5",
						"9,6,2,5,1,4,8,3,5,7",
						"9,4,7,1,3,6,2,8,5,6"
					}, new MinMax(4.1f, 5.1f), true, 0.41f, 0.41f, 225f, true, 1.5f)));
					list.Add(new LevelProperties.OldMan.State(0.7f, new LevelProperties.OldMan.Pattern[][]
					{
						new LevelProperties.OldMan.Pattern[0]
					}, LevelProperties.OldMan.States.SockPuppet, new LevelProperties.OldMan.Platforms(4.4f, new string[]
					{
						"0,2,1,4,3",
						"1,3,0,2,4",
						"4,3,1,0,2",
						"3,1,2,0,4",
						"1,4,2,0,3",
						"4,0,3,1,2",
						"0,3,2,1,4"
					}, new MinMax(1.8f, 2.4f), 0f, -180f, new string[]
					{
						"0,2",
						"0,3",
						"0,4",
						"1,3",
						"3,1",
						"2,0",
						"3,0",
						"2,4",
						"0,1",
						"0,2",
						"0,3"
					}, "0.3,0.6"), new LevelProperties.OldMan.Turret(1.5f, 1.1f, 300f, 1.8f, new string[]
					{
						"0,45,0,315",
						"0,320,0,40",
						"0,40,0,320",
						"0,310,0,50"
					}, new MinMax(3.4f, 4.4f), 3, new string[]
					{
						"2,14,10,6,14,2,18,6,14,6",
						"14,2,18,14,6,10,2,10,6,18"
					}, true, new string[]
					{
						"R,R"
					}, 100f, 1.25f, 0.5f), new LevelProperties.OldMan.Spikes(0.55f, 0.5f, 3.5f), new LevelProperties.OldMan.Hands(new string[]
					{
						"0,1,2,0,1,0,2,1,0"
					}, new string[]
					{
						"2,2,0,1,2,0,1,0"
					}, 0.25f, 0f, 0f, 1150f, 0.5f, 0f, 0.3f, 150f, 1.15f), new LevelProperties.OldMan.Dwarf("N,N,N,N,P,N,N,N,P", 2f, new string[]
					{
						"1.4,1.5,1.8,1.6,1.9,1.5,1.3,1.4,1.7,1.6,1.7"
					}, new string[]
					{
						"4,5,9,0,2,3,5,1,6,5,4,2,8,7,1",
						"1,5,3,0,9,4,8,2,6,0,7,1,5,9,3"
					}, 1f, 0.8f, new string[]
					{
						"575,675,525,625,550,675,600,525,625,650"
					}), new LevelProperties.OldMan.GnomeLeader(123f, 0.41f, 80f, new string[]
					{
						"1,2,2,0,1,2,1,2,0,2,2",
						"0,1,2,2,1,0,2,1,1,2,2",
						"2,1,1,2,0,2,2,1,2,0,2"
					}, 3.1f, new string[]
					{
						"1,3,0,4,2",
						"4,2,0,3,1",
						"3,2,0,4,1",
						"4,1,3,0,2",
						"1,4,3,2,0",
						"3,0,4,1,2"
					}, new string[]
					{
						"1,0.6,0.5,0.6,0.7,1,0.7,0.6,0.8,1,0.6,0.7,0.8,0.7",
						"1,0.6,0.5,0.8,1,0.8,0.6,0.5,1,0.6,0.7,0.7,0.6"
					}, "N,N"), new LevelProperties.OldMan.ScubaGnomes(3.5f, new string[]
					{
						"3.5,4,3.5,3.5,4,4.5"
					}, 385f, 445f, new string[]
					{
						"A,A,A,B,A,B,A,B,B"
					}, 0.9f, 500f, 100f, "N,N,N,P,N,N,N,P,N,N,N,N,P"), new LevelProperties.OldMan.SpitAttack(0.8f, new string[]
					{
						"-50,100,200,-100,325,150,-100,200,0,-100,250,150",
						"325,150,-100,0,200,-50,-100,300,-50,200,100,0,-50",
						"50,300,-50,200,-100,100,325,0,100,-100,150,250,0",
						"-100,200,0,325,-50,250,150,-100,200,325,-50,100,0",
						"150,-50,250,100,0,325,-100,200,-50,150,325,-100,50",
						"0,200,-100,100,325,-50,150,-100,325,200,0,150,-100",
						"-100,100,325,0,150,-50,250,100,325,-100,200,-50,300"
					}, 0.6f, 0.8f, 35f, 0.29f, "N,N,N,P,N,N,N,N,P,N,N,N,N,P"), new LevelProperties.OldMan.GooseAttack(1.1f, 0f, 1.7f, 0.8f, 1200f, 1800f, 1900f, 2500f, new string[]
					{
						"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350",
						"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350"
					}), new LevelProperties.OldMan.CamelAttack(0.25f, 495f, -615f, -1000f, 0f, 0.25f), new LevelProperties.OldMan.ClimberGnomes(new string[]
					{
						"9,2,4,1,8,6,3,7,2,5",
						"9,6,2,5,1,4,8,3,5,7",
						"9,4,7,1,3,6,2,8,5,6"
					}, new MinMax(4.1f, 5.1f), true, 0.41f, 0.41f, 225f, true, 1.5f)));
					list.Add(new LevelProperties.OldMan.State(0.31f, new LevelProperties.OldMan.Pattern[][]
					{
						new LevelProperties.OldMan.Pattern[0]
					}, LevelProperties.OldMan.States.GnomeLeader, new LevelProperties.OldMan.Platforms(4.4f, new string[]
					{
						"0,2,1,4,3",
						"1,3,0,2,4",
						"4,3,1,0,2",
						"3,1,2,0,4",
						"1,4,2,0,3",
						"4,0,3,1,2",
						"0,3,2,1,4"
					}, new MinMax(1.8f, 2.4f), 0f, -180f, new string[]
					{
						"0,2",
						"0,3",
						"0,4",
						"1,3",
						"3,1",
						"2,0",
						"3,0",
						"2,4",
						"0,1",
						"0,2",
						"0,3"
					}, "0.3,0.6"), new LevelProperties.OldMan.Turret(1.5f, 1.1f, 300f, 1.8f, new string[]
					{
						"0,45,0,315",
						"0,320,0,40",
						"0,40,0,320",
						"0,310,0,50"
					}, new MinMax(3.4f, 4.4f), 3, new string[]
					{
						"2,14,10,6,14,2,18,6,14,6",
						"14,2,18,14,6,10,2,10,6,18"
					}, true, new string[]
					{
						"R,R"
					}, 100f, 1.25f, 0.5f), new LevelProperties.OldMan.Spikes(0.55f, 0.5f, 3.5f), new LevelProperties.OldMan.Hands(new string[]
					{
						"0,1,2,0,1,0,2,1,0"
					}, new string[]
					{
						"2,2,0,1,2,0,1,0"
					}, 0.25f, 0f, 0f, 1150f, 0.5f, 0f, 0.3f, 150f, 1.15f), new LevelProperties.OldMan.Dwarf("N,N,N,N,P,N,N,N,P", 2f, new string[]
					{
						"1.4,1.5,1.8,1.6,1.9,1.5,1.3,1.4,1.7,1.6,1.7"
					}, new string[]
					{
						"4,5,9,0,2,3,5,1,6,5,4,2,8,7,1",
						"1,5,3,0,9,4,8,2,6,0,7,1,5,9,3"
					}, 1f, 0.8f, new string[]
					{
						"575,675,525,625,550,675,600,525,625,650"
					}), new LevelProperties.OldMan.GnomeLeader(123f, 0.41f, 80f, new string[]
					{
						"1,2,2,0,1,2,1,2,0,2,2",
						"0,1,2,2,1,0,2,1,1,2,2",
						"2,1,1,2,0,2,2,1,2,0,2"
					}, 3.1f, new string[]
					{
						"1,3,0,4,2",
						"4,2,0,3,1",
						"3,2,0,4,1",
						"4,1,3,0,2",
						"1,4,3,2,0",
						"3,0,4,1,2"
					}, new string[]
					{
						"1,0.6,0.5,0.6,0.7,1,0.7,0.6,0.8,1,0.6,0.7,0.8,0.7",
						"1,0.6,0.5,0.8,1,0.8,0.6,0.5,1,0.6,0.7,0.7,0.6"
					}, "N,N"), new LevelProperties.OldMan.ScubaGnomes(3.5f, new string[]
					{
						"3.5,4,3.5,3.5,4,4.5"
					}, 385f, 445f, new string[]
					{
						"A,A,A,B,A,B,A,B,B"
					}, 0.9f, 500f, 100f, "N,N,N,P,N,N,N,P,N,N,N,N,P"), new LevelProperties.OldMan.SpitAttack(0.8f, new string[]
					{
						"-50,100,200,-100,325,150,-100,200,0,-100,250,150",
						"325,150,-100,0,200,-50,-100,300,-50,200,100,0,-50",
						"50,300,-50,200,-100,100,325,0,100,-100,150,250,0",
						"-100,200,0,325,-50,250,150,-100,200,325,-50,100,0",
						"150,-50,250,100,0,325,-100,200,-50,150,325,-100,50",
						"0,200,-100,100,325,-50,150,-100,325,200,0,150,-100",
						"-100,100,325,0,150,-50,250,100,325,-100,200,-50,300"
					}, 0.6f, 0.8f, 35f, 0.29f, "N,N,N,P,N,N,N,N,P,N,N,N,N,P"), new LevelProperties.OldMan.GooseAttack(1.1f, 0f, 1.7f, 0.8f, 1200f, 1800f, 1900f, 2500f, new string[]
					{
						"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350",
						"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350"
					}), new LevelProperties.OldMan.CamelAttack(0.25f, 495f, -615f, -1000f, 0f, 0.25f), new LevelProperties.OldMan.ClimberGnomes(new string[]
					{
						"9,2,4,1,8,6,3,7,2,5",
						"9,6,2,5,1,4,8,3,5,7",
						"9,4,7,1,3,6,2,8,5,6"
					}, new MinMax(4.1f, 5.1f), true, 0.41f, 0.41f, 225f, true, 1.5f)));
				}
			}
			else
			{
				hp = 1150;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.OldMan.State(10f, new LevelProperties.OldMan.Pattern[][]
				{
					new LevelProperties.OldMan.Pattern[]
					{
						LevelProperties.OldMan.Pattern.Duck,
						LevelProperties.OldMan.Pattern.Spit,
						LevelProperties.OldMan.Pattern.Camel,
						LevelProperties.OldMan.Pattern.Spit
					}
				}, LevelProperties.OldMan.States.Main, new LevelProperties.OldMan.Platforms(4.4f, new string[]
				{
					"0,2,1,4,3"
				}, new MinMax(1.7f, 2.3f), 0f, -180f, new string[]
				{
					"0",
					"1",
					"2",
					"3",
					"4"
				}, "0.5"), new LevelProperties.OldMan.Turret(1.5f, 1.1f, 300f, 2.2f, new string[]
				{
					"0,310,0,50",
					"0,40,0,320",
					"0,320,0,40",
					"0,45,0,315"
				}, new MinMax(3.8f, 4.8f), 2, new string[]
				{
					"2,14,10,6,10,6,14,2,18,6"
				}, true, new string[]
				{
					"R,R,P,R,R,R,P"
				}, 250f, 3.5f, 0.21f), new LevelProperties.OldMan.Spikes(0.61f, 0.5f, 3f), new LevelProperties.OldMan.Hands(new string[]
				{
					"0,1,2,0,1,0,2,1,0"
				}, new string[]
				{
					"2,2,0,1,2,0,1,0"
				}, 0.25f, 0f, 0f, 1150f, 0.5f, 0f, 0.3f, 150f, 1.15f), new LevelProperties.OldMan.Dwarf("N,N,N,N,P,N,N,N,P,N,N,N,P", 2f, new string[]
				{
					"1.6,1.6,1.7,1.8,1.6,1.7,1.7,1.8,1.9",
					"1.8,1.7,1.6,1.7,1.6,1.8,1.6,1.7,1.9"
				}, new string[]
				{
					"0,2,4,6,8,1,3,5,7,9"
				}, 1f, 0.8f, new string[]
				{
					"575,675,575,625,575,675,600,575,625,650"
				}), new LevelProperties.OldMan.GnomeLeader(0f, 0f, 0f, new string[]
				{
					string.Empty
				}, 0f, new string[0], new string[0], string.Empty), new LevelProperties.OldMan.ScubaGnomes(0f, new string[0], 0f, 0f, new string[0], 0f, 0f, 0f, string.Empty), new LevelProperties.OldMan.SpitAttack(0.8f, new string[]
				{
					" -50,50,150,250,0,100,200",
					"200,100,0,250,150,50,-50"
				}, 1.1f, 1.2f, 35f, 0.325f, "N,N,P,N,N,N,P"), new LevelProperties.OldMan.GooseAttack(1f, 0f, 1.5f, 1.2f, 1200f, 1800f, 1900f, 2500f, new string[]
				{
					"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350"
				}), new LevelProperties.OldMan.CamelAttack(0.25f, 465f, -765f, -1151f, 0.6f, 0.25f), new LevelProperties.OldMan.ClimberGnomes(new string[]
				{
					"1,3,5,7,9,6,4,2"
				}, new MinMax(5.1f, 6.1f), true, 0.51f, 0.51f, 225f, true, 1.5f)));
				list.Add(new LevelProperties.OldMan.State(0.5f, new LevelProperties.OldMan.Pattern[][]
				{
					new LevelProperties.OldMan.Pattern[0]
				}, LevelProperties.OldMan.States.SockPuppet, new LevelProperties.OldMan.Platforms(4.4f, new string[]
				{
					"0,2,1,4,3"
				}, new MinMax(1.7f, 2.3f), 0f, -180f, new string[]
				{
					"0",
					"1",
					"2",
					"3",
					"4"
				}, "0.5"), new LevelProperties.OldMan.Turret(1.5f, 1.1f, 300f, 2.2f, new string[]
				{
					"0,310,0,50",
					"0,40,0,320",
					"0,320,0,40",
					"0,45,0,315"
				}, new MinMax(3.8f, 4.8f), 2, new string[]
				{
					"2,14,10,6,10,6,14,2,18,6"
				}, true, new string[]
				{
					"R,R,P,R,R,R,P"
				}, 250f, 3.5f, 0.21f), new LevelProperties.OldMan.Spikes(0.61f, 0.5f, 3f), new LevelProperties.OldMan.Hands(new string[]
				{
					"0,1,2,0,1,0,2,1,0"
				}, new string[]
				{
					"2,2,0,1,2,0,1,0"
				}, 0.25f, 0f, 0f, 1150f, 0.5f, 0f, 0.3f, 150f, 1.15f), new LevelProperties.OldMan.Dwarf("N,N,N,N,P,N,N,N,P,N,N,N,P", 2f, new string[]
				{
					"1.6,1.6,1.7,1.8,1.6,1.7,1.7,1.8,1.9",
					"1.8,1.7,1.6,1.7,1.6,1.8,1.6,1.7,1.9"
				}, new string[]
				{
					"0,2,4,6,8,1,3,5,7,9"
				}, 1f, 0.8f, new string[]
				{
					"575,675,575,625,575,675,600,575,625,650"
				}), new LevelProperties.OldMan.GnomeLeader(0f, 0f, 0f, new string[]
				{
					string.Empty
				}, 0f, new string[0], new string[0], string.Empty), new LevelProperties.OldMan.ScubaGnomes(0f, new string[0], 0f, 0f, new string[0], 0f, 0f, 0f, string.Empty), new LevelProperties.OldMan.SpitAttack(0.8f, new string[]
				{
					" -50,50,150,250,0,100,200",
					"200,100,0,250,150,50,-50"
				}, 1.1f, 1.2f, 35f, 0.325f, "N,N,P,N,N,N,P"), new LevelProperties.OldMan.GooseAttack(1f, 0f, 1.5f, 1.2f, 1200f, 1800f, 1900f, 2500f, new string[]
				{
					"0:F:90, 0.05:B:100, 0.1:C:75, 0.1:M:250, 0.05:B:250, 0.2:C:85, 0.05:B:60, 0.05:C:75, 0.01:F:240, 0.03:C:375, 0.03:B:400, 0.1:M:200, 0.05:B:150,0.01:F:380,0.1:C:200, 0.1:M:75, 0.05:B:325,0.04:F:180, 0.05:B:220, 0.1:C:75, 0.1:M:175, 0.05:B:130, 0.2:C:185, 0.05:B:365, 0.05:C:350"
				}), new LevelProperties.OldMan.CamelAttack(0.25f, 465f, -765f, -1151f, 0.6f, 0.25f), new LevelProperties.OldMan.ClimberGnomes(new string[]
				{
					"1,3,5,7,9,6,4,2"
				}, new MinMax(5.1f, 6.1f), true, 0.51f, 0.51f, 225f, true, 1.5f)));
			}
			return new LevelProperties.OldMan(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200021F RID: 543
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000110 RID: 272
			// (get) Token: 0x06000627 RID: 1575 RVA: 0x0003135A File Offset: 0x0002F75A
			// (set) Token: 0x06000628 RID: 1576 RVA: 0x00031362 File Offset: 0x0002F762
			private protected LevelProperties.OldMan properties { protected get; private set; }

			// Token: 0x06000629 RID: 1577 RVA: 0x0003136B File Offset: 0x0002F76B
			public virtual void LevelInit(LevelProperties.OldMan properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600062A RID: 1578 RVA: 0x00031374 File Offset: 0x0002F774
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000220 RID: 544
		public enum States
		{
			// Token: 0x04000B45 RID: 2885
			Main,
			// Token: 0x04000B46 RID: 2886
			Generic,
			// Token: 0x04000B47 RID: 2887
			SockPuppet,
			// Token: 0x04000B48 RID: 2888
			GnomeLeader
		}

		// Token: 0x02000221 RID: 545
		public enum Pattern
		{
			// Token: 0x04000B4A RID: 2890
			Default,
			// Token: 0x04000B4B RID: 2891
			Spit,
			// Token: 0x04000B4C RID: 2892
			Duck,
			// Token: 0x04000B4D RID: 2893
			Camel,
			// Token: 0x04000B4E RID: 2894
			Uninitialized
		}

		// Token: 0x02000222 RID: 546
		public class State : AbstractLevelState<LevelProperties.OldMan.Pattern, LevelProperties.OldMan.States>
		{
			// Token: 0x0600062B RID: 1579 RVA: 0x00031378 File Offset: 0x0002F778
			public State(float healthTrigger, LevelProperties.OldMan.Pattern[][] patterns, LevelProperties.OldMan.States stateName, LevelProperties.OldMan.Platforms platforms, LevelProperties.OldMan.Turret turret, LevelProperties.OldMan.Spikes spikes, LevelProperties.OldMan.Hands hands, LevelProperties.OldMan.Dwarf dwarf, LevelProperties.OldMan.GnomeLeader gnomeLeader, LevelProperties.OldMan.ScubaGnomes scubaGnomes, LevelProperties.OldMan.SpitAttack spitAttack, LevelProperties.OldMan.GooseAttack gooseAttack, LevelProperties.OldMan.CamelAttack camelAttack, LevelProperties.OldMan.ClimberGnomes climberGnomes) : base(healthTrigger, patterns, stateName)
			{
				this.platforms = platforms;
				this.turret = turret;
				this.spikes = spikes;
				this.hands = hands;
				this.dwarf = dwarf;
				this.gnomeLeader = gnomeLeader;
				this.scubaGnomes = scubaGnomes;
				this.spitAttack = spitAttack;
				this.gooseAttack = gooseAttack;
				this.camelAttack = camelAttack;
				this.climberGnomes = climberGnomes;
			}

			// Token: 0x04000B4F RID: 2895
			public readonly LevelProperties.OldMan.Platforms platforms;

			// Token: 0x04000B50 RID: 2896
			public readonly LevelProperties.OldMan.Turret turret;

			// Token: 0x04000B51 RID: 2897
			public readonly LevelProperties.OldMan.Spikes spikes;

			// Token: 0x04000B52 RID: 2898
			public readonly LevelProperties.OldMan.Hands hands;

			// Token: 0x04000B53 RID: 2899
			public readonly LevelProperties.OldMan.Dwarf dwarf;

			// Token: 0x04000B54 RID: 2900
			public readonly LevelProperties.OldMan.GnomeLeader gnomeLeader;

			// Token: 0x04000B55 RID: 2901
			public readonly LevelProperties.OldMan.ScubaGnomes scubaGnomes;

			// Token: 0x04000B56 RID: 2902
			public readonly LevelProperties.OldMan.SpitAttack spitAttack;

			// Token: 0x04000B57 RID: 2903
			public readonly LevelProperties.OldMan.GooseAttack gooseAttack;

			// Token: 0x04000B58 RID: 2904
			public readonly LevelProperties.OldMan.CamelAttack camelAttack;

			// Token: 0x04000B59 RID: 2905
			public readonly LevelProperties.OldMan.ClimberGnomes climberGnomes;
		}

		// Token: 0x02000223 RID: 547
		public class Platforms : AbstractLevelPropertyGroup
		{
			// Token: 0x0600062C RID: 1580 RVA: 0x000313E6 File Offset: 0x0002F7E6
			public Platforms(float moveTime, string[] moveOrder, MinMax delayRange, float maxHeight, float minHeight, string[] removeOrder, string removeThreshold)
			{
				this.moveTime = moveTime;
				this.moveOrder = moveOrder;
				this.delayRange = delayRange;
				this.maxHeight = maxHeight;
				this.minHeight = minHeight;
				this.removeOrder = removeOrder;
				this.removeThreshold = removeThreshold;
			}

			// Token: 0x04000B5A RID: 2906
			public readonly float moveTime;

			// Token: 0x04000B5B RID: 2907
			public readonly string[] moveOrder;

			// Token: 0x04000B5C RID: 2908
			public readonly MinMax delayRange;

			// Token: 0x04000B5D RID: 2909
			public readonly float maxHeight;

			// Token: 0x04000B5E RID: 2910
			public readonly float minHeight;

			// Token: 0x04000B5F RID: 2911
			public readonly string[] removeOrder;

			// Token: 0x04000B60 RID: 2912
			public readonly string removeThreshold;
		}

		// Token: 0x02000224 RID: 548
		public class Turret : AbstractLevelPropertyGroup
		{
			// Token: 0x0600062D RID: 1581 RVA: 0x00031424 File Offset: 0x0002F824
			public Turret(float hp, float warningDuration, float shotSpeed, float shotDelay, string[] attackString, MinMax appearDelayRange, int maxCount, string[] appearOrder, bool gnomesOn, string[] pinkShotString, float spawnDistanceCheck, float spawnSecondaryBuffer, float appearWarning)
			{
				this.hp = hp;
				this.warningDuration = warningDuration;
				this.shotSpeed = shotSpeed;
				this.shotDelay = shotDelay;
				this.attackString = attackString;
				this.appearDelayRange = appearDelayRange;
				this.maxCount = maxCount;
				this.appearOrder = appearOrder;
				this.gnomesOn = gnomesOn;
				this.pinkShotString = pinkShotString;
				this.spawnDistanceCheck = spawnDistanceCheck;
				this.spawnSecondaryBuffer = spawnSecondaryBuffer;
				this.appearWarning = appearWarning;
			}

			// Token: 0x04000B61 RID: 2913
			public readonly float hp;

			// Token: 0x04000B62 RID: 2914
			public readonly float warningDuration;

			// Token: 0x04000B63 RID: 2915
			public readonly float shotSpeed;

			// Token: 0x04000B64 RID: 2916
			public readonly float shotDelay;

			// Token: 0x04000B65 RID: 2917
			public readonly string[] attackString;

			// Token: 0x04000B66 RID: 2918
			public readonly MinMax appearDelayRange;

			// Token: 0x04000B67 RID: 2919
			public readonly int maxCount;

			// Token: 0x04000B68 RID: 2920
			public readonly string[] appearOrder;

			// Token: 0x04000B69 RID: 2921
			public readonly bool gnomesOn;

			// Token: 0x04000B6A RID: 2922
			public readonly string[] pinkShotString;

			// Token: 0x04000B6B RID: 2923
			public readonly float spawnDistanceCheck;

			// Token: 0x04000B6C RID: 2924
			public readonly float spawnSecondaryBuffer;

			// Token: 0x04000B6D RID: 2925
			public readonly float appearWarning;
		}

		// Token: 0x02000225 RID: 549
		public class Spikes : AbstractLevelPropertyGroup
		{
			// Token: 0x0600062E RID: 1582 RVA: 0x0003149C File Offset: 0x0002F89C
			public Spikes(float warningDuration, float attackDuration, float hp)
			{
				this.warningDuration = warningDuration;
				this.attackDuration = attackDuration;
				this.hp = hp;
			}

			// Token: 0x04000B6E RID: 2926
			public readonly float warningDuration;

			// Token: 0x04000B6F RID: 2927
			public readonly float attackDuration;

			// Token: 0x04000B70 RID: 2928
			public readonly float hp;
		}

		// Token: 0x02000226 RID: 550
		public class Hands : AbstractLevelPropertyGroup
		{
			// Token: 0x0600062F RID: 1583 RVA: 0x000314BC File Offset: 0x0002F8BC
			public Hands(string[] leftHandPosString, string[] rightHandPosString, float handMoveTime, float throwWarningTime, float throwDelay, float ballSpeed, float ballRadius, float catchDelayTime, float postThrowMoveDelay, float bouncePositionSpacing, float endSlideUpTime)
			{
				this.leftHandPosString = leftHandPosString;
				this.rightHandPosString = rightHandPosString;
				this.handMoveTime = handMoveTime;
				this.throwWarningTime = throwWarningTime;
				this.throwDelay = throwDelay;
				this.ballSpeed = ballSpeed;
				this.ballRadius = ballRadius;
				this.catchDelayTime = catchDelayTime;
				this.postThrowMoveDelay = postThrowMoveDelay;
				this.bouncePositionSpacing = bouncePositionSpacing;
				this.endSlideUpTime = endSlideUpTime;
			}

			// Token: 0x04000B71 RID: 2929
			public readonly string[] leftHandPosString;

			// Token: 0x04000B72 RID: 2930
			public readonly string[] rightHandPosString;

			// Token: 0x04000B73 RID: 2931
			public readonly float handMoveTime;

			// Token: 0x04000B74 RID: 2932
			public readonly float throwWarningTime;

			// Token: 0x04000B75 RID: 2933
			public readonly float throwDelay;

			// Token: 0x04000B76 RID: 2934
			public readonly float ballSpeed;

			// Token: 0x04000B77 RID: 2935
			public readonly float ballRadius;

			// Token: 0x04000B78 RID: 2936
			public readonly float catchDelayTime;

			// Token: 0x04000B79 RID: 2937
			public readonly float postThrowMoveDelay;

			// Token: 0x04000B7A RID: 2938
			public readonly float bouncePositionSpacing;

			// Token: 0x04000B7B RID: 2939
			public readonly float endSlideUpTime;
		}

		// Token: 0x02000227 RID: 551
		public class Dwarf : AbstractLevelPropertyGroup
		{
			// Token: 0x06000630 RID: 1584 RVA: 0x00031524 File Offset: 0x0002F924
			public Dwarf(string parryString, float arcHealth, string[] arcAttackDelayString, string[] arcAttackPosString, float arcAttackWarningTime, float arcApex, string[] arcShootHeightString)
			{
				this.parryString = parryString;
				this.arcHealth = arcHealth;
				this.arcAttackDelayString = arcAttackDelayString;
				this.arcAttackPosString = arcAttackPosString;
				this.arcAttackWarningTime = arcAttackWarningTime;
				this.arcApex = arcApex;
				this.arcShootHeightString = arcShootHeightString;
			}

			// Token: 0x04000B7C RID: 2940
			public readonly string parryString;

			// Token: 0x04000B7D RID: 2941
			public readonly float arcHealth;

			// Token: 0x04000B7E RID: 2942
			public readonly string[] arcAttackDelayString;

			// Token: 0x04000B7F RID: 2943
			public readonly string[] arcAttackPosString;

			// Token: 0x04000B80 RID: 2944
			public readonly float arcAttackWarningTime;

			// Token: 0x04000B81 RID: 2945
			public readonly float arcApex;

			// Token: 0x04000B82 RID: 2946
			public readonly string[] arcShootHeightString;
		}

		// Token: 0x02000228 RID: 552
		public class GnomeLeader : AbstractLevelPropertyGroup
		{
			// Token: 0x06000631 RID: 1585 RVA: 0x00031564 File Offset: 0x0002F964
			public GnomeLeader(float shotSpeed, float shotApexTime, float shotApexHeight, string[] platformParryString, float bossMoveTime, string[] shotPlatformString, string[] shotDelayString, string shotParryString)
			{
				this.shotSpeed = shotSpeed;
				this.shotApexTime = shotApexTime;
				this.shotApexHeight = shotApexHeight;
				this.platformParryString = platformParryString;
				this.bossMoveTime = bossMoveTime;
				this.shotPlatformString = shotPlatformString;
				this.shotDelayString = shotDelayString;
				this.shotParryString = shotParryString;
			}

			// Token: 0x04000B83 RID: 2947
			public readonly float shotSpeed;

			// Token: 0x04000B84 RID: 2948
			public readonly float shotApexTime;

			// Token: 0x04000B85 RID: 2949
			public readonly float shotApexHeight;

			// Token: 0x04000B86 RID: 2950
			public readonly string[] platformParryString;

			// Token: 0x04000B87 RID: 2951
			public readonly float bossMoveTime;

			// Token: 0x04000B88 RID: 2952
			public readonly string[] shotPlatformString;

			// Token: 0x04000B89 RID: 2953
			public readonly string[] shotDelayString;

			// Token: 0x04000B8A RID: 2954
			public readonly string shotParryString;
		}

		// Token: 0x02000229 RID: 553
		public class ScubaGnomes : AbstractLevelPropertyGroup
		{
			// Token: 0x06000632 RID: 1586 RVA: 0x000315B4 File Offset: 0x0002F9B4
			public ScubaGnomes(float hp, string[] spawnDelayString, float shotSpeedA, float shotSpeedB, string[] scubaTypeString, float scubaMoveTime, float jumpHeight, float shootDistOffset, string dartParryableString)
			{
				this.hp = hp;
				this.spawnDelayString = spawnDelayString;
				this.shotSpeedA = shotSpeedA;
				this.shotSpeedB = shotSpeedB;
				this.scubaTypeString = scubaTypeString;
				this.scubaMoveTime = scubaMoveTime;
				this.jumpHeight = jumpHeight;
				this.shootDistOffset = shootDistOffset;
				this.dartParryableString = dartParryableString;
			}

			// Token: 0x04000B8B RID: 2955
			public readonly float hp;

			// Token: 0x04000B8C RID: 2956
			public readonly string[] spawnDelayString;

			// Token: 0x04000B8D RID: 2957
			public readonly float shotSpeedA;

			// Token: 0x04000B8E RID: 2958
			public readonly float shotSpeedB;

			// Token: 0x04000B8F RID: 2959
			public readonly string[] scubaTypeString;

			// Token: 0x04000B90 RID: 2960
			public readonly float scubaMoveTime;

			// Token: 0x04000B91 RID: 2961
			public readonly float jumpHeight;

			// Token: 0x04000B92 RID: 2962
			public readonly float shootDistOffset;

			// Token: 0x04000B93 RID: 2963
			public readonly string dartParryableString;
		}

		// Token: 0x0200022A RID: 554
		public class SpitAttack : AbstractLevelPropertyGroup
		{
			// Token: 0x06000633 RID: 1587 RVA: 0x0003160C File Offset: 0x0002FA0C
			public SpitAttack(float spitAttackWarning, string[] spitString, float spitDelay, float attackCooldown, float spitApexHeight, float spitApexTime, string spitParryString)
			{
				this.spitAttackWarning = spitAttackWarning;
				this.spitString = spitString;
				this.spitDelay = spitDelay;
				this.attackCooldown = attackCooldown;
				this.spitApexHeight = spitApexHeight;
				this.spitApexTime = spitApexTime;
				this.spitParryString = spitParryString;
			}

			// Token: 0x04000B94 RID: 2964
			public readonly float spitAttackWarning;

			// Token: 0x04000B95 RID: 2965
			public readonly string[] spitString;

			// Token: 0x04000B96 RID: 2966
			public readonly float spitDelay;

			// Token: 0x04000B97 RID: 2967
			public readonly float attackCooldown;

			// Token: 0x04000B98 RID: 2968
			public readonly float spitApexHeight;

			// Token: 0x04000B99 RID: 2969
			public readonly float spitApexTime;

			// Token: 0x04000B9A RID: 2970
			public readonly string spitParryString;
		}

		// Token: 0x0200022B RID: 555
		public class GooseAttack : AbstractLevelPropertyGroup
		{
			// Token: 0x06000634 RID: 1588 RVA: 0x0003164C File Offset: 0x0002FA4C
			public GooseAttack(float goosePreAntic, float gooseWarning, float gooseDuration, float gooseCooldown, float gooseBSpeed, float gooseMSpeed, float gooseCSpeed, float gooseFSpeed, string[] gooseSpawnString)
			{
				this.goosePreAntic = goosePreAntic;
				this.gooseWarning = gooseWarning;
				this.gooseDuration = gooseDuration;
				this.gooseCooldown = gooseCooldown;
				this.gooseBSpeed = gooseBSpeed;
				this.gooseMSpeed = gooseMSpeed;
				this.gooseCSpeed = gooseCSpeed;
				this.gooseFSpeed = gooseFSpeed;
				this.gooseSpawnString = gooseSpawnString;
			}

			// Token: 0x04000B9B RID: 2971
			public readonly float goosePreAntic;

			// Token: 0x04000B9C RID: 2972
			public readonly float gooseWarning;

			// Token: 0x04000B9D RID: 2973
			public readonly float gooseDuration;

			// Token: 0x04000B9E RID: 2974
			public readonly float gooseCooldown;

			// Token: 0x04000B9F RID: 2975
			public readonly float gooseBSpeed;

			// Token: 0x04000BA0 RID: 2976
			public readonly float gooseMSpeed;

			// Token: 0x04000BA1 RID: 2977
			public readonly float gooseCSpeed;

			// Token: 0x04000BA2 RID: 2978
			public readonly float gooseFSpeed;

			// Token: 0x04000BA3 RID: 2979
			public readonly string[] gooseSpawnString;
		}

		// Token: 0x0200022C RID: 556
		public class CamelAttack : AbstractLevelPropertyGroup
		{
			// Token: 0x06000635 RID: 1589 RVA: 0x000316A4 File Offset: 0x0002FAA4
			public CamelAttack(float camelAttackWarning, float camelAttackSpeed, float endingPoint, float boredomPoint, float camelAttackCooldown, float camelOffScreenTime)
			{
				this.camelAttackWarning = camelAttackWarning;
				this.camelAttackSpeed = camelAttackSpeed;
				this.endingPoint = endingPoint;
				this.boredomPoint = boredomPoint;
				this.camelAttackCooldown = camelAttackCooldown;
				this.camelOffScreenTime = camelOffScreenTime;
			}

			// Token: 0x04000BA4 RID: 2980
			public readonly float camelAttackWarning;

			// Token: 0x04000BA5 RID: 2981
			public readonly float camelAttackSpeed;

			// Token: 0x04000BA6 RID: 2982
			public readonly float endingPoint;

			// Token: 0x04000BA7 RID: 2983
			public readonly float boredomPoint;

			// Token: 0x04000BA8 RID: 2984
			public readonly float camelAttackCooldown;

			// Token: 0x04000BA9 RID: 2985
			public readonly float camelOffScreenTime;
		}

		// Token: 0x0200022D RID: 557
		public class ClimberGnomes : AbstractLevelPropertyGroup
		{
			// Token: 0x06000636 RID: 1590 RVA: 0x000316DC File Offset: 0x0002FADC
			public ClimberGnomes(string[] gnomePositionStrings, MinMax spawnDelayRange, bool dualSmash, float preAttackDelay, float attackDelay, float climbSpeed, bool canDestroy, float health)
			{
				this.gnomePositionStrings = gnomePositionStrings;
				this.spawnDelayRange = spawnDelayRange;
				this.dualSmash = dualSmash;
				this.preAttackDelay = preAttackDelay;
				this.attackDelay = attackDelay;
				this.climbSpeed = climbSpeed;
				this.canDestroy = canDestroy;
				this.health = health;
			}

			// Token: 0x04000BAA RID: 2986
			public readonly string[] gnomePositionStrings;

			// Token: 0x04000BAB RID: 2987
			public readonly MinMax spawnDelayRange;

			// Token: 0x04000BAC RID: 2988
			public readonly bool dualSmash;

			// Token: 0x04000BAD RID: 2989
			public readonly float preAttackDelay;

			// Token: 0x04000BAE RID: 2990
			public readonly float attackDelay;

			// Token: 0x04000BAF RID: 2991
			public readonly float climbSpeed;

			// Token: 0x04000BB0 RID: 2992
			public readonly bool canDestroy;

			// Token: 0x04000BB1 RID: 2993
			public readonly float health;
		}
	}

	// Token: 0x0200022F RID: 559
	public class Pirate : AbstractLevelProperties<LevelProperties.Pirate.State, LevelProperties.Pirate.Pattern, LevelProperties.Pirate.States>
	{
		// Token: 0x06000655 RID: 1621 RVA: 0x0003172C File Offset: 0x0002FB2C
		public Pirate(int hp, Level.GoalTimes goalTimes, LevelProperties.Pirate.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000656 RID: 1622 RVA: 0x00031738 File Offset: 0x0002FB38
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1000f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.99f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.82f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.68f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.52f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.38f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.22f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1200f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.87f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.51f));
				timeline.events.Add(new Level.Timeline.Event("Boat", 0.22f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1400f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.92f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.77f));
				timeline.events.Add(new Level.Timeline.Event("Boat", 0.32f));
				break;
			}
			return timeline;
		}

		// Token: 0x06000657 RID: 1623 RVA: 0x000318CC File Offset: 0x0002FCCC
		public static LevelProperties.Pirate.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "S")
				{
					return LevelProperties.Pirate.Pattern.Shark;
				}
				if (id == "Q")
				{
					return LevelProperties.Pirate.Pattern.Squid;
				}
				if (id == "F")
				{
					return LevelProperties.Pirate.Pattern.DogFish;
				}
				if (id == "P")
				{
					return LevelProperties.Pirate.Pattern.Peashot;
				}
				if (id == "B")
				{
					return LevelProperties.Pirate.Pattern.Boat;
				}
			}
			Debug.LogError("Pattern Pirate.Pattern for  " + id + " not found.", null);
			return LevelProperties.Pirate.Pattern.Uninitialized;
		}

		// Token: 0x06000658 RID: 1624 RVA: 0x00031960 File Offset: 0x0002FD60
		public static LevelProperties.Pirate GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Pirate.State> list = new List<LevelProperties.Pirate.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1400;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Pirate.State(10f, new LevelProperties.Pirate.Pattern[][]
						{
							new LevelProperties.Pirate.Pattern[]
							{
								LevelProperties.Pirate.Pattern.Peashot
							}
						}, LevelProperties.Pirate.States.Main, new LevelProperties.Pirate.Squid(1f, 1, new MinMax(45f, 71f), 5.5f, new MinMax(-150f, -60f), 0.4f, 0.4f, 4f, 5f, 0.12f, 1000f, new MinMax(-260f, 330f), new MinMax(550f, 850f)), new LevelProperties.Pirate.Shark(1f, 1f, 1.8f, 290f, 340f, 1f, 150f), new LevelProperties.Pirate.DogFish(1f, 1f, 800f, 600f, 1.5f, 3, 4, new MinMax(0.9f, 1.3f), 400f), new LevelProperties.Pirate.Peashot(2f, 3, new string[]
						{
							"D:0.5,P:2,D:1,P3",
							"D:0.5,P:2,D:0.5,P:3",
							"D:1,P:3,D:1,P:2",
							"D:0.5,P:3,D:1.5,P:2",
							"D:1,P:4"
						}, 1, 650f, 0.55f, "P,P,R,P,R"), new LevelProperties.Pirate.Barrel(1f, 2.7f, 0.9f, 1f, 2.3f, 0.8f), new LevelProperties.Pirate.Cannon(false, 1f, 850f, new MinMax(3f, 4f)), new LevelProperties.Pirate.Boat(3f, 0.7f, 2f, 2f, 355f, 460f, 0.6f, 2, 1.5f, 1f, 2.4f, 1f)));
						list.Add(new LevelProperties.Pirate.State(0.92f, new LevelProperties.Pirate.Pattern[][]
						{
							new LevelProperties.Pirate.Pattern[]
							{
								LevelProperties.Pirate.Pattern.Peashot,
								LevelProperties.Pirate.Pattern.Squid,
								LevelProperties.Pirate.Pattern.Peashot,
								LevelProperties.Pirate.Pattern.Shark,
								LevelProperties.Pirate.Pattern.Peashot,
								LevelProperties.Pirate.Pattern.DogFish
							},
							new LevelProperties.Pirate.Pattern[]
							{
								LevelProperties.Pirate.Pattern.Shark,
								LevelProperties.Pirate.Pattern.Peashot,
								LevelProperties.Pirate.Pattern.Squid,
								LevelProperties.Pirate.Pattern.Peashot,
								LevelProperties.Pirate.Pattern.DogFish,
								LevelProperties.Pirate.Pattern.Peashot
							}
						}, LevelProperties.Pirate.States.Generic, new LevelProperties.Pirate.Squid(1f, 1, new MinMax(45f, 71f), 5.5f, new MinMax(-150f, -60f), 0.4f, 0.4f, 4f, 5f, 0.12f, 1000f, new MinMax(-260f, 330f), new MinMax(550f, 850f)), new LevelProperties.Pirate.Shark(1f, 1f, 1.8f, 290f, 340f, 1f, 150f), new LevelProperties.Pirate.DogFish(1f, 1f, 800f, 600f, 1.5f, 3, 4, new MinMax(0.9f, 1.3f), 400f), new LevelProperties.Pirate.Peashot(2f, 1, new string[]
						{
							"P:3,D:0.5,P:1",
							"P:4",
							"P:2,D:1,P:2",
							"P:1,D:0.5,P:3",
							"P:4"
						}, 1, 660f, 0.5f, "P,R"), new LevelProperties.Pirate.Barrel(1f, 2.7f, 0.9f, 1f, 2.3f, 0.8f), new LevelProperties.Pirate.Cannon(false, 1f, 850f, new MinMax(3f, 4f)), new LevelProperties.Pirate.Boat(3f, 0.7f, 2f, 2f, 355f, 460f, 0.6f, 2, 1.5f, 1f, 2.4f, 1f)));
						list.Add(new LevelProperties.Pirate.State(0.77f, new LevelProperties.Pirate.Pattern[][]
						{
							new LevelProperties.Pirate.Pattern[]
							{
								LevelProperties.Pirate.Pattern.Peashot,
								LevelProperties.Pirate.Pattern.Squid,
								LevelProperties.Pirate.Pattern.Peashot,
								LevelProperties.Pirate.Pattern.Shark,
								LevelProperties.Pirate.Pattern.Peashot,
								LevelProperties.Pirate.Pattern.DogFish
							},
							new LevelProperties.Pirate.Pattern[]
							{
								LevelProperties.Pirate.Pattern.Shark,
								LevelProperties.Pirate.Pattern.Peashot,
								LevelProperties.Pirate.Pattern.Squid,
								LevelProperties.Pirate.Pattern.Peashot,
								LevelProperties.Pirate.Pattern.DogFish,
								LevelProperties.Pirate.Pattern.Peashot
							}
						}, LevelProperties.Pirate.States.Generic, new LevelProperties.Pirate.Squid(1f, 1, new MinMax(45f, 71f), 5.5f, new MinMax(-150f, -60f), 0.4f, 0.4f, 4f, 5f, 0.12f, 1000f, new MinMax(-260f, 330f), new MinMax(550f, 850f)), new LevelProperties.Pirate.Shark(1f, 1f, 1.8f, 290f, 340f, 1f, 150f), new LevelProperties.Pirate.DogFish(1f, 1f, 800f, 600f, 1.5f, 3, 4, new MinMax(0.9f, 1.3f), 400f), new LevelProperties.Pirate.Peashot(2f, 1, new string[]
						{
							"P:2",
							"P:2",
							"P:4",
							"P:3",
							"P:2",
							"P:4",
							"P:2",
							"P:3"
						}, 1, 670f, 0.45f, "P,R"), new LevelProperties.Pirate.Barrel(1f, 2.7f, 0.9f, 1f, 2.3f, 0.8f), new LevelProperties.Pirate.Cannon(true, 1f, 900f, new MinMax(2.5f, 3.9f)), new LevelProperties.Pirate.Boat(3f, 0.7f, 2f, 2f, 355f, 460f, 0.6f, 2, 1.5f, 1f, 2.4f, 1f)));
						list.Add(new LevelProperties.Pirate.State(0.32f, new LevelProperties.Pirate.Pattern[][]
						{
							new LevelProperties.Pirate.Pattern[]
							{
								LevelProperties.Pirate.Pattern.Boat
							}
						}, LevelProperties.Pirate.States.Boat, new LevelProperties.Pirate.Squid(1f, 1, new MinMax(45f, 71f), 5.5f, new MinMax(-150f, -60f), 0.4f, 0.4f, 4f, 5f, 0.12f, 1000f, new MinMax(-260f, 330f), new MinMax(550f, 850f)), new LevelProperties.Pirate.Shark(1f, 1f, 1.8f, 290f, 340f, 1f, 150f), new LevelProperties.Pirate.DogFish(1f, 1f, 800f, 600f, 1.5f, 3, 4, new MinMax(0.9f, 1.3f), 400f), new LevelProperties.Pirate.Peashot(2f, 1, new string[]
						{
							"P:2",
							"P:2",
							"P:4",
							"P:3",
							"P:2",
							"P:4",
							"P:2",
							"P:3"
						}, 1, 670f, 0.45f, "P,R"), new LevelProperties.Pirate.Barrel(1f, 2.7f, 0.9f, 1f, 2.3f, 0.8f), new LevelProperties.Pirate.Cannon(true, 1f, 900f, new MinMax(2.5f, 3.9f)), new LevelProperties.Pirate.Boat(3f, 0.7f, 2f, 2f, 355f, 460f, 0.6f, 2, 1.5f, 1f, 2.4f, 1f)));
					}
				}
				else
				{
					hp = 1200;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Pirate.State(10f, new LevelProperties.Pirate.Pattern[][]
					{
						new LevelProperties.Pirate.Pattern[]
						{
							LevelProperties.Pirate.Pattern.Peashot
						}
					}, LevelProperties.Pirate.States.Main, new LevelProperties.Pirate.Squid(2f, 1, new MinMax(31f, 61f), 5.5f, new MinMax(-200f, -60f), 0.4f, 0.4f, 3.3f, 5f, 0.12f, 1000f, new MinMax(-300f, 300f), new MinMax(500f, 800f)), new LevelProperties.Pirate.Shark(1f, 1f, 2f, 240f, 310f, 1.5f, 50f), new LevelProperties.Pirate.DogFish(2f, 1f, 700f, 500f, 2f, 3, 4, new MinMax(1.3f, 2f), 400f), new LevelProperties.Pirate.Peashot(2f, 3, new string[]
					{
						"D:1, P:3, D:1, P:1",
						"D:1, P:2, D:1.5, P:2",
						"D:1, P:1, D:1, P:3"
					}, 1, 550f, 0.65f, "P,P,P,R"), new LevelProperties.Pirate.Barrel(1f, 3.6f, 0.9f, 1f, 3f, 0.8f), new LevelProperties.Pirate.Cannon(false, 1f, 850f, new MinMax(3.4f, 4f)), new LevelProperties.Pirate.Boat(0f, 200f, 1f, 2f, 0f, 0f, 0f, 0, 0f, 0f, 0f, 0f)));
					list.Add(new LevelProperties.Pirate.State(0.87f, new LevelProperties.Pirate.Pattern[][]
					{
						new LevelProperties.Pirate.Pattern[]
						{
							LevelProperties.Pirate.Pattern.Peashot,
							LevelProperties.Pirate.Pattern.Shark,
							LevelProperties.Pirate.Pattern.Peashot,
							LevelProperties.Pirate.Pattern.Squid,
							LevelProperties.Pirate.Pattern.Peashot,
							LevelProperties.Pirate.Pattern.DogFish
						},
						new LevelProperties.Pirate.Pattern[]
						{
							LevelProperties.Pirate.Pattern.Squid,
							LevelProperties.Pirate.Pattern.Peashot,
							LevelProperties.Pirate.Pattern.Shark,
							LevelProperties.Pirate.Pattern.Peashot,
							LevelProperties.Pirate.Pattern.DogFish,
							LevelProperties.Pirate.Pattern.Peashot
						}
					}, LevelProperties.Pirate.States.Generic, new LevelProperties.Pirate.Squid(2f, 1, new MinMax(31f, 61f), 5.5f, new MinMax(-200f, -60f), 0.4f, 0.4f, 3.3f, 5f, 0.12f, 1000f, new MinMax(-300f, 300f), new MinMax(500f, 800f)), new LevelProperties.Pirate.Shark(1f, 1f, 2f, 240f, 310f, 1.5f, 50f), new LevelProperties.Pirate.DogFish(2f, 1f, 700f, 500f, 2f, 3, 4, new MinMax(1.3f, 2f), 400f), new LevelProperties.Pirate.Peashot(1f, 3, new string[]
					{
						"D:1, P:1, D:.5, P:1, D:2, P:2",
						"D:1. P:2. D:2, P:1, D:.5, P:1"
					}, 1, 550f, 0.65f, "P,P,P,R"), new LevelProperties.Pirate.Barrel(1f, 3.6f, 0.9f, 1f, 3f, 0.8f), new LevelProperties.Pirate.Cannon(false, 1f, 850f, new MinMax(3.4f, 4f)), new LevelProperties.Pirate.Boat(0f, 200f, 1f, 2f, 0f, 0f, 0f, 0, 0f, 0f, 0f, 0f)));
					list.Add(new LevelProperties.Pirate.State(0.51f, new LevelProperties.Pirate.Pattern[][]
					{
						new LevelProperties.Pirate.Pattern[]
						{
							LevelProperties.Pirate.Pattern.Peashot,
							LevelProperties.Pirate.Pattern.Shark,
							LevelProperties.Pirate.Pattern.Peashot,
							LevelProperties.Pirate.Pattern.Squid,
							LevelProperties.Pirate.Pattern.Peashot,
							LevelProperties.Pirate.Pattern.DogFish
						},
						new LevelProperties.Pirate.Pattern[]
						{
							LevelProperties.Pirate.Pattern.DogFish,
							LevelProperties.Pirate.Pattern.Peashot,
							LevelProperties.Pirate.Pattern.Squid,
							LevelProperties.Pirate.Pattern.Peashot,
							LevelProperties.Pirate.Pattern.Shark,
							LevelProperties.Pirate.Pattern.Peashot
						}
					}, LevelProperties.Pirate.States.Generic, new LevelProperties.Pirate.Squid(2f, 1, new MinMax(31f, 61f), 5.5f, new MinMax(-200f, -60f), 0.4f, 0.4f, 3.3f, 5f, 0.12f, 1000f, new MinMax(-300f, 300f), new MinMax(500f, 800f)), new LevelProperties.Pirate.Shark(1f, 1f, 2f, 240f, 310f, 1.5f, 50f), new LevelProperties.Pirate.DogFish(2f, 1f, 800f, 600f, 2f, 3, 4, new MinMax(1.3f, 2f), 400f), new LevelProperties.Pirate.Peashot(1f, 3, new string[]
					{
						"D:1, P:2, D:1, P:1",
						"D:1, P:1, D:1, P:2"
					}, 1, 550f, 0.65f, "P,P,R"), new LevelProperties.Pirate.Barrel(1f, 3.6f, 0.9f, 1f, 3f, 0.8f), new LevelProperties.Pirate.Cannon(true, 1f, 850f, new MinMax(3.4f, 4.5f)), new LevelProperties.Pirate.Boat(0f, 200f, 1f, 2f, 0f, 0f, 0f, 0, 0f, 0f, 0f, 0f)));
					list.Add(new LevelProperties.Pirate.State(0.22f, new LevelProperties.Pirate.Pattern[][]
					{
						new LevelProperties.Pirate.Pattern[]
						{
							LevelProperties.Pirate.Pattern.Boat
						}
					}, LevelProperties.Pirate.States.Boat, new LevelProperties.Pirate.Squid(2f, 1, new MinMax(31f, 61f), 5.5f, new MinMax(-200f, -60f), 0.4f, 0.4f, 3.3f, 5f, 0.12f, 1000f, new MinMax(-300f, 300f), new MinMax(500f, 800f)), new LevelProperties.Pirate.Shark(1f, 1f, 2f, 240f, 310f, 1.5f, 50f), new LevelProperties.Pirate.DogFish(2f, 1f, 800f, 600f, 2f, 3, 4, new MinMax(1.3f, 2f), 400f), new LevelProperties.Pirate.Peashot(1f, 3, new string[]
					{
						"D:1, P:2, D:1, P:1",
						"D:1, P:1, D:1, P:2"
					}, 1, 550f, 0.65f, "P,P,R"), new LevelProperties.Pirate.Barrel(1f, 3.6f, 0.9f, 1f, 3f, 0.8f), new LevelProperties.Pirate.Cannon(true, 1f, 850f, new MinMax(3.4f, 4.5f)), new LevelProperties.Pirate.Boat(3f, 0.7f, 2f, 2f, 300f, 360f, 0.7f, 3, 2f, 1f, 3f, 2f)));
				}
			}
			else
			{
				hp = 1000;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Pirate.State(10f, new LevelProperties.Pirate.Pattern[][]
				{
					new LevelProperties.Pirate.Pattern[0]
				}, LevelProperties.Pirate.States.Main, new LevelProperties.Pirate.Squid(2f, 2, new MinMax(41f, 61f), 7.5f, new MinMax(-30f, -120f), 0.4f, 0.4f, 2.8f, 5f, 0.21f, 900f, new MinMax(-330f, 330f), new MinMax(550f, 700f)), new LevelProperties.Pirate.Shark(1f, 2f, 2f, 210f, 300f, 1.5f, -50f), new LevelProperties.Pirate.DogFish(1f, 2f, 650f, 550f, 2f, 3, 2, new MinMax(0.3f, 0.5f), 400f), new LevelProperties.Pirate.Peashot(1f, 3, new string[]
				{
					"D:0.5, P:1, D:1, P:2",
					"D:1.5,P:2,D:1,P:1",
					"D:1,P:3"
				}, 1, 490f, 0.9f, "P,P,R"), new LevelProperties.Pirate.Barrel(1f, 3.4f, 1.2f, 1.3f, 3.5f, 1.2f), new LevelProperties.Pirate.Cannon(true, 1f, 725f, new MinMax(1.8f, 2.6f)), new LevelProperties.Pirate.Boat(3f, 0.7f, 2f, 2f, 300f, 360f, 0.7f, 3, 2f, 1f, 3f, 2f)));
				list.Add(new LevelProperties.Pirate.State(0.99f, new LevelProperties.Pirate.Pattern[][]
				{
					new LevelProperties.Pirate.Pattern[0]
				}, LevelProperties.Pirate.States.Generic, new LevelProperties.Pirate.Squid(2f, 2, new MinMax(41f, 61f), 7.5f, new MinMax(-30f, -120f), 0.4f, 0.4f, 2.8f, 5f, 0.21f, 900f, new MinMax(-330f, 330f), new MinMax(550f, 700f)), new LevelProperties.Pirate.Shark(1f, 2f, 2f, 210f, 300f, 1.5f, -50f), new LevelProperties.Pirate.DogFish(1f, 2f, 650f, 550f, 2f, 3, 2, new MinMax(0.3f, 0.5f), 400f), new LevelProperties.Pirate.Peashot(1f, 3, new string[]
				{
					"D:0.5, P:1, D:1, P:2",
					"D:1.5,P:2,D:1,P:1",
					"D:1,P:3"
				}, 1, 490f, 0.9f, "P,P,R"), new LevelProperties.Pirate.Barrel(1f, 3.4f, 1.2f, 1.3f, 3.5f, 1.2f), new LevelProperties.Pirate.Cannon(true, 1f, 725f, new MinMax(1.8f, 2.6f)), new LevelProperties.Pirate.Boat(3f, 0.7f, 2f, 2f, 300f, 360f, 0.7f, 3, 2f, 1f, 3f, 2f)));
				list.Add(new LevelProperties.Pirate.State(0.82f, new LevelProperties.Pirate.Pattern[][]
				{
					new LevelProperties.Pirate.Pattern[]
					{
						LevelProperties.Pirate.Pattern.Peashot
					}
				}, LevelProperties.Pirate.States.Generic, new LevelProperties.Pirate.Squid(2f, 2, new MinMax(41f, 61f), 7.5f, new MinMax(-30f, -120f), 0.4f, 0.4f, 2.8f, 5f, 0.21f, 900f, new MinMax(-330f, 330f), new MinMax(550f, 700f)), new LevelProperties.Pirate.Shark(1f, 2f, 2f, 210f, 300f, 1.5f, -50f), new LevelProperties.Pirate.DogFish(1f, 2f, 650f, 550f, 2f, 3, 2, new MinMax(0.3f, 0.5f), 400f), new LevelProperties.Pirate.Peashot(1f, 3, new string[]
				{
					"D:0.5, P:1, D:1, P:2",
					"D:1.5,P:2,D:1,P:1",
					"D:1,P:3"
				}, 1, 490f, 0.9f, "P,P,R"), new LevelProperties.Pirate.Barrel(1f, 3.4f, 1.2f, 1.3f, 3.5f, 1.2f), new LevelProperties.Pirate.Cannon(false, 0f, 0f, new MinMax(0f, 1f)), new LevelProperties.Pirate.Boat(3f, 0.7f, 2f, 2f, 300f, 360f, 0.7f, 3, 2f, 1f, 3f, 2f)));
				list.Add(new LevelProperties.Pirate.State(0.68f, new LevelProperties.Pirate.Pattern[][]
				{
					new LevelProperties.Pirate.Pattern[]
					{
						LevelProperties.Pirate.Pattern.Shark,
						LevelProperties.Pirate.Pattern.Peashot
					}
				}, LevelProperties.Pirate.States.Generic, new LevelProperties.Pirate.Squid(2f, 2, new MinMax(41f, 61f), 7.5f, new MinMax(-30f, -120f), 0.4f, 0.4f, 2.8f, 5f, 0.21f, 900f, new MinMax(-330f, 330f), new MinMax(550f, 700f)), new LevelProperties.Pirate.Shark(1f, 2f, 2f, 210f, 300f, 1.5f, -50f), new LevelProperties.Pirate.DogFish(1f, 2f, 650f, 550f, 2f, 3, 2, new MinMax(0.3f, 0.5f), 400f), new LevelProperties.Pirate.Peashot(1f, 3, new string[]
				{
					"D:1,P1,D:0.5,P:1",
					"D:0.5,P:1,D:1,P:1",
					"D:1,P:2",
					"D:0.5,P:1,D:1.5,P:1",
					"D:0.5,P:1,D:0.5,P:1",
					"D:1,P:2"
				}, 1, 490f, 0.9f, "P,R"), new LevelProperties.Pirate.Barrel(1f, 3.4f, 1.2f, 1.3f, 3.5f, 1.2f), new LevelProperties.Pirate.Cannon(false, 0f, 0f, new MinMax(0f, 1f)), new LevelProperties.Pirate.Boat(3f, 0.7f, 2f, 2f, 300f, 360f, 0.7f, 3, 2f, 1f, 3f, 2f)));
				list.Add(new LevelProperties.Pirate.State(0.52f, new LevelProperties.Pirate.Pattern[][]
				{
					new LevelProperties.Pirate.Pattern[]
					{
						LevelProperties.Pirate.Pattern.DogFish
					}
				}, LevelProperties.Pirate.States.Generic, new LevelProperties.Pirate.Squid(2f, 2, new MinMax(41f, 61f), 7.5f, new MinMax(-30f, -120f), 0.4f, 0.4f, 2.8f, 5f, 0.21f, 900f, new MinMax(-330f, 330f), new MinMax(550f, 700f)), new LevelProperties.Pirate.Shark(1f, 2f, 2f, 210f, 300f, 1.5f, -50f), new LevelProperties.Pirate.DogFish(1f, 2f, 650f, 550f, 2f, 3, 2, new MinMax(0.3f, 0.5f), 400f), new LevelProperties.Pirate.Peashot(1f, 3, new string[]
				{
					"D:1,P1,D:0.5,P:1",
					"D:0.5,P:1,D:1,P:1",
					"D:1,P:2",
					"D:0.5,P:1,D:1.5,P:1",
					"D:0.5,P:1,D:0.5,P:1",
					"D:1,P:2"
				}, 1, 490f, 0.9f, "P,R"), new LevelProperties.Pirate.Barrel(1f, 3.4f, 1.2f, 1.3f, 3.5f, 1.2f), new LevelProperties.Pirate.Cannon(false, 1f, 0f, new MinMax(0f, 1f)), new LevelProperties.Pirate.Boat(3f, 0.7f, 2f, 2f, 300f, 360f, 0.7f, 3, 2f, 1f, 3f, 2f)));
				list.Add(new LevelProperties.Pirate.State(0.38f, new LevelProperties.Pirate.Pattern[][]
				{
					new LevelProperties.Pirate.Pattern[]
					{
						LevelProperties.Pirate.Pattern.Squid
					}
				}, LevelProperties.Pirate.States.Generic, new LevelProperties.Pirate.Squid(2f, 2, new MinMax(41f, 61f), 7.5f, new MinMax(-30f, -120f), 0.4f, 0.4f, 2.8f, 5f, 0.21f, 900f, new MinMax(-330f, 330f), new MinMax(550f, 700f)), new LevelProperties.Pirate.Shark(1f, 2f, 2f, 210f, 300f, 1.5f, -50f), new LevelProperties.Pirate.DogFish(1f, 2f, 650f, 550f, 2f, 3, 2, new MinMax(0.3f, 0.5f), 400f), new LevelProperties.Pirate.Peashot(1f, 3, new string[]
				{
					"D:1,P1,D:0.5,P:1",
					"D:0.5,P:1,D:1,P:1",
					"D:1,P:2",
					"D:0.5,P:1,D:1.5,P:1",
					"D:0.5,P:1,D:0.5,P:1",
					"D:1,P:2"
				}, 1, 490f, 0.9f, "P,R"), new LevelProperties.Pirate.Barrel(1f, 3.4f, 1.2f, 1.3f, 3.5f, 1.2f), new LevelProperties.Pirate.Cannon(true, 1f, 735f, new MinMax(2.8f, 4.3f)), new LevelProperties.Pirate.Boat(3f, 0.7f, 2f, 2f, 300f, 360f, 0.7f, 3, 2f, 1f, 3f, 2f)));
				list.Add(new LevelProperties.Pirate.State(0.22f, new LevelProperties.Pirate.Pattern[][]
				{
					new LevelProperties.Pirate.Pattern[]
					{
						LevelProperties.Pirate.Pattern.Peashot,
						LevelProperties.Pirate.Pattern.Peashot,
						LevelProperties.Pirate.Pattern.Peashot,
						LevelProperties.Pirate.Pattern.Shark,
						LevelProperties.Pirate.Pattern.Peashot,
						LevelProperties.Pirate.Pattern.Peashot,
						LevelProperties.Pirate.Pattern.Shark,
						LevelProperties.Pirate.Pattern.Peashot,
						LevelProperties.Pirate.Pattern.Peashot,
						LevelProperties.Pirate.Pattern.Shark,
						LevelProperties.Pirate.Pattern.Peashot,
						LevelProperties.Pirate.Pattern.Peashot,
						LevelProperties.Pirate.Pattern.Peashot,
						LevelProperties.Pirate.Pattern.Shark
					}
				}, LevelProperties.Pirate.States.Generic, new LevelProperties.Pirate.Squid(2f, 2, new MinMax(41f, 61f), 7.5f, new MinMax(-30f, -120f), 0.4f, 0.4f, 2.8f, 5f, 0.21f, 900f, new MinMax(-330f, 330f), new MinMax(550f, 700f)), new LevelProperties.Pirate.Shark(1f, 2f, 2f, 210f, 300f, 1.5f, -50f), new LevelProperties.Pirate.DogFish(1f, 2f, 650f, 550f, 2f, 3, 2, new MinMax(0.3f, 0.5f), 400f), new LevelProperties.Pirate.Peashot(1f, 3, new string[]
				{
					"P:2,D:1.5,P:1,D:1.5,P:2",
					"P:2,D:2,P:2,D:1.5,P:1",
					"D:1,P:3",
					"P:1,D:1,P:2,D:2,P:2",
					"D:0.5,P:1,D:2,P:3",
					"P:2,D:2,P:2,D:1.5,P:1",
					"P:2,D:1,P:1,D:2,P:2",
					"D:1.5,P:4"
				}, 1, 500f, 0.9f, "P,P,P,R"), new LevelProperties.Pirate.Barrel(1f, 3.4f, 1.2f, 1.3f, 3.5f, 1.2f), new LevelProperties.Pirate.Cannon(true, 1f, 745f, new MinMax(3.8f, 4.8f)), new LevelProperties.Pirate.Boat(3f, 0.7f, 2f, 2f, 300f, 360f, 0.7f, 3, 2f, 1f, 3f, 2f)));
			}
			return new LevelProperties.Pirate(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000230 RID: 560
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000115 RID: 277
			// (get) Token: 0x0600065A RID: 1626 RVA: 0x000333B7 File Offset: 0x000317B7
			// (set) Token: 0x0600065B RID: 1627 RVA: 0x000333BF File Offset: 0x000317BF
			private protected LevelProperties.Pirate properties { protected get; private set; }

			// Token: 0x0600065C RID: 1628 RVA: 0x000333C8 File Offset: 0x000317C8
			public virtual void LevelInit(LevelProperties.Pirate properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600065D RID: 1629 RVA: 0x000333D1 File Offset: 0x000317D1
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000231 RID: 561
		public enum States
		{
			// Token: 0x04000BDE RID: 3038
			Main,
			// Token: 0x04000BDF RID: 3039
			Generic,
			// Token: 0x04000BE0 RID: 3040
			Boat
		}

		// Token: 0x02000232 RID: 562
		public enum Pattern
		{
			// Token: 0x04000BE2 RID: 3042
			Shark,
			// Token: 0x04000BE3 RID: 3043
			Squid,
			// Token: 0x04000BE4 RID: 3044
			DogFish,
			// Token: 0x04000BE5 RID: 3045
			Peashot,
			// Token: 0x04000BE6 RID: 3046
			Boat,
			// Token: 0x04000BE7 RID: 3047
			Uninitialized
		}

		// Token: 0x02000233 RID: 563
		public class State : AbstractLevelState<LevelProperties.Pirate.Pattern, LevelProperties.Pirate.States>
		{
			// Token: 0x0600065E RID: 1630 RVA: 0x000333D4 File Offset: 0x000317D4
			public State(float healthTrigger, LevelProperties.Pirate.Pattern[][] patterns, LevelProperties.Pirate.States stateName, LevelProperties.Pirate.Squid squid, LevelProperties.Pirate.Shark shark, LevelProperties.Pirate.DogFish dogFish, LevelProperties.Pirate.Peashot peashot, LevelProperties.Pirate.Barrel barrel, LevelProperties.Pirate.Cannon cannon, LevelProperties.Pirate.Boat boat) : base(healthTrigger, patterns, stateName)
			{
				this.squid = squid;
				this.shark = shark;
				this.dogFish = dogFish;
				this.peashot = peashot;
				this.barrel = barrel;
				this.cannon = cannon;
				this.boat = boat;
			}

			// Token: 0x04000BE8 RID: 3048
			public readonly LevelProperties.Pirate.Squid squid;

			// Token: 0x04000BE9 RID: 3049
			public readonly LevelProperties.Pirate.Shark shark;

			// Token: 0x04000BEA RID: 3050
			public readonly LevelProperties.Pirate.DogFish dogFish;

			// Token: 0x04000BEB RID: 3051
			public readonly LevelProperties.Pirate.Peashot peashot;

			// Token: 0x04000BEC RID: 3052
			public readonly LevelProperties.Pirate.Barrel barrel;

			// Token: 0x04000BED RID: 3053
			public readonly LevelProperties.Pirate.Cannon cannon;

			// Token: 0x04000BEE RID: 3054
			public readonly LevelProperties.Pirate.Boat boat;
		}

		// Token: 0x02000234 RID: 564
		public class Squid : AbstractLevelPropertyGroup
		{
			// Token: 0x0600065F RID: 1631 RVA: 0x00033424 File Offset: 0x00031824
			public Squid(float startDelay, int endDelay, MinMax hp, float maxTime, MinMax xPos, float opacityAdd, float opacityAddTime, float darkHoldTime, float darkFadeTime, float blobDelay, float blobGravity, MinMax blobVelX, MinMax blobVelY)
			{
				this.startDelay = startDelay;
				this.endDelay = endDelay;
				this.hp = hp;
				this.maxTime = maxTime;
				this.xPos = xPos;
				this.opacityAdd = opacityAdd;
				this.opacityAddTime = opacityAddTime;
				this.darkHoldTime = darkHoldTime;
				this.darkFadeTime = darkFadeTime;
				this.blobDelay = blobDelay;
				this.blobGravity = blobGravity;
				this.blobVelX = blobVelX;
				this.blobVelY = blobVelY;
			}

			// Token: 0x04000BEF RID: 3055
			public readonly float startDelay;

			// Token: 0x04000BF0 RID: 3056
			public readonly int endDelay;

			// Token: 0x04000BF1 RID: 3057
			public readonly MinMax hp;

			// Token: 0x04000BF2 RID: 3058
			public readonly float maxTime;

			// Token: 0x04000BF3 RID: 3059
			public readonly MinMax xPos;

			// Token: 0x04000BF4 RID: 3060
			public readonly float opacityAdd;

			// Token: 0x04000BF5 RID: 3061
			public readonly float opacityAddTime;

			// Token: 0x04000BF6 RID: 3062
			public readonly float darkHoldTime;

			// Token: 0x04000BF7 RID: 3063
			public readonly float darkFadeTime;

			// Token: 0x04000BF8 RID: 3064
			public readonly float blobDelay;

			// Token: 0x04000BF9 RID: 3065
			public readonly float blobGravity;

			// Token: 0x04000BFA RID: 3066
			public readonly MinMax blobVelX;

			// Token: 0x04000BFB RID: 3067
			public readonly MinMax blobVelY;
		}

		// Token: 0x02000235 RID: 565
		public class Shark : AbstractLevelPropertyGroup
		{
			// Token: 0x06000660 RID: 1632 RVA: 0x0003349C File Offset: 0x0003189C
			public Shark(float startDelay, float endDelay, float finTime, float exitSpeed, float shotExitSpeed, float attackDelay, float x)
			{
				this.startDelay = startDelay;
				this.endDelay = endDelay;
				this.finTime = finTime;
				this.exitSpeed = exitSpeed;
				this.shotExitSpeed = shotExitSpeed;
				this.attackDelay = attackDelay;
				this.x = x;
			}

			// Token: 0x04000BFC RID: 3068
			public readonly float startDelay;

			// Token: 0x04000BFD RID: 3069
			public readonly float endDelay;

			// Token: 0x04000BFE RID: 3070
			public readonly float finTime;

			// Token: 0x04000BFF RID: 3071
			public readonly float exitSpeed;

			// Token: 0x04000C00 RID: 3072
			public readonly float shotExitSpeed;

			// Token: 0x04000C01 RID: 3073
			public readonly float attackDelay;

			// Token: 0x04000C02 RID: 3074
			public readonly float x;
		}

		// Token: 0x02000236 RID: 566
		public class DogFish : AbstractLevelPropertyGroup
		{
			// Token: 0x06000661 RID: 1633 RVA: 0x000334DC File Offset: 0x000318DC
			public DogFish(float startDelay, float endDelay, float startSpeed, float endSpeed, float speedFalloffTime, int hp, int count, MinMax nextFishDelay, float deathSpeed)
			{
				this.startDelay = startDelay;
				this.endDelay = endDelay;
				this.startSpeed = startSpeed;
				this.endSpeed = endSpeed;
				this.speedFalloffTime = speedFalloffTime;
				this.hp = hp;
				this.count = count;
				this.nextFishDelay = nextFishDelay;
				this.deathSpeed = deathSpeed;
			}

			// Token: 0x04000C03 RID: 3075
			public readonly float startDelay;

			// Token: 0x04000C04 RID: 3076
			public readonly float endDelay;

			// Token: 0x04000C05 RID: 3077
			public readonly float startSpeed;

			// Token: 0x04000C06 RID: 3078
			public readonly float endSpeed;

			// Token: 0x04000C07 RID: 3079
			public readonly float speedFalloffTime;

			// Token: 0x04000C08 RID: 3080
			public readonly int hp;

			// Token: 0x04000C09 RID: 3081
			public readonly int count;

			// Token: 0x04000C0A RID: 3082
			public readonly MinMax nextFishDelay;

			// Token: 0x04000C0B RID: 3083
			public readonly float deathSpeed;
		}

		// Token: 0x02000237 RID: 567
		public class Peashot : AbstractLevelPropertyGroup
		{
			// Token: 0x06000662 RID: 1634 RVA: 0x00033534 File Offset: 0x00031934
			public Peashot(float startDelay, int endDelay, string[] patterns, int damage, float speed, float shotDelay, string shotType)
			{
				this.startDelay = startDelay;
				this.endDelay = endDelay;
				this.patterns = patterns;
				this.damage = damage;
				this.speed = speed;
				this.shotDelay = shotDelay;
				this.shotType = shotType;
			}

			// Token: 0x04000C0C RID: 3084
			public readonly float startDelay;

			// Token: 0x04000C0D RID: 3085
			public readonly int endDelay;

			// Token: 0x04000C0E RID: 3086
			public readonly string[] patterns;

			// Token: 0x04000C0F RID: 3087
			public readonly int damage;

			// Token: 0x04000C10 RID: 3088
			public readonly float speed;

			// Token: 0x04000C11 RID: 3089
			public readonly float shotDelay;

			// Token: 0x04000C12 RID: 3090
			public readonly string shotType;
		}

		// Token: 0x02000238 RID: 568
		public class Barrel : AbstractLevelPropertyGroup
		{
			// Token: 0x06000663 RID: 1635 RVA: 0x00033571 File Offset: 0x00031971
			public Barrel(float damage, float moveTime, float fallTime, float riseTime, float safeTime, float groundHold)
			{
				this.damage = damage;
				this.moveTime = moveTime;
				this.fallTime = fallTime;
				this.riseTime = riseTime;
				this.safeTime = safeTime;
				this.groundHold = groundHold;
			}

			// Token: 0x04000C13 RID: 3091
			public readonly float damage;

			// Token: 0x04000C14 RID: 3092
			public readonly float moveTime;

			// Token: 0x04000C15 RID: 3093
			public readonly float fallTime;

			// Token: 0x04000C16 RID: 3094
			public readonly float riseTime;

			// Token: 0x04000C17 RID: 3095
			public readonly float safeTime;

			// Token: 0x04000C18 RID: 3096
			public readonly float groundHold;
		}

		// Token: 0x02000239 RID: 569
		public class Cannon : AbstractLevelPropertyGroup
		{
			// Token: 0x06000664 RID: 1636 RVA: 0x000335A6 File Offset: 0x000319A6
			public Cannon(bool firing, float damage, float speed, MinMax delayRange)
			{
				this.firing = firing;
				this.damage = damage;
				this.speed = speed;
				this.delayRange = delayRange;
			}

			// Token: 0x04000C19 RID: 3097
			public readonly bool firing;

			// Token: 0x04000C1A RID: 3098
			public readonly float damage;

			// Token: 0x04000C1B RID: 3099
			public readonly float speed;

			// Token: 0x04000C1C RID: 3100
			public readonly MinMax delayRange;
		}

		// Token: 0x0200023A RID: 570
		public class Boat : AbstractLevelPropertyGroup
		{
			// Token: 0x06000665 RID: 1637 RVA: 0x000335CC File Offset: 0x000319CC
			public Boat(float pirateFallDelay, float pirateFallTime, float winceDuration, float attackDelay, float bulletSpeed, float bulletRotationSpeed, float bulletDelay, int bulletCount, float bulletPostWait, float beamDelay, float beamDuration, float beamPostWait)
			{
				this.pirateFallDelay = pirateFallDelay;
				this.pirateFallTime = pirateFallTime;
				this.winceDuration = winceDuration;
				this.attackDelay = attackDelay;
				this.bulletSpeed = bulletSpeed;
				this.bulletRotationSpeed = bulletRotationSpeed;
				this.bulletDelay = bulletDelay;
				this.bulletCount = bulletCount;
				this.bulletPostWait = bulletPostWait;
				this.beamDelay = beamDelay;
				this.beamDuration = beamDuration;
				this.beamPostWait = beamPostWait;
			}

			// Token: 0x04000C1D RID: 3101
			public readonly float pirateFallDelay;

			// Token: 0x04000C1E RID: 3102
			public readonly float pirateFallTime;

			// Token: 0x04000C1F RID: 3103
			public readonly float winceDuration;

			// Token: 0x04000C20 RID: 3104
			public readonly float attackDelay;

			// Token: 0x04000C21 RID: 3105
			public readonly float bulletSpeed;

			// Token: 0x04000C22 RID: 3106
			public readonly float bulletRotationSpeed;

			// Token: 0x04000C23 RID: 3107
			public readonly float bulletDelay;

			// Token: 0x04000C24 RID: 3108
			public readonly int bulletCount;

			// Token: 0x04000C25 RID: 3109
			public readonly float bulletPostWait;

			// Token: 0x04000C26 RID: 3110
			public readonly float beamDelay;

			// Token: 0x04000C27 RID: 3111
			public readonly float beamDuration;

			// Token: 0x04000C28 RID: 3112
			public readonly float beamPostWait;
		}
	}

	// Token: 0x0200023C RID: 572
	public class RetroArcade : AbstractLevelProperties<LevelProperties.RetroArcade.State, LevelProperties.RetroArcade.Pattern, LevelProperties.RetroArcade.States>
	{
		// Token: 0x0600067D RID: 1661 RVA: 0x0003363C File Offset: 0x00031A3C
		public RetroArcade(int hp, Level.GoalTimes goalTimes, LevelProperties.RetroArcade.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600067E RID: 1662 RVA: 0x00033648 File Offset: 0x00031A48
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				timeline.events.Add(new Level.Timeline.Event("Caterpillar", 0.92f));
				timeline.events.Add(new Level.Timeline.Event("Robots", 0.83f));
				timeline.events.Add(new Level.Timeline.Event("PaddleShip", 0.75f));
				timeline.events.Add(new Level.Timeline.Event("Aliens", 0.63f));
				timeline.events.Add(new Level.Timeline.Event("Caterpillar", 0.58f));
				timeline.events.Add(new Level.Timeline.Event("Robots", 0.5f));
				timeline.events.Add(new Level.Timeline.Event("UFO", 0.41f));
				timeline.events.Add(new Level.Timeline.Event("Aliens", 0.33f));
				timeline.events.Add(new Level.Timeline.Event("Caterpillar", 0.25f));
				timeline.events.Add(new Level.Timeline.Event("Robots", 0.16f));
				timeline.events.Add(new Level.Timeline.Event("QShip", 0.08f));
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				timeline.events.Add(new Level.Timeline.Event("JetpackTest", 0.92f));
				timeline.events.Add(new Level.Timeline.Event("Chaser", 0.84f));
				timeline.events.Add(new Level.Timeline.Event("Aliens", 0.68f));
				timeline.events.Add(new Level.Timeline.Event("Caterpillar", 0.6f));
				timeline.events.Add(new Level.Timeline.Event("Robots", 0.52f));
				timeline.events.Add(new Level.Timeline.Event("UFO", 0.44f));
				timeline.events.Add(new Level.Timeline.Event("Aliens", 0.35f));
				timeline.events.Add(new Level.Timeline.Event("Caterpillar", 0.26f));
				timeline.events.Add(new Level.Timeline.Event("Robots", 0.17f));
				timeline.events.Add(new Level.Timeline.Event("QShip", 0.08f));
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				timeline.events.Add(new Level.Timeline.Event("Caterpillar", 0.92f));
				timeline.events.Add(new Level.Timeline.Event("Robots", 0.83f));
				timeline.events.Add(new Level.Timeline.Event("PaddleShip", 0.75f));
				timeline.events.Add(new Level.Timeline.Event("Aliens", 0.63f));
				timeline.events.Add(new Level.Timeline.Event("Caterpillar", 0.58f));
				timeline.events.Add(new Level.Timeline.Event("Robots", 0.5f));
				timeline.events.Add(new Level.Timeline.Event("UFO", 0.41f));
				timeline.events.Add(new Level.Timeline.Event("Aliens", 0.33f));
				timeline.events.Add(new Level.Timeline.Event("Caterpillar", 0.25f));
				timeline.events.Add(new Level.Timeline.Event("Robots", 0.16f));
				timeline.events.Add(new Level.Timeline.Event("QShip", 0.08f));
				break;
			}
			return timeline;
		}

		// Token: 0x0600067F RID: 1663 RVA: 0x000339E3 File Offset: 0x00031DE3
		public static LevelProperties.RetroArcade.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.RetroArcade.Pattern.Default;
				}
			}
			Debug.LogError("Pattern RetroArcade.Pattern for  " + id + " not found.", null);
			return LevelProperties.RetroArcade.Pattern.Uninitialized;
		}

		// Token: 0x06000680 RID: 1664 RVA: 0x00033A24 File Offset: 0x00031E24
		public static LevelProperties.RetroArcade GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.RetroArcade.State> list = new List<LevelProperties.RetroArcade.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.RetroArcade.State(10f, new LevelProperties.RetroArcade.Pattern[][]
						{
							new LevelProperties.RetroArcade.Pattern[1]
						}, LevelProperties.RetroArcade.States.Main, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(1.8f, 2.3f), 0.05f, 7f, new string[]
						{
							"3,5,2,6,9,1,7,4,8",
							"2,8,5,1,6,9,3,5,4",
							"5,6,1,9,7,8,3,2,4"
						}, 225f, new MinMax(6f, 8f), 2, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.9f, 0.05f, new int[]
						{
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							1,
							1
						}, 400f, 2, new MinMax(0.3f, 0.8f), 2, 400f, new MinMax(125f, 250f), 7, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "2,2.5,3,2.5,2,3.2,2,3,3.3,2.2,3,2.4,3.5,1.5,2.8,2,3", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 8f), 2, 150f, 1f, 1f, 5f, new string[]
						{
							"2",
							"1,3",
							"1,2,3"
						}, new float[]
						{
							-213f,
							0f,
							213f
						}, new string[]
						{
							"1-1-1",
							"1-2-2,2-2-1",
							"1-2-3,1-2-3,1-2-3"
						}), new LevelProperties.RetroArcade.PaddleShip(57f, new MinMax(100f, 175f), 350f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 300f), 120f, 60f, 250f, 200f, 140f, 230f, 10f, 1f, new MinMax(1f, 2f), 400f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(2f, 1f), 8, 137f, 24f, new MinMax(300f, 500f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
						{
							250f,
							-250f
						}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
						list.Add(new LevelProperties.RetroArcade.State(0.92f, new LevelProperties.RetroArcade.Pattern[][]
						{
							new LevelProperties.RetroArcade.Pattern[0]
						}, LevelProperties.RetroArcade.States.Caterpillar, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(1.8f, 2.3f), 0.05f, 7f, new string[]
						{
							"3,5,2,6,9,1,7,4,8",
							"2,8,5,1,6,9,3,5,4",
							"5,6,1,9,7,8,3,2,4"
						}, 225f, new MinMax(6f, 8f), 2, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.9f, 0.05f, new int[]
						{
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							1,
							1
						}, 400f, 2, new MinMax(0.3f, 0.8f), 2, 400f, new MinMax(125f, 250f), 7, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "2,2.5,3,2.5,2,3.2,2,3,3.3,2.2,3,2.4,3.5,1.5,2.8,2,3", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 8f), 2, 150f, 1f, 1f, 5f, new string[]
						{
							"2",
							"1,3",
							"1,2,3"
						}, new float[]
						{
							-213f,
							0f,
							213f
						}, new string[]
						{
							"1-1-1",
							"1-2-2,2-2-1",
							"1-2-3,1-2-3,1-2-3"
						}), new LevelProperties.RetroArcade.PaddleShip(57f, new MinMax(100f, 175f), 350f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 300f), 120f, 60f, 250f, 200f, 140f, 230f, 10f, 1f, new MinMax(1f, 2f), 400f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(2f, 1f), 8, 137f, 24f, new MinMax(300f, 500f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
						{
							250f,
							-250f
						}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
						list.Add(new LevelProperties.RetroArcade.State(0.83f, new LevelProperties.RetroArcade.Pattern[][]
						{
							new LevelProperties.RetroArcade.Pattern[0]
						}, LevelProperties.RetroArcade.States.Robots, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(1.8f, 2.3f), 0.05f, 7f, new string[]
						{
							"3,5,2,6,9,1,7,4,8",
							"2,8,5,1,6,9,3,5,4",
							"5,6,1,9,7,8,3,2,4"
						}, 225f, new MinMax(6f, 8f), 2, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.9f, 0.05f, new int[]
						{
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							1,
							1
						}, 400f, 2, new MinMax(0.3f, 0.8f), 2, 400f, new MinMax(125f, 250f), 7, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "2,2.5,3,2.5,2,3.2,2,3,3.3,2.2,3,2.4,3.5,1.5,2.8,2,3", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 8f), 2, 150f, 1f, 1f, 5f, new string[]
						{
							"2",
							"1,3",
							"1,2,3"
						}, new float[]
						{
							-213f,
							0f,
							213f
						}, new string[]
						{
							"1-1-1",
							"1-2-2,2-2-1",
							"1-2-3,1-2-3,1-2-3"
						}), new LevelProperties.RetroArcade.PaddleShip(57f, new MinMax(100f, 175f), 350f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 300f), 120f, 60f, 250f, 200f, 140f, 230f, 10f, 1f, new MinMax(1f, 2f), 400f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(2f, 1f), 8, 137f, 24f, new MinMax(300f, 500f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
						{
							250f,
							-250f
						}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
						list.Add(new LevelProperties.RetroArcade.State(0.75f, new LevelProperties.RetroArcade.Pattern[][]
						{
							new LevelProperties.RetroArcade.Pattern[0]
						}, LevelProperties.RetroArcade.States.PaddleShip, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(1.8f, 2.3f), 0.05f, 7f, new string[]
						{
							"3,5,2,6,9,1,7,4,8",
							"2,8,5,1,6,9,3,5,4",
							"5,6,1,9,7,8,3,2,4"
						}, 225f, new MinMax(6f, 8f), 2, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.9f, 0.05f, new int[]
						{
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							1,
							1
						}, 400f, 2, new MinMax(0.3f, 0.8f), 2, 400f, new MinMax(125f, 250f), 7, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "2,2.5,3,2.5,2,3.2,2,3,3.3,2.2,3,2.4,3.5,1.5,2.8,2,3", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 8f), 2, 150f, 1f, 1f, 5f, new string[]
						{
							"2",
							"1,3",
							"1,2,3"
						}, new float[]
						{
							-213f,
							0f,
							213f
						}, new string[]
						{
							"1-1-1",
							"1-2-2,2-2-1",
							"1-2-3,1-2-3,1-2-3"
						}), new LevelProperties.RetroArcade.PaddleShip(57f, new MinMax(100f, 175f), 350f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 300f), 120f, 60f, 250f, 200f, 140f, 230f, 10f, 1f, new MinMax(1f, 2f), 400f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(2f, 1f), 8, 137f, 24f, new MinMax(300f, 500f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
						{
							250f,
							-250f
						}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
						list.Add(new LevelProperties.RetroArcade.State(0.63f, new LevelProperties.RetroArcade.Pattern[][]
						{
							new LevelProperties.RetroArcade.Pattern[0]
						}, LevelProperties.RetroArcade.States.Aliens, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(1.8f, 2.3f), 0.05f, 7f, new string[]
						{
							"3,5,2,6,9,1,7,4,8",
							"2,8,5,1,6,9,3,5,4",
							"5,6,1,9,7,8,3,2,4"
						}, 225f, new MinMax(6f, 8f), 2, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.9f, 0.05f, new int[]
						{
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							1,
							1
						}, 400f, 2, new MinMax(0.3f, 0.8f), 2, 400f, new MinMax(125f, 250f), 7, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "2,2.5,3,2.5,2,3.2,2,3,3.3,2.2,3,2.4,3.5,1.5,2.8,2,3", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 8f), 2, 150f, 1f, 1f, 5f, new string[]
						{
							"2",
							"1,3",
							"1,2,3"
						}, new float[]
						{
							-213f,
							0f,
							213f
						}, new string[]
						{
							"1-1-1",
							"1-2-2,2-2-1",
							"1-2-3,1-2-3,1-2-3"
						}), new LevelProperties.RetroArcade.PaddleShip(57f, new MinMax(100f, 175f), 350f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 300f), 120f, 60f, 250f, 200f, 140f, 230f, 10f, 1f, new MinMax(1f, 2f), 400f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(2f, 1f), 8, 137f, 24f, new MinMax(300f, 500f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
						{
							250f,
							-250f
						}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
						list.Add(new LevelProperties.RetroArcade.State(0.58f, new LevelProperties.RetroArcade.Pattern[][]
						{
							new LevelProperties.RetroArcade.Pattern[0]
						}, LevelProperties.RetroArcade.States.Caterpillar, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(1.8f, 2.3f), 0.05f, 7f, new string[]
						{
							"3,5,2,6,9,1,7,4,8",
							"2,8,5,1,6,9,3,5,4",
							"5,6,1,9,7,8,3,2,4"
						}, 225f, new MinMax(6f, 8f), 2, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.9f, 0.05f, new int[]
						{
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							1,
							1
						}, 400f, 2, new MinMax(0.3f, 0.8f), 2, 400f, new MinMax(125f, 250f), 7, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "2,2.5,3,2.5,2,3.2,2,3,3.3,2.2,3,2.4,3.5,1.5,2.8,2,3", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 8f), 2, 150f, 1f, 1f, 5f, new string[]
						{
							"2",
							"1,3",
							"1,2,3"
						}, new float[]
						{
							-213f,
							0f,
							213f
						}, new string[]
						{
							"1-1-1",
							"1-2-2,2-2-1",
							"1-2-3,1-2-3,1-2-3"
						}), new LevelProperties.RetroArcade.PaddleShip(57f, new MinMax(100f, 175f), 350f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 300f), 120f, 60f, 250f, 200f, 140f, 230f, 10f, 1f, new MinMax(1f, 2f), 400f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(2f, 1f), 8, 137f, 24f, new MinMax(300f, 500f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
						{
							250f,
							-250f
						}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
						list.Add(new LevelProperties.RetroArcade.State(0.5f, new LevelProperties.RetroArcade.Pattern[][]
						{
							new LevelProperties.RetroArcade.Pattern[0]
						}, LevelProperties.RetroArcade.States.Robots, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(1.8f, 2.3f), 0.05f, 7f, new string[]
						{
							"3,5,2,6,9,1,7,4,8",
							"2,8,5,1,6,9,3,5,4",
							"5,6,1,9,7,8,3,2,4"
						}, 225f, new MinMax(6f, 8f), 2, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.9f, 0.05f, new int[]
						{
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							1,
							1
						}, 400f, 2, new MinMax(0.3f, 0.8f), 2, 400f, new MinMax(125f, 250f), 7, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "2,2.5,3,2.5,2,3.2,2,3,3.3,2.2,3,2.4,3.5,1.5,2.8,2,3", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 8f), 2, 150f, 1f, 1f, 5f, new string[]
						{
							"2",
							"1,3",
							"1,2,3"
						}, new float[]
						{
							-213f,
							0f,
							213f
						}, new string[]
						{
							"1-1-1",
							"1-2-2,2-2-1",
							"1-2-3,1-2-3,1-2-3"
						}), new LevelProperties.RetroArcade.PaddleShip(57f, new MinMax(100f, 175f), 350f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 300f), 120f, 60f, 250f, 200f, 140f, 230f, 10f, 1f, new MinMax(1f, 2f), 400f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(2f, 1f), 8, 137f, 24f, new MinMax(300f, 500f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
						{
							250f,
							-250f
						}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
						list.Add(new LevelProperties.RetroArcade.State(0.41f, new LevelProperties.RetroArcade.Pattern[][]
						{
							new LevelProperties.RetroArcade.Pattern[0]
						}, LevelProperties.RetroArcade.States.UFO, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(1.8f, 2.3f), 0.05f, 7f, new string[]
						{
							"3,5,2,6,9,1,7,4,8",
							"2,8,5,1,6,9,3,5,4",
							"5,6,1,9,7,8,3,2,4"
						}, 225f, new MinMax(6f, 8f), 2, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.9f, 0.05f, new int[]
						{
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							1,
							1
						}, 400f, 2, new MinMax(0.3f, 0.8f), 2, 400f, new MinMax(125f, 250f), 7, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "2,2.5,3,2.5,2,3.2,2,3,3.3,2.2,3,2.4,3.5,1.5,2.8,2,3", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 8f), 2, 150f, 1f, 1f, 5f, new string[]
						{
							"2",
							"1,3",
							"1,2,3"
						}, new float[]
						{
							-213f,
							0f,
							213f
						}, new string[]
						{
							"1-1-1",
							"1-2-2,2-2-1",
							"1-2-3,1-2-3,1-2-3"
						}), new LevelProperties.RetroArcade.PaddleShip(57f, new MinMax(100f, 175f), 350f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 300f), 120f, 60f, 250f, 200f, 140f, 230f, 10f, 1f, new MinMax(1f, 2f), 400f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(2f, 1f), 8, 137f, 24f, new MinMax(300f, 500f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
						{
							250f,
							-250f
						}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
						list.Add(new LevelProperties.RetroArcade.State(0.33f, new LevelProperties.RetroArcade.Pattern[][]
						{
							new LevelProperties.RetroArcade.Pattern[0]
						}, LevelProperties.RetroArcade.States.Aliens, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(1.8f, 2.3f), 0.05f, 7f, new string[]
						{
							"3,5,2,6,9,1,7,4,8",
							"2,8,5,1,6,9,3,5,4",
							"5,6,1,9,7,8,3,2,4"
						}, 225f, new MinMax(6f, 8f), 2, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.9f, 0.05f, new int[]
						{
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							1,
							1
						}, 400f, 2, new MinMax(0.3f, 0.8f), 2, 400f, new MinMax(125f, 250f), 7, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "2,2.5,3,2.5,2,3.2,2,3,3.3,2.2,3,2.4,3.5,1.5,2.8,2,3", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 8f), 2, 150f, 1f, 1f, 5f, new string[]
						{
							"2",
							"1,3",
							"1,2,3"
						}, new float[]
						{
							-213f,
							0f,
							213f
						}, new string[]
						{
							"1-1-1",
							"1-2-2,2-2-1",
							"1-2-3,1-2-3,1-2-3"
						}), new LevelProperties.RetroArcade.PaddleShip(57f, new MinMax(100f, 175f), 350f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 300f), 120f, 60f, 250f, 200f, 140f, 230f, 10f, 1f, new MinMax(1f, 2f), 400f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(2f, 1f), 8, 137f, 24f, new MinMax(300f, 500f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
						{
							250f,
							-250f
						}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
						list.Add(new LevelProperties.RetroArcade.State(0.25f, new LevelProperties.RetroArcade.Pattern[][]
						{
							new LevelProperties.RetroArcade.Pattern[0]
						}, LevelProperties.RetroArcade.States.Caterpillar, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(1.8f, 2.3f), 0.05f, 7f, new string[]
						{
							"3,5,2,6,9,1,7,4,8",
							"2,8,5,1,6,9,3,5,4",
							"5,6,1,9,7,8,3,2,4"
						}, 225f, new MinMax(6f, 8f), 2, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.9f, 0.05f, new int[]
						{
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							1,
							1
						}, 400f, 2, new MinMax(0.3f, 0.8f), 2, 400f, new MinMax(125f, 250f), 7, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "2,2.5,3,2.5,2,3.2,2,3,3.3,2.2,3,2.4,3.5,1.5,2.8,2,3", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 8f), 2, 150f, 1f, 1f, 5f, new string[]
						{
							"2",
							"1,3",
							"1,2,3"
						}, new float[]
						{
							-213f,
							0f,
							213f
						}, new string[]
						{
							"1-1-1",
							"1-2-2,2-2-1",
							"1-2-3,1-2-3,1-2-3"
						}), new LevelProperties.RetroArcade.PaddleShip(57f, new MinMax(100f, 175f), 350f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 300f), 120f, 60f, 250f, 200f, 140f, 230f, 10f, 1f, new MinMax(1f, 2f), 400f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(2f, 1f), 8, 137f, 24f, new MinMax(300f, 500f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
						{
							250f,
							-250f
						}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
						list.Add(new LevelProperties.RetroArcade.State(0.16f, new LevelProperties.RetroArcade.Pattern[][]
						{
							new LevelProperties.RetroArcade.Pattern[0]
						}, LevelProperties.RetroArcade.States.Robots, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(1.8f, 2.3f), 0.05f, 7f, new string[]
						{
							"3,5,2,6,9,1,7,4,8",
							"2,8,5,1,6,9,3,5,4",
							"5,6,1,9,7,8,3,2,4"
						}, 225f, new MinMax(6f, 8f), 2, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.9f, 0.05f, new int[]
						{
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							1,
							1
						}, 400f, 2, new MinMax(0.3f, 0.8f), 2, 400f, new MinMax(125f, 250f), 7, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "2,2.5,3,2.5,2,3.2,2,3,3.3,2.2,3,2.4,3.5,1.5,2.8,2,3", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 8f), 2, 150f, 1f, 1f, 5f, new string[]
						{
							"2",
							"1,3",
							"1,2,3"
						}, new float[]
						{
							-213f,
							0f,
							213f
						}, new string[]
						{
							"1-1-1",
							"1-2-2,2-2-1",
							"1-2-3,1-2-3,1-2-3"
						}), new LevelProperties.RetroArcade.PaddleShip(57f, new MinMax(100f, 175f), 350f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 300f), 120f, 60f, 250f, 200f, 140f, 230f, 10f, 1f, new MinMax(1f, 2f), 400f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(2f, 1f), 8, 137f, 24f, new MinMax(300f, 500f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
						{
							250f,
							-250f
						}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
						list.Add(new LevelProperties.RetroArcade.State(0.08f, new LevelProperties.RetroArcade.Pattern[][]
						{
							new LevelProperties.RetroArcade.Pattern[0]
						}, LevelProperties.RetroArcade.States.QShip, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(1.8f, 2.3f), 0.05f, 7f, new string[]
						{
							"3,5,2,6,9,1,7,4,8",
							"2,8,5,1,6,9,3,5,4",
							"5,6,1,9,7,8,3,2,4"
						}, 225f, new MinMax(6f, 8f), 2, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.9f, 0.05f, new int[]
						{
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							2,
							3,
							1,
							1,
							1
						}, 400f, 2, new MinMax(0.3f, 0.8f), 2, 400f, new MinMax(125f, 250f), 7, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "2,2.5,3,2.5,2,3.2,2,3,3.3,2.2,3,2.4,3.5,1.5,2.8,2,3", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 8f), 2, 150f, 1f, 1f, 5f, new string[]
						{
							"2",
							"1,3",
							"1,2,3"
						}, new float[]
						{
							-213f,
							0f,
							213f
						}, new string[]
						{
							"1-1-1",
							"1-2-2,2-2-1",
							"1-2-3,1-2-3,1-2-3"
						}), new LevelProperties.RetroArcade.PaddleShip(57f, new MinMax(100f, 175f), 350f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 300f), 120f, 60f, 250f, 200f, 140f, 230f, 10f, 1f, new MinMax(1f, 2f), 400f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(2f, 1f), 8, 137f, 24f, new MinMax(300f, 500f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
						{
							250f,
							-250f
						}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.RetroArcade.State(10f, new LevelProperties.RetroArcade.Pattern[][]
					{
						new LevelProperties.RetroArcade.Pattern[1]
					}, LevelProperties.RetroArcade.States.Main, new LevelProperties.RetroArcade.Aliens(1f, 3.7f, 0.25f, 3, new MinMax(2f, 2.5f), 0.05f, 9999f, new string[]
					{
						"2,1,3",
						"3,2,1",
						"2,3,1",
						"3,1,2",
						"1,2,3"
					}, 300f, new MinMax(2.5f, 3.5f), 1, 250f, 25f, 100f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.55f, 0.05f, new int[]
					{
						1,
						1,
						1,
						2,
						2,
						2
					}, 400f, 2, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 7, 25f, 100f), new LevelProperties.RetroArcade.Robots(15f, "1,1.8,1.6,1.3,1.9,1.4,1.4,1.9,1.6,1.7", 260f, false, 125f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 9999f, 150f, 80f, new MinMax(3f, 4f), 1, 200f, 1f, 25f, 100f, new string[]
					{
						"2"
					}, new float[]
					{
						-213f,
						0f,
						213f
					}, new string[]
					{
						"1-1-1"
					}), new LevelProperties.RetroArcade.PaddleShip(16f, new MinMax(450f, 500f), 315f, 1f, 100f, 0f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 250f), 100f, 60f, 400f, 200f, 160f, 60f, 1f, 1f, new MinMax(1f, 2f), 335f, 55f, 0f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(1f, 0.8f), 8, 37f, 12f, new MinMax(450f, 450f), 0f, 9999f, 0f, 125f, 0f, 0f, new float[]
					{
						225f,
						-225f
					}, -3), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1800f, 2200f), new MinMax(300f, 400f), 7000f, new MinMax(0.5f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(500f, 600f, new string[]
					{
						"A,A,A,B,B,B,C,C,C"
					}, new MinMax(6f, 6.5f), 5, new MinMax(45f, 70f)), new LevelProperties.RetroArcade.Missile("L,L,R,R,L", new MinMax(1.5f, 2.3f), 2f, 10f, 4f, 150f, 300f), new LevelProperties.RetroArcade.Chasers(300f, 2f, 5f, new MinMax(2f, 3f), 400f, 1.2f, 8f, new MinMax(1f, 2f), 500f, 2.2f, 10f, new MinMax(2f, 3f), new string[]
					{
						"G,G,Y,G,Y,Y,O,O,O,G,Y,G,Y,G,Y"
					}, new string[]
					{
						"1,1,0.5,2,1,1.5,1"
					}, 2f, new string[]
					{
						"2,5,7,6,1,3,0,4,7,5,0,6,1,4,3"
					}), new LevelProperties.RetroArcade.Sheriff(300f, 20f, new string[]
					{
						"3,2.5,3,3.5,4"
					}, 0.1f, new string[]
					{
						"G,Y,O"
					}, 400f), new LevelProperties.RetroArcade.Snake(200f), new LevelProperties.RetroArcade.Tentacle(100f, 200f, new string[]
					{
						"5,6,3,4,1,2,7,4,6,0,7,3,2,1"
					}, 8), new LevelProperties.RetroArcade.Traffic(200f, 0.5f, new string[]
					{
						"D1,D3,B1",
						"A3,C2,C0"
					}, 1f)));
					list.Add(new LevelProperties.RetroArcade.State(0.92f, new LevelProperties.RetroArcade.Pattern[][]
					{
						new LevelProperties.RetroArcade.Pattern[0]
					}, LevelProperties.RetroArcade.States.JetpackTest, new LevelProperties.RetroArcade.Aliens(1f, 3.7f, 0.25f, 3, new MinMax(2f, 2.5f), 0.05f, 9999f, new string[]
					{
						"2,1,3",
						"3,2,1",
						"2,3,1",
						"3,1,2",
						"1,2,3"
					}, 300f, new MinMax(2.5f, 3.5f), 1, 250f, 25f, 100f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.55f, 0.05f, new int[]
					{
						1,
						1,
						1,
						2,
						2,
						2
					}, 400f, 2, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 7, 25f, 100f), new LevelProperties.RetroArcade.Robots(15f, "1,1.8,1.6,1.3,1.9,1.4,1.4,1.9,1.6,1.7", 260f, false, 125f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 9999f, 150f, 80f, new MinMax(3f, 4f), 1, 200f, 1f, 25f, 100f, new string[]
					{
						"2"
					}, new float[]
					{
						-213f,
						0f,
						213f
					}, new string[]
					{
						"1-1-1"
					}), new LevelProperties.RetroArcade.PaddleShip(16f, new MinMax(450f, 500f), 315f, 1f, 100f, 0f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 250f), 100f, 60f, 400f, 200f, 160f, 60f, 1f, 1f, new MinMax(1f, 2f), 335f, 55f, 0f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(1f, 0.8f), 8, 37f, 12f, new MinMax(450f, 450f), 0f, 9999f, 0f, 125f, 0f, 0f, new float[]
					{
						225f,
						-225f
					}, -3), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1800f, 2200f), new MinMax(300f, 400f), 7000f, new MinMax(0.5f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(500f, 600f, new string[]
					{
						"A,A,A,B,B,B,C,C,C"
					}, new MinMax(6f, 6.5f), 5, new MinMax(45f, 70f)), new LevelProperties.RetroArcade.Missile("L,L,R,R,L", new MinMax(1.5f, 2.3f), 2f, 10f, 4f, 150f, 300f), new LevelProperties.RetroArcade.Chasers(300f, 2f, 5f, new MinMax(2f, 3f), 400f, 1.2f, 8f, new MinMax(1f, 2f), 500f, 2.2f, 10f, new MinMax(2f, 3f), new string[]
					{
						"G,G,Y,G,Y,Y,O,O,O,G,Y,G,Y,G,Y"
					}, new string[]
					{
						"1,1,0.5,2,1,1.5,1"
					}, 2f, new string[]
					{
						"2,5,7,6,1,3,0,4,7,5,0,6,1,4,3"
					}), new LevelProperties.RetroArcade.Sheriff(300f, 20f, new string[]
					{
						"3,2.5,3,3.5,4"
					}, 0.1f, new string[]
					{
						"G,Y,O"
					}, 400f), new LevelProperties.RetroArcade.Snake(200f), new LevelProperties.RetroArcade.Tentacle(100f, 200f, new string[]
					{
						"5,6,3,4,1,2,7,4,6,0,7,3,2,1"
					}, 8), new LevelProperties.RetroArcade.Traffic(200f, 0.5f, new string[]
					{
						"D1,D3,B1",
						"A3,C2,C0"
					}, 1f)));
					list.Add(new LevelProperties.RetroArcade.State(0.84f, new LevelProperties.RetroArcade.Pattern[][]
					{
						new LevelProperties.RetroArcade.Pattern[0]
					}, LevelProperties.RetroArcade.States.Chaser, new LevelProperties.RetroArcade.Aliens(1f, 3.7f, 0.25f, 3, new MinMax(2f, 2.5f), 0.05f, 9999f, new string[]
					{
						"2,1,3",
						"3,2,1",
						"2,3,1",
						"3,1,2",
						"1,2,3"
					}, 300f, new MinMax(2.5f, 3.5f), 1, 250f, 25f, 100f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.55f, 0.05f, new int[]
					{
						1,
						1,
						1,
						2,
						2,
						2
					}, 400f, 2, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 7, 25f, 100f), new LevelProperties.RetroArcade.Robots(15f, "1,1.8,1.6,1.3,1.9,1.4,1.4,1.9,1.6,1.7", 260f, false, 125f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 9999f, 150f, 80f, new MinMax(3f, 4f), 1, 200f, 1f, 25f, 100f, new string[]
					{
						"2"
					}, new float[]
					{
						-213f,
						0f,
						213f
					}, new string[]
					{
						"1-1-1"
					}), new LevelProperties.RetroArcade.PaddleShip(16f, new MinMax(450f, 500f), 315f, 1f, 100f, 0f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 250f), 100f, 60f, 400f, 200f, 160f, 60f, 1f, 1f, new MinMax(1f, 2f), 335f, 55f, 0f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(1f, 0.8f), 8, 37f, 12f, new MinMax(450f, 450f), 0f, 9999f, 0f, 125f, 0f, 0f, new float[]
					{
						225f,
						-225f
					}, -3), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1800f, 2200f), new MinMax(300f, 400f), 7000f, new MinMax(0.5f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(500f, 600f, new string[]
					{
						"A,A,A,B,B,B,C,C,C"
					}, new MinMax(6f, 6.5f), 5, new MinMax(45f, 70f)), new LevelProperties.RetroArcade.Missile("L,L,R,R,L", new MinMax(1.5f, 2.3f), 2f, 10f, 4f, 150f, 300f), new LevelProperties.RetroArcade.Chasers(300f, 2f, 5f, new MinMax(2f, 3f), 400f, 1.2f, 8f, new MinMax(1f, 2f), 500f, 2.2f, 10f, new MinMax(2f, 3f), new string[]
					{
						"G,G,Y,G,Y,Y,O,O,O,G,Y,G,Y,G,Y"
					}, new string[]
					{
						"1,1,0.5,2,1,1.5,1"
					}, 2f, new string[]
					{
						"2,5,7,6,1,3,0,4,7,5,0,6,1,4,3"
					}), new LevelProperties.RetroArcade.Sheriff(300f, 20f, new string[]
					{
						"3,2.5,3,3.5,4"
					}, 0.1f, new string[]
					{
						"G,Y,O"
					}, 400f), new LevelProperties.RetroArcade.Snake(200f), new LevelProperties.RetroArcade.Tentacle(100f, 200f, new string[]
					{
						"5,6,3,4,1,2,7,4,6,0,7,3,2,1"
					}, 8), new LevelProperties.RetroArcade.Traffic(200f, 0.5f, new string[]
					{
						"D1,D3,B1",
						"A3,C2,C0"
					}, 1f)));
					list.Add(new LevelProperties.RetroArcade.State(0.68f, new LevelProperties.RetroArcade.Pattern[][]
					{
						new LevelProperties.RetroArcade.Pattern[0]
					}, LevelProperties.RetroArcade.States.Aliens, new LevelProperties.RetroArcade.Aliens(1f, 4.5f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 9999f, new string[]
					{
						"1,5,2,6,4,3",
						"5,1,4,2,6,3",
						"2,6,4,3,5,1",
						"4,6,1,3,5,2"
					}, 300f, new MinMax(4f, 6f), 1, 300f, 25f, 100f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.55f, 0.05f, new int[]
					{
						1,
						1,
						1,
						2,
						2,
						2
					}, 400f, 2, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 7, 25f, 100f), new LevelProperties.RetroArcade.Robots(15f, "1,1.8,1.6,1.3,1.9,1.4,1.4,1.9,1.6,1.7", 260f, false, 125f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 9999f, 150f, 80f, new MinMax(3f, 4f), 1, 200f, 1f, 25f, 100f, new string[]
					{
						"2"
					}, new float[]
					{
						-213f,
						0f,
						213f
					}, new string[]
					{
						"1-1-1"
					}), new LevelProperties.RetroArcade.PaddleShip(16f, new MinMax(450f, 500f), 315f, 1f, 100f, 0f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 250f), 100f, 60f, 400f, 200f, 160f, 60f, 1f, 1f, new MinMax(1f, 2f), 335f, 55f, 0f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(1f, 0.8f), 8, 37f, 12f, new MinMax(450f, 450f), 0f, 9999f, 0f, 125f, 0f, 0f, new float[]
					{
						225f,
						-225f
					}, -3), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1800f, 2200f), new MinMax(300f, 400f), 7000f, new MinMax(0.5f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(500f, 600f, new string[]
					{
						"A,A,A,B,B,B,C,C,C"
					}, new MinMax(6f, 6.5f), 5, new MinMax(45f, 70f)), new LevelProperties.RetroArcade.Missile("L,L,R,R,L", new MinMax(1.5f, 2.3f), 2f, 10f, 4f, 150f, 300f), new LevelProperties.RetroArcade.Chasers(300f, 2f, 5f, new MinMax(2f, 3f), 400f, 1.2f, 8f, new MinMax(1f, 2f), 500f, 2.2f, 10f, new MinMax(2f, 3f), new string[]
					{
						"G,G,Y,G,Y,Y,O,O,O,G,Y,G,Y,G,Y"
					}, new string[]
					{
						"1,1,0.5,2,1,1.5,1"
					}, 2f, new string[]
					{
						"2,5,7,6,1,3,0,4,7,5,0,6,1,4,3"
					}), new LevelProperties.RetroArcade.Sheriff(300f, 20f, new string[]
					{
						"3,2.5,3,3.5,4"
					}, 0.1f, new string[]
					{
						"G,Y,O"
					}, 400f), new LevelProperties.RetroArcade.Snake(200f), new LevelProperties.RetroArcade.Tentacle(100f, 200f, new string[]
					{
						"5,6,3,4,1,2,7,4,6,0,7,3,2,1"
					}, 8), new LevelProperties.RetroArcade.Traffic(200f, 0.5f, new string[]
					{
						"D1,D3,B1",
						"A3,C2,C0"
					}, 1f)));
					list.Add(new LevelProperties.RetroArcade.State(0.6f, new LevelProperties.RetroArcade.Pattern[][]
					{
						new LevelProperties.RetroArcade.Pattern[0]
					}, LevelProperties.RetroArcade.States.Caterpillar, new LevelProperties.RetroArcade.Aliens(1f, 4.5f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 9999f, new string[]
					{
						"1,5,2,6,4,3",
						"5,1,4,2,6,3",
						"2,6,4,3,5,1",
						"4,6,1,3,5,2"
					}, 300f, new MinMax(4f, 6f), 1, 300f, 25f, 100f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.7f, 0.08f, new int[]
					{
						1,
						1,
						1,
						2,
						2,
						2,
						3,
						3,
						3
					}, 400f, 2, new MinMax(0.3f, 0.8f), 1, 450f, new MinMax(125f, 250f), 7, 25f, 100f), new LevelProperties.RetroArcade.Robots(15f, "1,1.8,1.6,1.3,1.9,1.4,1.4,1.9,1.6,1.7", 260f, false, 125f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 9999f, 150f, 80f, new MinMax(3f, 4f), 1, 200f, 1f, 25f, 100f, new string[]
					{
						"2"
					}, new float[]
					{
						-213f,
						0f,
						213f
					}, new string[]
					{
						"1-1-1"
					}), new LevelProperties.RetroArcade.PaddleShip(16f, new MinMax(450f, 500f), 315f, 1f, 100f, 0f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 250f), 100f, 60f, 400f, 200f, 160f, 60f, 1f, 1f, new MinMax(1f, 2f), 335f, 55f, 0f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(1f, 0.8f), 8, 37f, 12f, new MinMax(450f, 450f), 0f, 9999f, 0f, 125f, 0f, 0f, new float[]
					{
						225f,
						-225f
					}, -3), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1800f, 2200f), new MinMax(300f, 400f), 7000f, new MinMax(0.5f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(500f, 600f, new string[]
					{
						"A,A,A,B,B,B,C,C,C"
					}, new MinMax(6f, 6.5f), 5, new MinMax(45f, 70f)), new LevelProperties.RetroArcade.Missile("L,L,R,R,L", new MinMax(1.5f, 2.3f), 2f, 10f, 4f, 150f, 300f), new LevelProperties.RetroArcade.Chasers(300f, 2f, 5f, new MinMax(2f, 3f), 400f, 1.2f, 8f, new MinMax(1f, 2f), 500f, 2.2f, 10f, new MinMax(2f, 3f), new string[]
					{
						"G,G,Y,G,Y,Y,O,O,O,G,Y,G,Y,G,Y"
					}, new string[]
					{
						"1,1,0.5,2,1,1.5,1"
					}, 2f, new string[]
					{
						"2,5,7,6,1,3,0,4,7,5,0,6,1,4,3"
					}), new LevelProperties.RetroArcade.Sheriff(300f, 20f, new string[]
					{
						"3,2.5,3,3.5,4"
					}, 0.1f, new string[]
					{
						"G,Y,O"
					}, 400f), new LevelProperties.RetroArcade.Snake(200f), new LevelProperties.RetroArcade.Tentacle(100f, 200f, new string[]
					{
						"5,6,3,4,1,2,7,4,6,0,7,3,2,1"
					}, 8), new LevelProperties.RetroArcade.Traffic(200f, 0.5f, new string[]
					{
						"D1,D3,B1",
						"A3,C2,C0"
					}, 1f)));
					list.Add(new LevelProperties.RetroArcade.State(0.52f, new LevelProperties.RetroArcade.Pattern[][]
					{
						new LevelProperties.RetroArcade.Pattern[0]
					}, LevelProperties.RetroArcade.States.Robots, new LevelProperties.RetroArcade.Aliens(1f, 4.5f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 9999f, new string[]
					{
						"1,5,2,6,4,3",
						"5,1,4,2,6,3",
						"2,6,4,3,5,1",
						"4,6,1,3,5,2"
					}, 300f, new MinMax(4f, 6f), 1, 300f, 25f, 100f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.7f, 0.08f, new int[]
					{
						1,
						1,
						1,
						2,
						2,
						2,
						3,
						3,
						3
					}, 400f, 2, new MinMax(0.3f, 0.8f), 1, 450f, new MinMax(125f, 250f), 7, 25f, 100f), new LevelProperties.RetroArcade.Robots(15f, "2,3.1,2.5,2.8,2.5,2,3,2.7,2,3,3.3,2.2,2.65,2.4,3.2,1.5,2.8,2,3", 260f, false, 125f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 9999f, 160f, 80f, new MinMax(5f, 7f), 1, 225f, 1f, 25f, 100f, new string[]
					{
						"1,3"
					}, new float[]
					{
						-213f,
						0f,
						213f
					}, new string[]
					{
						"1-2-2,2-1-1"
					}), new LevelProperties.RetroArcade.PaddleShip(16f, new MinMax(450f, 500f), 315f, 1f, 100f, 0f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 250f), 100f, 60f, 400f, 200f, 160f, 60f, 1f, 1f, new MinMax(1f, 2f), 335f, 55f, 0f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(1f, 0.8f), 8, 37f, 12f, new MinMax(450f, 450f), 0f, 9999f, 0f, 125f, 0f, 0f, new float[]
					{
						225f,
						-225f
					}, -3), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1800f, 2200f), new MinMax(300f, 400f), 7000f, new MinMax(0.5f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(500f, 600f, new string[]
					{
						"A,A,A,B,B,B,C,C,C"
					}, new MinMax(6f, 6.5f), 5, new MinMax(45f, 70f)), new LevelProperties.RetroArcade.Missile("L,L,R,R,L", new MinMax(1.5f, 2.3f), 2f, 10f, 4f, 150f, 300f), new LevelProperties.RetroArcade.Chasers(300f, 2f, 5f, new MinMax(2f, 3f), 400f, 1.2f, 8f, new MinMax(1f, 2f), 500f, 2.2f, 10f, new MinMax(2f, 3f), new string[]
					{
						"G,G,Y,G,Y,Y,O,O,O,G,Y,G,Y,G,Y"
					}, new string[]
					{
						"1,1,0.5,2,1,1.5,1"
					}, 2f, new string[]
					{
						"2,5,7,6,1,3,0,4,7,5,0,6,1,4,3"
					}), new LevelProperties.RetroArcade.Sheriff(300f, 20f, new string[]
					{
						"3,2.5,3,3.5,4"
					}, 0.1f, new string[]
					{
						"G,Y,O"
					}, 400f), new LevelProperties.RetroArcade.Snake(200f), new LevelProperties.RetroArcade.Tentacle(100f, 200f, new string[]
					{
						"5,6,3,4,1,2,7,4,6,0,7,3,2,1"
					}, 8), new LevelProperties.RetroArcade.Traffic(200f, 0.5f, new string[]
					{
						"D1,D3,B1",
						"A3,C2,C0"
					}, 1f)));
					list.Add(new LevelProperties.RetroArcade.State(0.44f, new LevelProperties.RetroArcade.Pattern[][]
					{
						new LevelProperties.RetroArcade.Pattern[0]
					}, LevelProperties.RetroArcade.States.UFO, new LevelProperties.RetroArcade.Aliens(1f, 4.5f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 9999f, new string[]
					{
						"1,5,2,6,4,3",
						"5,1,4,2,6,3",
						"2,6,4,3,5,1",
						"4,6,1,3,5,2"
					}, 300f, new MinMax(4f, 6f), 1, 300f, 25f, 100f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.7f, 0.08f, new int[]
					{
						1,
						1,
						1,
						2,
						2,
						2,
						3,
						3,
						3
					}, 400f, 2, new MinMax(0.3f, 0.8f), 1, 450f, new MinMax(125f, 250f), 7, 25f, 100f), new LevelProperties.RetroArcade.Robots(15f, "2,3.1,2.5,2.8,2.5,2,3,2.7,2,3,3.3,2.2,2.65,2.4,3.2,1.5,2.8,2,3", 260f, false, 125f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 9999f, 160f, 80f, new MinMax(5f, 7f), 1, 225f, 1f, 25f, 100f, new string[]
					{
						"1,3"
					}, new float[]
					{
						-213f,
						0f,
						213f
					}, new string[]
					{
						"1-2-2,2-1-1"
					}), new LevelProperties.RetroArcade.PaddleShip(16f, new MinMax(450f, 500f), 315f, 1f, 100f, 0f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 250f), 100f, 60f, 400f, 200f, 160f, 60f, 1f, 1f, new MinMax(1f, 2f), 335f, 55f, 0f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(1f, 0.8f), 8, 37f, 12f, new MinMax(450f, 450f), 0f, 9999f, 0f, 125f, 0f, 0f, new float[]
					{
						225f,
						-225f
					}, -3), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1800f, 2200f), new MinMax(300f, 400f), 7000f, new MinMax(0.5f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(500f, 600f, new string[]
					{
						"A,A,A,B,B,B,C,C,C"
					}, new MinMax(6f, 6.5f), 5, new MinMax(45f, 70f)), new LevelProperties.RetroArcade.Missile("L,L,R,R,L", new MinMax(1.5f, 2.3f), 2f, 10f, 4f, 150f, 300f), new LevelProperties.RetroArcade.Chasers(300f, 2f, 5f, new MinMax(2f, 3f), 400f, 1.2f, 8f, new MinMax(1f, 2f), 500f, 2.2f, 10f, new MinMax(2f, 3f), new string[]
					{
						"G,G,Y,G,Y,Y,O,O,O,G,Y,G,Y,G,Y"
					}, new string[]
					{
						"1,1,0.5,2,1,1.5,1"
					}, 2f, new string[]
					{
						"2,5,7,6,1,3,0,4,7,5,0,6,1,4,3"
					}), new LevelProperties.RetroArcade.Sheriff(300f, 20f, new string[]
					{
						"3,2.5,3,3.5,4"
					}, 0.1f, new string[]
					{
						"G,Y,O"
					}, 400f), new LevelProperties.RetroArcade.Snake(200f), new LevelProperties.RetroArcade.Tentacle(100f, 200f, new string[]
					{
						"5,6,3,4,1,2,7,4,6,0,7,3,2,1"
					}, 8), new LevelProperties.RetroArcade.Traffic(200f, 0.5f, new string[]
					{
						"D1,D3,B1",
						"A3,C2,C0"
					}, 1f)));
					list.Add(new LevelProperties.RetroArcade.State(0.35f, new LevelProperties.RetroArcade.Pattern[][]
					{
						new LevelProperties.RetroArcade.Pattern[0]
					}, LevelProperties.RetroArcade.States.Aliens, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(2f, 2.5f), 0.05f, 9999f, new string[]
					{
						"3,5,2,6,1,7,4,8,9",
						"7,5,2,4,9,3,8,6,1",
						"8,5,9,1,6,2,7,3,4",
						"2,8,6,1,3,9,7,5,4"
					}, 300f, new MinMax(6f, 8f), 2, 350f, 25f, 100f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.7f, 0.08f, new int[]
					{
						1,
						1,
						1,
						2,
						2,
						2,
						3,
						3,
						3
					}, 400f, 2, new MinMax(0.3f, 0.8f), 1, 450f, new MinMax(125f, 250f), 7, 25f, 100f), new LevelProperties.RetroArcade.Robots(15f, "2,3.1,2.5,2.8,2.5,2,3,2.7,2,3,3.3,2.2,2.65,2.4,3.2,1.5,2.8,2,3", 260f, false, 125f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 9999f, 160f, 80f, new MinMax(5f, 7f), 1, 225f, 1f, 25f, 100f, new string[]
					{
						"1,3"
					}, new float[]
					{
						-213f,
						0f,
						213f
					}, new string[]
					{
						"1-2-2,2-1-1"
					}), new LevelProperties.RetroArcade.PaddleShip(16f, new MinMax(450f, 500f), 315f, 1f, 100f, 0f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 250f), 100f, 60f, 400f, 200f, 160f, 60f, 1f, 1f, new MinMax(1f, 2f), 335f, 55f, 0f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(1f, 0.8f), 8, 37f, 12f, new MinMax(450f, 450f), 0f, 9999f, 0f, 125f, 0f, 0f, new float[]
					{
						225f,
						-225f
					}, -3), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1800f, 2200f), new MinMax(300f, 400f), 7000f, new MinMax(0.5f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(500f, 600f, new string[]
					{
						"A,A,A,B,B,B,C,C,C"
					}, new MinMax(6f, 6.5f), 5, new MinMax(45f, 70f)), new LevelProperties.RetroArcade.Missile("L,L,R,R,L", new MinMax(1.5f, 2.3f), 2f, 10f, 4f, 150f, 300f), new LevelProperties.RetroArcade.Chasers(300f, 2f, 5f, new MinMax(2f, 3f), 400f, 1.2f, 8f, new MinMax(1f, 2f), 500f, 2.2f, 10f, new MinMax(2f, 3f), new string[]
					{
						"G,G,Y,G,Y,Y,O,O,O,G,Y,G,Y,G,Y"
					}, new string[]
					{
						"1,1,0.5,2,1,1.5,1"
					}, 2f, new string[]
					{
						"2,5,7,6,1,3,0,4,7,5,0,6,1,4,3"
					}), new LevelProperties.RetroArcade.Sheriff(300f, 20f, new string[]
					{
						"3,2.5,3,3.5,4"
					}, 0.1f, new string[]
					{
						"G,Y,O"
					}, 400f), new LevelProperties.RetroArcade.Snake(200f), new LevelProperties.RetroArcade.Tentacle(100f, 200f, new string[]
					{
						"5,6,3,4,1,2,7,4,6,0,7,3,2,1"
					}, 8), new LevelProperties.RetroArcade.Traffic(200f, 0.5f, new string[]
					{
						"D1,D3,B1",
						"A3,C2,C0"
					}, 1f)));
					list.Add(new LevelProperties.RetroArcade.State(0.26f, new LevelProperties.RetroArcade.Pattern[][]
					{
						new LevelProperties.RetroArcade.Pattern[0]
					}, LevelProperties.RetroArcade.States.Caterpillar, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(2f, 2.5f), 0.05f, 9999f, new string[]
					{
						"3,5,2,6,1,7,4,8,9",
						"7,5,2,4,9,3,8,6,1",
						"8,5,9,1,6,2,7,3,4",
						"2,8,6,1,3,9,7,5,4"
					}, 300f, new MinMax(6f, 8f), 2, 350f, 25f, 100f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.65f, 0.05f, new int[]
					{
						1,
						1,
						1,
						2,
						2,
						2,
						3,
						3,
						3,
						1,
						1,
						1
					}, 400f, 2, new MinMax(0.5f, 0.8f), 2, 500f, new MinMax(125f, 250f), 7, 25f, 100f), new LevelProperties.RetroArcade.Robots(15f, "2,3.1,2.5,2.8,2.5,2,3,2.7,2,3,3.3,2.2,2.65,2.4,3.2,1.5,2.8,2,3", 260f, false, 125f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 9999f, 160f, 80f, new MinMax(5f, 7f), 1, 225f, 1f, 25f, 100f, new string[]
					{
						"1,3"
					}, new float[]
					{
						-213f,
						0f,
						213f
					}, new string[]
					{
						"1-2-2,2-1-1"
					}), new LevelProperties.RetroArcade.PaddleShip(16f, new MinMax(450f, 500f), 315f, 1f, 100f, 0f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 250f), 100f, 60f, 400f, 200f, 160f, 60f, 1f, 1f, new MinMax(1f, 2f), 335f, 55f, 0f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(1f, 0.8f), 8, 37f, 12f, new MinMax(450f, 450f), 0f, 9999f, 0f, 125f, 0f, 0f, new float[]
					{
						225f,
						-225f
					}, -3), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1800f, 2200f), new MinMax(300f, 400f), 7000f, new MinMax(0.5f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(500f, 600f, new string[]
					{
						"A,A,A,B,B,B,C,C,C"
					}, new MinMax(6f, 6.5f), 5, new MinMax(45f, 70f)), new LevelProperties.RetroArcade.Missile("L,L,R,R,L", new MinMax(1.5f, 2.3f), 2f, 10f, 4f, 150f, 300f), new LevelProperties.RetroArcade.Chasers(300f, 2f, 5f, new MinMax(2f, 3f), 400f, 1.2f, 8f, new MinMax(1f, 2f), 500f, 2.2f, 10f, new MinMax(2f, 3f), new string[]
					{
						"G,G,Y,G,Y,Y,O,O,O,G,Y,G,Y,G,Y"
					}, new string[]
					{
						"1,1,0.5,2,1,1.5,1"
					}, 2f, new string[]
					{
						"2,5,7,6,1,3,0,4,7,5,0,6,1,4,3"
					}), new LevelProperties.RetroArcade.Sheriff(300f, 20f, new string[]
					{
						"3,2.5,3,3.5,4"
					}, 0.1f, new string[]
					{
						"G,Y,O"
					}, 400f), new LevelProperties.RetroArcade.Snake(200f), new LevelProperties.RetroArcade.Tentacle(100f, 200f, new string[]
					{
						"5,6,3,4,1,2,7,4,6,0,7,3,2,1"
					}, 8), new LevelProperties.RetroArcade.Traffic(200f, 0.5f, new string[]
					{
						"D1,D3,B1",
						"A3,C2,C0"
					}, 1f)));
					list.Add(new LevelProperties.RetroArcade.State(0.17f, new LevelProperties.RetroArcade.Pattern[][]
					{
						new LevelProperties.RetroArcade.Pattern[0]
					}, LevelProperties.RetroArcade.States.Robots, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(2f, 2.5f), 0.05f, 9999f, new string[]
					{
						"3,5,2,6,1,7,4,8,9",
						"7,5,2,4,9,3,8,6,1",
						"8,5,9,1,6,2,7,3,4",
						"2,8,6,1,3,9,7,5,4"
					}, 300f, new MinMax(6f, 8f), 2, 350f, 25f, 100f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.65f, 0.05f, new int[]
					{
						1,
						1,
						1,
						2,
						2,
						2,
						3,
						3,
						3,
						1,
						1,
						1
					}, 400f, 2, new MinMax(0.5f, 0.8f), 2, 500f, new MinMax(125f, 250f), 7, 25f, 100f), new LevelProperties.RetroArcade.Robots(15f, "2,3.6,2.5,3,2.5,2,3,3.2,2,4,3.3,2.2,3,2.4,3.2,1.5,2.8,2,3", 260f, false, 125f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 9999f, 170f, 80f, new MinMax(6f, 7f), 2, 250f, 1f, 25f, 100f, new string[]
					{
						"1,2,3"
					}, new float[]
					{
						213f,
						0f,
						-213f
					}, new string[]
					{
						"1-2-3,1-2-3,1-2-3"
					}), new LevelProperties.RetroArcade.PaddleShip(16f, new MinMax(450f, 500f), 315f, 1f, 100f, 0f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 250f), 100f, 60f, 400f, 200f, 160f, 60f, 1f, 1f, new MinMax(1f, 2f), 335f, 55f, 0f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(1f, 0.8f), 8, 37f, 12f, new MinMax(450f, 450f), 0f, 9999f, 0f, 125f, 0f, 0f, new float[]
					{
						225f,
						-225f
					}, -3), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1800f, 2200f), new MinMax(300f, 400f), 7000f, new MinMax(0.5f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(500f, 600f, new string[]
					{
						"A,A,A,B,B,B,C,C,C"
					}, new MinMax(6f, 6.5f), 5, new MinMax(45f, 70f)), new LevelProperties.RetroArcade.Missile("L,L,R,R,L", new MinMax(1.5f, 2.3f), 2f, 10f, 4f, 150f, 300f), new LevelProperties.RetroArcade.Chasers(300f, 2f, 5f, new MinMax(2f, 3f), 400f, 1.2f, 8f, new MinMax(1f, 2f), 500f, 2.2f, 10f, new MinMax(2f, 3f), new string[]
					{
						"G,G,Y,G,Y,Y,O,O,O,G,Y,G,Y,G,Y"
					}, new string[]
					{
						"1,1,0.5,2,1,1.5,1"
					}, 2f, new string[]
					{
						"2,5,7,6,1,3,0,4,7,5,0,6,1,4,3"
					}), new LevelProperties.RetroArcade.Sheriff(300f, 20f, new string[]
					{
						"3,2.5,3,3.5,4"
					}, 0.1f, new string[]
					{
						"G,Y,O"
					}, 400f), new LevelProperties.RetroArcade.Snake(200f), new LevelProperties.RetroArcade.Tentacle(100f, 200f, new string[]
					{
						"5,6,3,4,1,2,7,4,6,0,7,3,2,1"
					}, 8), new LevelProperties.RetroArcade.Traffic(200f, 0.5f, new string[]
					{
						"D1,D3,B1",
						"A3,C2,C0"
					}, 1f)));
					list.Add(new LevelProperties.RetroArcade.State(0.08f, new LevelProperties.RetroArcade.Pattern[][]
					{
						new LevelProperties.RetroArcade.Pattern[0]
					}, LevelProperties.RetroArcade.States.QShip, new LevelProperties.RetroArcade.Aliens(1f, 5.9f, 0.2f, 9, new MinMax(2f, 2.5f), 0.05f, 9999f, new string[]
					{
						"3,5,2,6,1,7,4,8,9",
						"7,5,2,4,9,3,8,6,1",
						"8,5,9,1,6,2,7,3,4",
						"2,8,6,1,3,9,7,5,4"
					}, 300f, new MinMax(6f, 8f), 2, 350f, 25f, 100f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.65f, 0.05f, new int[]
					{
						1,
						1,
						1,
						2,
						2,
						2,
						3,
						3,
						3,
						1,
						1,
						1
					}, 400f, 2, new MinMax(0.5f, 0.8f), 2, 500f, new MinMax(125f, 250f), 7, 25f, 100f), new LevelProperties.RetroArcade.Robots(15f, "2,3.6,2.5,3,2.5,2,3,3.2,2,4,3.3,2.2,3,2.4,3.2,1.5,2.8,2,3", 260f, false, 125f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 9999f, 170f, 80f, new MinMax(6f, 7f), 2, 250f, 1f, 25f, 100f, new string[]
					{
						"1,2,3"
					}, new float[]
					{
						213f,
						0f,
						-213f
					}, new string[]
					{
						"1-2-3,1-2-3,1-2-3"
					}), new LevelProperties.RetroArcade.PaddleShip(16f, new MinMax(450f, 500f), 315f, 1f, 100f, 0f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(100f, 250f), 100f, 60f, 400f, 200f, 160f, 60f, 1f, 1f, new MinMax(1f, 2f), 335f, 55f, 0f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(1f, 0.8f), 8, 37f, 12f, new MinMax(450f, 450f), 0f, 9999f, 0f, 125f, 0f, 0f, new float[]
					{
						225f,
						-225f
					}, -3), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1800f, 2200f), new MinMax(300f, 400f), 7000f, new MinMax(0.5f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(500f, 600f, new string[]
					{
						"A,A,A,B,B,B,C,C,C"
					}, new MinMax(6f, 6.5f), 5, new MinMax(45f, 70f)), new LevelProperties.RetroArcade.Missile("L,L,R,R,L", new MinMax(1.5f, 2.3f), 2f, 10f, 4f, 150f, 300f), new LevelProperties.RetroArcade.Chasers(300f, 2f, 5f, new MinMax(2f, 3f), 400f, 1.2f, 8f, new MinMax(1f, 2f), 500f, 2.2f, 10f, new MinMax(2f, 3f), new string[]
					{
						"G,G,Y,G,Y,Y,O,O,O,G,Y,G,Y,G,Y"
					}, new string[]
					{
						"1,1,0.5,2,1,1.5,1"
					}, 2f, new string[]
					{
						"2,5,7,6,1,3,0,4,7,5,0,6,1,4,3"
					}), new LevelProperties.RetroArcade.Sheriff(300f, 20f, new string[]
					{
						"3,2.5,3,3.5,4"
					}, 0.1f, new string[]
					{
						"G,Y,O"
					}, 400f), new LevelProperties.RetroArcade.Snake(200f), new LevelProperties.RetroArcade.Tentacle(100f, 200f, new string[]
					{
						"5,6,3,4,1,2,7,4,6,0,7,3,2,1"
					}, 8), new LevelProperties.RetroArcade.Traffic(200f, 0.5f, new string[]
					{
						"D1,D3,B1",
						"A3,C2,C0"
					}, 1f)));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.RetroArcade.State(10f, new LevelProperties.RetroArcade.Pattern[][]
				{
					new LevelProperties.RetroArcade.Pattern[1]
				}, LevelProperties.RetroArcade.States.Main, new LevelProperties.RetroArcade.Aliens(1f, 5.6f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 8f, new string[]
				{
					"1,2,5,6,4,3,6",
					"5,3,4,1,6,2,4",
					"3,6,1,2,4,5,2"
				}, 225f, new MinMax(6f, 8f), 1, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.5f, 0.05f, new int[]
				{
					1,
					1,
					1,
					2,
					2,
					2
				}, 400f, 1, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 6, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "3.6,2.5,3,2.5,2,3.8,3.2,3,3.3,2.2,3,2.4,3.2", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 9f), 1, 150f, 1f, 1f, 5f, new string[]
				{
					"2",
					"1,3",
					"1,2,3"
				}, new float[]
				{
					-213f,
					0f,
					213f
				}, new string[]
				{
					"1-1-1",
					"1-2-2,2-2-1",
					"1-2-3,1-2-3,1-2-3"
				}), new LevelProperties.RetroArcade.PaddleShip(40f, new MinMax(100f, 150f), 2.75f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(80f, 220f), 120f, 60f, 250f, 200f, 140f, 180f, 10f, 1f, new MinMax(1f, 2f), 350f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(3f, 2f), 8, 137f, 20f, new MinMax(200f, 400f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
				{
					250f,
					-250f
				}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
				list.Add(new LevelProperties.RetroArcade.State(0.92f, new LevelProperties.RetroArcade.Pattern[][]
				{
					new LevelProperties.RetroArcade.Pattern[0]
				}, LevelProperties.RetroArcade.States.Caterpillar, new LevelProperties.RetroArcade.Aliens(1f, 5.6f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 8f, new string[]
				{
					"1,2,5,6,4,3,6",
					"5,3,4,1,6,2,4",
					"3,6,1,2,4,5,2"
				}, 225f, new MinMax(6f, 8f), 1, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.5f, 0.05f, new int[]
				{
					1,
					1,
					1,
					2,
					2,
					2
				}, 400f, 1, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 6, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "3.6,2.5,3,2.5,2,3.8,3.2,3,3.3,2.2,3,2.4,3.2", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 9f), 1, 150f, 1f, 1f, 5f, new string[]
				{
					"2",
					"1,3",
					"1,2,3"
				}, new float[]
				{
					-213f,
					0f,
					213f
				}, new string[]
				{
					"1-1-1",
					"1-2-2,2-2-1",
					"1-2-3,1-2-3,1-2-3"
				}), new LevelProperties.RetroArcade.PaddleShip(40f, new MinMax(100f, 150f), 2.75f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(80f, 220f), 120f, 60f, 250f, 200f, 140f, 180f, 10f, 1f, new MinMax(1f, 2f), 350f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(3f, 2f), 8, 137f, 20f, new MinMax(200f, 400f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
				{
					250f,
					-250f
				}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
				list.Add(new LevelProperties.RetroArcade.State(0.83f, new LevelProperties.RetroArcade.Pattern[][]
				{
					new LevelProperties.RetroArcade.Pattern[0]
				}, LevelProperties.RetroArcade.States.Robots, new LevelProperties.RetroArcade.Aliens(1f, 5.6f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 8f, new string[]
				{
					"1,2,5,6,4,3,6",
					"5,3,4,1,6,2,4",
					"3,6,1,2,4,5,2"
				}, 225f, new MinMax(6f, 8f), 1, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.5f, 0.05f, new int[]
				{
					1,
					1,
					1,
					2,
					2,
					2
				}, 400f, 1, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 6, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "3.6,2.5,3,2.5,2,3.8,3.2,3,3.3,2.2,3,2.4,3.2", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 9f), 1, 150f, 1f, 1f, 5f, new string[]
				{
					"2",
					"1,3",
					"1,2,3"
				}, new float[]
				{
					-213f,
					0f,
					213f
				}, new string[]
				{
					"1-1-1",
					"1-2-2,2-2-1",
					"1-2-3,1-2-3,1-2-3"
				}), new LevelProperties.RetroArcade.PaddleShip(40f, new MinMax(100f, 150f), 2.75f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(80f, 220f), 120f, 60f, 250f, 200f, 140f, 180f, 10f, 1f, new MinMax(1f, 2f), 350f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(3f, 2f), 8, 137f, 20f, new MinMax(200f, 400f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
				{
					250f,
					-250f
				}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
				list.Add(new LevelProperties.RetroArcade.State(0.75f, new LevelProperties.RetroArcade.Pattern[][]
				{
					new LevelProperties.RetroArcade.Pattern[0]
				}, LevelProperties.RetroArcade.States.PaddleShip, new LevelProperties.RetroArcade.Aliens(1f, 5.6f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 8f, new string[]
				{
					"1,2,5,6,4,3,6",
					"5,3,4,1,6,2,4",
					"3,6,1,2,4,5,2"
				}, 225f, new MinMax(6f, 8f), 1, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.5f, 0.05f, new int[]
				{
					1,
					1,
					1,
					2,
					2,
					2
				}, 400f, 1, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 6, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "3.6,2.5,3,2.5,2,3.8,3.2,3,3.3,2.2,3,2.4,3.2", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 9f), 1, 150f, 1f, 1f, 5f, new string[]
				{
					"2",
					"1,3",
					"1,2,3"
				}, new float[]
				{
					-213f,
					0f,
					213f
				}, new string[]
				{
					"1-1-1",
					"1-2-2,2-2-1",
					"1-2-3,1-2-3,1-2-3"
				}), new LevelProperties.RetroArcade.PaddleShip(40f, new MinMax(100f, 150f), 2.75f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(80f, 220f), 120f, 60f, 250f, 200f, 140f, 180f, 10f, 1f, new MinMax(1f, 2f), 350f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(3f, 2f), 8, 137f, 20f, new MinMax(200f, 400f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
				{
					250f,
					-250f
				}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
				list.Add(new LevelProperties.RetroArcade.State(0.63f, new LevelProperties.RetroArcade.Pattern[][]
				{
					new LevelProperties.RetroArcade.Pattern[0]
				}, LevelProperties.RetroArcade.States.Aliens, new LevelProperties.RetroArcade.Aliens(1f, 5.6f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 8f, new string[]
				{
					"1,2,5,6,4,3,6",
					"5,3,4,1,6,2,4",
					"3,6,1,2,4,5,2"
				}, 225f, new MinMax(6f, 8f), 1, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.5f, 0.05f, new int[]
				{
					1,
					1,
					1,
					2,
					2,
					2
				}, 400f, 1, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 6, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "3.6,2.5,3,2.5,2,3.8,3.2,3,3.3,2.2,3,2.4,3.2", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 9f), 1, 150f, 1f, 1f, 5f, new string[]
				{
					"2",
					"1,3",
					"1,2,3"
				}, new float[]
				{
					-213f,
					0f,
					213f
				}, new string[]
				{
					"1-1-1",
					"1-2-2,2-2-1",
					"1-2-3,1-2-3,1-2-3"
				}), new LevelProperties.RetroArcade.PaddleShip(40f, new MinMax(100f, 150f), 2.75f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(80f, 220f), 120f, 60f, 250f, 200f, 140f, 180f, 10f, 1f, new MinMax(1f, 2f), 350f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(3f, 2f), 8, 137f, 20f, new MinMax(200f, 400f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
				{
					250f,
					-250f
				}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
				list.Add(new LevelProperties.RetroArcade.State(0.58f, new LevelProperties.RetroArcade.Pattern[][]
				{
					new LevelProperties.RetroArcade.Pattern[0]
				}, LevelProperties.RetroArcade.States.Caterpillar, new LevelProperties.RetroArcade.Aliens(1f, 5.6f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 8f, new string[]
				{
					"1,2,5,6,4,3,6",
					"5,3,4,1,6,2,4",
					"3,6,1,2,4,5,2"
				}, 225f, new MinMax(6f, 8f), 1, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.5f, 0.05f, new int[]
				{
					1,
					1,
					1,
					2,
					2,
					2
				}, 400f, 1, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 6, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "3.6,2.5,3,2.5,2,3.8,3.2,3,3.3,2.2,3,2.4,3.2", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 9f), 1, 150f, 1f, 1f, 5f, new string[]
				{
					"2",
					"1,3",
					"1,2,3"
				}, new float[]
				{
					-213f,
					0f,
					213f
				}, new string[]
				{
					"1-1-1",
					"1-2-2,2-2-1",
					"1-2-3,1-2-3,1-2-3"
				}), new LevelProperties.RetroArcade.PaddleShip(40f, new MinMax(100f, 150f), 2.75f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(80f, 220f), 120f, 60f, 250f, 200f, 140f, 180f, 10f, 1f, new MinMax(1f, 2f), 350f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(3f, 2f), 8, 137f, 20f, new MinMax(200f, 400f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
				{
					250f,
					-250f
				}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
				list.Add(new LevelProperties.RetroArcade.State(0.5f, new LevelProperties.RetroArcade.Pattern[][]
				{
					new LevelProperties.RetroArcade.Pattern[0]
				}, LevelProperties.RetroArcade.States.Robots, new LevelProperties.RetroArcade.Aliens(1f, 5.6f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 8f, new string[]
				{
					"1,2,5,6,4,3,6",
					"5,3,4,1,6,2,4",
					"3,6,1,2,4,5,2"
				}, 225f, new MinMax(6f, 8f), 1, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.5f, 0.05f, new int[]
				{
					1,
					1,
					1,
					2,
					2,
					2
				}, 400f, 1, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 6, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "3.6,2.5,3,2.5,2,3.8,3.2,3,3.3,2.2,3,2.4,3.2", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 9f), 1, 150f, 1f, 1f, 5f, new string[]
				{
					"2",
					"1,3",
					"1,2,3"
				}, new float[]
				{
					-213f,
					0f,
					213f
				}, new string[]
				{
					"1-1-1",
					"1-2-2,2-2-1",
					"1-2-3,1-2-3,1-2-3"
				}), new LevelProperties.RetroArcade.PaddleShip(40f, new MinMax(100f, 150f), 2.75f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(80f, 220f), 120f, 60f, 250f, 200f, 140f, 180f, 10f, 1f, new MinMax(1f, 2f), 350f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(3f, 2f), 8, 137f, 20f, new MinMax(200f, 400f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
				{
					250f,
					-250f
				}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
				list.Add(new LevelProperties.RetroArcade.State(0.41f, new LevelProperties.RetroArcade.Pattern[][]
				{
					new LevelProperties.RetroArcade.Pattern[0]
				}, LevelProperties.RetroArcade.States.UFO, new LevelProperties.RetroArcade.Aliens(1f, 5.6f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 8f, new string[]
				{
					"1,2,5,6,4,3,6",
					"5,3,4,1,6,2,4",
					"3,6,1,2,4,5,2"
				}, 225f, new MinMax(6f, 8f), 1, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.5f, 0.05f, new int[]
				{
					1,
					1,
					1,
					2,
					2,
					2
				}, 400f, 1, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 6, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "3.6,2.5,3,2.5,2,3.8,3.2,3,3.3,2.2,3,2.4,3.2", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 9f), 1, 150f, 1f, 1f, 5f, new string[]
				{
					"2",
					"1,3",
					"1,2,3"
				}, new float[]
				{
					-213f,
					0f,
					213f
				}, new string[]
				{
					"1-1-1",
					"1-2-2,2-2-1",
					"1-2-3,1-2-3,1-2-3"
				}), new LevelProperties.RetroArcade.PaddleShip(40f, new MinMax(100f, 150f), 2.75f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(80f, 220f), 120f, 60f, 250f, 200f, 140f, 180f, 10f, 1f, new MinMax(1f, 2f), 350f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(3f, 2f), 8, 137f, 20f, new MinMax(200f, 400f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
				{
					250f,
					-250f
				}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
				list.Add(new LevelProperties.RetroArcade.State(0.33f, new LevelProperties.RetroArcade.Pattern[][]
				{
					new LevelProperties.RetroArcade.Pattern[0]
				}, LevelProperties.RetroArcade.States.Aliens, new LevelProperties.RetroArcade.Aliens(1f, 5.6f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 8f, new string[]
				{
					"1,2,5,6,4,3,6",
					"5,3,4,1,6,2,4",
					"3,6,1,2,4,5,2"
				}, 225f, new MinMax(6f, 8f), 1, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.5f, 0.05f, new int[]
				{
					1,
					1,
					1,
					2,
					2,
					2
				}, 400f, 1, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 6, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "3.6,2.5,3,2.5,2,3.8,3.2,3,3.3,2.2,3,2.4,3.2", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 9f), 1, 150f, 1f, 1f, 5f, new string[]
				{
					"2",
					"1,3",
					"1,2,3"
				}, new float[]
				{
					-213f,
					0f,
					213f
				}, new string[]
				{
					"1-1-1",
					"1-2-2,2-2-1",
					"1-2-3,1-2-3,1-2-3"
				}), new LevelProperties.RetroArcade.PaddleShip(40f, new MinMax(100f, 150f), 2.75f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(80f, 220f), 120f, 60f, 250f, 200f, 140f, 180f, 10f, 1f, new MinMax(1f, 2f), 350f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(3f, 2f), 8, 137f, 20f, new MinMax(200f, 400f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
				{
					250f,
					-250f
				}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
				list.Add(new LevelProperties.RetroArcade.State(0.25f, new LevelProperties.RetroArcade.Pattern[][]
				{
					new LevelProperties.RetroArcade.Pattern[0]
				}, LevelProperties.RetroArcade.States.Caterpillar, new LevelProperties.RetroArcade.Aliens(1f, 5.6f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 8f, new string[]
				{
					"1,2,5,6,4,3,6",
					"5,3,4,1,6,2,4",
					"3,6,1,2,4,5,2"
				}, 225f, new MinMax(6f, 8f), 1, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.5f, 0.05f, new int[]
				{
					1,
					1,
					1,
					2,
					2,
					2
				}, 400f, 1, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 6, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "3.6,2.5,3,2.5,2,3.8,3.2,3,3.3,2.2,3,2.4,3.2", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 9f), 1, 150f, 1f, 1f, 5f, new string[]
				{
					"2",
					"1,3",
					"1,2,3"
				}, new float[]
				{
					-213f,
					0f,
					213f
				}, new string[]
				{
					"1-1-1",
					"1-2-2,2-2-1",
					"1-2-3,1-2-3,1-2-3"
				}), new LevelProperties.RetroArcade.PaddleShip(40f, new MinMax(100f, 150f), 2.75f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(80f, 220f), 120f, 60f, 250f, 200f, 140f, 180f, 10f, 1f, new MinMax(1f, 2f), 350f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(3f, 2f), 8, 137f, 20f, new MinMax(200f, 400f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
				{
					250f,
					-250f
				}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
				list.Add(new LevelProperties.RetroArcade.State(0.16f, new LevelProperties.RetroArcade.Pattern[][]
				{
					new LevelProperties.RetroArcade.Pattern[0]
				}, LevelProperties.RetroArcade.States.Robots, new LevelProperties.RetroArcade.Aliens(1f, 5.6f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 8f, new string[]
				{
					"1,2,5,6,4,3,6",
					"5,3,4,1,6,2,4",
					"3,6,1,2,4,5,2"
				}, 225f, new MinMax(6f, 8f), 1, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.5f, 0.05f, new int[]
				{
					1,
					1,
					1,
					2,
					2,
					2
				}, 400f, 1, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 6, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "3.6,2.5,3,2.5,2,3.8,3.2,3,3.3,2.2,3,2.4,3.2", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 9f), 1, 150f, 1f, 1f, 5f, new string[]
				{
					"2",
					"1,3",
					"1,2,3"
				}, new float[]
				{
					-213f,
					0f,
					213f
				}, new string[]
				{
					"1-1-1",
					"1-2-2,2-2-1",
					"1-2-3,1-2-3,1-2-3"
				}), new LevelProperties.RetroArcade.PaddleShip(40f, new MinMax(100f, 150f), 2.75f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(80f, 220f), 120f, 60f, 250f, 200f, 140f, 180f, 10f, 1f, new MinMax(1f, 2f), 350f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(3f, 2f), 8, 137f, 20f, new MinMax(200f, 400f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
				{
					250f,
					-250f
				}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
				list.Add(new LevelProperties.RetroArcade.State(0.08f, new LevelProperties.RetroArcade.Pattern[][]
				{
					new LevelProperties.RetroArcade.Pattern[0]
				}, LevelProperties.RetroArcade.States.QShip, new LevelProperties.RetroArcade.Aliens(1f, 5.6f, 0.2f, 6, new MinMax(2f, 2.5f), 0.05f, 8f, new string[]
				{
					"1,2,5,6,4,3,6",
					"5,3,4,1,6,2,4",
					"3,6,1,2,4,5,2"
				}, 225f, new MinMax(6f, 8f), 1, 200f, 1f, 5f), new LevelProperties.RetroArcade.Caterpillar(1f, 1.5f, 0.05f, new int[]
				{
					1,
					1,
					1,
					2,
					2,
					2
				}, 400f, 1, new MinMax(0.3f, 0.8f), 1, 400f, new MinMax(125f, 250f), 6, 1f, 5f), new LevelProperties.RetroArcade.Robots(15f, "3.6,2.5,3,2.5,2,3.8,3.2,3,3.3,2.2,3,2.4,3.2", 250f, false, 100f, new MinMax(100f, 200f), 1f, new MinMax(9998f, 9999f), 150f, 150f, 80f, new MinMax(6f, 9f), 1, 150f, 1f, 1f, 5f, new string[]
				{
					"2",
					"1,3",
					"1,2,3"
				}, new float[]
				{
					-213f,
					0f,
					213f
				}, new string[]
				{
					"1-1-1",
					"1-2-2,2-2-1",
					"1-2-3,1-2-3,1-2-3"
				}), new LevelProperties.RetroArcade.PaddleShip(40f, new MinMax(100f, 150f), 2.75f, 3.6f, 1f, 5f), new LevelProperties.RetroArcade.QShip(100f, 3, new MinMax(80f, 220f), 120f, 60f, 250f, 200f, 140f, 180f, 10f, 1f, new MinMax(1f, 2f), 350f, 1f, 5f), new LevelProperties.RetroArcade.UFO(225f, new MinMax(3f, 2f), 8, 137f, 20f, new MinMax(200f, 400f), 200f, 0.5f, 150f, 1f, 5f, 0f, new float[]
				{
					250f,
					-250f
				}, -7), new LevelProperties.RetroArcade.Toad(12f, new MinMax(1f, 3f), new MinMax(0f, 1f), 0.2f, new MinMax(0f, 1f), 1f, 5f), new LevelProperties.RetroArcade.Worm(new MinMax(100f, 400f), 300f, 0.75f, 500f, 6f, 200f, 1f, 5f), new LevelProperties.RetroArcade.General(2f), new LevelProperties.RetroArcade.Bouncy(0f, 0f, new string[0], new MinMax(0f, 1f), 0, new MinMax(0f, 1f)), new LevelProperties.RetroArcade.Missile(string.Empty, new MinMax(0f, 1f), 0f, 0f, 0f, 0f, 0f), new LevelProperties.RetroArcade.Chasers(0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, new MinMax(0f, 1f), new string[0], new string[0], 0f, new string[0]), new LevelProperties.RetroArcade.Sheriff(0f, 0f, new string[0], 0f, new string[0], 0f), new LevelProperties.RetroArcade.Snake(0f), new LevelProperties.RetroArcade.Tentacle(0f, 0f, new string[0], 0), new LevelProperties.RetroArcade.Traffic(0f, 0f, new string[0], 0f)));
			}
			return new LevelProperties.RetroArcade(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200023D RID: 573
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700011A RID: 282
			// (get) Token: 0x06000682 RID: 1666 RVA: 0x0003D6BF File Offset: 0x0003BABF
			// (set) Token: 0x06000683 RID: 1667 RVA: 0x0003D6C7 File Offset: 0x0003BAC7
			private protected LevelProperties.RetroArcade properties { protected get; private set; }

			// Token: 0x06000684 RID: 1668 RVA: 0x0003D6D0 File Offset: 0x0003BAD0
			public virtual void LevelInit(LevelProperties.RetroArcade properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000685 RID: 1669 RVA: 0x0003D6D9 File Offset: 0x0003BAD9
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200023E RID: 574
		public enum States
		{
			// Token: 0x04000C3A RID: 3130
			Main,
			// Token: 0x04000C3B RID: 3131
			Generic,
			// Token: 0x04000C3C RID: 3132
			Caterpillar,
			// Token: 0x04000C3D RID: 3133
			Robots,
			// Token: 0x04000C3E RID: 3134
			PaddleShip,
			// Token: 0x04000C3F RID: 3135
			QShip,
			// Token: 0x04000C40 RID: 3136
			UFO,
			// Token: 0x04000C41 RID: 3137
			Toad,
			// Token: 0x04000C42 RID: 3138
			Worm,
			// Token: 0x04000C43 RID: 3139
			Aliens,
			// Token: 0x04000C44 RID: 3140
			Bouncy,
			// Token: 0x04000C45 RID: 3141
			MissileMan,
			// Token: 0x04000C46 RID: 3142
			Chaser,
			// Token: 0x04000C47 RID: 3143
			Sheriff,
			// Token: 0x04000C48 RID: 3144
			Snake,
			// Token: 0x04000C49 RID: 3145
			Tentacle,
			// Token: 0x04000C4A RID: 3146
			Traffic,
			// Token: 0x04000C4B RID: 3147
			JetpackTest
		}

		// Token: 0x0200023F RID: 575
		public enum Pattern
		{
			// Token: 0x04000C4D RID: 3149
			Default,
			// Token: 0x04000C4E RID: 3150
			Uninitialized
		}

		// Token: 0x02000240 RID: 576
		public class State : AbstractLevelState<LevelProperties.RetroArcade.Pattern, LevelProperties.RetroArcade.States>
		{
			// Token: 0x06000686 RID: 1670 RVA: 0x0003D6DC File Offset: 0x0003BADC
			public State(float healthTrigger, LevelProperties.RetroArcade.Pattern[][] patterns, LevelProperties.RetroArcade.States stateName, LevelProperties.RetroArcade.Aliens aliens, LevelProperties.RetroArcade.Caterpillar caterpillar, LevelProperties.RetroArcade.Robots robots, LevelProperties.RetroArcade.PaddleShip paddleShip, LevelProperties.RetroArcade.QShip qShip, LevelProperties.RetroArcade.UFO uFO, LevelProperties.RetroArcade.Toad toad, LevelProperties.RetroArcade.Worm worm, LevelProperties.RetroArcade.General general, LevelProperties.RetroArcade.Bouncy bouncy, LevelProperties.RetroArcade.Missile missile, LevelProperties.RetroArcade.Chasers chasers, LevelProperties.RetroArcade.Sheriff sheriff, LevelProperties.RetroArcade.Snake snake, LevelProperties.RetroArcade.Tentacle tentacle, LevelProperties.RetroArcade.Traffic traffic) : base(healthTrigger, patterns, stateName)
			{
				this.aliens = aliens;
				this.caterpillar = caterpillar;
				this.robots = robots;
				this.paddleShip = paddleShip;
				this.qShip = qShip;
				this.uFO = uFO;
				this.toad = toad;
				this.worm = worm;
				this.general = general;
				this.bouncy = bouncy;
				this.missile = missile;
				this.chasers = chasers;
				this.sheriff = sheriff;
				this.snake = snake;
				this.tentacle = tentacle;
				this.traffic = traffic;
			}

			// Token: 0x04000C4F RID: 3151
			public readonly LevelProperties.RetroArcade.Aliens aliens;

			// Token: 0x04000C50 RID: 3152
			public readonly LevelProperties.RetroArcade.Caterpillar caterpillar;

			// Token: 0x04000C51 RID: 3153
			public readonly LevelProperties.RetroArcade.Robots robots;

			// Token: 0x04000C52 RID: 3154
			public readonly LevelProperties.RetroArcade.PaddleShip paddleShip;

			// Token: 0x04000C53 RID: 3155
			public readonly LevelProperties.RetroArcade.QShip qShip;

			// Token: 0x04000C54 RID: 3156
			public readonly LevelProperties.RetroArcade.UFO uFO;

			// Token: 0x04000C55 RID: 3157
			public readonly LevelProperties.RetroArcade.Toad toad;

			// Token: 0x04000C56 RID: 3158
			public readonly LevelProperties.RetroArcade.Worm worm;

			// Token: 0x04000C57 RID: 3159
			public readonly LevelProperties.RetroArcade.General general;

			// Token: 0x04000C58 RID: 3160
			public readonly LevelProperties.RetroArcade.Bouncy bouncy;

			// Token: 0x04000C59 RID: 3161
			public readonly LevelProperties.RetroArcade.Missile missile;

			// Token: 0x04000C5A RID: 3162
			public readonly LevelProperties.RetroArcade.Chasers chasers;

			// Token: 0x04000C5B RID: 3163
			public readonly LevelProperties.RetroArcade.Sheriff sheriff;

			// Token: 0x04000C5C RID: 3164
			public readonly LevelProperties.RetroArcade.Snake snake;

			// Token: 0x04000C5D RID: 3165
			public readonly LevelProperties.RetroArcade.Tentacle tentacle;

			// Token: 0x04000C5E RID: 3166
			public readonly LevelProperties.RetroArcade.Traffic traffic;
		}

		// Token: 0x02000241 RID: 577
		public class Aliens : AbstractLevelPropertyGroup
		{
			// Token: 0x06000687 RID: 1671 RVA: 0x0003D774 File Offset: 0x0003BB74
			public Aliens(float hp, float moveTime, float moveTimeDecrease, int numColumns, MinMax shotRate, float shotRateDecrease, float randomShotAverageTime, string[] shotColumnPattern, float bulletSpeed, MinMax bonusAppearTime, int bonusAppearCount, float bonusMoveSpeed, float pointsGained, float pointsBonus)
			{
				this.hp = hp;
				this.moveTime = moveTime;
				this.moveTimeDecrease = moveTimeDecrease;
				this.numColumns = numColumns;
				this.shotRate = shotRate;
				this.shotRateDecrease = shotRateDecrease;
				this.randomShotAverageTime = randomShotAverageTime;
				this.shotColumnPattern = shotColumnPattern;
				this.bulletSpeed = bulletSpeed;
				this.bonusAppearTime = bonusAppearTime;
				this.bonusAppearCount = bonusAppearCount;
				this.bonusMoveSpeed = bonusMoveSpeed;
				this.pointsGained = pointsGained;
				this.pointsBonus = pointsBonus;
			}

			// Token: 0x04000C5F RID: 3167
			public readonly float hp;

			// Token: 0x04000C60 RID: 3168
			public readonly float moveTime;

			// Token: 0x04000C61 RID: 3169
			public readonly float moveTimeDecrease;

			// Token: 0x04000C62 RID: 3170
			public readonly int numColumns;

			// Token: 0x04000C63 RID: 3171
			public readonly MinMax shotRate;

			// Token: 0x04000C64 RID: 3172
			public readonly float shotRateDecrease;

			// Token: 0x04000C65 RID: 3173
			public readonly float randomShotAverageTime;

			// Token: 0x04000C66 RID: 3174
			public readonly string[] shotColumnPattern;

			// Token: 0x04000C67 RID: 3175
			public readonly float bulletSpeed;

			// Token: 0x04000C68 RID: 3176
			public readonly MinMax bonusAppearTime;

			// Token: 0x04000C69 RID: 3177
			public readonly int bonusAppearCount;

			// Token: 0x04000C6A RID: 3178
			public readonly float bonusMoveSpeed;

			// Token: 0x04000C6B RID: 3179
			public readonly float pointsGained;

			// Token: 0x04000C6C RID: 3180
			public readonly float pointsBonus;
		}

		// Token: 0x02000242 RID: 578
		public class Caterpillar : AbstractLevelPropertyGroup
		{
			// Token: 0x06000688 RID: 1672 RVA: 0x0003D7F4 File Offset: 0x0003BBF4
			public Caterpillar(float hp, float moveTime, float moveTimeDecrease, int[] bodyParts, float shotSpeed, int dropCount, MinMax spiderDelay, int spiderCount, float spiderSpeed, MinMax spiderPathY, int spiderNumZigZags, float pointsGained, float pointsBonus)
			{
				this.hp = hp;
				this.moveTime = moveTime;
				this.moveTimeDecrease = moveTimeDecrease;
				this.bodyParts = bodyParts;
				this.shotSpeed = shotSpeed;
				this.dropCount = dropCount;
				this.spiderDelay = spiderDelay;
				this.spiderCount = spiderCount;
				this.spiderSpeed = spiderSpeed;
				this.spiderPathY = spiderPathY;
				this.spiderNumZigZags = spiderNumZigZags;
				this.pointsGained = pointsGained;
				this.pointsBonus = pointsBonus;
			}

			// Token: 0x04000C6D RID: 3181
			public readonly float hp;

			// Token: 0x04000C6E RID: 3182
			public readonly float moveTime;

			// Token: 0x04000C6F RID: 3183
			public readonly float moveTimeDecrease;

			// Token: 0x04000C70 RID: 3184
			public readonly int[] bodyParts;

			// Token: 0x04000C71 RID: 3185
			public readonly float shotSpeed;

			// Token: 0x04000C72 RID: 3186
			public readonly int dropCount;

			// Token: 0x04000C73 RID: 3187
			public readonly MinMax spiderDelay;

			// Token: 0x04000C74 RID: 3188
			public readonly int spiderCount;

			// Token: 0x04000C75 RID: 3189
			public readonly float spiderSpeed;

			// Token: 0x04000C76 RID: 3190
			public readonly MinMax spiderPathY;

			// Token: 0x04000C77 RID: 3191
			public readonly int spiderNumZigZags;

			// Token: 0x04000C78 RID: 3192
			public readonly float pointsGained;

			// Token: 0x04000C79 RID: 3193
			public readonly float pointsBonus;
		}

		// Token: 0x02000243 RID: 579
		public class Robots : AbstractLevelPropertyGroup
		{
			// Token: 0x06000689 RID: 1673 RVA: 0x0003D86C File Offset: 0x0003BC6C
			public Robots(float mainRobotHp, string mainRobotShootString, float mainRobotShootSpeed, bool mainRobotShotBounce, float mainRobotMoveSpeed, MinMax mainRobotY, float smallRobotHp, MinMax smallRobotAttackDelay, float smallRobotShootSpeed, float smallRobotRotationSpeed, float smallRobotRotationDistance, MinMax bonusDelay, int bonusCount, float bonusMoveSpeed, float bonusHp, float pointsGained, float pointsBonus, string[] robotWaves, float[] robotsXPositions, string[] robotColorPattern)
			{
				this.mainRobotHp = mainRobotHp;
				this.mainRobotShootString = mainRobotShootString;
				this.mainRobotShootSpeed = mainRobotShootSpeed;
				this.mainRobotShotBounce = mainRobotShotBounce;
				this.mainRobotMoveSpeed = mainRobotMoveSpeed;
				this.mainRobotY = mainRobotY;
				this.smallRobotHp = smallRobotHp;
				this.smallRobotAttackDelay = smallRobotAttackDelay;
				this.smallRobotShootSpeed = smallRobotShootSpeed;
				this.smallRobotRotationSpeed = smallRobotRotationSpeed;
				this.smallRobotRotationDistance = smallRobotRotationDistance;
				this.bonusDelay = bonusDelay;
				this.bonusCount = bonusCount;
				this.bonusMoveSpeed = bonusMoveSpeed;
				this.bonusHp = bonusHp;
				this.pointsGained = pointsGained;
				this.pointsBonus = pointsBonus;
				this.robotWaves = robotWaves;
				this.robotsXPositions = robotsXPositions;
				this.robotColorPattern = robotColorPattern;
			}

			// Token: 0x04000C7A RID: 3194
			public readonly float mainRobotHp;

			// Token: 0x04000C7B RID: 3195
			public readonly string mainRobotShootString;

			// Token: 0x04000C7C RID: 3196
			public readonly float mainRobotShootSpeed;

			// Token: 0x04000C7D RID: 3197
			public readonly bool mainRobotShotBounce;

			// Token: 0x04000C7E RID: 3198
			public readonly float mainRobotMoveSpeed;

			// Token: 0x04000C7F RID: 3199
			public readonly MinMax mainRobotY;

			// Token: 0x04000C80 RID: 3200
			public readonly float smallRobotHp;

			// Token: 0x04000C81 RID: 3201
			public readonly MinMax smallRobotAttackDelay;

			// Token: 0x04000C82 RID: 3202
			public readonly float smallRobotShootSpeed;

			// Token: 0x04000C83 RID: 3203
			public readonly float smallRobotRotationSpeed;

			// Token: 0x04000C84 RID: 3204
			public readonly float smallRobotRotationDistance;

			// Token: 0x04000C85 RID: 3205
			public readonly MinMax bonusDelay;

			// Token: 0x04000C86 RID: 3206
			public readonly int bonusCount;

			// Token: 0x04000C87 RID: 3207
			public readonly float bonusMoveSpeed;

			// Token: 0x04000C88 RID: 3208
			public readonly float bonusHp;

			// Token: 0x04000C89 RID: 3209
			public readonly float pointsGained;

			// Token: 0x04000C8A RID: 3210
			public readonly float pointsBonus;

			// Token: 0x04000C8B RID: 3211
			public readonly string[] robotWaves;

			// Token: 0x04000C8C RID: 3212
			public readonly float[] robotsXPositions;

			// Token: 0x04000C8D RID: 3213
			public readonly string[] robotColorPattern;
		}

		// Token: 0x02000244 RID: 580
		public class PaddleShip : AbstractLevelPropertyGroup
		{
			// Token: 0x0600068A RID: 1674 RVA: 0x0003D91C File Offset: 0x0003BD1C
			public PaddleShip(float hp, MinMax ySpeed, float xSpeed, float damageMultiplier, float pointsGained, float pointsBonus)
			{
				this.hp = hp;
				this.ySpeed = ySpeed;
				this.xSpeed = xSpeed;
				this.damageMultiplier = damageMultiplier;
				this.pointsGained = pointsGained;
				this.pointsBonus = pointsBonus;
			}

			// Token: 0x04000C8E RID: 3214
			public readonly float hp;

			// Token: 0x04000C8F RID: 3215
			public readonly MinMax ySpeed;

			// Token: 0x04000C90 RID: 3216
			public readonly float xSpeed;

			// Token: 0x04000C91 RID: 3217
			public readonly float damageMultiplier;

			// Token: 0x04000C92 RID: 3218
			public readonly float pointsGained;

			// Token: 0x04000C93 RID: 3219
			public readonly float pointsBonus;
		}

		// Token: 0x02000245 RID: 581
		public class QShip : AbstractLevelPropertyGroup
		{
			// Token: 0x0600068B RID: 1675 RVA: 0x0003D954 File Offset: 0x0003BD54
			public QShip(float moveSpeed, int numSpinningTiles, MinMax tileRotationSpeed, float tileRotationDistance, float shotSpreadAngle, float shotSpeed, float maxXPos, float yPos, float hp, float damageMultiplier, float tentacleWarningDuration, MinMax tentacleSpawnRange, float tentacleSpeed, float pointsGained, float pointsBonus)
			{
				this.moveSpeed = moveSpeed;
				this.numSpinningTiles = numSpinningTiles;
				this.tileRotationSpeed = tileRotationSpeed;
				this.tileRotationDistance = tileRotationDistance;
				this.shotSpreadAngle = shotSpreadAngle;
				this.shotSpeed = shotSpeed;
				this.maxXPos = maxXPos;
				this.yPos = yPos;
				this.hp = hp;
				this.damageMultiplier = damageMultiplier;
				this.tentacleWarningDuration = tentacleWarningDuration;
				this.tentacleSpawnRange = tentacleSpawnRange;
				this.tentacleSpeed = tentacleSpeed;
				this.pointsGained = pointsGained;
				this.pointsBonus = pointsBonus;
			}

			// Token: 0x04000C94 RID: 3220
			public readonly float moveSpeed;

			// Token: 0x04000C95 RID: 3221
			public readonly int numSpinningTiles;

			// Token: 0x04000C96 RID: 3222
			public readonly MinMax tileRotationSpeed;

			// Token: 0x04000C97 RID: 3223
			public readonly float tileRotationDistance;

			// Token: 0x04000C98 RID: 3224
			public readonly float shotSpreadAngle;

			// Token: 0x04000C99 RID: 3225
			public readonly float shotSpeed;

			// Token: 0x04000C9A RID: 3226
			public readonly float maxXPos;

			// Token: 0x04000C9B RID: 3227
			public readonly float yPos;

			// Token: 0x04000C9C RID: 3228
			public readonly float hp;

			// Token: 0x04000C9D RID: 3229
			public readonly float damageMultiplier;

			// Token: 0x04000C9E RID: 3230
			public readonly float tentacleWarningDuration;

			// Token: 0x04000C9F RID: 3231
			public readonly MinMax tentacleSpawnRange;

			// Token: 0x04000CA0 RID: 3232
			public readonly float tentacleSpeed;

			// Token: 0x04000CA1 RID: 3233
			public readonly float pointsGained;

			// Token: 0x04000CA2 RID: 3234
			public readonly float pointsBonus;
		}

		// Token: 0x02000246 RID: 582
		public class UFO : AbstractLevelPropertyGroup
		{
			// Token: 0x0600068C RID: 1676 RVA: 0x0003D9DC File Offset: 0x0003BDDC
			public UFO(float projectileSpeed, MinMax shotRate, int turretCount, float turretSpeed, float hp, MinMax bossSpeed, float moleSpeed, float moleWarningDelay, float moleAttackSpeed, float pointsGained, float pointsBonus, float initialPositionX, float[] cyclePositionX, int alienYPosition)
			{
				this.projectileSpeed = projectileSpeed;
				this.shotRate = shotRate;
				this.turretCount = turretCount;
				this.turretSpeed = turretSpeed;
				this.hp = hp;
				this.bossSpeed = bossSpeed;
				this.moleSpeed = moleSpeed;
				this.moleWarningDelay = moleWarningDelay;
				this.moleAttackSpeed = moleAttackSpeed;
				this.pointsGained = pointsGained;
				this.pointsBonus = pointsBonus;
				this.initialPositionX = initialPositionX;
				this.cyclePositionX = cyclePositionX;
				this.alienYPosition = alienYPosition;
			}

			// Token: 0x04000CA3 RID: 3235
			public readonly float projectileSpeed;

			// Token: 0x04000CA4 RID: 3236
			public readonly MinMax shotRate;

			// Token: 0x04000CA5 RID: 3237
			public readonly int turretCount;

			// Token: 0x04000CA6 RID: 3238
			public readonly float turretSpeed;

			// Token: 0x04000CA7 RID: 3239
			public readonly float hp;

			// Token: 0x04000CA8 RID: 3240
			public readonly MinMax bossSpeed;

			// Token: 0x04000CA9 RID: 3241
			public readonly float moleSpeed;

			// Token: 0x04000CAA RID: 3242
			public readonly float moleWarningDelay;

			// Token: 0x04000CAB RID: 3243
			public readonly float moleAttackSpeed;

			// Token: 0x04000CAC RID: 3244
			public readonly float pointsGained;

			// Token: 0x04000CAD RID: 3245
			public readonly float pointsBonus;

			// Token: 0x04000CAE RID: 3246
			public readonly float initialPositionX;

			// Token: 0x04000CAF RID: 3247
			public readonly float[] cyclePositionX;

			// Token: 0x04000CB0 RID: 3248
			public readonly int alienYPosition;
		}

		// Token: 0x02000247 RID: 583
		public class Toad : AbstractLevelPropertyGroup
		{
			// Token: 0x0600068D RID: 1677 RVA: 0x0003DA5C File Offset: 0x0003BE5C
			public Toad(float hp, MinMax jumpVerticalSpeedRange, MinMax jumpHorizontalSpeedRange, float jumpGravity, MinMax jumpDelay, float pointsGained, float pointsBonus)
			{
				this.hp = hp;
				this.jumpVerticalSpeedRange = jumpVerticalSpeedRange;
				this.jumpHorizontalSpeedRange = jumpHorizontalSpeedRange;
				this.jumpGravity = jumpGravity;
				this.jumpDelay = jumpDelay;
				this.pointsGained = pointsGained;
				this.pointsBonus = pointsBonus;
			}

			// Token: 0x04000CB1 RID: 3249
			public readonly float hp;

			// Token: 0x04000CB2 RID: 3250
			public readonly MinMax jumpVerticalSpeedRange;

			// Token: 0x04000CB3 RID: 3251
			public readonly MinMax jumpHorizontalSpeedRange;

			// Token: 0x04000CB4 RID: 3252
			public readonly float jumpGravity;

			// Token: 0x04000CB5 RID: 3253
			public readonly MinMax jumpDelay;

			// Token: 0x04000CB6 RID: 3254
			public readonly float pointsGained;

			// Token: 0x04000CB7 RID: 3255
			public readonly float pointsBonus;
		}

		// Token: 0x02000248 RID: 584
		public class Worm : AbstractLevelPropertyGroup
		{
			// Token: 0x0600068E RID: 1678 RVA: 0x0003DA9C File Offset: 0x0003BE9C
			public Worm(MinMax moveSpeed, float rocketSpeed, float rocketSpawnDelay, float rocketBrokenPieceSpeed, float hp, float tongueRotateSpeed, float pointsGained, float pointsBonus)
			{
				this.moveSpeed = moveSpeed;
				this.rocketSpeed = rocketSpeed;
				this.rocketSpawnDelay = rocketSpawnDelay;
				this.rocketBrokenPieceSpeed = rocketBrokenPieceSpeed;
				this.hp = hp;
				this.tongueRotateSpeed = tongueRotateSpeed;
				this.pointsGained = pointsGained;
				this.pointsBonus = pointsBonus;
			}

			// Token: 0x04000CB8 RID: 3256
			public readonly MinMax moveSpeed;

			// Token: 0x04000CB9 RID: 3257
			public readonly float rocketSpeed;

			// Token: 0x04000CBA RID: 3258
			public readonly float rocketSpawnDelay;

			// Token: 0x04000CBB RID: 3259
			public readonly float rocketBrokenPieceSpeed;

			// Token: 0x04000CBC RID: 3260
			public readonly float hp;

			// Token: 0x04000CBD RID: 3261
			public readonly float tongueRotateSpeed;

			// Token: 0x04000CBE RID: 3262
			public readonly float pointsGained;

			// Token: 0x04000CBF RID: 3263
			public readonly float pointsBonus;
		}

		// Token: 0x02000249 RID: 585
		public class General : AbstractLevelPropertyGroup
		{
			// Token: 0x0600068F RID: 1679 RVA: 0x0003DAEC File Offset: 0x0003BEEC
			public General(float accuracyBonus)
			{
				this.accuracyBonus = accuracyBonus;
			}

			// Token: 0x04000CC0 RID: 3264
			public readonly float accuracyBonus;
		}

		// Token: 0x0200024A RID: 586
		public class Bouncy : AbstractLevelPropertyGroup
		{
			// Token: 0x06000690 RID: 1680 RVA: 0x0003DAFB File Offset: 0x0003BEFB
			public Bouncy(float groupMoveSpeed, float singleMoveSpeed, string[] typeString, MinMax spawnRange, int waveCount, MinMax angleRange)
			{
				this.groupMoveSpeed = groupMoveSpeed;
				this.singleMoveSpeed = singleMoveSpeed;
				this.typeString = typeString;
				this.spawnRange = spawnRange;
				this.waveCount = waveCount;
				this.angleRange = angleRange;
			}

			// Token: 0x04000CC1 RID: 3265
			public readonly float groupMoveSpeed;

			// Token: 0x04000CC2 RID: 3266
			public readonly float singleMoveSpeed;

			// Token: 0x04000CC3 RID: 3267
			public readonly string[] typeString;

			// Token: 0x04000CC4 RID: 3268
			public readonly MinMax spawnRange;

			// Token: 0x04000CC5 RID: 3269
			public readonly int waveCount;

			// Token: 0x04000CC6 RID: 3270
			public readonly MinMax angleRange;
		}

		// Token: 0x0200024B RID: 587
		public class Missile : AbstractLevelPropertyGroup
		{
			// Token: 0x06000691 RID: 1681 RVA: 0x0003DB30 File Offset: 0x0003BF30
			public Missile(string directionString, MinMax timerRelease, float missileTime, float hp, float manMoveTime, float loopYSize, float loopXSize)
			{
				this.directionString = directionString;
				this.timerRelease = timerRelease;
				this.missileTime = missileTime;
				this.hp = hp;
				this.manMoveTime = manMoveTime;
				this.loopYSize = loopYSize;
				this.loopXSize = loopXSize;
			}

			// Token: 0x04000CC7 RID: 3271
			public readonly string directionString;

			// Token: 0x04000CC8 RID: 3272
			public readonly MinMax timerRelease;

			// Token: 0x04000CC9 RID: 3273
			public readonly float missileTime;

			// Token: 0x04000CCA RID: 3274
			public readonly float hp;

			// Token: 0x04000CCB RID: 3275
			public readonly float manMoveTime;

			// Token: 0x04000CCC RID: 3276
			public readonly float loopYSize;

			// Token: 0x04000CCD RID: 3277
			public readonly float loopXSize;
		}

		// Token: 0x0200024C RID: 588
		public class Chasers : AbstractLevelPropertyGroup
		{
			// Token: 0x06000692 RID: 1682 RVA: 0x0003DB70 File Offset: 0x0003BF70
			public Chasers(float greenSpeed, float greenRotation, float greenHP, MinMax greenDuration, float orangeSpeed, float orangeRotation, float orangeHP, MinMax orangeDuration, float yellowSpeed, float yellowRotation, float yellowHP, MinMax yellowDuration, string[] colorString, string[] delayString, float initialSpawnTime, string[] orderString)
			{
				this.greenSpeed = greenSpeed;
				this.greenRotation = greenRotation;
				this.greenHP = greenHP;
				this.greenDuration = greenDuration;
				this.orangeSpeed = orangeSpeed;
				this.orangeRotation = orangeRotation;
				this.orangeHP = orangeHP;
				this.orangeDuration = orangeDuration;
				this.yellowSpeed = yellowSpeed;
				this.yellowRotation = yellowRotation;
				this.yellowHP = yellowHP;
				this.yellowDuration = yellowDuration;
				this.colorString = colorString;
				this.delayString = delayString;
				this.initialSpawnTime = initialSpawnTime;
				this.orderString = orderString;
			}

			// Token: 0x04000CCE RID: 3278
			public readonly float greenSpeed;

			// Token: 0x04000CCF RID: 3279
			public readonly float greenRotation;

			// Token: 0x04000CD0 RID: 3280
			public readonly float greenHP;

			// Token: 0x04000CD1 RID: 3281
			public readonly MinMax greenDuration;

			// Token: 0x04000CD2 RID: 3282
			public readonly float orangeSpeed;

			// Token: 0x04000CD3 RID: 3283
			public readonly float orangeRotation;

			// Token: 0x04000CD4 RID: 3284
			public readonly float orangeHP;

			// Token: 0x04000CD5 RID: 3285
			public readonly MinMax orangeDuration;

			// Token: 0x04000CD6 RID: 3286
			public readonly float yellowSpeed;

			// Token: 0x04000CD7 RID: 3287
			public readonly float yellowRotation;

			// Token: 0x04000CD8 RID: 3288
			public readonly float yellowHP;

			// Token: 0x04000CD9 RID: 3289
			public readonly MinMax yellowDuration;

			// Token: 0x04000CDA RID: 3290
			public readonly string[] colorString;

			// Token: 0x04000CDB RID: 3291
			public readonly string[] delayString;

			// Token: 0x04000CDC RID: 3292
			public readonly float initialSpawnTime;

			// Token: 0x04000CDD RID: 3293
			public readonly string[] orderString;
		}

		// Token: 0x0200024D RID: 589
		public class Sheriff : AbstractLevelPropertyGroup
		{
			// Token: 0x06000693 RID: 1683 RVA: 0x0003DC00 File Offset: 0x0003C000
			public Sheriff(float moveSpeed, float moveSpeedAddition, string[] delayString, float delayMinus, string[] colorString, float shotSpeed)
			{
				this.moveSpeed = moveSpeed;
				this.moveSpeedAddition = moveSpeedAddition;
				this.delayString = delayString;
				this.delayMinus = delayMinus;
				this.colorString = colorString;
				this.shotSpeed = shotSpeed;
			}

			// Token: 0x04000CDE RID: 3294
			public readonly float moveSpeed;

			// Token: 0x04000CDF RID: 3295
			public readonly float moveSpeedAddition;

			// Token: 0x04000CE0 RID: 3296
			public readonly string[] delayString;

			// Token: 0x04000CE1 RID: 3297
			public readonly float delayMinus;

			// Token: 0x04000CE2 RID: 3298
			public readonly string[] colorString;

			// Token: 0x04000CE3 RID: 3299
			public readonly float shotSpeed;
		}

		// Token: 0x0200024E RID: 590
		public class Snake : AbstractLevelPropertyGroup
		{
			// Token: 0x06000694 RID: 1684 RVA: 0x0003DC35 File Offset: 0x0003C035
			public Snake(float moveSpeed)
			{
				this.moveSpeed = moveSpeed;
			}

			// Token: 0x04000CE4 RID: 3300
			public readonly float moveSpeed;
		}

		// Token: 0x0200024F RID: 591
		public class Tentacle : AbstractLevelPropertyGroup
		{
			// Token: 0x06000695 RID: 1685 RVA: 0x0003DC44 File Offset: 0x0003C044
			public Tentacle(float moveSpeed, float risingSpeed, string[] targetString, int tentacleCount)
			{
				this.moveSpeed = moveSpeed;
				this.risingSpeed = risingSpeed;
				this.targetString = targetString;
				this.tentacleCount = tentacleCount;
			}

			// Token: 0x04000CE5 RID: 3301
			public readonly float moveSpeed;

			// Token: 0x04000CE6 RID: 3302
			public readonly float risingSpeed;

			// Token: 0x04000CE7 RID: 3303
			public readonly string[] targetString;

			// Token: 0x04000CE8 RID: 3304
			public readonly int tentacleCount;
		}

		// Token: 0x02000250 RID: 592
		public class Traffic : AbstractLevelPropertyGroup
		{
			// Token: 0x06000696 RID: 1686 RVA: 0x0003DC69 File Offset: 0x0003C069
			public Traffic(float moveSpeed, float moveDelay, string[] lightOrderString, float lightDelay)
			{
				this.moveSpeed = moveSpeed;
				this.moveDelay = moveDelay;
				this.lightOrderString = lightOrderString;
				this.lightDelay = lightDelay;
			}

			// Token: 0x04000CE9 RID: 3305
			public readonly float moveSpeed;

			// Token: 0x04000CEA RID: 3306
			public readonly float moveDelay;

			// Token: 0x04000CEB RID: 3307
			public readonly string[] lightOrderString;

			// Token: 0x04000CEC RID: 3308
			public readonly float lightDelay;
		}
	}

	// Token: 0x02000252 RID: 594
	public class Robot : AbstractLevelProperties<LevelProperties.Robot.State, LevelProperties.Robot.Pattern, LevelProperties.Robot.States>
	{
		// Token: 0x060006B7 RID: 1719 RVA: 0x0003DC8E File Offset: 0x0003C08E
		public Robot(int hp, Level.GoalTimes goalTimes, LevelProperties.Robot.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060006B8 RID: 1720 RVA: 0x0003DC9C File Offset: 0x0003C09C
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 500f;
				break;
			case Level.Mode.Normal:
				timeline.health = 1400f;
				timeline.events.Add(new Level.Timeline.Event("HeliHead", 0.9f));
				timeline.events.Add(new Level.Timeline.Event("Inventor", 0.8f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1800f;
				timeline.events.Add(new Level.Timeline.Event("HeliHead", 0.9f));
				timeline.events.Add(new Level.Timeline.Event("Inventor", 0.8f));
				break;
			}
			return timeline;
		}

		// Token: 0x060006B9 RID: 1721 RVA: 0x0003DD5F File Offset: 0x0003C15F
		public static LevelProperties.Robot.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.Robot.Pattern.Default;
				}
			}
			Debug.LogError("Pattern Robot.Pattern for  " + id + " not found.", null);
			return LevelProperties.Robot.Pattern.Uninitialized;
		}

		// Token: 0x060006BA RID: 1722 RVA: 0x0003DDA0 File Offset: 0x0003C1A0
		public static LevelProperties.Robot GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Robot.State> list = new List<LevelProperties.Robot.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1800;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Robot.State(10f, new LevelProperties.Robot.Pattern[][]
						{
							new LevelProperties.Robot.Pattern[1]
						}, LevelProperties.Robot.States.Main, new LevelProperties.Robot.Hose(180, 1.5f, 1, new MinMax(2f, 5f), new MinMax(90f, 170f), 0.8f), new LevelProperties.Robot.ShotBot(180, 16, 200, 430, new MinMax(0f, 2f), 4, 1f, new MinMax(1f, 2f), new MinMax(3f, 5.5f), 100f, 0.5f), new LevelProperties.Robot.Cannon(1.8f, new string[]
						{
							"S360,N6,120-240",
							"S360,N5,134-226",
							"S370,N7,120-240",
							"S370,N6,125-245",
							"S380,N5,139-259",
							"S380,N7,125-245"
						}, new string[]
						{
							"S4,S5,S6",
							"S5,S4,S5",
							"S2,S1,S2",
							"S1,S2,S3",
							"S4,S5,S4",
							"S4,S5,S6"
						}, new MinMax(2.5f, 4.5f)), new LevelProperties.Robot.Orb(180, 9999, 150, 1.1f, new MinMax(2f, 3.5f), 4.5f, 1f, true, 0.5f), new LevelProperties.Robot.Arms(new MinMax(2f, 4f), "M,T"), new LevelProperties.Robot.MagnetArms(1f, 3f, -1200f), new LevelProperties.Robot.TwistyArms(210f, 1f, 380f, 0.5f, "350,355,345", 200f, false), new LevelProperties.Robot.BombBot(16, 290, 6f, new MinMax(1f, 2f), 25, 375, 2.5f, 2000), new LevelProperties.Robot.Heart(300, 35), new LevelProperties.Robot.HeliHead(900, 0.5f, 0.1f, "250,300,350,400,450,400,350,300"), new LevelProperties.Robot.BlueGem(865f, 250, new MinMax(150f, 525f), 30, 0.3f, 0, 0.1f, 7f, 5, false, new MinMax(0f, 270f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.RedGem(212f, 350, new MinMax(100f, 450f), 35, 0.42f, 0, 0f, 7f, 8, true, new MinMax(0f, 359f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.Inventor(0.5f, 1f, new MinMax(8f, 12f), new MinMax(1f, 2f), "R,B", 0, 250, 110, 4.5f, 3.5f, 8, 3)));
						list.Add(new LevelProperties.Robot.State(0.9f, new LevelProperties.Robot.Pattern[][]
						{
							new LevelProperties.Robot.Pattern[0]
						}, LevelProperties.Robot.States.HeliHead, new LevelProperties.Robot.Hose(180, 1.5f, 1, new MinMax(2f, 5f), new MinMax(90f, 170f), 0.8f), new LevelProperties.Robot.ShotBot(180, 16, 200, 430, new MinMax(0f, 2f), 4, 1f, new MinMax(1f, 2f), new MinMax(3f, 5.5f), 100f, 0.5f), new LevelProperties.Robot.Cannon(1.8f, new string[]
						{
							"S360,N6,120-240",
							"S360,N5,134-226",
							"S370,N7,120-240",
							"S370,N6,125-245",
							"S380,N5,139-259",
							"S380,N7,125-245"
						}, new string[]
						{
							"S4,S5,S6",
							"S5,S4,S5",
							"S2,S1,S2",
							"S1,S2,S3",
							"S4,S5,S4",
							"S4,S5,S6"
						}, new MinMax(2.5f, 4.5f)), new LevelProperties.Robot.Orb(180, 9999, 150, 1.1f, new MinMax(2f, 3.5f), 4.5f, 1f, true, 0.5f), new LevelProperties.Robot.Arms(new MinMax(2f, 4f), "M,T"), new LevelProperties.Robot.MagnetArms(1f, 3f, -1200f), new LevelProperties.Robot.TwistyArms(210f, 1f, 380f, 0.5f, "350,355,345", 200f, false), new LevelProperties.Robot.BombBot(16, 290, 6f, new MinMax(1f, 2f), 25, 375, 2.5f, 2000), new LevelProperties.Robot.Heart(300, 35), new LevelProperties.Robot.HeliHead(900, 0.5f, 0.1f, "250,300,350,400,450,400,350,300"), new LevelProperties.Robot.BlueGem(865f, 250, new MinMax(150f, 525f), 30, 0.3f, 0, 0.1f, 7f, 5, false, new MinMax(0f, 270f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.RedGem(212f, 350, new MinMax(100f, 450f), 35, 0.42f, 0, 0f, 7f, 8, true, new MinMax(0f, 359f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.Inventor(0.5f, 1f, new MinMax(8f, 12f), new MinMax(1f, 2f), "R,B", 0, 250, 110, 4.5f, 3.5f, 8, 3)));
						list.Add(new LevelProperties.Robot.State(0.8f, new LevelProperties.Robot.Pattern[][]
						{
							new LevelProperties.Robot.Pattern[0]
						}, LevelProperties.Robot.States.Inventor, new LevelProperties.Robot.Hose(180, 1.5f, 1, new MinMax(2f, 5f), new MinMax(90f, 170f), 0.8f), new LevelProperties.Robot.ShotBot(180, 16, 200, 430, new MinMax(0f, 2f), 4, 1f, new MinMax(1f, 2f), new MinMax(3f, 5.5f), 100f, 0.5f), new LevelProperties.Robot.Cannon(1.8f, new string[]
						{
							"S360,N6,120-240",
							"S360,N5,134-226",
							"S370,N7,120-240",
							"S370,N6,125-245",
							"S380,N5,139-259",
							"S380,N7,125-245"
						}, new string[]
						{
							"S4,S5,S6",
							"S5,S4,S5",
							"S2,S1,S2",
							"S1,S2,S3",
							"S4,S5,S4",
							"S4,S5,S6"
						}, new MinMax(2.5f, 4.5f)), new LevelProperties.Robot.Orb(180, 9999, 150, 1.1f, new MinMax(2f, 3.5f), 4.5f, 1f, true, 0.5f), new LevelProperties.Robot.Arms(new MinMax(2f, 4f), "M,T"), new LevelProperties.Robot.MagnetArms(1f, 3f, -1200f), new LevelProperties.Robot.TwistyArms(210f, 1f, 380f, 0.5f, "350,355,345", 200f, false), new LevelProperties.Robot.BombBot(16, 290, 6f, new MinMax(1f, 2f), 25, 375, 2.5f, 2000), new LevelProperties.Robot.Heart(300, 35), new LevelProperties.Robot.HeliHead(900, 0.5f, 0.1f, "250,300,350,400,450,400,350,300"), new LevelProperties.Robot.BlueGem(865f, 250, new MinMax(150f, 525f), 30, 0.3f, 0, 0.1f, 7f, 5, false, new MinMax(0f, 270f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.RedGem(212f, 350, new MinMax(100f, 450f), 35, 0.42f, 0, 0f, 7f, 8, true, new MinMax(0f, 359f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.Inventor(0.5f, 1f, new MinMax(8f, 12f), new MinMax(1f, 2f), "R,B", 0, 250, 110, 4.5f, 3.5f, 8, 3)));
					}
				}
				else
				{
					hp = 1400;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Robot.State(10f, new LevelProperties.Robot.Pattern[][]
					{
						new LevelProperties.Robot.Pattern[1]
					}, LevelProperties.Robot.States.Main, new LevelProperties.Robot.Hose(150, 1.5f, 2, new MinMax(0.01f, 0.011f), new MinMax(90f, 170f), 1f), new LevelProperties.Robot.ShotBot(150, 16, 200, 380, new MinMax(0f, 2f), 4, 1f, new MinMax(1f, 2.5f), new MinMax(3f, 5.5f), 100f, 0.4f), new LevelProperties.Robot.Cannon(2.2f, new string[]
					{
						"S300,N6,120-240",
						"S300,N5,134-226",
						"S300,N7,120-240",
						"S300,N6,125-245",
						"S300,N5,139-259",
						"S300,N7,125-245"
					}, new string[]
					{
						"S1,S2,S1",
						"S4,S5,S4",
						"S1,S2,S3",
						"S2,S1,S2",
						"S5,S4,S5",
						"S4,S5,S6"
					}, new MinMax(3f, 5.5f)), new LevelProperties.Robot.Orb(150, 9999, 125, 1.2f, new MinMax(2f, 4f), 6.5f, 1f, true, 1f), new LevelProperties.Robot.Arms(new MinMax(3f, 5f), "T,M"), new LevelProperties.Robot.MagnetArms(1f, 3f, -1050f), new LevelProperties.Robot.TwistyArms(210f, 1.3f, 350f, 0.5f, "350,355,345", 200f, false), new LevelProperties.Robot.BombBot(16, 250, 6.5f, new MinMax(1f, 2f), 25, 325, 2.3f, 2000), new LevelProperties.Robot.Heart(225, 35), new LevelProperties.Robot.HeliHead(800, 0.5f, 0.1f, "250,300,350,400,450,400,350,300"), new LevelProperties.Robot.BlueGem(656f, 250, new MinMax(150f, 500f), 30, 0.4f, 0, 0.1f, 2.5f, 6, false, new MinMax(0f, 359f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.RedGem(1214f, 350, new MinMax(100f, 450f), 40, 0.45f, 0, 0f, 2.5f, 8, true, new MinMax(0f, 359f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.Inventor(0.5f, 1f, new MinMax(8f, 12f), new MinMax(1f, 2f), "R,B", 0, 250, 100, 5f, 4f, 8, 3)));
					list.Add(new LevelProperties.Robot.State(0.9f, new LevelProperties.Robot.Pattern[][]
					{
						new LevelProperties.Robot.Pattern[1]
					}, LevelProperties.Robot.States.HeliHead, new LevelProperties.Robot.Hose(150, 1.5f, 2, new MinMax(0.01f, 0.011f), new MinMax(90f, 170f), 1f), new LevelProperties.Robot.ShotBot(150, 16, 200, 380, new MinMax(0f, 2f), 4, 1f, new MinMax(1f, 2.5f), new MinMax(3f, 5.5f), 100f, 0.4f), new LevelProperties.Robot.Cannon(2.2f, new string[]
					{
						"S300,N6,120-240",
						"S300,N5,134-226",
						"S300,N7,120-240",
						"S300,N6,125-245",
						"S300,N5,139-259",
						"S300,N7,125-245"
					}, new string[]
					{
						"S1,S2,S1",
						"S4,S5,S4",
						"S1,S2,S3",
						"S2,S1,S2",
						"S5,S4,S5",
						"S4,S5,S6"
					}, new MinMax(3f, 5.5f)), new LevelProperties.Robot.Orb(150, 9999, 125, 1.2f, new MinMax(2f, 4f), 6.5f, 1f, true, 1f), new LevelProperties.Robot.Arms(new MinMax(3f, 5f), "T,M"), new LevelProperties.Robot.MagnetArms(1f, 3f, -1050f), new LevelProperties.Robot.TwistyArms(210f, 1.3f, 350f, 0.5f, "350,355,345", 200f, false), new LevelProperties.Robot.BombBot(16, 250, 6.5f, new MinMax(1f, 2f), 25, 325, 2.3f, 2000), new LevelProperties.Robot.Heart(225, 35), new LevelProperties.Robot.HeliHead(800, 0.5f, 0.1f, "250,300,350,400,450,400,350,300"), new LevelProperties.Robot.BlueGem(656f, 250, new MinMax(150f, 500f), 30, 0.4f, 0, 0.1f, 2.5f, 6, false, new MinMax(0f, 359f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.RedGem(1214f, 350, new MinMax(100f, 450f), 40, 0.45f, 0, 0f, 2.5f, 8, true, new MinMax(0f, 359f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.Inventor(0.5f, 1f, new MinMax(8f, 12f), new MinMax(1f, 2f), "R,B", 0, 250, 100, 5f, 4f, 8, 3)));
					list.Add(new LevelProperties.Robot.State(0.8f, new LevelProperties.Robot.Pattern[][]
					{
						new LevelProperties.Robot.Pattern[1]
					}, LevelProperties.Robot.States.Inventor, new LevelProperties.Robot.Hose(150, 1.5f, 2, new MinMax(0.01f, 0.011f), new MinMax(90f, 170f), 1f), new LevelProperties.Robot.ShotBot(150, 16, 200, 380, new MinMax(0f, 2f), 4, 1f, new MinMax(1f, 2.5f), new MinMax(3f, 5.5f), 100f, 0.4f), new LevelProperties.Robot.Cannon(2.2f, new string[]
					{
						"S300,N6,120-240",
						"S300,N5,134-226",
						"S300,N7,120-240",
						"S300,N6,125-245",
						"S300,N5,139-259",
						"S300,N7,125-245"
					}, new string[]
					{
						"S1,S2,S1",
						"S4,S5,S4",
						"S1,S2,S3",
						"S2,S1,S2",
						"S5,S4,S5",
						"S4,S5,S6"
					}, new MinMax(3f, 5.5f)), new LevelProperties.Robot.Orb(150, 9999, 125, 1.2f, new MinMax(2f, 4f), 6.5f, 1f, true, 1f), new LevelProperties.Robot.Arms(new MinMax(3f, 5f), "T,M"), new LevelProperties.Robot.MagnetArms(1f, 3f, -1050f), new LevelProperties.Robot.TwistyArms(210f, 1.3f, 350f, 0.5f, "350,355,345", 200f, false), new LevelProperties.Robot.BombBot(16, 250, 6.5f, new MinMax(1f, 2f), 25, 325, 2.3f, 2000), new LevelProperties.Robot.Heart(225, 35), new LevelProperties.Robot.HeliHead(800, 0.5f, 0.1f, "250,300,350,400,450,400,350,300"), new LevelProperties.Robot.BlueGem(656f, 250, new MinMax(150f, 500f), 30, 0.4f, 0, 0.1f, 2.5f, 6, false, new MinMax(0f, 359f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.RedGem(1214f, 350, new MinMax(100f, 450f), 40, 0.45f, 0, 0f, 2.5f, 8, true, new MinMax(0f, 359f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.Inventor(0.5f, 1f, new MinMax(8f, 12f), new MinMax(1f, 2f), "R,B", 0, 250, 100, 5f, 4f, 8, 3)));
				}
			}
			else
			{
				hp = 500;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Robot.State(10f, new LevelProperties.Robot.Pattern[][]
				{
					new LevelProperties.Robot.Pattern[1]
				}, LevelProperties.Robot.States.Main, new LevelProperties.Robot.Hose(250, 2f, 2, new MinMax(4f, 7f), new MinMax(90f, 170f), 1f), new LevelProperties.Robot.ShotBot(250, 16, 200, 380, new MinMax(0f, 2f), 2, 1.5f, new MinMax(1f, 2f), new MinMax(2.5f, 5f), 100f, 0.3f), new LevelProperties.Robot.Cannon(2.5f, new string[]
				{
					"S300,N4,120-240",
					"S300,N5,134-226",
					"S300,N4,125-245",
					"S300,N5,139-259"
				}, new string[]
				{
					"S1,S2,S1,S2",
					"S4,S3,S4,S3"
				}, new MinMax(3f, 5.5f)), new LevelProperties.Robot.Orb(250, 9999, 100, 1.2f, new MinMax(3f, 6f), 8f, 0.5f, true, 1f), new LevelProperties.Robot.Arms(new MinMax(3f, 5f), "M"), new LevelProperties.Robot.MagnetArms(2f, 4f, -850f), new LevelProperties.Robot.TwistyArms(210f, 1.3f, 550f, 1f, "100,300,500,200,400", 200f, false), new LevelProperties.Robot.BombBot(20, 200, 8f, new MinMax(1f, 3f), 25, 275, 2f, 2000), new LevelProperties.Robot.Heart(500, 35), new LevelProperties.Robot.HeliHead(700, 0.05f, 0.1f, "250,300,350,400,450,400,350,300"), new LevelProperties.Robot.BlueGem(5f, 100, new MinMax(100f, 300f), 30, 1f, 100, 2f, 5f, 3, false, new MinMax(10f, 350f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.RedGem(5f, 100, new MinMax(100f, 300f), 30, 1f, 100, 2f, 5f, 3, false, new MinMax(10f, 350f), "R,R,R,R,R,R,R,R,R,R,R,R,P"), new LevelProperties.Robot.Inventor(2f, 5f, new MinMax(10f, 15f), new MinMax(1f, 1.1f), "R,B,R,R,B", 0, 200, 100, 5f, 1.5f, 8, 2)));
			}
			return new LevelProperties.Robot(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000253 RID: 595
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000120 RID: 288
			// (get) Token: 0x060006BC RID: 1724 RVA: 0x0003F209 File Offset: 0x0003D609
			// (set) Token: 0x060006BD RID: 1725 RVA: 0x0003F211 File Offset: 0x0003D611
			private protected LevelProperties.Robot properties { protected get; private set; }

			// Token: 0x060006BE RID: 1726 RVA: 0x0003F21A File Offset: 0x0003D61A
			public virtual void LevelInit(LevelProperties.Robot properties)
			{
				this.properties = properties;
			}

			// Token: 0x060006BF RID: 1727 RVA: 0x0003F223 File Offset: 0x0003D623
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000254 RID: 596
		public enum States
		{
			// Token: 0x04000D06 RID: 3334
			Main,
			// Token: 0x04000D07 RID: 3335
			Generic,
			// Token: 0x04000D08 RID: 3336
			HeliHead,
			// Token: 0x04000D09 RID: 3337
			Inventor
		}

		// Token: 0x02000255 RID: 597
		public enum Pattern
		{
			// Token: 0x04000D0B RID: 3339
			Default,
			// Token: 0x04000D0C RID: 3340
			Uninitialized
		}

		// Token: 0x02000256 RID: 598
		public class State : AbstractLevelState<LevelProperties.Robot.Pattern, LevelProperties.Robot.States>
		{
			// Token: 0x060006C0 RID: 1728 RVA: 0x0003F228 File Offset: 0x0003D628
			public State(float healthTrigger, LevelProperties.Robot.Pattern[][] patterns, LevelProperties.Robot.States stateName, LevelProperties.Robot.Hose hose, LevelProperties.Robot.ShotBot shotBot, LevelProperties.Robot.Cannon cannon, LevelProperties.Robot.Orb orb, LevelProperties.Robot.Arms arms, LevelProperties.Robot.MagnetArms magnetArms, LevelProperties.Robot.TwistyArms twistyArms, LevelProperties.Robot.BombBot bombBot, LevelProperties.Robot.Heart heart, LevelProperties.Robot.HeliHead heliHead, LevelProperties.Robot.BlueGem blueGem, LevelProperties.Robot.RedGem redGem, LevelProperties.Robot.Inventor inventor) : base(healthTrigger, patterns, stateName)
			{
				this.hose = hose;
				this.shotBot = shotBot;
				this.cannon = cannon;
				this.orb = orb;
				this.arms = arms;
				this.magnetArms = magnetArms;
				this.twistyArms = twistyArms;
				this.bombBot = bombBot;
				this.heart = heart;
				this.heliHead = heliHead;
				this.blueGem = blueGem;
				this.redGem = redGem;
				this.inventor = inventor;
			}

			// Token: 0x04000D0D RID: 3341
			public readonly LevelProperties.Robot.Hose hose;

			// Token: 0x04000D0E RID: 3342
			public readonly LevelProperties.Robot.ShotBot shotBot;

			// Token: 0x04000D0F RID: 3343
			public readonly LevelProperties.Robot.Cannon cannon;

			// Token: 0x04000D10 RID: 3344
			public readonly LevelProperties.Robot.Orb orb;

			// Token: 0x04000D11 RID: 3345
			public readonly LevelProperties.Robot.Arms arms;

			// Token: 0x04000D12 RID: 3346
			public readonly LevelProperties.Robot.MagnetArms magnetArms;

			// Token: 0x04000D13 RID: 3347
			public readonly LevelProperties.Robot.TwistyArms twistyArms;

			// Token: 0x04000D14 RID: 3348
			public readonly LevelProperties.Robot.BombBot bombBot;

			// Token: 0x04000D15 RID: 3349
			public readonly LevelProperties.Robot.Heart heart;

			// Token: 0x04000D16 RID: 3350
			public readonly LevelProperties.Robot.HeliHead heliHead;

			// Token: 0x04000D17 RID: 3351
			public readonly LevelProperties.Robot.BlueGem blueGem;

			// Token: 0x04000D18 RID: 3352
			public readonly LevelProperties.Robot.RedGem redGem;

			// Token: 0x04000D19 RID: 3353
			public readonly LevelProperties.Robot.Inventor inventor;
		}

		// Token: 0x02000257 RID: 599
		public class Hose : AbstractLevelPropertyGroup
		{
			// Token: 0x060006C1 RID: 1729 RVA: 0x0003F2A6 File Offset: 0x0003D6A6
			public Hose(int health, float warningDuration, int beamDuration, MinMax attackDelayRange, MinMax aimAngleParameter, float delayMinus)
			{
				this.health = health;
				this.warningDuration = warningDuration;
				this.beamDuration = beamDuration;
				this.attackDelayRange = attackDelayRange;
				this.aimAngleParameter = aimAngleParameter;
				this.delayMinus = delayMinus;
			}

			// Token: 0x04000D1A RID: 3354
			public readonly int health;

			// Token: 0x04000D1B RID: 3355
			public readonly float warningDuration;

			// Token: 0x04000D1C RID: 3356
			public readonly int beamDuration;

			// Token: 0x04000D1D RID: 3357
			public readonly MinMax attackDelayRange;

			// Token: 0x04000D1E RID: 3358
			public readonly MinMax aimAngleParameter;

			// Token: 0x04000D1F RID: 3359
			public readonly float delayMinus;
		}

		// Token: 0x02000258 RID: 600
		public class ShotBot : AbstractLevelPropertyGroup
		{
			// Token: 0x060006C2 RID: 1730 RVA: 0x0003F2DC File Offset: 0x0003D6DC
			public ShotBot(int hatchGateHealth, int shotbotHealth, int bulletSpeed, int shotbotFlightSpeed, MinMax pinkBulletCount, int shotbotCount, float shotbotDelay, MinMax initialSpawnDelay, MinMax shotbotWaveDelay, float shotbotShootDelay, float shotbotSpawnDelayMinus)
			{
				this.hatchGateHealth = hatchGateHealth;
				this.shotbotHealth = shotbotHealth;
				this.bulletSpeed = bulletSpeed;
				this.shotbotFlightSpeed = shotbotFlightSpeed;
				this.pinkBulletCount = pinkBulletCount;
				this.shotbotCount = shotbotCount;
				this.shotbotDelay = shotbotDelay;
				this.initialSpawnDelay = initialSpawnDelay;
				this.shotbotWaveDelay = shotbotWaveDelay;
				this.shotbotShootDelay = shotbotShootDelay;
				this.shotbotSpawnDelayMinus = shotbotSpawnDelayMinus;
			}

			// Token: 0x04000D20 RID: 3360
			public readonly int hatchGateHealth;

			// Token: 0x04000D21 RID: 3361
			public readonly int shotbotHealth;

			// Token: 0x04000D22 RID: 3362
			public readonly int bulletSpeed;

			// Token: 0x04000D23 RID: 3363
			public readonly int shotbotFlightSpeed;

			// Token: 0x04000D24 RID: 3364
			public readonly MinMax pinkBulletCount;

			// Token: 0x04000D25 RID: 3365
			public readonly int shotbotCount;

			// Token: 0x04000D26 RID: 3366
			public readonly float shotbotDelay;

			// Token: 0x04000D27 RID: 3367
			public readonly MinMax initialSpawnDelay;

			// Token: 0x04000D28 RID: 3368
			public readonly MinMax shotbotWaveDelay;

			// Token: 0x04000D29 RID: 3369
			public readonly float shotbotShootDelay;

			// Token: 0x04000D2A RID: 3370
			public readonly float shotbotSpawnDelayMinus;
		}

		// Token: 0x02000259 RID: 601
		public class Cannon : AbstractLevelPropertyGroup
		{
			// Token: 0x060006C3 RID: 1731 RVA: 0x0003F344 File Offset: 0x0003D744
			public Cannon(float attackDelay, string[] spreadVariableGroups, string[] shootString, MinMax attackDelayRange)
			{
				this.attackDelay = attackDelay;
				this.spreadVariableGroups = spreadVariableGroups;
				this.shootString = shootString;
				this.attackDelayRange = attackDelayRange;
			}

			// Token: 0x04000D2B RID: 3371
			public readonly float attackDelay;

			// Token: 0x04000D2C RID: 3372
			public readonly string[] spreadVariableGroups;

			// Token: 0x04000D2D RID: 3373
			public readonly string[] shootString;

			// Token: 0x04000D2E RID: 3374
			public readonly MinMax attackDelayRange;
		}

		// Token: 0x0200025A RID: 602
		public class Orb : AbstractLevelPropertyGroup
		{
			// Token: 0x060006C4 RID: 1732 RVA: 0x0003F36C File Offset: 0x0003D76C
			public Orb(int chestHP, int orbHP, int orbMovementSpeed, float orbInitialLaserDelay, MinMax orbInitialSpawnDelay, float orbSpawnDelay, float orbSpawnDelayMinus, bool orbShieldIsActive, float orbInitalOpenDelay)
			{
				this.chestHP = chestHP;
				this.orbHP = orbHP;
				this.orbMovementSpeed = orbMovementSpeed;
				this.orbInitialLaserDelay = orbInitialLaserDelay;
				this.orbInitialSpawnDelay = orbInitialSpawnDelay;
				this.orbSpawnDelay = orbSpawnDelay;
				this.orbSpawnDelayMinus = orbSpawnDelayMinus;
				this.orbShieldIsActive = orbShieldIsActive;
				this.orbInitalOpenDelay = orbInitalOpenDelay;
			}

			// Token: 0x04000D2F RID: 3375
			public readonly int chestHP;

			// Token: 0x04000D30 RID: 3376
			public readonly int orbHP;

			// Token: 0x04000D31 RID: 3377
			public readonly int orbMovementSpeed;

			// Token: 0x04000D32 RID: 3378
			public readonly float orbInitialLaserDelay;

			// Token: 0x04000D33 RID: 3379
			public readonly MinMax orbInitialSpawnDelay;

			// Token: 0x04000D34 RID: 3380
			public readonly float orbSpawnDelay;

			// Token: 0x04000D35 RID: 3381
			public readonly float orbSpawnDelayMinus;

			// Token: 0x04000D36 RID: 3382
			public readonly bool orbShieldIsActive;

			// Token: 0x04000D37 RID: 3383
			public readonly float orbInitalOpenDelay;
		}

		// Token: 0x0200025B RID: 603
		public class Arms : AbstractLevelPropertyGroup
		{
			// Token: 0x060006C5 RID: 1733 RVA: 0x0003F3C4 File Offset: 0x0003D7C4
			public Arms(MinMax attackDelayRange, string attackString)
			{
				this.attackDelayRange = attackDelayRange;
				this.attackString = attackString;
			}

			// Token: 0x04000D38 RID: 3384
			public readonly MinMax attackDelayRange;

			// Token: 0x04000D39 RID: 3385
			public readonly string attackString;
		}

		// Token: 0x0200025C RID: 604
		public class MagnetArms : AbstractLevelPropertyGroup
		{
			// Token: 0x060006C6 RID: 1734 RVA: 0x0003F3DA File Offset: 0x0003D7DA
			public MagnetArms(float magnetStartDelay, float magnetStayDelay, float magnetForce)
			{
				this.magnetStartDelay = magnetStartDelay;
				this.magnetStayDelay = magnetStayDelay;
				this.magnetForce = magnetForce;
			}

			// Token: 0x04000D3A RID: 3386
			public readonly float magnetStartDelay;

			// Token: 0x04000D3B RID: 3387
			public readonly float magnetStayDelay;

			// Token: 0x04000D3C RID: 3388
			public readonly float magnetForce;
		}

		// Token: 0x0200025D RID: 605
		public class TwistyArms : AbstractLevelPropertyGroup
		{
			// Token: 0x060006C7 RID: 1735 RVA: 0x0003F3F7 File Offset: 0x0003D7F7
			public TwistyArms(float warningArmsMoveAmount, float warningDuration, float twistyMoveSpeed, float twistyArmsStayDuration, string twistyPositionString, float bulletSpeed, bool shootTwicePerCycle)
			{
				this.warningArmsMoveAmount = warningArmsMoveAmount;
				this.warningDuration = warningDuration;
				this.twistyMoveSpeed = twistyMoveSpeed;
				this.twistyArmsStayDuration = twistyArmsStayDuration;
				this.twistyPositionString = twistyPositionString;
				this.bulletSpeed = bulletSpeed;
				this.shootTwicePerCycle = shootTwicePerCycle;
			}

			// Token: 0x04000D3D RID: 3389
			public readonly float warningArmsMoveAmount;

			// Token: 0x04000D3E RID: 3390
			public readonly float warningDuration;

			// Token: 0x04000D3F RID: 3391
			public readonly float twistyMoveSpeed;

			// Token: 0x04000D40 RID: 3392
			public readonly float twistyArmsStayDuration;

			// Token: 0x04000D41 RID: 3393
			public readonly string twistyPositionString;

			// Token: 0x04000D42 RID: 3394
			public readonly float bulletSpeed;

			// Token: 0x04000D43 RID: 3395
			public readonly bool shootTwicePerCycle;
		}

		// Token: 0x0200025E RID: 606
		public class BombBot : AbstractLevelPropertyGroup
		{
			// Token: 0x060006C8 RID: 1736 RVA: 0x0003F434 File Offset: 0x0003D834
			public BombBot(int bombHP, int initialBombMovementSpeed, float bombDelay, MinMax bombInitialMovementDuration, int bombBossDamage, int bombHomingSpeed, float bombRotationSpeed, int bombLifeTime)
			{
				this.bombHP = bombHP;
				this.initialBombMovementSpeed = initialBombMovementSpeed;
				this.bombDelay = bombDelay;
				this.bombInitialMovementDuration = bombInitialMovementDuration;
				this.bombBossDamage = bombBossDamage;
				this.bombHomingSpeed = bombHomingSpeed;
				this.bombRotationSpeed = bombRotationSpeed;
				this.bombLifeTime = bombLifeTime;
			}

			// Token: 0x04000D44 RID: 3396
			public readonly int bombHP;

			// Token: 0x04000D45 RID: 3397
			public readonly int initialBombMovementSpeed;

			// Token: 0x04000D46 RID: 3398
			public readonly float bombDelay;

			// Token: 0x04000D47 RID: 3399
			public readonly MinMax bombInitialMovementDuration;

			// Token: 0x04000D48 RID: 3400
			public readonly int bombBossDamage;

			// Token: 0x04000D49 RID: 3401
			public readonly int bombHomingSpeed;

			// Token: 0x04000D4A RID: 3402
			public readonly float bombRotationSpeed;

			// Token: 0x04000D4B RID: 3403
			public readonly int bombLifeTime;
		}

		// Token: 0x0200025F RID: 607
		public class Heart : AbstractLevelPropertyGroup
		{
			// Token: 0x060006C9 RID: 1737 RVA: 0x0003F484 File Offset: 0x0003D884
			public Heart(int heartHP, int heartDamageChangePercentage)
			{
				this.heartHP = heartHP;
				this.heartDamageChangePercentage = heartDamageChangePercentage;
			}

			// Token: 0x04000D4C RID: 3404
			public readonly int heartHP;

			// Token: 0x04000D4D RID: 3405
			public readonly int heartDamageChangePercentage;
		}

		// Token: 0x02000260 RID: 608
		public class HeliHead : AbstractLevelPropertyGroup
		{
			// Token: 0x060006CA RID: 1738 RVA: 0x0003F49A File Offset: 0x0003D89A
			public HeliHead(int heliheadMovementSpeed, float offScreenDelay, float attackDelay, string onScreenHeight)
			{
				this.heliheadMovementSpeed = heliheadMovementSpeed;
				this.offScreenDelay = offScreenDelay;
				this.attackDelay = attackDelay;
				this.onScreenHeight = onScreenHeight;
			}

			// Token: 0x04000D4E RID: 3406
			public readonly int heliheadMovementSpeed;

			// Token: 0x04000D4F RID: 3407
			public readonly float offScreenDelay;

			// Token: 0x04000D50 RID: 3408
			public readonly float attackDelay;

			// Token: 0x04000D51 RID: 3409
			public readonly string onScreenHeight;
		}

		// Token: 0x02000261 RID: 609
		public class BlueGem : AbstractLevelPropertyGroup
		{
			// Token: 0x060006CB RID: 1739 RVA: 0x0003F4C0 File Offset: 0x0003D8C0
			public BlueGem(float robotRotationSpeed, int robotVerticalMovementSpeed, MinMax bulletSpeed, int bulletSpeedAcceleration, float bulletSpawnDelay, int bulletSineWaveStrength, float bulletWaveSpeedMultiplier, float bulletLifeTime, int numberOfSpawnPoints, bool gemWaveRotation, MinMax gemRotationRange, string pinkString)
			{
				this.robotRotationSpeed = robotRotationSpeed;
				this.robotVerticalMovementSpeed = robotVerticalMovementSpeed;
				this.bulletSpeed = bulletSpeed;
				this.bulletSpeedAcceleration = bulletSpeedAcceleration;
				this.bulletSpawnDelay = bulletSpawnDelay;
				this.bulletSineWaveStrength = bulletSineWaveStrength;
				this.bulletWaveSpeedMultiplier = bulletWaveSpeedMultiplier;
				this.bulletLifeTime = bulletLifeTime;
				this.numberOfSpawnPoints = numberOfSpawnPoints;
				this.gemWaveRotation = gemWaveRotation;
				this.gemRotationRange = gemRotationRange;
				this.pinkString = pinkString;
			}

			// Token: 0x04000D52 RID: 3410
			public readonly float robotRotationSpeed;

			// Token: 0x04000D53 RID: 3411
			public readonly int robotVerticalMovementSpeed;

			// Token: 0x04000D54 RID: 3412
			public readonly MinMax bulletSpeed;

			// Token: 0x04000D55 RID: 3413
			public readonly int bulletSpeedAcceleration;

			// Token: 0x04000D56 RID: 3414
			public readonly float bulletSpawnDelay;

			// Token: 0x04000D57 RID: 3415
			public readonly int bulletSineWaveStrength;

			// Token: 0x04000D58 RID: 3416
			public readonly float bulletWaveSpeedMultiplier;

			// Token: 0x04000D59 RID: 3417
			public readonly float bulletLifeTime;

			// Token: 0x04000D5A RID: 3418
			public readonly int numberOfSpawnPoints;

			// Token: 0x04000D5B RID: 3419
			public readonly bool gemWaveRotation;

			// Token: 0x04000D5C RID: 3420
			public readonly MinMax gemRotationRange;

			// Token: 0x04000D5D RID: 3421
			public readonly string pinkString;
		}

		// Token: 0x02000262 RID: 610
		public class RedGem : AbstractLevelPropertyGroup
		{
			// Token: 0x060006CC RID: 1740 RVA: 0x0003F530 File Offset: 0x0003D930
			public RedGem(float robotRotationSpeed, int robotVerticalMovementSpeed, MinMax bulletSpeed, int bulletSpeedAcceleration, float bulletSpawnDelay, int bulletSineWaveStrength, float bulletWaveSpeedMultiplier, float bulletLifeTime, int numberOfSpawnPoints, bool gemWaveRotation, MinMax gemRotationRange, string pinkString)
			{
				this.robotRotationSpeed = robotRotationSpeed;
				this.robotVerticalMovementSpeed = robotVerticalMovementSpeed;
				this.bulletSpeed = bulletSpeed;
				this.bulletSpeedAcceleration = bulletSpeedAcceleration;
				this.bulletSpawnDelay = bulletSpawnDelay;
				this.bulletSineWaveStrength = bulletSineWaveStrength;
				this.bulletWaveSpeedMultiplier = bulletWaveSpeedMultiplier;
				this.bulletLifeTime = bulletLifeTime;
				this.numberOfSpawnPoints = numberOfSpawnPoints;
				this.gemWaveRotation = gemWaveRotation;
				this.gemRotationRange = gemRotationRange;
				this.pinkString = pinkString;
			}

			// Token: 0x04000D5E RID: 3422
			public readonly float robotRotationSpeed;

			// Token: 0x04000D5F RID: 3423
			public readonly int robotVerticalMovementSpeed;

			// Token: 0x04000D60 RID: 3424
			public readonly MinMax bulletSpeed;

			// Token: 0x04000D61 RID: 3425
			public readonly int bulletSpeedAcceleration;

			// Token: 0x04000D62 RID: 3426
			public readonly float bulletSpawnDelay;

			// Token: 0x04000D63 RID: 3427
			public readonly int bulletSineWaveStrength;

			// Token: 0x04000D64 RID: 3428
			public readonly float bulletWaveSpeedMultiplier;

			// Token: 0x04000D65 RID: 3429
			public readonly float bulletLifeTime;

			// Token: 0x04000D66 RID: 3430
			public readonly int numberOfSpawnPoints;

			// Token: 0x04000D67 RID: 3431
			public readonly bool gemWaveRotation;

			// Token: 0x04000D68 RID: 3432
			public readonly MinMax gemRotationRange;

			// Token: 0x04000D69 RID: 3433
			public readonly string pinkString;
		}

		// Token: 0x02000263 RID: 611
		public class Inventor : AbstractLevelPropertyGroup
		{
			// Token: 0x060006CD RID: 1741 RVA: 0x0003F5A0 File Offset: 0x0003D9A0
			public Inventor(float inventorIdleSpeedMultiplier, float initialAttackDelay, MinMax attackDuration, MinMax attackDelay, string gemColourString, int blockadeHorizontalSpawnOffset, int blockadeHorizontalSpeed, int blockadeVerticalSpeed, float blockadeGroupDelay, float blockadeIndividualDelay, int blockadeSegmentLength, int blockadeGroupSize)
			{
				this.inventorIdleSpeedMultiplier = inventorIdleSpeedMultiplier;
				this.initialAttackDelay = initialAttackDelay;
				this.attackDuration = attackDuration;
				this.attackDelay = attackDelay;
				this.gemColourString = gemColourString;
				this.blockadeHorizontalSpawnOffset = blockadeHorizontalSpawnOffset;
				this.blockadeHorizontalSpeed = blockadeHorizontalSpeed;
				this.blockadeVerticalSpeed = blockadeVerticalSpeed;
				this.blockadeGroupDelay = blockadeGroupDelay;
				this.blockadeIndividualDelay = blockadeIndividualDelay;
				this.blockadeSegmentLength = blockadeSegmentLength;
				this.blockadeGroupSize = blockadeGroupSize;
			}

			// Token: 0x04000D6A RID: 3434
			public readonly float inventorIdleSpeedMultiplier;

			// Token: 0x04000D6B RID: 3435
			public readonly float initialAttackDelay;

			// Token: 0x04000D6C RID: 3436
			public readonly MinMax attackDuration;

			// Token: 0x04000D6D RID: 3437
			public readonly MinMax attackDelay;

			// Token: 0x04000D6E RID: 3438
			public readonly string gemColourString;

			// Token: 0x04000D6F RID: 3439
			public readonly int blockadeHorizontalSpawnOffset;

			// Token: 0x04000D70 RID: 3440
			public readonly int blockadeHorizontalSpeed;

			// Token: 0x04000D71 RID: 3441
			public readonly int blockadeVerticalSpeed;

			// Token: 0x04000D72 RID: 3442
			public readonly float blockadeGroupDelay;

			// Token: 0x04000D73 RID: 3443
			public readonly float blockadeIndividualDelay;

			// Token: 0x04000D74 RID: 3444
			public readonly int blockadeSegmentLength;

			// Token: 0x04000D75 RID: 3445
			public readonly int blockadeGroupSize;
		}
	}

	// Token: 0x02000265 RID: 613
	public class RumRunners : AbstractLevelProperties<LevelProperties.RumRunners.State, LevelProperties.RumRunners.Pattern, LevelProperties.RumRunners.States>
	{
		// Token: 0x060006DC RID: 1756 RVA: 0x0003F610 File Offset: 0x0003DA10
		public RumRunners(int hp, Level.GoalTimes goalTimes, LevelProperties.RumRunners.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060006DD RID: 1757 RVA: 0x0003F61C File Offset: 0x0003DA1C
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 975f;
				timeline.events.Add(new Level.Timeline.Event("Worm", 0.55f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1255f;
				timeline.events.Add(new Level.Timeline.Event("Worm", 0.66f));
				timeline.events.Add(new Level.Timeline.Event("Anteater", 0.32f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1455f;
				timeline.events.Add(new Level.Timeline.Event("Worm", 0.66f));
				timeline.events.Add(new Level.Timeline.Event("Anteater", 0.32f));
				break;
			}
			return timeline;
		}

		// Token: 0x060006DE RID: 1758 RVA: 0x0003F6F9 File Offset: 0x0003DAF9
		public static LevelProperties.RumRunners.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.RumRunners.Pattern.Default;
				}
			}
			Debug.LogError("Pattern RumRunners.Pattern for  " + id + " not found.", null);
			return LevelProperties.RumRunners.Pattern.Uninitialized;
		}

		// Token: 0x060006DF RID: 1759 RVA: 0x0003F738 File Offset: 0x0003DB38
		public static LevelProperties.RumRunners GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.RumRunners.State> list = new List<LevelProperties.RumRunners.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1455;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.RumRunners.State(10f, new LevelProperties.RumRunners.Pattern[][]
						{
							new LevelProperties.RumRunners.Pattern[1]
						}, LevelProperties.RumRunners.States.Main, new LevelProperties.RumRunners.Spider(6f, new string[]
						{
							"0,2,1,0,1,2,1,2,0,0,2,1,0,1,2,2,1,0,2"
						}, new string[]
						{
							"B,G,M,B,N,G,M,B,N,M,B,G,M,N"
						}, "0.15,0.85,0.5,0.75,0.25,0.35,0.65", 700f, 0.3f, 50f, new string[]
						{
							"0,1,2,1,0,2",
							"1,2,0,2,0,1"
						}, new string[]
						{
							"R,P,R,R,P"
						}, 0.2f, 0.3f, 461f, 10f), new LevelProperties.RumRunners.Grubs(4.2f, 365f, new string[]
						{
							"0.4,0.6,0.4,0.6,0.2,0.7,0.4,0.6,0.2,0.6"
						}, new string[]
						{
							"0,5,2,9,11,16,13",
							"1,4,8,6,10,15,12",
							"5,2,11,8,12,14",
							"3,1,5,9,7,12,16",
							"4,2,7,11,9,16,13",
							"1,3,10,8,14,12",
							"5,0,3,7,11,13,16",
							"3,5,9,6,10,15,12",
							"4,1,11,8,12,16",
							"2,5,0,6,10,14,12,16",
							"0,3,7,11,13,15"
						}, 1.1f, 1.5f), new LevelProperties.RumRunners.Moth(0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.RumRunners.Mine(5f, new string[]
						{
							"1,3,7,11",
							"2,5,9,10",
							"0,4,6,8,12",
							"13,14,1,7",
							"4,6,9,11",
							"4,8,10,14",
							"0,2,5,8,12",
							"3,6,8,14",
							"1,5,9,13",
							"0,4,7,10,12",
							"2,3,5,11",
							"7,9,10,13",
							"0,6,2,8,14"
						}, 1.1f, 0.4f, 36f, 120f, 20f, 150f), new LevelProperties.RumRunners.Bouncing(20f, 1150f, 2, 865f, new string[]
						{
							"55,60,52,61,54,62,54,59,52,62",
							"54,60,52,63,58,53,62,54,61"
						}, 3), new LevelProperties.RumRunners.Worm(new MinMax(65f, 85f), new MinMax(1.8f, 2.5f), 1.4f, new MinMax(1.7f, 2.3f), new string[]
						{
							"1,2,1,2"
						}, 999f, 3f, 800f, 1f), new LevelProperties.RumRunners.AnteaterSnout(new string[]
						{
							"0,1,2,0,2,0,0,1,2,1,1,0,2,2,1,0,1"
						}, new string[]
						{
							"F,LQ,LT",
							"Q,LT",
							"LQ,Q,T",
							"LF,Q,T",
							"Q,LQ,Q,LT",
							"Q,T",
							"Q,LF,Q,T",
							"Q,LQ,LT",
							"LQ,F,T",
							"LQ,LT"
						}, 0.1f, 0.25f, 0.8f, 0f), new LevelProperties.RumRunners.CopBall(false, true, 38f, new string[]
						{
							"65,50,60,70,55,68,49,66,54",
							"70,56,64,51,69,55,66,52"
						}, 0f, 0f, new string[]
						{
							"45,-45,25,-25"
						}, new string[0], 0f, 0f, new MinMax(951f, 1351f), 5.5f, 2), new LevelProperties.RumRunners.Barrels(485f, 4, "2.2,2.4,2,2.2,2.5,2.5", "N,N,P,N,N,N,P"), new LevelProperties.RumRunners.Boss(0.5f, new MinMax(801f, 965f), new MinMax(0.95f, 0.55f), 9f, "N,N,P,N,N,N,P", "4:1,1:2,0:0,2:0")));
						list.Add(new LevelProperties.RumRunners.State(0.66f, new LevelProperties.RumRunners.Pattern[][]
						{
							new LevelProperties.RumRunners.Pattern[0]
						}, LevelProperties.RumRunners.States.Worm, new LevelProperties.RumRunners.Spider(6f, new string[]
						{
							"0,2,1,0,1,2,1,2,0,0,2,1,0,1,2,2,1,0,2"
						}, new string[]
						{
							"B,G,M,B,N,G,M,B,N,M,B,G,M,N"
						}, "0.15,0.85,0.5,0.75,0.25,0.35,0.65", 700f, 0.3f, 50f, new string[]
						{
							"0,1,2,1,0,2",
							"1,2,0,2,0,1"
						}, new string[]
						{
							"R,P,R,R,P"
						}, 0.2f, 0.3f, 461f, 10f), new LevelProperties.RumRunners.Grubs(4.2f, 365f, new string[]
						{
							"0.4,0.6,0.4,0.6,0.2,0.7,0.4,0.6,0.2,0.6"
						}, new string[]
						{
							"0,5,2,9,11,16,13",
							"1,4,8,6,10,15,12",
							"5,2,11,8,12,14",
							"3,1,5,9,7,12,16",
							"4,2,7,11,9,16,13",
							"1,3,10,8,14,12",
							"5,0,3,7,11,13,16",
							"3,5,9,6,10,15,12",
							"4,1,11,8,12,16",
							"2,5,0,6,10,14,12,16",
							"0,3,7,11,13,15"
						}, 1.1f, 1.5f), new LevelProperties.RumRunners.Moth(0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.RumRunners.Mine(5f, new string[]
						{
							"1,3,7,11",
							"2,5,9,10",
							"0,4,6,8,12",
							"13,14,1,7",
							"4,6,9,11",
							"4,8,10,14",
							"0,2,5,8,12",
							"3,6,8,14",
							"1,5,9,13",
							"0,4,7,10,12",
							"2,3,5,11",
							"7,9,10,13",
							"0,6,2,8,14"
						}, 1.1f, 0.4f, 36f, 120f, 20f, 150f), new LevelProperties.RumRunners.Bouncing(20f, 1150f, 2, 865f, new string[]
						{
							"55,60,52,61,54,62,54,59,52,62",
							"54,60,52,63,58,53,62,54,61"
						}, 3), new LevelProperties.RumRunners.Worm(new MinMax(65f, 85f), new MinMax(1.8f, 2.5f), 1.4f, new MinMax(1.7f, 2.3f), new string[]
						{
							"1,2,1,2"
						}, 999f, 3f, 800f, 1f), new LevelProperties.RumRunners.AnteaterSnout(new string[]
						{
							"0,1,2,0,2,0,0,1,2,1,1,0,2,2,1,0,1"
						}, new string[]
						{
							"F,LQ,LT",
							"Q,LT",
							"LQ,Q,T",
							"LF,Q,T",
							"Q,LQ,Q,LT",
							"Q,T",
							"Q,LF,Q,T",
							"Q,LQ,LT",
							"LQ,F,T",
							"LQ,LT"
						}, 0.1f, 0.25f, 0.8f, 0f), new LevelProperties.RumRunners.CopBall(false, true, 38f, new string[]
						{
							"65,50,60,70,55,68,49,66,54",
							"70,56,64,51,69,55,66,52"
						}, 0f, 0f, new string[]
						{
							"45,-45,25,-25"
						}, new string[0], 0f, 0f, new MinMax(951f, 1351f), 5.5f, 2), new LevelProperties.RumRunners.Barrels(485f, 4, "2.2,2.4,2,2.2,2.5,2.5", "N,N,P,N,N,N,P"), new LevelProperties.RumRunners.Boss(0.5f, new MinMax(801f, 965f), new MinMax(0.95f, 0.55f), 9f, "N,N,P,N,N,N,P", "4:1,1:2,0:0,2:0")));
						list.Add(new LevelProperties.RumRunners.State(0.32f, new LevelProperties.RumRunners.Pattern[][]
						{
							new LevelProperties.RumRunners.Pattern[0]
						}, LevelProperties.RumRunners.States.Anteater, new LevelProperties.RumRunners.Spider(6f, new string[]
						{
							"0,2,1,0,1,2,1,2,0,0,2,1,0,1,2,2,1,0,2"
						}, new string[]
						{
							"B,G,M,B,N,G,M,B,N,M,B,G,M,N"
						}, "0.15,0.85,0.5,0.75,0.25,0.35,0.65", 700f, 0.3f, 50f, new string[]
						{
							"0,1,2,1,0,2",
							"1,2,0,2,0,1"
						}, new string[]
						{
							"R,P,R,R,P"
						}, 0.2f, 0.3f, 461f, 10f), new LevelProperties.RumRunners.Grubs(4.2f, 365f, new string[]
						{
							"0.4,0.6,0.4,0.6,0.2,0.7,0.4,0.6,0.2,0.6"
						}, new string[]
						{
							"0,5,2,9,11,16,13",
							"1,4,8,6,10,15,12",
							"5,2,11,8,12,14",
							"3,1,5,9,7,12,16",
							"4,2,7,11,9,16,13",
							"1,3,10,8,14,12",
							"5,0,3,7,11,13,16",
							"3,5,9,6,10,15,12",
							"4,1,11,8,12,16",
							"2,5,0,6,10,14,12,16",
							"0,3,7,11,13,15"
						}, 1.1f, 1.5f), new LevelProperties.RumRunners.Moth(0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.RumRunners.Mine(5f, new string[]
						{
							"1,3,7,11",
							"2,5,9,10",
							"0,4,6,8,12",
							"13,14,1,7",
							"4,6,9,11",
							"4,8,10,14",
							"0,2,5,8,12",
							"3,6,8,14",
							"1,5,9,13",
							"0,4,7,10,12",
							"2,3,5,11",
							"7,9,10,13",
							"0,6,2,8,14"
						}, 1.1f, 0.4f, 36f, 120f, 20f, 150f), new LevelProperties.RumRunners.Bouncing(20f, 1150f, 2, 865f, new string[]
						{
							"55,60,52,61,54,62,54,59,52,62",
							"54,60,52,63,58,53,62,54,61"
						}, 3), new LevelProperties.RumRunners.Worm(new MinMax(65f, 85f), new MinMax(1.8f, 2.5f), 1.4f, new MinMax(1.7f, 2.3f), new string[]
						{
							"1,2,1,2"
						}, 999f, 3f, 800f, 1f), new LevelProperties.RumRunners.AnteaterSnout(new string[]
						{
							"0,1,2,0,2,0,0,1,2,1,1,0,2,2,1,0,1"
						}, new string[]
						{
							"F,LQ,LT",
							"Q,LT",
							"LQ,Q,T",
							"LF,Q,T",
							"Q,LQ,Q,LT",
							"Q,T",
							"Q,LF,Q,T",
							"Q,LQ,LT",
							"LQ,F,T",
							"LQ,LT"
						}, 0.1f, 0.25f, 0.8f, 0f), new LevelProperties.RumRunners.CopBall(false, true, 38f, new string[]
						{
							"65,50,60,70,55,68,49,66,54",
							"70,56,64,51,69,55,66,52"
						}, 0f, 0f, new string[]
						{
							"45,-45,25,-25"
						}, new string[0], 0f, 0f, new MinMax(951f, 1351f), 5.5f, 2), new LevelProperties.RumRunners.Barrels(485f, 4, "2.2,2.4,2,2.2,2.5,2.5", "N,N,P,N,N,N,P"), new LevelProperties.RumRunners.Boss(0.5f, new MinMax(801f, 965f), new MinMax(0.95f, 0.55f), 9f, "N,N,P,N,N,N,P", "4:1,1:2,0:0,2:0")));
						list.Add(new LevelProperties.RumRunners.State(0.05f, new LevelProperties.RumRunners.Pattern[][]
						{
							new LevelProperties.RumRunners.Pattern[0]
						}, LevelProperties.RumRunners.States.MobBoss, new LevelProperties.RumRunners.Spider(6f, new string[]
						{
							"0,2,1,0,1,2,1,2,0,0,2,1,0,1,2,2,1,0,2"
						}, new string[]
						{
							"B,G,M,B,N,G,M,B,N,M,B,G,M,N"
						}, "0.15,0.85,0.5,0.75,0.25,0.35,0.65", 700f, 0.3f, 50f, new string[]
						{
							"0,1,2,1,0,2",
							"1,2,0,2,0,1"
						}, new string[]
						{
							"R,P,R,R,P"
						}, 0.2f, 0.3f, 461f, 10f), new LevelProperties.RumRunners.Grubs(4.2f, 365f, new string[]
						{
							"0.4,0.6,0.4,0.6,0.2,0.7,0.4,0.6,0.2,0.6"
						}, new string[]
						{
							"0,5,2,9,11,16,13",
							"1,4,8,6,10,15,12",
							"5,2,11,8,12,14",
							"3,1,5,9,7,12,16",
							"4,2,7,11,9,16,13",
							"1,3,10,8,14,12",
							"5,0,3,7,11,13,16",
							"3,5,9,6,10,15,12",
							"4,1,11,8,12,16",
							"2,5,0,6,10,14,12,16",
							"0,3,7,11,13,15"
						}, 1.1f, 1.5f), new LevelProperties.RumRunners.Moth(0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.RumRunners.Mine(5f, new string[]
						{
							"1,3,7,11",
							"2,5,9,10",
							"0,4,6,8,12",
							"13,14,1,7",
							"4,6,9,11",
							"4,8,10,14",
							"0,2,5,8,12",
							"3,6,8,14",
							"1,5,9,13",
							"0,4,7,10,12",
							"2,3,5,11",
							"7,9,10,13",
							"0,6,2,8,14"
						}, 1.1f, 0.4f, 36f, 120f, 20f, 150f), new LevelProperties.RumRunners.Bouncing(20f, 1150f, 2, 865f, new string[]
						{
							"55,60,52,61,54,62,54,59,52,62",
							"54,60,52,63,58,53,62,54,61"
						}, 3), new LevelProperties.RumRunners.Worm(new MinMax(65f, 85f), new MinMax(1.8f, 2.5f), 1.4f, new MinMax(1.7f, 2.3f), new string[]
						{
							"1,2,1,2"
						}, 999f, 3f, 800f, 1f), new LevelProperties.RumRunners.AnteaterSnout(new string[]
						{
							"0,1,2,0,2,0,0,1,2,1,1,0,2,2,1,0,1"
						}, new string[]
						{
							"F,LQ,LT",
							"Q,LT",
							"LQ,Q,T",
							"LF,Q,T",
							"Q,LQ,Q,LT",
							"Q,T",
							"Q,LF,Q,T",
							"Q,LQ,LT",
							"LQ,F,T",
							"LQ,LT"
						}, 0.1f, 0.25f, 0.8f, 0f), new LevelProperties.RumRunners.CopBall(false, true, 38f, new string[]
						{
							"65,50,60,70,55,68,49,66,54",
							"70,56,64,51,69,55,66,52"
						}, 0f, 0f, new string[]
						{
							"45,-45,25,-25"
						}, new string[0], 0f, 0f, new MinMax(951f, 1351f), 5.5f, 2), new LevelProperties.RumRunners.Barrels(485f, 4, "2.2,2.4,2,2.2,2.5,2.5", "N,N,P,N,N,N,P"), new LevelProperties.RumRunners.Boss(0.5f, new MinMax(801f, 965f), new MinMax(0.95f, 0.55f), 9f, "N,N,P,N,N,N,P", "4:1,1:2,0:0,2:0")));
					}
				}
				else
				{
					hp = 1255;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.RumRunners.State(10f, new LevelProperties.RumRunners.Pattern[][]
					{
						new LevelProperties.RumRunners.Pattern[1]
					}, LevelProperties.RumRunners.States.Main, new LevelProperties.RumRunners.Spider(6f, new string[]
					{
						"0,2,1,0,1,2,1,2,0,0,2,1,0,1,2,2,1,0,2"
					}, new string[]
					{
						"B,G,N,M,G,M,N,G,B,M,G,N"
					}, "0.15,0.85,0.5,0.75,0.25,0.35,0.65", 700f, 0.3f, 50f, new string[]
					{
						"1,0,2,1,2,0",
						"2,1,2,0,1,0"
					}, new string[]
					{
						"R,P,R,R,P"
					}, 0.2f, 0.3f, 451f, 10f), new LevelProperties.RumRunners.Grubs(4.1f, 355f, new string[]
					{
						"0.4,0.6,0.4,0.6,1,0.7,0.4,0.6,0.2,0.6"
					}, new string[]
					{
						"0,3,7,11,13,16",
						"2,5,6,10,14,12",
						"4,1,11,8,12,14",
						"3,5,9,6,15,12",
						"5,0,7,11,13,16",
						"1,3,10,8,14,12",
						"4,2,7,9,16,13",
						"3,1,7,10,12,16",
						"5,2,11,8,12,16",
						"1,4,8,6,15,12",
						"0,2,9,11,16,13"
					}, 1.1f, 1.5f), new LevelProperties.RumRunners.Moth(125f, 300f, 1f, 1.1f, 550f, 6f), new LevelProperties.RumRunners.Mine(4f, new string[]
					{
						"0,3,7,11",
						"1,5,13",
						"4,6,10,12",
						"2,8,14",
						"1,3,7,11",
						"0,9,13",
						"2,5,12",
						"3,7,9,10",
						"4,8,11",
						"1,6,8,14",
						"2,9,12"
					}, 1.1f, 0.5f, 40f, 120f, 20f, 150f), new LevelProperties.RumRunners.Bouncing(16f, 1105f, 2, 825f, new string[]
					{
						"55,65,54,60,55,64,58,65,56,61",
						"54,65,56,66,60,55,62,57,64"
					}, 2), new LevelProperties.RumRunners.Worm(new MinMax(55f, 75f), new MinMax(2.1f, 2.7f), 1.6f, new MinMax(1.5f, 2.1f), new string[]
					{
						"1,2,1,2"
					}, 999f, 3f, 800f, 1f), new LevelProperties.RumRunners.AnteaterSnout(new string[]
					{
						"0,1,2,0,2,0,0,1,2,1,1,0,2,2,1,0,1"
					}, new string[]
					{
						"LQ,F,LT",
						"Q,T",
						"LQ,Q,LF,Q,T",
						"Q,LF,Q,T",
						"F,LQ,Q,LT",
						"Q,LT",
						"LF,Q,LQ,Q,T",
						"Q,F,LQ,LT",
						"Q,Q,LT"
					}, 0.1f, 0.25f, 0.8f, 1f), new LevelProperties.RumRunners.CopBall(false, true, 38f, new string[]
					{
						"65,50,60,70,55,68,49,66,54",
						"70,56,64,51,69,55,66,52"
					}, 100f, 99f, new string[]
					{
						"0"
					}, new string[]
					{
						"R,R,P"
					}, 99f, 255f, new MinMax(901f, 1350f), 7.5f, 1), new LevelProperties.RumRunners.Barrels(485f, 4, "2.5,2.8,2.5,2.7,2.4,2.8,2.6", "N,N,P,N,N,N,P"), new LevelProperties.RumRunners.Boss(0.5f, new MinMax(700f, 865f), new MinMax(0.95f, 0.55f), 9f, "N,N,P,N,N,N,P", "4:1,1:2,0:0,2:0")));
					list.Add(new LevelProperties.RumRunners.State(0.66f, new LevelProperties.RumRunners.Pattern[][]
					{
						new LevelProperties.RumRunners.Pattern[0]
					}, LevelProperties.RumRunners.States.Worm, new LevelProperties.RumRunners.Spider(6f, new string[]
					{
						"0,2,1,0,1,2,1,2,0,0,2,1,0,1,2,2,1,0,2"
					}, new string[]
					{
						"B,G,N,M,G,M,N,G,B,M,G,N"
					}, "0.15,0.85,0.5,0.75,0.25,0.35,0.65", 700f, 0.3f, 50f, new string[]
					{
						"1,0,2,1,2,0",
						"2,1,2,0,1,0"
					}, new string[]
					{
						"R,P,R,R,P"
					}, 0.2f, 0.3f, 451f, 10f), new LevelProperties.RumRunners.Grubs(4.1f, 355f, new string[]
					{
						"0.4,0.6,0.4,0.6,1,0.7,0.4,0.6,0.2,0.6"
					}, new string[]
					{
						"0,3,7,11,13,16",
						"2,5,6,10,14,12",
						"4,1,11,8,12,14",
						"3,5,9,6,15,12",
						"5,0,7,11,13,16",
						"1,3,10,8,14,12",
						"4,2,7,9,16,13",
						"3,1,7,10,12,16",
						"5,2,11,8,12,16",
						"1,4,8,6,15,12",
						"0,2,9,11,16,13"
					}, 1.1f, 1.5f), new LevelProperties.RumRunners.Moth(125f, 300f, 1f, 1.1f, 550f, 6f), new LevelProperties.RumRunners.Mine(4f, new string[]
					{
						"0,3,7,11",
						"1,5,13",
						"4,6,10,12",
						"2,8,14",
						"1,3,7,11",
						"0,9,13",
						"2,5,12",
						"3,7,9,10",
						"4,8,11",
						"1,6,8,14",
						"2,9,12"
					}, 1.1f, 0.5f, 40f, 120f, 20f, 150f), new LevelProperties.RumRunners.Bouncing(16f, 1105f, 2, 825f, new string[]
					{
						"55,65,54,60,55,64,58,65,56,61",
						"54,65,56,66,60,55,62,57,64"
					}, 2), new LevelProperties.RumRunners.Worm(new MinMax(55f, 75f), new MinMax(2.1f, 2.7f), 1.6f, new MinMax(1.5f, 2.1f), new string[]
					{
						"1,2,1,2"
					}, 999f, 3f, 800f, 1f), new LevelProperties.RumRunners.AnteaterSnout(new string[]
					{
						"0,1,2,0,2,0,0,1,2,1,1,0,2,2,1,0,1"
					}, new string[]
					{
						"LQ,F,LT",
						"Q,T",
						"LQ,Q,LF,Q,T",
						"Q,LF,Q,T",
						"F,LQ,Q,LT",
						"Q,LT",
						"LF,Q,LQ,Q,T",
						"Q,F,LQ,LT",
						"Q,Q,LT"
					}, 0.1f, 0.25f, 0.8f, 1f), new LevelProperties.RumRunners.CopBall(false, true, 38f, new string[]
					{
						"65,50,60,70,55,68,49,66,54",
						"70,56,64,51,69,55,66,52"
					}, 100f, 99f, new string[]
					{
						"0"
					}, new string[]
					{
						"R,R,P"
					}, 99f, 255f, new MinMax(901f, 1350f), 7.5f, 1), new LevelProperties.RumRunners.Barrels(485f, 4, "2.5,2.8,2.5,2.7,2.4,2.8,2.6", "N,N,P,N,N,N,P"), new LevelProperties.RumRunners.Boss(0.5f, new MinMax(700f, 865f), new MinMax(0.95f, 0.55f), 9f, "N,N,P,N,N,N,P", "4:1,1:2,0:0,2:0")));
					list.Add(new LevelProperties.RumRunners.State(0.32f, new LevelProperties.RumRunners.Pattern[][]
					{
						new LevelProperties.RumRunners.Pattern[0]
					}, LevelProperties.RumRunners.States.Anteater, new LevelProperties.RumRunners.Spider(6f, new string[]
					{
						"0,2,1,0,1,2,1,2,0,0,2,1,0,1,2,2,1,0,2"
					}, new string[]
					{
						"B,G,N,M,G,M,N,G,B,M,G,N"
					}, "0.15,0.85,0.5,0.75,0.25,0.35,0.65", 700f, 0.3f, 50f, new string[]
					{
						"1,0,2,1,2,0",
						"2,1,2,0,1,0"
					}, new string[]
					{
						"R,P,R,R,P"
					}, 0.2f, 0.3f, 451f, 10f), new LevelProperties.RumRunners.Grubs(4.1f, 355f, new string[]
					{
						"0.4,0.6,0.4,0.6,1,0.7,0.4,0.6,0.2,0.6"
					}, new string[]
					{
						"0,3,7,11,13,16",
						"2,5,6,10,14,12",
						"4,1,11,8,12,14",
						"3,5,9,6,15,12",
						"5,0,7,11,13,16",
						"1,3,10,8,14,12",
						"4,2,7,9,16,13",
						"3,1,7,10,12,16",
						"5,2,11,8,12,16",
						"1,4,8,6,15,12",
						"0,2,9,11,16,13"
					}, 1.1f, 1.5f), new LevelProperties.RumRunners.Moth(125f, 300f, 1f, 1.1f, 550f, 6f), new LevelProperties.RumRunners.Mine(4f, new string[]
					{
						"0,3,7,11",
						"1,5,13",
						"4,6,10,12",
						"2,8,14",
						"1,3,7,11",
						"0,9,13",
						"2,5,12",
						"3,7,9,10",
						"4,8,11",
						"1,6,8,14",
						"2,9,12"
					}, 1.1f, 0.5f, 40f, 120f, 20f, 150f), new LevelProperties.RumRunners.Bouncing(16f, 1105f, 2, 825f, new string[]
					{
						"55,65,54,60,55,64,58,65,56,61",
						"54,65,56,66,60,55,62,57,64"
					}, 2), new LevelProperties.RumRunners.Worm(new MinMax(55f, 75f), new MinMax(2.1f, 2.7f), 1.6f, new MinMax(1.5f, 2.1f), new string[]
					{
						"1,2,1,2"
					}, 999f, 3f, 800f, 1f), new LevelProperties.RumRunners.AnteaterSnout(new string[]
					{
						"0,1,2,0,2,0,0,1,2,1,1,0,2,2,1,0,1"
					}, new string[]
					{
						"LQ,F,LT",
						"Q,T",
						"LQ,Q,LF,Q,T",
						"Q,LF,Q,T",
						"F,LQ,Q,LT",
						"Q,LT",
						"LF,Q,LQ,Q,T",
						"Q,F,LQ,LT",
						"Q,Q,LT"
					}, 0.1f, 0.25f, 0.8f, 1f), new LevelProperties.RumRunners.CopBall(false, true, 38f, new string[]
					{
						"65,50,60,70,55,68,49,66,54",
						"70,56,64,51,69,55,66,52"
					}, 100f, 99f, new string[]
					{
						"0"
					}, new string[]
					{
						"R,R,P"
					}, 99f, 255f, new MinMax(901f, 1350f), 7.5f, 1), new LevelProperties.RumRunners.Barrels(485f, 4, "2.5,2.8,2.5,2.7,2.4,2.8,2.6", "N,N,P,N,N,N,P"), new LevelProperties.RumRunners.Boss(0.5f, new MinMax(700f, 865f), new MinMax(0.95f, 0.55f), 9f, "N,N,P,N,N,N,P", "4:1,1:2,0:0,2:0")));
					list.Add(new LevelProperties.RumRunners.State(0.05f, new LevelProperties.RumRunners.Pattern[][]
					{
						new LevelProperties.RumRunners.Pattern[0]
					}, LevelProperties.RumRunners.States.MobBoss, new LevelProperties.RumRunners.Spider(6f, new string[]
					{
						"0,2,1,0,1,2,1,2,0,0,2,1,0,1,2,2,1,0,2"
					}, new string[]
					{
						"B,G,N,M,G,M,N,G,B,M,G,N"
					}, "0.15,0.85,0.5,0.75,0.25,0.35,0.65", 700f, 0.3f, 50f, new string[]
					{
						"1,0,2,1,2,0",
						"2,1,2,0,1,0"
					}, new string[]
					{
						"R,P,R,R,P"
					}, 0.2f, 0.3f, 451f, 10f), new LevelProperties.RumRunners.Grubs(4.1f, 355f, new string[]
					{
						"0.4,0.6,0.4,0.6,1,0.7,0.4,0.6,0.2,0.6"
					}, new string[]
					{
						"0,3,7,11,13,16",
						"2,5,6,10,14,12",
						"4,1,11,8,12,14",
						"3,5,9,6,15,12",
						"5,0,7,11,13,16",
						"1,3,10,8,14,12",
						"4,2,7,9,16,13",
						"3,1,7,10,12,16",
						"5,2,11,8,12,16",
						"1,4,8,6,15,12",
						"0,2,9,11,16,13"
					}, 1.1f, 1.5f), new LevelProperties.RumRunners.Moth(125f, 300f, 1f, 1.1f, 550f, 6f), new LevelProperties.RumRunners.Mine(4f, new string[]
					{
						"0,3,7,11",
						"1,5,13",
						"4,6,10,12",
						"2,8,14",
						"1,3,7,11",
						"0,9,13",
						"2,5,12",
						"3,7,9,10",
						"4,8,11",
						"1,6,8,14",
						"2,9,12"
					}, 1.1f, 0.5f, 40f, 120f, 20f, 150f), new LevelProperties.RumRunners.Bouncing(16f, 1105f, 2, 825f, new string[]
					{
						"55,65,54,60,55,64,58,65,56,61",
						"54,65,56,66,60,55,62,57,64"
					}, 2), new LevelProperties.RumRunners.Worm(new MinMax(55f, 75f), new MinMax(2.1f, 2.7f), 1.6f, new MinMax(1.5f, 2.1f), new string[]
					{
						"1,2,1,2"
					}, 999f, 3f, 800f, 1f), new LevelProperties.RumRunners.AnteaterSnout(new string[]
					{
						"0,1,2,0,2,0,0,1,2,1,1,0,2,2,1,0,1"
					}, new string[]
					{
						"LQ,F,LT",
						"Q,T",
						"LQ,Q,LF,Q,T",
						"Q,LF,Q,T",
						"F,LQ,Q,LT",
						"Q,LT",
						"LF,Q,LQ,Q,T",
						"Q,F,LQ,LT",
						"Q,Q,LT"
					}, 0.1f, 0.25f, 0.8f, 1f), new LevelProperties.RumRunners.CopBall(false, true, 38f, new string[]
					{
						"65,50,60,70,55,68,49,66,54",
						"70,56,64,51,69,55,66,52"
					}, 100f, 99f, new string[]
					{
						"0"
					}, new string[]
					{
						"R,R,P"
					}, 99f, 255f, new MinMax(901f, 1350f), 7.5f, 1), new LevelProperties.RumRunners.Barrels(485f, 4, "2.5,2.8,2.5,2.7,2.4,2.8,2.6", "N,N,P,N,N,N,P"), new LevelProperties.RumRunners.Boss(0.5f, new MinMax(700f, 865f), new MinMax(0.95f, 0.55f), 9f, "N,N,P,N,N,N,P", "4:1,1:2,0:0,2:0")));
				}
			}
			else
			{
				hp = 975;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.RumRunners.State(10f, new LevelProperties.RumRunners.Pattern[][]
				{
					new LevelProperties.RumRunners.Pattern[1]
				}, LevelProperties.RumRunners.States.Main, new LevelProperties.RumRunners.Spider(6f, new string[]
				{
					"0,1,2,1"
				}, new string[]
				{
					"G,N,M,G,M,M,N,G,M,M,G,M,N"
				}, "0.15,0.85,0.5,0.75,0.25,0.35,0.65", 700f, 0.3f, 50f, new string[]
				{
					"1,0,2,1,2,0",
					"2,1,0,2,0,1",
					"0,2,1,0,1,2"
				}, new string[]
				{
					"R,P,R,P"
				}, 0.2f, 0.3f, 441f, 10f), new LevelProperties.RumRunners.Grubs(4.1f, 335f, new string[]
				{
					"0.4,0.6,0.4,0.6,1,0.7,0.4,0.6,0.2,0.6"
				}, new string[]
				{
					"0,12,6,10",
					"3,9,15,1",
					"10,4,16,12",
					"7,13,1,4",
					"6,0,12,5",
					"16,4,10,8",
					"13,7,1,11",
					"15,3,9,12",
					"0,12,6,11",
					"14,2,8,1",
					"10,16,4,7",
					"13,1,7,5",
					"9,3,15,6"
				}, 1.1f, 1f), new LevelProperties.RumRunners.Moth(125f, 300f, 1f, 1.1f, 550f, 6f), new LevelProperties.RumRunners.Mine(3f, new string[]
				{
					"0,7",
					"3,9,12",
					"2,14",
					"4,5,11",
					"6,13",
					"1,8,10",
					"3,11",
					"4,7,13",
					"1,10",
					"0,8,12",
					"5,13",
					"2,6,9",
					"4,12",
					"0,9,11",
					"7,14",
					"2,5,10",
					"3,6",
					"1,8,13"
				}, 1.1f, 0.6f, 35f, 120f, 20f, 150f), new LevelProperties.RumRunners.Bouncing(16f, 1050f, 2, 675f, new string[]
				{
					"40,45,50,42,53,46,41"
				}, 1), new LevelProperties.RumRunners.Worm(new MinMax(25f, 35f), new MinMax(1.6f, 2.2f), 1.6f, new MinMax(2f, 3f), new string[]
				{
					"1,2,1,2"
				}, 999f, 3f, 800f, 1f), new LevelProperties.RumRunners.AnteaterSnout(new string[]
				{
					"0,1,2,0,2,0,0,1,2,1,1,0,2,2,1,0,1"
				}, new string[]
				{
					"Q,F",
					"Q",
					"Q,Q,F,Q",
					"Q,F,Q",
					"F,Q,Q",
					"Q,Q",
					"Q,F,Q,Q",
					"Q,F,Q"
				}, 0f, 0f, 0.1f, 0f), new LevelProperties.RumRunners.CopBall(false, true, 31f, new string[]
				{
					"45,50,40,52,45,39"
				}, 800f, 999f, new string[]
				{
					"60,210,90,150"
				}, new string[]
				{
					"R,R,P"
				}, 99f, 255f, new MinMax(750f, 1100f), 6.5f, 1), new LevelProperties.RumRunners.Barrels(485f, 4, "2.8,3.1,2.7,3.2,2.9,3,2.8", "N,N,P,N,P"), new LevelProperties.RumRunners.Boss(0f, new MinMax(700f, 800f), new MinMax(1f, 0.55f), 10f, string.Empty, string.Empty)));
				list.Add(new LevelProperties.RumRunners.State(0.55f, new LevelProperties.RumRunners.Pattern[][]
				{
					new LevelProperties.RumRunners.Pattern[0]
				}, LevelProperties.RumRunners.States.Worm, new LevelProperties.RumRunners.Spider(6f, new string[]
				{
					"0,1,2,1"
				}, new string[]
				{
					"G,N,M,G,M,M,N,G,M,M,G,M,N"
				}, "0.15,0.85,0.5,0.75,0.25,0.35,0.65", 700f, 0.3f, 50f, new string[]
				{
					"1,0,2,1,2,0",
					"2,1,0,2,0,1",
					"0,2,1,0,1,2"
				}, new string[]
				{
					"R,P,R,P"
				}, 0.2f, 0.3f, 441f, 10f), new LevelProperties.RumRunners.Grubs(4.1f, 335f, new string[]
				{
					"0.4,0.6,0.4,0.6,1,0.7,0.4,0.6,0.2,0.6"
				}, new string[]
				{
					"0,12,6,10",
					"3,9,15,1",
					"10,4,16,12",
					"7,13,1,4",
					"6,0,12,5",
					"16,4,10,8",
					"13,7,1,11",
					"15,3,9,12",
					"0,12,6,11",
					"14,2,8,1",
					"10,16,4,7",
					"13,1,7,5",
					"9,3,15,6"
				}, 1.1f, 1f), new LevelProperties.RumRunners.Moth(125f, 300f, 1f, 1.1f, 550f, 6f), new LevelProperties.RumRunners.Mine(3f, new string[]
				{
					"0,7",
					"3,9,12",
					"2,14",
					"4,5,11",
					"6,13",
					"1,8,10",
					"3,11",
					"4,7,13",
					"1,10",
					"0,8,12",
					"5,13",
					"2,6,9",
					"4,12",
					"0,9,11",
					"7,14",
					"2,5,10",
					"3,6",
					"1,8,13"
				}, 1.1f, 0.6f, 35f, 120f, 20f, 150f), new LevelProperties.RumRunners.Bouncing(16f, 1050f, 2, 675f, new string[]
				{
					"40,45,50,42,53,46,41"
				}, 1), new LevelProperties.RumRunners.Worm(new MinMax(25f, 35f), new MinMax(1.6f, 2.2f), 1.6f, new MinMax(2f, 3f), new string[]
				{
					"1,2,1,2"
				}, 999f, 3f, 800f, 1f), new LevelProperties.RumRunners.AnteaterSnout(new string[]
				{
					"0,1,2,0,2,0,0,1,2,1,1,0,2,2,1,0,1"
				}, new string[]
				{
					"Q,F",
					"Q",
					"Q,Q,F,Q",
					"Q,F,Q",
					"F,Q,Q",
					"Q,Q",
					"Q,F,Q,Q",
					"Q,F,Q"
				}, 0f, 0f, 0.1f, 0f), new LevelProperties.RumRunners.CopBall(false, true, 31f, new string[]
				{
					"45,50,40,52,45,39"
				}, 800f, 999f, new string[]
				{
					"60,210,90,150"
				}, new string[]
				{
					"R,R,P"
				}, 99f, 255f, new MinMax(750f, 1100f), 6.5f, 1), new LevelProperties.RumRunners.Barrels(485f, 4, "2.8,3.1,2.7,3.2,2.9,3,2.8", "N,N,P,N,P"), new LevelProperties.RumRunners.Boss(0f, new MinMax(700f, 800f), new MinMax(1f, 0.55f), 10f, string.Empty, string.Empty)));
			}
			return new LevelProperties.RumRunners(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000266 RID: 614
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000125 RID: 293
			// (get) Token: 0x060006E1 RID: 1761 RVA: 0x00041B31 File Offset: 0x0003FF31
			// (set) Token: 0x060006E2 RID: 1762 RVA: 0x00041B39 File Offset: 0x0003FF39
			private protected LevelProperties.RumRunners properties { protected get; private set; }

			// Token: 0x060006E3 RID: 1763 RVA: 0x00041B42 File Offset: 0x0003FF42
			public virtual void LevelInit(LevelProperties.RumRunners properties)
			{
				this.properties = properties;
			}

			// Token: 0x060006E4 RID: 1764 RVA: 0x00041B4B File Offset: 0x0003FF4B
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000267 RID: 615
		public enum States
		{
			// Token: 0x04000D81 RID: 3457
			Main,
			// Token: 0x04000D82 RID: 3458
			Generic,
			// Token: 0x04000D83 RID: 3459
			Worm,
			// Token: 0x04000D84 RID: 3460
			Anteater,
			// Token: 0x04000D85 RID: 3461
			MobBoss
		}

		// Token: 0x02000268 RID: 616
		public enum Pattern
		{
			// Token: 0x04000D87 RID: 3463
			Default,
			// Token: 0x04000D88 RID: 3464
			Uninitialized
		}

		// Token: 0x02000269 RID: 617
		public class State : AbstractLevelState<LevelProperties.RumRunners.Pattern, LevelProperties.RumRunners.States>
		{
			// Token: 0x060006E5 RID: 1765 RVA: 0x00041B50 File Offset: 0x0003FF50
			public State(float healthTrigger, LevelProperties.RumRunners.Pattern[][] patterns, LevelProperties.RumRunners.States stateName, LevelProperties.RumRunners.Spider spider, LevelProperties.RumRunners.Grubs grubs, LevelProperties.RumRunners.Moth moth, LevelProperties.RumRunners.Mine mine, LevelProperties.RumRunners.Bouncing bouncing, LevelProperties.RumRunners.Worm worm, LevelProperties.RumRunners.AnteaterSnout anteaterSnout, LevelProperties.RumRunners.CopBall copBall, LevelProperties.RumRunners.Barrels barrels, LevelProperties.RumRunners.Boss boss) : base(healthTrigger, patterns, stateName)
			{
				this.spider = spider;
				this.grubs = grubs;
				this.moth = moth;
				this.mine = mine;
				this.bouncing = bouncing;
				this.worm = worm;
				this.anteaterSnout = anteaterSnout;
				this.copBall = copBall;
				this.barrels = barrels;
				this.boss = boss;
			}

			// Token: 0x04000D89 RID: 3465
			public readonly LevelProperties.RumRunners.Spider spider;

			// Token: 0x04000D8A RID: 3466
			public readonly LevelProperties.RumRunners.Grubs grubs;

			// Token: 0x04000D8B RID: 3467
			public readonly LevelProperties.RumRunners.Moth moth;

			// Token: 0x04000D8C RID: 3468
			public readonly LevelProperties.RumRunners.Mine mine;

			// Token: 0x04000D8D RID: 3469
			public readonly LevelProperties.RumRunners.Bouncing bouncing;

			// Token: 0x04000D8E RID: 3470
			public readonly LevelProperties.RumRunners.Worm worm;

			// Token: 0x04000D8F RID: 3471
			public readonly LevelProperties.RumRunners.AnteaterSnout anteaterSnout;

			// Token: 0x04000D90 RID: 3472
			public readonly LevelProperties.RumRunners.CopBall copBall;

			// Token: 0x04000D91 RID: 3473
			public readonly LevelProperties.RumRunners.Barrels barrels;

			// Token: 0x04000D92 RID: 3474
			public readonly LevelProperties.RumRunners.Boss boss;
		}

		// Token: 0x0200026A RID: 618
		public class Spider : AbstractLevelPropertyGroup
		{
			// Token: 0x060006E6 RID: 1766 RVA: 0x00041BB8 File Offset: 0x0003FFB8
			public Spider(float copHealth, string[] spiderPositionString, string[] spiderActionString, string spiderActionPositionString, float spiderSpeed, float spiderEnterDelay, float copSpawnSpiderDist, string[] copPositionString, string[] copBulletTypeString, float copAttackWarning, float copExitDelay, float copBulletSpeed, float copBulletBossDamage)
			{
				this.copHealth = copHealth;
				this.spiderPositionString = spiderPositionString;
				this.spiderActionString = spiderActionString;
				this.spiderActionPositionString = spiderActionPositionString;
				this.spiderSpeed = spiderSpeed;
				this.spiderEnterDelay = spiderEnterDelay;
				this.copSpawnSpiderDist = copSpawnSpiderDist;
				this.copPositionString = copPositionString;
				this.copBulletTypeString = copBulletTypeString;
				this.copAttackWarning = copAttackWarning;
				this.copExitDelay = copExitDelay;
				this.copBulletSpeed = copBulletSpeed;
				this.copBulletBossDamage = copBulletBossDamage;
			}

			// Token: 0x04000D93 RID: 3475
			public readonly float copHealth;

			// Token: 0x04000D94 RID: 3476
			public readonly string[] spiderPositionString;

			// Token: 0x04000D95 RID: 3477
			public readonly string[] spiderActionString;

			// Token: 0x04000D96 RID: 3478
			public readonly string spiderActionPositionString;

			// Token: 0x04000D97 RID: 3479
			public readonly float spiderSpeed;

			// Token: 0x04000D98 RID: 3480
			public readonly float spiderEnterDelay;

			// Token: 0x04000D99 RID: 3481
			public readonly float copSpawnSpiderDist;

			// Token: 0x04000D9A RID: 3482
			public readonly string[] copPositionString;

			// Token: 0x04000D9B RID: 3483
			public readonly string[] copBulletTypeString;

			// Token: 0x04000D9C RID: 3484
			public readonly float copAttackWarning;

			// Token: 0x04000D9D RID: 3485
			public readonly float copExitDelay;

			// Token: 0x04000D9E RID: 3486
			public readonly float copBulletSpeed;

			// Token: 0x04000D9F RID: 3487
			public readonly float copBulletBossDamage;
		}

		// Token: 0x0200026B RID: 619
		public class Grubs : AbstractLevelPropertyGroup
		{
			// Token: 0x060006E7 RID: 1767 RVA: 0x00041C30 File Offset: 0x00040030
			public Grubs(float hp, float movementSpeed, string[] delayString, string[] appearPositionString, float warningDuration, float grubSummonWarning)
			{
				this.hp = hp;
				this.movementSpeed = movementSpeed;
				this.delayString = delayString;
				this.appearPositionString = appearPositionString;
				this.warningDuration = warningDuration;
				this.grubSummonWarning = grubSummonWarning;
			}

			// Token: 0x04000DA0 RID: 3488
			public readonly float hp;

			// Token: 0x04000DA1 RID: 3489
			public readonly float movementSpeed;

			// Token: 0x04000DA2 RID: 3490
			public readonly string[] delayString;

			// Token: 0x04000DA3 RID: 3491
			public readonly string[] appearPositionString;

			// Token: 0x04000DA4 RID: 3492
			public readonly float warningDuration;

			// Token: 0x04000DA5 RID: 3493
			public readonly float grubSummonWarning;
		}

		// Token: 0x0200026C RID: 620
		public class Moth : AbstractLevelPropertyGroup
		{
			// Token: 0x060006E8 RID: 1768 RVA: 0x00041C65 File Offset: 0x00040065
			public Moth(float hp, float mothSpeed, float mothSummonWarning, float mothShootDelay, float mothBulletSpeed, float mothLifetime)
			{
				this.hp = hp;
				this.mothSpeed = mothSpeed;
				this.mothSummonWarning = mothSummonWarning;
				this.mothShootDelay = mothShootDelay;
				this.mothBulletSpeed = mothBulletSpeed;
				this.mothLifetime = mothLifetime;
			}

			// Token: 0x04000DA6 RID: 3494
			public readonly float hp;

			// Token: 0x04000DA7 RID: 3495
			public readonly float mothSpeed;

			// Token: 0x04000DA8 RID: 3496
			public readonly float mothSummonWarning;

			// Token: 0x04000DA9 RID: 3497
			public readonly float mothShootDelay;

			// Token: 0x04000DAA RID: 3498
			public readonly float mothBulletSpeed;

			// Token: 0x04000DAB RID: 3499
			public readonly float mothLifetime;
		}

		// Token: 0x0200026D RID: 621
		public class Mine : AbstractLevelPropertyGroup
		{
			// Token: 0x060006E9 RID: 1769 RVA: 0x00041C9C File Offset: 0x0004009C
			public Mine(float mineNumber, string[] minePlacementString, float mineExplosionRadius, float mineExplosionWarning, float mineTimer, float mineDistToExplode, float mineBossDamage, float mineCheckToLand)
			{
				this.mineNumber = mineNumber;
				this.minePlacementString = minePlacementString;
				this.mineExplosionRadius = mineExplosionRadius;
				this.mineExplosionWarning = mineExplosionWarning;
				this.mineTimer = mineTimer;
				this.mineDistToExplode = mineDistToExplode;
				this.mineBossDamage = mineBossDamage;
				this.mineCheckToLand = mineCheckToLand;
			}

			// Token: 0x04000DAC RID: 3500
			public readonly float mineNumber;

			// Token: 0x04000DAD RID: 3501
			public readonly string[] minePlacementString;

			// Token: 0x04000DAE RID: 3502
			public readonly float mineExplosionRadius;

			// Token: 0x04000DAF RID: 3503
			public readonly float mineExplosionWarning;

			// Token: 0x04000DB0 RID: 3504
			public readonly float mineTimer;

			// Token: 0x04000DB1 RID: 3505
			public readonly float mineDistToExplode;

			// Token: 0x04000DB2 RID: 3506
			public readonly float mineBossDamage;

			// Token: 0x04000DB3 RID: 3507
			public readonly float mineCheckToLand;
		}

		// Token: 0x0200026E RID: 622
		public class Bouncing : AbstractLevelPropertyGroup
		{
			// Token: 0x060006EA RID: 1770 RVA: 0x00041CEC File Offset: 0x000400EC
			public Bouncing(float shootBeetleHealth, float shootBeetleInitialSpeed, int shootBeetleTimeToSlowdown, float shootBeetleSpeed, string[] shootBeetleAngleString, int maxBeetleCount)
			{
				this.shootBeetleHealth = shootBeetleHealth;
				this.shootBeetleInitialSpeed = shootBeetleInitialSpeed;
				this.shootBeetleTimeToSlowdown = shootBeetleTimeToSlowdown;
				this.shootBeetleSpeed = shootBeetleSpeed;
				this.shootBeetleAngleString = shootBeetleAngleString;
				this.maxBeetleCount = maxBeetleCount;
			}

			// Token: 0x04000DB4 RID: 3508
			public readonly float shootBeetleHealth;

			// Token: 0x04000DB5 RID: 3509
			public readonly float shootBeetleInitialSpeed;

			// Token: 0x04000DB6 RID: 3510
			public readonly int shootBeetleTimeToSlowdown;

			// Token: 0x04000DB7 RID: 3511
			public readonly float shootBeetleSpeed;

			// Token: 0x04000DB8 RID: 3512
			public readonly string[] shootBeetleAngleString;

			// Token: 0x04000DB9 RID: 3513
			public readonly int maxBeetleCount;
		}

		// Token: 0x0200026F RID: 623
		public class Worm : AbstractLevelPropertyGroup
		{
			// Token: 0x060006EB RID: 1771 RVA: 0x00041D24 File Offset: 0x00040124
			public Worm(MinMax rotationSpeedRange, MinMax attackOffDurationRange, float warningDuration, MinMax attackOnDurationRange, string[] directionAttackString, float directionTime, float moveTime, float moveDistance, float introDamageMultiplier)
			{
				this.rotationSpeedRange = rotationSpeedRange;
				this.attackOffDurationRange = attackOffDurationRange;
				this.warningDuration = warningDuration;
				this.attackOnDurationRange = attackOnDurationRange;
				this.directionAttackString = directionAttackString;
				this.directionTime = directionTime;
				this.moveTime = moveTime;
				this.moveDistance = moveDistance;
				this.introDamageMultiplier = introDamageMultiplier;
			}

			// Token: 0x04000DBA RID: 3514
			public readonly MinMax rotationSpeedRange;

			// Token: 0x04000DBB RID: 3515
			public readonly MinMax attackOffDurationRange;

			// Token: 0x04000DBC RID: 3516
			public readonly float warningDuration;

			// Token: 0x04000DBD RID: 3517
			public readonly MinMax attackOnDurationRange;

			// Token: 0x04000DBE RID: 3518
			public readonly string[] directionAttackString;

			// Token: 0x04000DBF RID: 3519
			public readonly float directionTime;

			// Token: 0x04000DC0 RID: 3520
			public readonly float moveTime;

			// Token: 0x04000DC1 RID: 3521
			public readonly float moveDistance;

			// Token: 0x04000DC2 RID: 3522
			public readonly float introDamageMultiplier;
		}

		// Token: 0x02000270 RID: 624
		public class AnteaterSnout : AbstractLevelPropertyGroup
		{
			// Token: 0x060006EC RID: 1772 RVA: 0x00041D7C File Offset: 0x0004017C
			public AnteaterSnout(string[] snoutPosString, string[] snoutActionArray, float anticipationBoilDelay, float snoutFullOutBoilDelay, float tongueHoldDuration, float finalAttackTauntDuration)
			{
				this.snoutPosString = snoutPosString;
				this.snoutActionArray = snoutActionArray;
				this.anticipationBoilDelay = anticipationBoilDelay;
				this.snoutFullOutBoilDelay = snoutFullOutBoilDelay;
				this.tongueHoldDuration = tongueHoldDuration;
				this.finalAttackTauntDuration = finalAttackTauntDuration;
			}

			// Token: 0x04000DC3 RID: 3523
			public readonly string[] snoutPosString;

			// Token: 0x04000DC4 RID: 3524
			public readonly string[] snoutActionArray;

			// Token: 0x04000DC5 RID: 3525
			public readonly float anticipationBoilDelay;

			// Token: 0x04000DC6 RID: 3526
			public readonly float snoutFullOutBoilDelay;

			// Token: 0x04000DC7 RID: 3527
			public readonly float tongueHoldDuration;

			// Token: 0x04000DC8 RID: 3528
			public readonly float finalAttackTauntDuration;
		}

		// Token: 0x02000271 RID: 625
		public class CopBall : AbstractLevelPropertyGroup
		{
			// Token: 0x060006ED RID: 1773 RVA: 0x00041DB4 File Offset: 0x000401B4
			public CopBall(bool constSpeed, bool sideWallBounce, float copBallHP, string[] copBallLaunchAngleString, float copBallSpeed, float copBallShootHesitate, string[] copBallBulletAngleString, string[] copBallBulletTypeString, float copBallShootDelay, float copBallBulletSpeed, MinMax gradualSpeed, float gradualSpeedTime, int copBallMaxCount)
			{
				this.constSpeed = constSpeed;
				this.sideWallBounce = sideWallBounce;
				this.copBallHP = copBallHP;
				this.copBallLaunchAngleString = copBallLaunchAngleString;
				this.copBallSpeed = copBallSpeed;
				this.copBallShootHesitate = copBallShootHesitate;
				this.copBallBulletAngleString = copBallBulletAngleString;
				this.copBallBulletTypeString = copBallBulletTypeString;
				this.copBallShootDelay = copBallShootDelay;
				this.copBallBulletSpeed = copBallBulletSpeed;
				this.gradualSpeed = gradualSpeed;
				this.gradualSpeedTime = gradualSpeedTime;
				this.copBallMaxCount = copBallMaxCount;
			}

			// Token: 0x04000DC9 RID: 3529
			public readonly bool constSpeed;

			// Token: 0x04000DCA RID: 3530
			public readonly bool sideWallBounce;

			// Token: 0x04000DCB RID: 3531
			public readonly float copBallHP;

			// Token: 0x04000DCC RID: 3532
			public readonly string[] copBallLaunchAngleString;

			// Token: 0x04000DCD RID: 3533
			public readonly float copBallSpeed;

			// Token: 0x04000DCE RID: 3534
			public readonly float copBallShootHesitate;

			// Token: 0x04000DCF RID: 3535
			public readonly string[] copBallBulletAngleString;

			// Token: 0x04000DD0 RID: 3536
			public readonly string[] copBallBulletTypeString;

			// Token: 0x04000DD1 RID: 3537
			public readonly float copBallShootDelay;

			// Token: 0x04000DD2 RID: 3538
			public readonly float copBallBulletSpeed;

			// Token: 0x04000DD3 RID: 3539
			public readonly MinMax gradualSpeed;

			// Token: 0x04000DD4 RID: 3540
			public readonly float gradualSpeedTime;

			// Token: 0x04000DD5 RID: 3541
			public readonly int copBallMaxCount;
		}

		// Token: 0x02000272 RID: 626
		public class Barrels : AbstractLevelPropertyGroup
		{
			// Token: 0x060006EE RID: 1774 RVA: 0x00041E2C File Offset: 0x0004022C
			public Barrels(float barrelSpeed, int barrelHP, string barrelDelayString, string barrelParryString)
			{
				this.barrelSpeed = barrelSpeed;
				this.barrelHP = barrelHP;
				this.barrelDelayString = barrelDelayString;
				this.barrelParryString = barrelParryString;
			}

			// Token: 0x04000DD6 RID: 3542
			public readonly float barrelSpeed;

			// Token: 0x04000DD7 RID: 3543
			public readonly int barrelHP;

			// Token: 0x04000DD8 RID: 3544
			public readonly string barrelDelayString;

			// Token: 0x04000DD9 RID: 3545
			public readonly string barrelParryString;
		}

		// Token: 0x02000273 RID: 627
		public class Boss : AbstractLevelPropertyGroup
		{
			// Token: 0x060006EF RID: 1775 RVA: 0x00041E51 File Offset: 0x00040251
			public Boss(float initialDelay, MinMax coinSpeed, MinMax coinDelay, float coinMinMaxTime, string bossProjectileParryString, string anteaterEyeClosedOpenString)
			{
				this.initialDelay = initialDelay;
				this.coinSpeed = coinSpeed;
				this.coinDelay = coinDelay;
				this.coinMinMaxTime = coinMinMaxTime;
				this.bossProjectileParryString = bossProjectileParryString;
				this.anteaterEyeClosedOpenString = anteaterEyeClosedOpenString;
			}

			// Token: 0x04000DDA RID: 3546
			public readonly float initialDelay;

			// Token: 0x04000DDB RID: 3547
			public readonly MinMax coinSpeed;

			// Token: 0x04000DDC RID: 3548
			public readonly MinMax coinDelay;

			// Token: 0x04000DDD RID: 3549
			public readonly float coinMinMaxTime;

			// Token: 0x04000DDE RID: 3550
			public readonly string bossProjectileParryString;

			// Token: 0x04000DDF RID: 3551
			public readonly string anteaterEyeClosedOpenString;
		}
	}

	// Token: 0x02000275 RID: 629
	public class SallyStagePlay : AbstractLevelProperties<LevelProperties.SallyStagePlay.State, LevelProperties.SallyStagePlay.Pattern, LevelProperties.SallyStagePlay.States>
	{
		// Token: 0x0600070D RID: 1805 RVA: 0x00041E86 File Offset: 0x00040286
		public SallyStagePlay(int hp, Level.GoalTimes goalTimes, LevelProperties.SallyStagePlay.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600070E RID: 1806 RVA: 0x00041E94 File Offset: 0x00040294
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1100f;
				timeline.events.Add(new Level.Timeline.Event("House", 0.65f));
				timeline.events.Add(new Level.Timeline.Event("Angel", 0.3f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1400f;
				timeline.events.Add(new Level.Timeline.Event("House", 0.72f));
				timeline.events.Add(new Level.Timeline.Event("Angel", 0.43f));
				timeline.events.Add(new Level.Timeline.Event("Final", 0.14f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1700f;
				timeline.events.Add(new Level.Timeline.Event("House", 0.72f));
				timeline.events.Add(new Level.Timeline.Event("Angel", 0.43f));
				timeline.events.Add(new Level.Timeline.Event("Final", 0.14f));
				break;
			}
			return timeline;
		}

		// Token: 0x0600070F RID: 1807 RVA: 0x00041FC0 File Offset: 0x000403C0
		public static LevelProperties.SallyStagePlay.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "J")
				{
					return LevelProperties.SallyStagePlay.Pattern.Jump;
				}
				if (id == "U")
				{
					return LevelProperties.SallyStagePlay.Pattern.Umbrella;
				}
				if (id == "K")
				{
					return LevelProperties.SallyStagePlay.Pattern.Kiss;
				}
				if (id == "T")
				{
					return LevelProperties.SallyStagePlay.Pattern.Teleport;
				}
			}
			Debug.LogError("Pattern SallyStagePlay.Pattern for  " + id + " not found.", null);
			return LevelProperties.SallyStagePlay.Pattern.Uninitialized;
		}

		// Token: 0x06000710 RID: 1808 RVA: 0x00042040 File Offset: 0x00040440
		public static LevelProperties.SallyStagePlay GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.SallyStagePlay.State> list = new List<LevelProperties.SallyStagePlay.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1700;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.SallyStagePlay.State(10f, new LevelProperties.SallyStagePlay.Pattern[][]
						{
							new LevelProperties.SallyStagePlay.Pattern[]
							{
								LevelProperties.SallyStagePlay.Pattern.Jump,
								LevelProperties.SallyStagePlay.Pattern.Kiss,
								LevelProperties.SallyStagePlay.Pattern.Teleport,
								LevelProperties.SallyStagePlay.Pattern.Jump,
								LevelProperties.SallyStagePlay.Pattern.Kiss,
								LevelProperties.SallyStagePlay.Pattern.Jump,
								LevelProperties.SallyStagePlay.Pattern.Teleport
							}
						}, LevelProperties.SallyStagePlay.States.Main, new LevelProperties.SallyStagePlay.Jump("1,1,2,1,2,1,1,1,2", "1,3,2,3,1,2,3,2,2,3", new MinMax(0f, 0.5f), 0.3f), new LevelProperties.SallyStagePlay.DiveKick(700f, new MinMax(25f, 35f), new MinMax(350f, 430f)), new LevelProperties.SallyStagePlay.JumpRoll(100f, new MinMax(50f, 100f), new MinMax(200f, 300f), "B", 0.3f, new MinMax(0f, 0.3f)), new LevelProperties.SallyStagePlay.Shuriken(850f, 20f, 625f, 150f, 20f, 625f, 125f, 2), new LevelProperties.SallyStagePlay.Projectile(750f, 7f, 2f), new LevelProperties.SallyStagePlay.Umbrella(0.5f, 430f, 265f, 2, 1f, 2f, 745f, 1300f, 0.5f, 10f), new LevelProperties.SallyStagePlay.Kiss(170f, "P,P", 5.6f, 175f, 0.5f), new LevelProperties.SallyStagePlay.Teleport("0,100,-100,0,200,-200,50,-200,0,150", new MinMax(300f, 650f), 6.5f, 0.1f, 0.2f, 1f), new LevelProperties.SallyStagePlay.Baby(410f, 1f, 15, new MinMax(1.3f, 2.1f), new string[]
						{
							"1,5,4,6,2,9,3,7,8,1,7,4,6,2,9,3,5,8",
							"3,9,7,1,4,2,5,8,6,3,2,7,1,4,9,5,8,6",
							"5,6,9,3,1,7,4,2,8,5,6,9,3,8,7,4,2,1",
							"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
						}, 0.1f), new LevelProperties.SallyStagePlay.Nun(410f, 0.7f, 15, new MinMax(2.5f, 3.5f), new string[]
						{
							"1,5,4,2,9,3,8,1,7,4,6,2,3,5",
							"3,7,1,4,2,5,3,2,1,4,9,5,8,6",
							"5,6,9,3,1,7,4,2,8,5,3,4,2,1",
							"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
						}, 0.3f, new string[]
						{
							"P,R,R,P,R"
						}), new LevelProperties.SallyStagePlay.Husband(400f, new MinMax(3f, 4.5f), 490f, 1f), new LevelProperties.SallyStagePlay.General(new string[]
						{
							"L,L,M,L,T,L,M,T,L,L,M,T",
							"L,M,T,L,M,L,T,L,M,T,L,L,M,L,T"
						}, new MinMax(0.5f, 1.2f), 3.5f, 400f, 80f), new LevelProperties.SallyStagePlay.Lightning(650f, "140,190,165,150,130,180,145,165,140,175,155,160", new MinMax(4f, 6f), "3,2,4,2,3,4,2,3,4,3,3,4,4,3", new MinMax(0.5f, 0.9f), "1100,540,320,1170,655,827,344,916,626,1050,1200,360,710,1100,440,844,570,1150,377,687,954,515,905"), new LevelProperties.SallyStagePlay.Meteor(455f, 35, 100f, 200f, 1f, 2f, 1f, "1000,750,950,800,1100,850,750,900,1200,950,750,900,1150"), new LevelProperties.SallyStagePlay.Tidal(450f, 1.2f, 0.1f), new LevelProperties.SallyStagePlay.Roses(new MinMax(300f, 550f), 2f, 0f, new string[]
						{
							"100,500,200,1100,800,600,400,1000,700,100,900,300,600,1000"
						}, new MinMax(2.5f, 3.5f), new MinMax(4f, 7f))));
						List<LevelProperties.SallyStagePlay.State> list2 = list;
						float healthTrigger = 0.72f;
						LevelProperties.SallyStagePlay.Pattern[][] array = new LevelProperties.SallyStagePlay.Pattern[1][];
						int num = 0;
						LevelProperties.SallyStagePlay.Pattern[] array2 = new LevelProperties.SallyStagePlay.Pattern[2];
						array2[0] = LevelProperties.SallyStagePlay.Pattern.Umbrella;
						array[num] = array2;
						list2.Add(new LevelProperties.SallyStagePlay.State(healthTrigger, array, LevelProperties.SallyStagePlay.States.House, new LevelProperties.SallyStagePlay.Jump("1,1,2,1,1,2,1,1,1,2", "1,3,2,3,1,2,2,3,1,2,3,2", new MinMax(0f, 0.5f), 0.3f), new LevelProperties.SallyStagePlay.DiveKick(700f, new MinMax(25f, 35f), new MinMax(350f, 430f)), new LevelProperties.SallyStagePlay.JumpRoll(100f, new MinMax(50f, 100f), new MinMax(200f, 300f), "B", 0.3f, new MinMax(0f, 0.3f)), new LevelProperties.SallyStagePlay.Shuriken(850f, 20f, 625f, 150f, 20f, 625f, 125f, 2), new LevelProperties.SallyStagePlay.Projectile(750f, 6f, 2f), new LevelProperties.SallyStagePlay.Umbrella(0.5f, 430f, 265f, 2, 1f, 2f, 745f, 1300f, 0.5f, 10f), new LevelProperties.SallyStagePlay.Kiss(170f, "P,P", 5.6f, 175f, 0.5f), new LevelProperties.SallyStagePlay.Teleport("0,100,-100,0,200,-200,50,-200,0,150", new MinMax(300f, 650f), 6.5f, 0.1f, 0.2f, 1f), new LevelProperties.SallyStagePlay.Baby(410f, 1f, 15, new MinMax(1.3f, 2.1f), new string[]
						{
							"1,5,4,6,2,9,3,7,8,1,7,4,6,2,9,3,5,8",
							"3,9,7,1,4,2,5,8,6,3,2,7,1,4,9,5,8,6",
							"5,6,9,3,1,7,4,2,8,5,6,9,3,8,7,4,2,1",
							"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
						}, 0.1f), new LevelProperties.SallyStagePlay.Nun(410f, 0.7f, 15, new MinMax(2.5f, 3.5f), new string[]
						{
							"1,5,4,2,9,3,8,1,7,4,6,2,3,5",
							"3,7,1,4,2,5,3,2,1,4,9,5,8,6",
							"5,6,9,3,1,7,4,2,8,5,3,4,2,1",
							"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
						}, 0.3f, new string[]
						{
							"P,R,R,P,R"
						}), new LevelProperties.SallyStagePlay.Husband(400f, new MinMax(3f, 4.5f), 490f, 1f), new LevelProperties.SallyStagePlay.General(new string[]
						{
							"L,L,M,L,T,L,M,T,L,L,M,T",
							"L,M,T,L,M,L,T,L,M,T,L,L,M,L,T"
						}, new MinMax(0.5f, 1.2f), 3.5f, 400f, 80f), new LevelProperties.SallyStagePlay.Lightning(650f, "140,190,165,150,130,180,145,165,140,175,155,160", new MinMax(4f, 6f), "3,2,4,2,3,4,2,3,4,3,3,4,4,3", new MinMax(0.5f, 0.9f), "1100,540,320,1170,655,827,344,916,626,1050,1200,360,710,1100,440,844,570,1150,377,687,954,515,905"), new LevelProperties.SallyStagePlay.Meteor(455f, 35, 100f, 200f, 1f, 2f, 1f, "1000,750,950,800,1100,850,750,900,1200,950,750,900,1150"), new LevelProperties.SallyStagePlay.Tidal(450f, 1.2f, 0.1f), new LevelProperties.SallyStagePlay.Roses(new MinMax(300f, 550f), 2f, 0f, new string[]
						{
							"100,500,200,1100,800,600,400,1000,700,100,900,300,600,1000"
						}, new MinMax(2.5f, 3.5f), new MinMax(4f, 7f))));
						list.Add(new LevelProperties.SallyStagePlay.State(0.43f, new LevelProperties.SallyStagePlay.Pattern[][]
						{
							new LevelProperties.SallyStagePlay.Pattern[0]
						}, LevelProperties.SallyStagePlay.States.Angel, new LevelProperties.SallyStagePlay.Jump("1,1,2,1,1,2,1,1,1,2", "1,3,2,3,1,2,2,3,1,2,3,2", new MinMax(0f, 0.5f), 0.3f), new LevelProperties.SallyStagePlay.DiveKick(700f, new MinMax(25f, 35f), new MinMax(350f, 430f)), new LevelProperties.SallyStagePlay.JumpRoll(100f, new MinMax(50f, 100f), new MinMax(200f, 300f), "B", 0.3f, new MinMax(0f, 0.3f)), new LevelProperties.SallyStagePlay.Shuriken(850f, 20f, 625f, 150f, 20f, 625f, 125f, 2), new LevelProperties.SallyStagePlay.Projectile(750f, 6f, 2f), new LevelProperties.SallyStagePlay.Umbrella(0.5f, 430f, 265f, 2, 1f, 2f, 745f, 1300f, 0.5f, 10f), new LevelProperties.SallyStagePlay.Kiss(170f, "P,P", 5.6f, 175f, 0.5f), new LevelProperties.SallyStagePlay.Teleport("0,100,-100,0,200,-200,50,-200,0,150", new MinMax(300f, 650f), 6.5f, 0.1f, 0.2f, 1f), new LevelProperties.SallyStagePlay.Baby(410f, 1f, 15, new MinMax(1.3f, 2.1f), new string[]
						{
							"1,5,4,6,2,9,3,7,8,1,7,4,6,2,9,3,5,8",
							"3,9,7,1,4,2,5,8,6,3,2,7,1,4,9,5,8,6",
							"5,6,9,3,1,7,4,2,8,5,6,9,3,8,7,4,2,1",
							"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
						}, 0.1f), new LevelProperties.SallyStagePlay.Nun(410f, 0.7f, 15, new MinMax(2.5f, 3.5f), new string[]
						{
							"1,5,4,2,9,3,8,1,7,4,6,2,3,5",
							"3,7,1,4,2,5,3,2,1,4,9,5,8,6",
							"5,6,9,3,1,7,4,2,8,5,3,4,2,1",
							"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
						}, 0.3f, new string[]
						{
							"P,R,R,P,R"
						}), new LevelProperties.SallyStagePlay.Husband(400f, new MinMax(3f, 4.5f), 490f, 1f), new LevelProperties.SallyStagePlay.General(new string[]
						{
							"L,L,M,L,T,L,M,T,L,L,M,T",
							"L,M,T,L,M,L,T,L,M,T,L,L,M,L,T"
						}, new MinMax(0.5f, 1.2f), 3.5f, 400f, 80f), new LevelProperties.SallyStagePlay.Lightning(650f, "140,190,165,150,130,180,145,165,140,175,155,160", new MinMax(4f, 6f), "3,2,4,2,3,4,2,3,4,3,3,4,4,3", new MinMax(0.5f, 0.9f), "1100,540,320,1170,655,827,344,916,626,1050,1200,360,710,1100,440,844,570,1150,377,687,954,515,905"), new LevelProperties.SallyStagePlay.Meteor(455f, 35, 100f, 200f, 1f, 2f, 1f, "1000,750,950,800,1100,850,750,900,1200,950,750,900,1150"), new LevelProperties.SallyStagePlay.Tidal(450f, 1.2f, 0.1f), new LevelProperties.SallyStagePlay.Roses(new MinMax(300f, 550f), 2f, 0f, new string[]
						{
							"100,500,200,1100,800,600,400,1000,700,100,900,300,600,1000"
						}, new MinMax(2.5f, 3.5f), new MinMax(4f, 7f))));
						list.Add(new LevelProperties.SallyStagePlay.State(0.14f, new LevelProperties.SallyStagePlay.Pattern[][]
						{
							new LevelProperties.SallyStagePlay.Pattern[0]
						}, LevelProperties.SallyStagePlay.States.Final, new LevelProperties.SallyStagePlay.Jump("1,1,2,1,1,2,1,1,1,2", "1,3,2,3,1,2,2,3,1,2,3,2", new MinMax(0f, 0.5f), 0.3f), new LevelProperties.SallyStagePlay.DiveKick(700f, new MinMax(25f, 35f), new MinMax(350f, 430f)), new LevelProperties.SallyStagePlay.JumpRoll(100f, new MinMax(50f, 100f), new MinMax(200f, 300f), "B", 0.3f, new MinMax(0f, 0.3f)), new LevelProperties.SallyStagePlay.Shuriken(850f, 20f, 625f, 150f, 20f, 625f, 125f, 2), new LevelProperties.SallyStagePlay.Projectile(750f, 6f, 2f), new LevelProperties.SallyStagePlay.Umbrella(0.5f, 430f, 265f, 2, 1f, 2f, 745f, 1300f, 0.5f, 10f), new LevelProperties.SallyStagePlay.Kiss(170f, "P,P", 5.6f, 175f, 0.5f), new LevelProperties.SallyStagePlay.Teleport("0,100,-100,0,200,-200,50,-200,0,150", new MinMax(300f, 650f), 6.5f, 0.1f, 0.2f, 1f), new LevelProperties.SallyStagePlay.Baby(410f, 1f, 15, new MinMax(1.3f, 2.1f), new string[]
						{
							"1,5,4,6,2,9,3,7,8,1,7,4,6,2,9,3,5,8",
							"3,9,7,1,4,2,5,8,6,3,2,7,1,4,9,5,8,6",
							"5,6,9,3,1,7,4,2,8,5,6,9,3,8,7,4,2,1",
							"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
						}, 0.1f), new LevelProperties.SallyStagePlay.Nun(410f, 0.7f, 15, new MinMax(2.5f, 3.5f), new string[]
						{
							"1,5,4,2,9,3,8,1,7,4,6,2,3,5",
							"3,7,1,4,2,5,3,2,1,4,9,5,8,6",
							"5,6,9,3,1,7,4,2,8,5,3,4,2,1",
							"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
						}, 0.3f, new string[]
						{
							"P,R,R,P,R"
						}), new LevelProperties.SallyStagePlay.Husband(400f, new MinMax(3f, 4.5f), 490f, 1f), new LevelProperties.SallyStagePlay.General(new string[]
						{
							"L,L,M,L,T,L,M,T,L,L,M,T",
							"L,M,T,L,M,L,T,L,M,T,L,L,M,L,T"
						}, new MinMax(0.5f, 1.2f), 3.5f, 400f, 80f), new LevelProperties.SallyStagePlay.Lightning(650f, "140,190,165,150,130,180,145,165,140,175,155,160", new MinMax(4f, 6f), "3,2,4,2,3,4,2,3,4,3,3,4,4,3", new MinMax(0.5f, 0.9f), "1100,540,320,1170,655,827,344,916,626,1050,1200,360,710,1100,440,844,570,1150,377,687,954,515,905"), new LevelProperties.SallyStagePlay.Meteor(455f, 35, 100f, 200f, 1f, 2f, 1f, "1000,750,950,800,1100,850,750,900,1200,950,750,900,1150"), new LevelProperties.SallyStagePlay.Tidal(450f, 1.2f, 0.1f), new LevelProperties.SallyStagePlay.Roses(new MinMax(300f, 550f), 2f, 0f, new string[]
						{
							"100,500,200,1100,800,600,400,1000,700,100,900,300,600,1000"
						}, new MinMax(2.5f, 3.5f), new MinMax(4f, 7f))));
					}
				}
				else
				{
					hp = 1400;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.SallyStagePlay.State(10f, new LevelProperties.SallyStagePlay.Pattern[][]
					{
						new LevelProperties.SallyStagePlay.Pattern[]
						{
							LevelProperties.SallyStagePlay.Pattern.Jump,
							LevelProperties.SallyStagePlay.Pattern.Kiss,
							LevelProperties.SallyStagePlay.Pattern.Teleport,
							LevelProperties.SallyStagePlay.Pattern.Jump,
							LevelProperties.SallyStagePlay.Pattern.Kiss,
							LevelProperties.SallyStagePlay.Pattern.Jump,
							LevelProperties.SallyStagePlay.Pattern.Teleport
						}
					}, LevelProperties.SallyStagePlay.States.Main, new LevelProperties.SallyStagePlay.Jump("1,1,2,1,2,1,1,1,2", "1,3,2,3,1,2,3,2,2,3", new MinMax(0f, 0.5f), 0.3f), new LevelProperties.SallyStagePlay.DiveKick(600f, new MinMax(25f, 35f), new MinMax(360f, 440f)), new LevelProperties.SallyStagePlay.JumpRoll(100f, new MinMax(50f, 100f), new MinMax(200f, 300f), "B", 0.3f, new MinMax(0f, 0.3f)), new LevelProperties.SallyStagePlay.Shuriken(800f, 20f, 675f, 175f, 20f, 625f, 125f, 1), new LevelProperties.SallyStagePlay.Projectile(750f, 6f, 2f), new LevelProperties.SallyStagePlay.Umbrella(0.5f, 430f, 265f, 2, 1.35f, 2f, 685f, 1200f, 0.6f, 10f), new LevelProperties.SallyStagePlay.Kiss(150f, "P,P", 5f, 175f, 1f), new LevelProperties.SallyStagePlay.Teleport("0,100,-100,0,200,-200,50,-200,0,150", new MinMax(300f, 600f), 5f, 0.1f, 0.2f, 1f), new LevelProperties.SallyStagePlay.Baby(380f, 1.5f, 15, new MinMax(2f, 3f), new string[]
					{
						"1,5,4,6,2,9,3,7,8,1,7,4,6,2,9,3,5,8",
						"3,9,7,1,4,2,5,8,6,3,2,7,1,4,9,5,8,6",
						"5,6,9,3,1,7,4,2,8,5,6,9,3,8,7,4,2,1",
						"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
					}, 0.1f), new LevelProperties.SallyStagePlay.Nun(380f, 0.7f, 15, new MinMax(3f, 4f), new string[]
					{
						"1,5,4,2,9,3,8,1,7,4,6,2,3,5",
						"3,7,1,4,2,5,3,2,1,4,9,5,8,6",
						"5,6,9,3,1,7,4,2,8,5,3,4,2,1",
						"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
					}, 0.3f, new string[]
					{
						"P,R,R,P,R"
					}), new LevelProperties.SallyStagePlay.Husband(350f, new MinMax(3.5f, 5f), 435f, 1f), new LevelProperties.SallyStagePlay.General(new string[]
					{
						"L,L,M,L,T,L,M,T,L,L,M,T",
						"L,M,T,L,M,L,T,L,M,T,L,L,M,L,T"
					}, new MinMax(1.3f, 2f), 3.5f, 400f, 80f), new LevelProperties.SallyStagePlay.Lightning(650f, "140,190,165,150,130,180,145,165,140,175,155,160", new MinMax(4f, 6f), "3,2,4,2,3,4,2,3,4,3,3,4,4,3", new MinMax(0.5f, 0.9f), "1000,560,320,450,605,877,344,966,606,1050,1200,350,750,1100,400,844,590"), new LevelProperties.SallyStagePlay.Meteor(405f, 35, 100f, 200f, 1f, 2f, 1f, "1000,750,950,800,1100,850,750,900,1200,950,750,900,1150"), new LevelProperties.SallyStagePlay.Tidal(400f, 1.2f, 0.1f), new LevelProperties.SallyStagePlay.Roses(new MinMax(300f, 550f), 2f, 0f, new string[]
					{
						"100,500,200,1100,800,600,400,1000,700,100,900,300,600,1000"
					}, new MinMax(3f, 4.5f), new MinMax(4f, 7f))));
					List<LevelProperties.SallyStagePlay.State> list3 = list;
					float healthTrigger2 = 0.72f;
					LevelProperties.SallyStagePlay.Pattern[][] array3 = new LevelProperties.SallyStagePlay.Pattern[1][];
					int num2 = 0;
					LevelProperties.SallyStagePlay.Pattern[] array4 = new LevelProperties.SallyStagePlay.Pattern[2];
					array4[0] = LevelProperties.SallyStagePlay.Pattern.Umbrella;
					array3[num2] = array4;
					list3.Add(new LevelProperties.SallyStagePlay.State(healthTrigger2, array3, LevelProperties.SallyStagePlay.States.House, new LevelProperties.SallyStagePlay.Jump("1,1,2,1,1,2,1,1,1,2", "1,3,2,3,1,2,2,3,1,2,3,2", new MinMax(0f, 0.5f), 0.3f), new LevelProperties.SallyStagePlay.DiveKick(600f, new MinMax(25f, 35f), new MinMax(360f, 440f)), new LevelProperties.SallyStagePlay.JumpRoll(100f, new MinMax(50f, 100f), new MinMax(200f, 300f), "B,B", 0.3f, new MinMax(0f, 0.3f)), new LevelProperties.SallyStagePlay.Shuriken(800f, 20f, 675f, 175f, 20f, 625f, 125f, 1), new LevelProperties.SallyStagePlay.Projectile(750f, 6f, 2f), new LevelProperties.SallyStagePlay.Umbrella(0.5f, 430f, 265f, 2, 1.35f, 2f, 685f, 1200f, 0.6f, 10f), new LevelProperties.SallyStagePlay.Kiss(150f, "P,P", 5f, 175f, 1f), new LevelProperties.SallyStagePlay.Teleport("0,100,-100,0,200,-200,50,-200,0,150", new MinMax(300f, 600f), 5f, 0.1f, 0.2f, 1f), new LevelProperties.SallyStagePlay.Baby(380f, 1.5f, 15, new MinMax(2f, 3f), new string[]
					{
						"1,5,4,6,2,9,3,7,8,1,7,4,6,2,9,3,5,8",
						"3,9,7,1,4,2,5,8,6,3,2,7,1,4,9,5,8,6",
						"5,6,9,3,1,7,4,2,8,5,6,9,3,8,7,4,2,1",
						"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
					}, 0.1f), new LevelProperties.SallyStagePlay.Nun(380f, 0.7f, 15, new MinMax(3f, 4f), new string[]
					{
						"1,5,4,2,9,3,8,1,7,4,6,2,3,5",
						"3,7,1,4,2,5,3,2,1,4,9,5,8,6",
						"5,6,9,3,1,7,4,2,8,5,3,4,2,1",
						"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
					}, 0.3f, new string[]
					{
						"P,R,R,P,R"
					}), new LevelProperties.SallyStagePlay.Husband(350f, new MinMax(3.5f, 5f), 435f, 1f), new LevelProperties.SallyStagePlay.General(new string[]
					{
						"L,L,M,L,T,L,M,T,L,L,M,T",
						"L,M,T,L,M,L,T,L,M,T,L,L,M,L,T"
					}, new MinMax(1.3f, 2f), 3.5f, 400f, 80f), new LevelProperties.SallyStagePlay.Lightning(650f, "140,190,165,150,130,180,145,165,140,175,155,160", new MinMax(4f, 6f), "3,2,4,2,3,4,2,3,4,3,3,4,4,3", new MinMax(0.5f, 0.9f), "1000,560,320,450,605,877,344,966,606,1050,1200,350,750,1100,400,844,590"), new LevelProperties.SallyStagePlay.Meteor(405f, 35, 100f, 200f, 1f, 2f, 1f, "1000,750,950,800,1100,850,750,900,1200,950,750,900,1150"), new LevelProperties.SallyStagePlay.Tidal(400f, 1.2f, 0.1f), new LevelProperties.SallyStagePlay.Roses(new MinMax(300f, 550f), 2f, 0f, new string[]
					{
						"100,500,200,1100,800,600,400,1000,700,100,900,300,600,1000"
					}, new MinMax(3f, 4.5f), new MinMax(4f, 7f))));
					list.Add(new LevelProperties.SallyStagePlay.State(0.43f, new LevelProperties.SallyStagePlay.Pattern[][]
					{
						new LevelProperties.SallyStagePlay.Pattern[0]
					}, LevelProperties.SallyStagePlay.States.Angel, new LevelProperties.SallyStagePlay.Jump("1,1,2,1,1,2,1,1,1,2", "1,3,2,3,1,2,2,3,1,2,3,2", new MinMax(0f, 0.5f), 0.3f), new LevelProperties.SallyStagePlay.DiveKick(600f, new MinMax(25f, 35f), new MinMax(360f, 440f)), new LevelProperties.SallyStagePlay.JumpRoll(100f, new MinMax(50f, 100f), new MinMax(200f, 300f), "B,B", 0.3f, new MinMax(0f, 0.3f)), new LevelProperties.SallyStagePlay.Shuriken(800f, 20f, 675f, 175f, 20f, 625f, 125f, 1), new LevelProperties.SallyStagePlay.Projectile(750f, 6f, 2f), new LevelProperties.SallyStagePlay.Umbrella(0.5f, 430f, 265f, 2, 1.35f, 2f, 685f, 1200f, 0.6f, 10f), new LevelProperties.SallyStagePlay.Kiss(150f, "P,P", 5f, 175f, 1f), new LevelProperties.SallyStagePlay.Teleport("0,100,-100,0,200,-200,50,-200,0,150", new MinMax(300f, 600f), 5f, 0.1f, 0.2f, 1f), new LevelProperties.SallyStagePlay.Baby(380f, 1.5f, 15, new MinMax(2f, 3f), new string[]
					{
						"1,5,4,6,2,9,3,7,8,1,7,4,6,2,9,3,5,8",
						"3,9,7,1,4,2,5,8,6,3,2,7,1,4,9,5,8,6",
						"5,6,9,3,1,7,4,2,8,5,6,9,3,8,7,4,2,1",
						"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
					}, 0.1f), new LevelProperties.SallyStagePlay.Nun(380f, 0.7f, 15, new MinMax(3f, 4f), new string[]
					{
						"1,5,4,2,9,3,8,1,7,4,6,2,3,5",
						"3,7,1,4,2,5,3,2,1,4,9,5,8,6",
						"5,6,9,3,1,7,4,2,8,5,3,4,2,1",
						"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
					}, 0.3f, new string[]
					{
						"P,R,R,P,R"
					}), new LevelProperties.SallyStagePlay.Husband(350f, new MinMax(3.5f, 5f), 435f, 1f), new LevelProperties.SallyStagePlay.General(new string[]
					{
						"L,L,M,L,T,L,M,T,L,L,M,T",
						"L,M,T,L,M,L,T,L,M,T,L,L,M,L,T"
					}, new MinMax(1.3f, 2f), 3.5f, 400f, 80f), new LevelProperties.SallyStagePlay.Lightning(650f, "140,190,165,150,130,180,145,165,140,175,155,160", new MinMax(4f, 6f), "3,2,4,2,3,4,2,3,4,3,3,4,4,3", new MinMax(0.5f, 0.9f), "1000,560,320,450,605,877,344,966,606,1050,1200,350,750,1100,400,844,590"), new LevelProperties.SallyStagePlay.Meteor(405f, 35, 100f, 200f, 1f, 2f, 1f, "1000,750,950,800,1100,850,750,900,1200,950,750,900,1150"), new LevelProperties.SallyStagePlay.Tidal(400f, 1.2f, 0.1f), new LevelProperties.SallyStagePlay.Roses(new MinMax(300f, 550f), 2f, 0f, new string[]
					{
						"100,500,200,1100,800,600,400,1000,700,100,900,300,600,1000"
					}, new MinMax(3f, 4.5f), new MinMax(4f, 7f))));
					list.Add(new LevelProperties.SallyStagePlay.State(0.14f, new LevelProperties.SallyStagePlay.Pattern[][]
					{
						new LevelProperties.SallyStagePlay.Pattern[0]
					}, LevelProperties.SallyStagePlay.States.Final, new LevelProperties.SallyStagePlay.Jump("1,1,2,1,1,2,1,1,1,2", "1,3,2,3,1,2,2,3,1,2,3,2", new MinMax(0f, 0.5f), 0.3f), new LevelProperties.SallyStagePlay.DiveKick(600f, new MinMax(25f, 35f), new MinMax(360f, 440f)), new LevelProperties.SallyStagePlay.JumpRoll(100f, new MinMax(50f, 100f), new MinMax(200f, 300f), "B,B", 0.3f, new MinMax(0f, 0.3f)), new LevelProperties.SallyStagePlay.Shuriken(800f, 20f, 675f, 175f, 20f, 625f, 125f, 1), new LevelProperties.SallyStagePlay.Projectile(750f, 6f, 2f), new LevelProperties.SallyStagePlay.Umbrella(0.5f, 430f, 265f, 2, 1.35f, 2f, 685f, 1200f, 0.6f, 10f), new LevelProperties.SallyStagePlay.Kiss(150f, "P,P", 5f, 175f, 1f), new LevelProperties.SallyStagePlay.Teleport("0,100,-100,0,200,-200,50,-200,0,150", new MinMax(300f, 600f), 5f, 0.1f, 0.2f, 1f), new LevelProperties.SallyStagePlay.Baby(380f, 1.5f, 15, new MinMax(2f, 3f), new string[]
					{
						"1,5,4,6,2,9,3,7,8,1,7,4,6,2,9,3,5,8",
						"3,9,7,1,4,2,5,8,6,3,2,7,1,4,9,5,8,6",
						"5,6,9,3,1,7,4,2,8,5,6,9,3,8,7,4,2,1",
						"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
					}, 0.1f), new LevelProperties.SallyStagePlay.Nun(380f, 0.7f, 15, new MinMax(3f, 4f), new string[]
					{
						"1,5,4,2,9,3,8,1,7,4,6,2,3,5",
						"3,7,1,4,2,5,3,2,1,4,9,5,8,6",
						"5,6,9,3,1,7,4,2,8,5,3,4,2,1",
						"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
					}, 0.3f, new string[]
					{
						"P,R,R,P,R"
					}), new LevelProperties.SallyStagePlay.Husband(350f, new MinMax(3.5f, 5f), 435f, 1f), new LevelProperties.SallyStagePlay.General(new string[]
					{
						"L,L,M,L,T,L,M,T,L,L,M,T",
						"L,M,T,L,M,L,T,L,M,T,L,L,M,L,T"
					}, new MinMax(1.3f, 2f), 3.5f, 400f, 80f), new LevelProperties.SallyStagePlay.Lightning(650f, "140,190,165,150,130,180,145,165,140,175,155,160", new MinMax(4f, 6f), "3,2,4,2,3,4,2,3,4,3,3,4,4,3", new MinMax(0.5f, 0.9f), "1000,560,320,450,605,877,344,966,606,1050,1200,350,750,1100,400,844,590"), new LevelProperties.SallyStagePlay.Meteor(405f, 35, 100f, 200f, 1f, 2f, 1f, "1000,750,950,800,1100,850,750,900,1200,950,750,900,1150"), new LevelProperties.SallyStagePlay.Tidal(400f, 1.2f, 0.1f), new LevelProperties.SallyStagePlay.Roses(new MinMax(300f, 550f), 2f, 0f, new string[]
					{
						"100,500,200,1100,800,600,400,1000,700,100,900,300,600,1000"
					}, new MinMax(3f, 4.5f), new MinMax(4f, 7f))));
				}
			}
			else
			{
				hp = 1100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.SallyStagePlay.State(10f, new LevelProperties.SallyStagePlay.Pattern[][]
				{
					new LevelProperties.SallyStagePlay.Pattern[]
					{
						LevelProperties.SallyStagePlay.Pattern.Jump,
						LevelProperties.SallyStagePlay.Pattern.Kiss,
						LevelProperties.SallyStagePlay.Pattern.Teleport,
						LevelProperties.SallyStagePlay.Pattern.Jump,
						LevelProperties.SallyStagePlay.Pattern.Kiss,
						LevelProperties.SallyStagePlay.Pattern.Jump,
						LevelProperties.SallyStagePlay.Pattern.Teleport,
						LevelProperties.SallyStagePlay.Pattern.Kiss,
						LevelProperties.SallyStagePlay.Pattern.Jump,
						LevelProperties.SallyStagePlay.Pattern.Teleport
					}
				}, LevelProperties.SallyStagePlay.States.Main, new LevelProperties.SallyStagePlay.Jump("1,1,2,1,1,1,2", "1,3,2,3,1,2,3,2,2", new MinMax(0f, 0.5f), 0.3f), new LevelProperties.SallyStagePlay.DiveKick(500f, new MinMax(25f, 35f), new MinMax(375f, 415f)), new LevelProperties.SallyStagePlay.JumpRoll(100f, new MinMax(50f, 100f), new MinMax(250f, 300f), "B", 0.3f, new MinMax(0f, 0.3f)), new LevelProperties.SallyStagePlay.Shuriken(850f, 20f, 625f, 150f, 20f, 625f, 125f, 2), new LevelProperties.SallyStagePlay.Projectile(650f, 5f, 2f), new LevelProperties.SallyStagePlay.Umbrella(0.5f, 400f, 450f, 1, 1f, 1f, 775f, 1400f, 0.55f, 10f), new LevelProperties.SallyStagePlay.Kiss(150f, "P,P", 4.8f, 150f, 1f), new LevelProperties.SallyStagePlay.Teleport("0,100,-100,0,50,0,-50", new MinMax(200f, 500f), 3f, 0.1f, 0.2f, 1f), new LevelProperties.SallyStagePlay.Baby(380f, 1f, 15, new MinMax(2.3f, 3.2f), new string[]
				{
					"1,5,4,6,2,9,3,7,8,1,7,4,6,2,9,3,5,8",
					"3,9,7,1,4,2,5,8,6,3,2,7,1,4,9,5,8,6",
					"5,6,9,3,1,7,4,2,8,5,6,9,3,8,7,4,2,1",
					"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
				}, 0.1f), new LevelProperties.SallyStagePlay.Nun(380f, 0.7f, 15, new MinMax(2.3f, 3.2f), new string[]
				{
					"1,5,4,2,3,1,4,2,3,5",
					"3,1,4,2,5,3,2,1,4,5",
					"5,3,1,4,2,5,3,4,2,1",
					"1,3,5,2,4,1,5,3,2,4"
				}, 0.3f, new string[]
				{
					"P,R,R,R,P"
				}), new LevelProperties.SallyStagePlay.Husband(290f, new MinMax(3f, 5f), 450f, 1f), new LevelProperties.SallyStagePlay.General(new string[]
				{
					"M,T,M,T"
				}, new MinMax(1f, 1.5f), 3.5f, 400f, 0f), new LevelProperties.SallyStagePlay.Lightning(550f, "140,190,165,150,130,180,145,165,140,175,155,160", new MinMax(5f, 8f), "3,2,2,2,3,3,2,3,2,3,3,3,2,3", new MinMax(0.7f, 1.1f), "1000,560,320,450,605,877,344,966,606,1050,1200,350,750,1100,400,844,590"), new LevelProperties.SallyStagePlay.Meteor(455f, 26, 100f, 200f, 1f, 2f, 1f, "1000,750,950,800,1100,850,900,1200,950,1150"), new LevelProperties.SallyStagePlay.Tidal(500f, 1.2f, 0.1f), new LevelProperties.SallyStagePlay.Roses(new MinMax(300f, 550f), 3f, 7f, new string[]
				{
					"100,500,200,1100,800,600,400,1000,700,100,900,300,600,1000"
				}, new MinMax(2.5f, 4f), new MinMax(4f, 7f))));
				list.Add(new LevelProperties.SallyStagePlay.State(0.65f, new LevelProperties.SallyStagePlay.Pattern[][]
				{
					new LevelProperties.SallyStagePlay.Pattern[]
					{
						LevelProperties.SallyStagePlay.Pattern.Umbrella,
						LevelProperties.SallyStagePlay.Pattern.Jump,
						LevelProperties.SallyStagePlay.Pattern.Umbrella,
						LevelProperties.SallyStagePlay.Pattern.Teleport
					}
				}, LevelProperties.SallyStagePlay.States.House, new LevelProperties.SallyStagePlay.Jump("1,1", "3,2,2,1,2,2,3,1,2,3,2", new MinMax(0f, 0.5f), 0.3f), new LevelProperties.SallyStagePlay.DiveKick(500f, new MinMax(25f, 35f), new MinMax(375f, 415f)), new LevelProperties.SallyStagePlay.JumpRoll(100f, new MinMax(50f, 100f), new MinMax(200f, 300f), "B", 0.3f, new MinMax(0f, 0.3f)), new LevelProperties.SallyStagePlay.Shuriken(850f, 20f, 625f, 150f, 20f, 625f, 125f, 2), new LevelProperties.SallyStagePlay.Projectile(650f, 5f, 2f), new LevelProperties.SallyStagePlay.Umbrella(0.5f, 400f, 450f, 1, 1f, 1f, 775f, 1400f, 0.55f, 10f), new LevelProperties.SallyStagePlay.Kiss(150f, "P,P", 4.8f, 150f, 1f), new LevelProperties.SallyStagePlay.Teleport("0,100,-100,0,50,0,-50", new MinMax(200f, 500f), 3f, 0.1f, 0.2f, 1f), new LevelProperties.SallyStagePlay.Baby(380f, 1f, 15, new MinMax(2.3f, 3.2f), new string[]
				{
					"1,5,4,6,2,9,3,7,8,1,7,4,6,2,9,3,5,8",
					"3,9,7,1,4,2,5,8,6,3,2,7,1,4,9,5,8,6",
					"5,6,9,3,1,7,4,2,8,5,6,9,3,8,7,4,2,1",
					"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
				}, 0.1f), new LevelProperties.SallyStagePlay.Nun(380f, 0.7f, 15, new MinMax(2.3f, 3.2f), new string[]
				{
					"1,5,4,2,3,1,4,2,3,5",
					"3,1,4,2,5,3,2,1,4,5",
					"5,3,1,4,2,5,3,4,2,1",
					"1,3,5,2,4,1,5,3,2,4"
				}, 0.3f, new string[]
				{
					"P,R,R,R,P"
				}), new LevelProperties.SallyStagePlay.Husband(290f, new MinMax(3f, 5f), 450f, 1f), new LevelProperties.SallyStagePlay.General(new string[]
				{
					"M,T,M,T"
				}, new MinMax(1f, 1.5f), 3.5f, 400f, 0f), new LevelProperties.SallyStagePlay.Lightning(550f, "140,190,165,150,130,180,145,165,140,175,155,160", new MinMax(5f, 8f), "3,2,2,2,3,3,2,3,2,3,3,3,2,3", new MinMax(0.7f, 1.1f), "1000,560,320,450,605,877,344,966,606,1050,1200,350,750,1100,400,844,590"), new LevelProperties.SallyStagePlay.Meteor(455f, 26, 100f, 200f, 1f, 2f, 1f, "1000,750,950,800,1100,850,900,1200,950,1150"), new LevelProperties.SallyStagePlay.Tidal(500f, 1.2f, 0.1f), new LevelProperties.SallyStagePlay.Roses(new MinMax(300f, 550f), 3f, 7f, new string[]
				{
					"100,500,200,1100,800,600,400,1000,700,100,900,300,600,1000"
				}, new MinMax(2.5f, 4f), new MinMax(4f, 7f))));
				list.Add(new LevelProperties.SallyStagePlay.State(0.3f, new LevelProperties.SallyStagePlay.Pattern[][]
				{
					new LevelProperties.SallyStagePlay.Pattern[0]
				}, LevelProperties.SallyStagePlay.States.Angel, new LevelProperties.SallyStagePlay.Jump("1,1", "3,2,2,1,2,2,3,1,2,3,2", new MinMax(0f, 0.5f), 0.3f), new LevelProperties.SallyStagePlay.DiveKick(500f, new MinMax(25f, 35f), new MinMax(375f, 415f)), new LevelProperties.SallyStagePlay.JumpRoll(100f, new MinMax(50f, 100f), new MinMax(200f, 300f), "B", 0.3f, new MinMax(0f, 0.3f)), new LevelProperties.SallyStagePlay.Shuriken(850f, 20f, 625f, 150f, 20f, 625f, 125f, 2), new LevelProperties.SallyStagePlay.Projectile(650f, 5f, 2f), new LevelProperties.SallyStagePlay.Umbrella(0.5f, 400f, 450f, 1, 1f, 1f, 775f, 1400f, 0.55f, 10f), new LevelProperties.SallyStagePlay.Kiss(150f, "P,P", 4.8f, 150f, 1f), new LevelProperties.SallyStagePlay.Teleport("0,100,-100,0,50,0,-50", new MinMax(200f, 500f), 3f, 0.1f, 0.2f, 1f), new LevelProperties.SallyStagePlay.Baby(380f, 1f, 15, new MinMax(2.3f, 3.2f), new string[]
				{
					"1,5,4,6,2,9,3,7,8,1,7,4,6,2,9,3,5,8",
					"3,9,7,1,4,2,5,8,6,3,2,7,1,4,9,5,8,6",
					"5,6,9,3,1,7,4,2,8,5,6,9,3,8,7,4,2,1",
					"1,3,5,7,8,2,4,6,9,1,5,7,8,3,2,4,6,9"
				}, 0.1f), new LevelProperties.SallyStagePlay.Nun(380f, 0.7f, 15, new MinMax(2.3f, 3.2f), new string[]
				{
					"1,5,4,2,3,1,4,2,3,5",
					"3,1,4,2,5,3,2,1,4,5",
					"5,3,1,4,2,5,3,4,2,1",
					"1,3,5,2,4,1,5,3,2,4"
				}, 0.3f, new string[]
				{
					"P,R,R,R,P"
				}), new LevelProperties.SallyStagePlay.Husband(290f, new MinMax(3f, 5f), 450f, 1f), new LevelProperties.SallyStagePlay.General(new string[]
				{
					"M,T,M,T"
				}, new MinMax(1f, 1.5f), 3.5f, 400f, 0f), new LevelProperties.SallyStagePlay.Lightning(550f, "140,190,165,150,130,180,145,165,140,175,155,160", new MinMax(5f, 8f), "3,2,2,2,3,3,2,3,2,3,3,3,2,3", new MinMax(0.7f, 1.1f), "1000,560,320,450,605,877,344,966,606,1050,1200,350,750,1100,400,844,590"), new LevelProperties.SallyStagePlay.Meteor(455f, 26, 100f, 200f, 1f, 2f, 1f, "1000,750,950,800,1100,850,900,1200,950,1150"), new LevelProperties.SallyStagePlay.Tidal(500f, 1.2f, 0.1f), new LevelProperties.SallyStagePlay.Roses(new MinMax(300f, 550f), 3f, 7f, new string[]
				{
					"100,500,200,1100,800,600,400,1000,700,100,900,300,600,1000"
				}, new MinMax(2.5f, 4f), new MinMax(4f, 7f))));
			}
			return new LevelProperties.SallyStagePlay(hp, goalTimes, list.ToArray());
		}

		// Token: 0x02000276 RID: 630
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700012A RID: 298
			// (get) Token: 0x06000712 RID: 1810 RVA: 0x000443A4 File Offset: 0x000427A4
			// (set) Token: 0x06000713 RID: 1811 RVA: 0x000443AC File Offset: 0x000427AC
			private protected LevelProperties.SallyStagePlay properties { protected get; private set; }

			// Token: 0x06000714 RID: 1812 RVA: 0x000443B5 File Offset: 0x000427B5
			public virtual void LevelInit(LevelProperties.SallyStagePlay properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000715 RID: 1813 RVA: 0x000443BE File Offset: 0x000427BE
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x02000277 RID: 631
		public enum States
		{
			// Token: 0x04000E01 RID: 3585
			Main,
			// Token: 0x04000E02 RID: 3586
			Generic,
			// Token: 0x04000E03 RID: 3587
			House,
			// Token: 0x04000E04 RID: 3588
			Angel,
			// Token: 0x04000E05 RID: 3589
			Final
		}

		// Token: 0x02000278 RID: 632
		public enum Pattern
		{
			// Token: 0x04000E07 RID: 3591
			Jump,
			// Token: 0x04000E08 RID: 3592
			Umbrella,
			// Token: 0x04000E09 RID: 3593
			Kiss,
			// Token: 0x04000E0A RID: 3594
			Teleport,
			// Token: 0x04000E0B RID: 3595
			Uninitialized
		}

		// Token: 0x02000279 RID: 633
		public class State : AbstractLevelState<LevelProperties.SallyStagePlay.Pattern, LevelProperties.SallyStagePlay.States>
		{
			// Token: 0x06000716 RID: 1814 RVA: 0x000443C0 File Offset: 0x000427C0
			public State(float healthTrigger, LevelProperties.SallyStagePlay.Pattern[][] patterns, LevelProperties.SallyStagePlay.States stateName, LevelProperties.SallyStagePlay.Jump jump, LevelProperties.SallyStagePlay.DiveKick diveKick, LevelProperties.SallyStagePlay.JumpRoll jumpRoll, LevelProperties.SallyStagePlay.Shuriken shuriken, LevelProperties.SallyStagePlay.Projectile projectile, LevelProperties.SallyStagePlay.Umbrella umbrella, LevelProperties.SallyStagePlay.Kiss kiss, LevelProperties.SallyStagePlay.Teleport teleport, LevelProperties.SallyStagePlay.Baby baby, LevelProperties.SallyStagePlay.Nun nun, LevelProperties.SallyStagePlay.Husband husband, LevelProperties.SallyStagePlay.General general, LevelProperties.SallyStagePlay.Lightning lightning, LevelProperties.SallyStagePlay.Meteor meteor, LevelProperties.SallyStagePlay.Tidal tidal, LevelProperties.SallyStagePlay.Roses roses) : base(healthTrigger, patterns, stateName)
			{
				this.jump = jump;
				this.diveKick = diveKick;
				this.jumpRoll = jumpRoll;
				this.shuriken = shuriken;
				this.projectile = projectile;
				this.umbrella = umbrella;
				this.kiss = kiss;
				this.teleport = teleport;
				this.baby = baby;
				this.nun = nun;
				this.husband = husband;
				this.general = general;
				this.lightning = lightning;
				this.meteor = meteor;
				this.tidal = tidal;
				this.roses = roses;
			}

			// Token: 0x04000E0C RID: 3596
			public readonly LevelProperties.SallyStagePlay.Jump jump;

			// Token: 0x04000E0D RID: 3597
			public readonly LevelProperties.SallyStagePlay.DiveKick diveKick;

			// Token: 0x04000E0E RID: 3598
			public readonly LevelProperties.SallyStagePlay.JumpRoll jumpRoll;

			// Token: 0x04000E0F RID: 3599
			public readonly LevelProperties.SallyStagePlay.Shuriken shuriken;

			// Token: 0x04000E10 RID: 3600
			public readonly LevelProperties.SallyStagePlay.Projectile projectile;

			// Token: 0x04000E11 RID: 3601
			public readonly LevelProperties.SallyStagePlay.Umbrella umbrella;

			// Token: 0x04000E12 RID: 3602
			public readonly LevelProperties.SallyStagePlay.Kiss kiss;

			// Token: 0x04000E13 RID: 3603
			public readonly LevelProperties.SallyStagePlay.Teleport teleport;

			// Token: 0x04000E14 RID: 3604
			public readonly LevelProperties.SallyStagePlay.Baby baby;

			// Token: 0x04000E15 RID: 3605
			public readonly LevelProperties.SallyStagePlay.Nun nun;

			// Token: 0x04000E16 RID: 3606
			public readonly LevelProperties.SallyStagePlay.Husband husband;

			// Token: 0x04000E17 RID: 3607
			public readonly LevelProperties.SallyStagePlay.General general;

			// Token: 0x04000E18 RID: 3608
			public readonly LevelProperties.SallyStagePlay.Lightning lightning;

			// Token: 0x04000E19 RID: 3609
			public readonly LevelProperties.SallyStagePlay.Meteor meteor;

			// Token: 0x04000E1A RID: 3610
			public readonly LevelProperties.SallyStagePlay.Tidal tidal;

			// Token: 0x04000E1B RID: 3611
			public readonly LevelProperties.SallyStagePlay.Roses roses;
		}

		// Token: 0x0200027A RID: 634
		public class Jump : AbstractLevelPropertyGroup
		{
			// Token: 0x06000717 RID: 1815 RVA: 0x00044456 File Offset: 0x00042856
			public Jump(string JumpAttackString, string JumpAttackCountString, MinMax JumpHesitate, float JumpDelay)
			{
				this.JumpAttackString = JumpAttackString;
				this.JumpAttackCountString = JumpAttackCountString;
				this.JumpHesitate = JumpHesitate;
				this.JumpDelay = JumpDelay;
			}

			// Token: 0x04000E1C RID: 3612
			public readonly string JumpAttackString;

			// Token: 0x04000E1D RID: 3613
			public readonly string JumpAttackCountString;

			// Token: 0x04000E1E RID: 3614
			public readonly MinMax JumpHesitate;

			// Token: 0x04000E1F RID: 3615
			public readonly float JumpDelay;
		}

		// Token: 0x0200027B RID: 635
		public class DiveKick : AbstractLevelPropertyGroup
		{
			// Token: 0x06000718 RID: 1816 RVA: 0x0004447B File Offset: 0x0004287B
			public DiveKick(float DiveSpeed, MinMax DiveAngleRange, MinMax DiveAttackHeight)
			{
				this.DiveSpeed = DiveSpeed;
				this.DiveAngleRange = DiveAngleRange;
				this.DiveAttackHeight = DiveAttackHeight;
			}

			// Token: 0x04000E20 RID: 3616
			public readonly float DiveSpeed;

			// Token: 0x04000E21 RID: 3617
			public readonly MinMax DiveAngleRange;

			// Token: 0x04000E22 RID: 3618
			public readonly MinMax DiveAttackHeight;
		}

		// Token: 0x0200027C RID: 636
		public class JumpRoll : AbstractLevelPropertyGroup
		{
			// Token: 0x06000719 RID: 1817 RVA: 0x00044498 File Offset: 0x00042898
			public JumpRoll(float RollJumpVerticalMovement, MinMax RollJumpHorizontalMovement, MinMax JumpHeight, string JumpAttackTypeString, float JumpRollDuration, MinMax RollShotDelayRange)
			{
				this.RollJumpVerticalMovement = RollJumpVerticalMovement;
				this.RollJumpHorizontalMovement = RollJumpHorizontalMovement;
				this.JumpHeight = JumpHeight;
				this.JumpAttackTypeString = JumpAttackTypeString;
				this.JumpRollDuration = JumpRollDuration;
				this.RollShotDelayRange = RollShotDelayRange;
			}

			// Token: 0x04000E23 RID: 3619
			public readonly float RollJumpVerticalMovement;

			// Token: 0x04000E24 RID: 3620
			public readonly MinMax RollJumpHorizontalMovement;

			// Token: 0x04000E25 RID: 3621
			public readonly MinMax JumpHeight;

			// Token: 0x04000E26 RID: 3622
			public readonly string JumpAttackTypeString;

			// Token: 0x04000E27 RID: 3623
			public readonly float JumpRollDuration;

			// Token: 0x04000E28 RID: 3624
			public readonly MinMax RollShotDelayRange;
		}

		// Token: 0x0200027D RID: 637
		public class Shuriken : AbstractLevelPropertyGroup
		{
			// Token: 0x0600071A RID: 1818 RVA: 0x000444D0 File Offset: 0x000428D0
			public Shuriken(float InitialMovementSpeed, float ArcOneGravity, float ArcOneVerticalVelocity, float ArcOneHorizontalVelocity, float ArcTwoGravity, float ArcTwoVerticalVelocity, float ArcTwoHorizontalVelocity, int NumberOfChildSpawns)
			{
				this.InitialMovementSpeed = InitialMovementSpeed;
				this.ArcOneGravity = ArcOneGravity;
				this.ArcOneVerticalVelocity = ArcOneVerticalVelocity;
				this.ArcOneHorizontalVelocity = ArcOneHorizontalVelocity;
				this.ArcTwoGravity = ArcTwoGravity;
				this.ArcTwoVerticalVelocity = ArcTwoVerticalVelocity;
				this.ArcTwoHorizontalVelocity = ArcTwoHorizontalVelocity;
				this.NumberOfChildSpawns = NumberOfChildSpawns;
			}

			// Token: 0x04000E29 RID: 3625
			public readonly float InitialMovementSpeed;

			// Token: 0x04000E2A RID: 3626
			public readonly float ArcOneGravity;

			// Token: 0x04000E2B RID: 3627
			public readonly float ArcOneVerticalVelocity;

			// Token: 0x04000E2C RID: 3628
			public readonly float ArcOneHorizontalVelocity;

			// Token: 0x04000E2D RID: 3629
			public readonly float ArcTwoGravity;

			// Token: 0x04000E2E RID: 3630
			public readonly float ArcTwoVerticalVelocity;

			// Token: 0x04000E2F RID: 3631
			public readonly float ArcTwoHorizontalVelocity;

			// Token: 0x04000E30 RID: 3632
			public readonly int NumberOfChildSpawns;
		}

		// Token: 0x0200027E RID: 638
		public class Projectile : AbstractLevelPropertyGroup
		{
			// Token: 0x0600071B RID: 1819 RVA: 0x00044520 File Offset: 0x00042920
			public Projectile(float projectileSpeed, float groundDuration, float groundSize)
			{
				this.projectileSpeed = projectileSpeed;
				this.groundDuration = groundDuration;
				this.groundSize = groundSize;
			}

			// Token: 0x04000E31 RID: 3633
			public readonly float projectileSpeed;

			// Token: 0x04000E32 RID: 3634
			public readonly float groundDuration;

			// Token: 0x04000E33 RID: 3635
			public readonly float groundSize;
		}

		// Token: 0x0200027F RID: 639
		public class Umbrella : AbstractLevelPropertyGroup
		{
			// Token: 0x0600071C RID: 1820 RVA: 0x00044540 File Offset: 0x00042940
			public Umbrella(float initialAttackDelay, float objectSpeed, float objectDropSpeed, int objectCount, float objectDelay, float hesitate, float homingMaxSpeed, float homingAcceleration, float homingBounceRatio, float homingUntilSwitchPlayer)
			{
				this.initialAttackDelay = initialAttackDelay;
				this.objectSpeed = objectSpeed;
				this.objectDropSpeed = objectDropSpeed;
				this.objectCount = objectCount;
				this.objectDelay = objectDelay;
				this.hesitate = hesitate;
				this.homingMaxSpeed = homingMaxSpeed;
				this.homingAcceleration = homingAcceleration;
				this.homingBounceRatio = homingBounceRatio;
				this.homingUntilSwitchPlayer = homingUntilSwitchPlayer;
			}

			// Token: 0x04000E34 RID: 3636
			public readonly float initialAttackDelay;

			// Token: 0x04000E35 RID: 3637
			public readonly float objectSpeed;

			// Token: 0x04000E36 RID: 3638
			public readonly float objectDropSpeed;

			// Token: 0x04000E37 RID: 3639
			public readonly int objectCount;

			// Token: 0x04000E38 RID: 3640
			public readonly float objectDelay;

			// Token: 0x04000E39 RID: 3641
			public readonly float hesitate;

			// Token: 0x04000E3A RID: 3642
			public readonly float homingMaxSpeed;

			// Token: 0x04000E3B RID: 3643
			public readonly float homingAcceleration;

			// Token: 0x04000E3C RID: 3644
			public readonly float homingBounceRatio;

			// Token: 0x04000E3D RID: 3645
			public readonly float homingUntilSwitchPlayer;
		}

		// Token: 0x02000280 RID: 640
		public class Kiss : AbstractLevelPropertyGroup
		{
			// Token: 0x0600071D RID: 1821 RVA: 0x000445A0 File Offset: 0x000429A0
			public Kiss(float heartSpeed, string heartType, float sineWaveSpeed, float sineWaveStrength, float hesitate)
			{
				this.heartSpeed = heartSpeed;
				this.heartType = heartType;
				this.sineWaveSpeed = sineWaveSpeed;
				this.sineWaveStrength = sineWaveStrength;
				this.hesitate = hesitate;
			}

			// Token: 0x04000E3E RID: 3646
			public readonly float heartSpeed;

			// Token: 0x04000E3F RID: 3647
			public readonly string heartType;

			// Token: 0x04000E40 RID: 3648
			public readonly float sineWaveSpeed;

			// Token: 0x04000E41 RID: 3649
			public readonly float sineWaveStrength;

			// Token: 0x04000E42 RID: 3650
			public readonly float hesitate;
		}

		// Token: 0x02000281 RID: 641
		public class Teleport : AbstractLevelPropertyGroup
		{
			// Token: 0x0600071E RID: 1822 RVA: 0x000445CD File Offset: 0x000429CD
			public Teleport(string appearOffsetString, MinMax fallingSpeed, float acceleration, float hesitate, float offScreenDelay, float sawAttackDuration)
			{
				this.appearOffsetString = appearOffsetString;
				this.fallingSpeed = fallingSpeed;
				this.acceleration = acceleration;
				this.hesitate = hesitate;
				this.offScreenDelay = offScreenDelay;
				this.sawAttackDuration = sawAttackDuration;
			}

			// Token: 0x04000E43 RID: 3651
			public readonly string appearOffsetString;

			// Token: 0x04000E44 RID: 3652
			public readonly MinMax fallingSpeed;

			// Token: 0x04000E45 RID: 3653
			public readonly float acceleration;

			// Token: 0x04000E46 RID: 3654
			public readonly float hesitate;

			// Token: 0x04000E47 RID: 3655
			public readonly float offScreenDelay;

			// Token: 0x04000E48 RID: 3656
			public readonly float sawAttackDuration;
		}

		// Token: 0x02000282 RID: 642
		public class Baby : AbstractLevelPropertyGroup
		{
			// Token: 0x0600071F RID: 1823 RVA: 0x00044602 File Offset: 0x00042A02
			public Baby(float bottleSpeed, float attackDelay, int HP, MinMax reappearDelayRange, string[] appearPosition, float hesitate)
			{
				this.bottleSpeed = bottleSpeed;
				this.attackDelay = attackDelay;
				this.HP = HP;
				this.reappearDelayRange = reappearDelayRange;
				this.appearPosition = appearPosition;
				this.hesitate = hesitate;
			}

			// Token: 0x04000E49 RID: 3657
			public readonly float bottleSpeed;

			// Token: 0x04000E4A RID: 3658
			public readonly float attackDelay;

			// Token: 0x04000E4B RID: 3659
			public readonly int HP;

			// Token: 0x04000E4C RID: 3660
			public readonly MinMax reappearDelayRange;

			// Token: 0x04000E4D RID: 3661
			public readonly string[] appearPosition;

			// Token: 0x04000E4E RID: 3662
			public readonly float hesitate;
		}

		// Token: 0x02000283 RID: 643
		public class Nun : AbstractLevelPropertyGroup
		{
			// Token: 0x06000720 RID: 1824 RVA: 0x00044637 File Offset: 0x00042A37
			public Nun(float rulerSpeed, float attackDelay, int HP, MinMax reappearDelayRange, string[] appearPosition, float hesitate, string[] pinkString)
			{
				this.rulerSpeed = rulerSpeed;
				this.attackDelay = attackDelay;
				this.HP = HP;
				this.reappearDelayRange = reappearDelayRange;
				this.appearPosition = appearPosition;
				this.hesitate = hesitate;
				this.pinkString = pinkString;
			}

			// Token: 0x04000E4F RID: 3663
			public readonly float rulerSpeed;

			// Token: 0x04000E50 RID: 3664
			public readonly float attackDelay;

			// Token: 0x04000E51 RID: 3665
			public readonly int HP;

			// Token: 0x04000E52 RID: 3666
			public readonly MinMax reappearDelayRange;

			// Token: 0x04000E53 RID: 3667
			public readonly string[] appearPosition;

			// Token: 0x04000E54 RID: 3668
			public readonly float hesitate;

			// Token: 0x04000E55 RID: 3669
			public readonly string[] pinkString;
		}

		// Token: 0x02000284 RID: 644
		public class Husband : AbstractLevelPropertyGroup
		{
			// Token: 0x06000721 RID: 1825 RVA: 0x00044674 File Offset: 0x00042A74
			public Husband(float deityHP, MinMax shotDelayRange, float shotSpeed, float shotScale)
			{
				this.deityHP = deityHP;
				this.shotDelayRange = shotDelayRange;
				this.shotSpeed = shotSpeed;
				this.shotScale = shotScale;
			}

			// Token: 0x04000E56 RID: 3670
			public readonly float deityHP;

			// Token: 0x04000E57 RID: 3671
			public readonly MinMax shotDelayRange;

			// Token: 0x04000E58 RID: 3672
			public readonly float shotSpeed;

			// Token: 0x04000E59 RID: 3673
			public readonly float shotScale;
		}

		// Token: 0x02000285 RID: 645
		public class General : AbstractLevelPropertyGroup
		{
			// Token: 0x06000722 RID: 1826 RVA: 0x00044699 File Offset: 0x00042A99
			public General(string[] attackString, MinMax attackDelayRange, float finalMovementSpeed, float cupidDropMaxY, float cupidMoveSpeed)
			{
				this.attackString = attackString;
				this.attackDelayRange = attackDelayRange;
				this.finalMovementSpeed = finalMovementSpeed;
				this.cupidDropMaxY = cupidDropMaxY;
				this.cupidMoveSpeed = cupidMoveSpeed;
			}

			// Token: 0x04000E5A RID: 3674
			public readonly string[] attackString;

			// Token: 0x04000E5B RID: 3675
			public readonly MinMax attackDelayRange;

			// Token: 0x04000E5C RID: 3676
			public readonly float finalMovementSpeed;

			// Token: 0x04000E5D RID: 3677
			public readonly float cupidDropMaxY;

			// Token: 0x04000E5E RID: 3678
			public readonly float cupidMoveSpeed;
		}

		// Token: 0x02000286 RID: 646
		public class Lightning : AbstractLevelPropertyGroup
		{
			// Token: 0x06000723 RID: 1827 RVA: 0x000446C6 File Offset: 0x00042AC6
			public Lightning(float lightningSpeed, string lightningAngleString, MinMax lightningDirectAimRange, string lightningShotCount, MinMax lightningDelayRange, string lightningSpawnString)
			{
				this.lightningSpeed = lightningSpeed;
				this.lightningAngleString = lightningAngleString;
				this.lightningDirectAimRange = lightningDirectAimRange;
				this.lightningShotCount = lightningShotCount;
				this.lightningDelayRange = lightningDelayRange;
				this.lightningSpawnString = lightningSpawnString;
			}

			// Token: 0x04000E5F RID: 3679
			public readonly float lightningSpeed;

			// Token: 0x04000E60 RID: 3680
			public readonly string lightningAngleString;

			// Token: 0x04000E61 RID: 3681
			public readonly MinMax lightningDirectAimRange;

			// Token: 0x04000E62 RID: 3682
			public readonly string lightningShotCount;

			// Token: 0x04000E63 RID: 3683
			public readonly MinMax lightningDelayRange;

			// Token: 0x04000E64 RID: 3684
			public readonly string lightningSpawnString;
		}

		// Token: 0x02000287 RID: 647
		public class Meteor : AbstractLevelPropertyGroup
		{
			// Token: 0x06000724 RID: 1828 RVA: 0x000446FC File Offset: 0x00042AFC
			public Meteor(float meteorSpeed, int meteorHP, float hookSpeed, float hookMaxHeight, float hookRevealExitDelay, float hookParryExitDelay, float meteorSize, string meteorSpawnString)
			{
				this.meteorSpeed = meteorSpeed;
				this.meteorHP = meteorHP;
				this.hookSpeed = hookSpeed;
				this.hookMaxHeight = hookMaxHeight;
				this.hookRevealExitDelay = hookRevealExitDelay;
				this.hookParryExitDelay = hookParryExitDelay;
				this.meteorSize = meteorSize;
				this.meteorSpawnString = meteorSpawnString;
			}

			// Token: 0x04000E65 RID: 3685
			public readonly float meteorSpeed;

			// Token: 0x04000E66 RID: 3686
			public readonly int meteorHP;

			// Token: 0x04000E67 RID: 3687
			public readonly float hookSpeed;

			// Token: 0x04000E68 RID: 3688
			public readonly float hookMaxHeight;

			// Token: 0x04000E69 RID: 3689
			public readonly float hookRevealExitDelay;

			// Token: 0x04000E6A RID: 3690
			public readonly float hookParryExitDelay;

			// Token: 0x04000E6B RID: 3691
			public readonly float meteorSize;

			// Token: 0x04000E6C RID: 3692
			public readonly string meteorSpawnString;
		}

		// Token: 0x02000288 RID: 648
		public class Tidal : AbstractLevelPropertyGroup
		{
			// Token: 0x06000725 RID: 1829 RVA: 0x0004474C File Offset: 0x00042B4C
			public Tidal(float tidalSpeed, float tidalSize, float tidalHesitate)
			{
				this.tidalSpeed = tidalSpeed;
				this.tidalSize = tidalSize;
				this.tidalHesitate = tidalHesitate;
			}

			// Token: 0x04000E6D RID: 3693
			public readonly float tidalSpeed;

			// Token: 0x04000E6E RID: 3694
			public readonly float tidalSize;

			// Token: 0x04000E6F RID: 3695
			public readonly float tidalHesitate;
		}

		// Token: 0x02000289 RID: 649
		public class Roses : AbstractLevelPropertyGroup
		{
			// Token: 0x06000726 RID: 1830 RVA: 0x00044769 File Offset: 0x00042B69
			public Roses(MinMax fallSpeed, float fallAcceleration, float groundDuration, string[] spawnString, MinMax spawnDelayRange, MinMax playerAimRange)
			{
				this.fallSpeed = fallSpeed;
				this.fallAcceleration = fallAcceleration;
				this.groundDuration = groundDuration;
				this.spawnString = spawnString;
				this.spawnDelayRange = spawnDelayRange;
				this.playerAimRange = playerAimRange;
			}

			// Token: 0x04000E70 RID: 3696
			public readonly MinMax fallSpeed;

			// Token: 0x04000E71 RID: 3697
			public readonly float fallAcceleration;

			// Token: 0x04000E72 RID: 3698
			public readonly float groundDuration;

			// Token: 0x04000E73 RID: 3699
			public readonly string[] spawnString;

			// Token: 0x04000E74 RID: 3700
			public readonly MinMax spawnDelayRange;

			// Token: 0x04000E75 RID: 3701
			public readonly MinMax playerAimRange;
		}
	}

	// Token: 0x0200028B RID: 651
	public class Saltbaker : AbstractLevelProperties<LevelProperties.Saltbaker.State, LevelProperties.Saltbaker.Pattern, LevelProperties.Saltbaker.States>
	{
		// Token: 0x06000741 RID: 1857 RVA: 0x0004479E File Offset: 0x00042B9E
		public Saltbaker(int hp, Level.GoalTimes goalTimes, LevelProperties.Saltbaker.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000742 RID: 1858 RVA: 0x000447AC File Offset: 0x00042BAC
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1400f;
				timeline.events.Add(new Level.Timeline.Event("PhaseTwo", 0.64f));
				timeline.events.Add(new Level.Timeline.Event("PhaseThree", 0.28f));
				timeline.events.Add(new Level.Timeline.Event("PhaseFour", 0.09f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1500f;
				timeline.events.Add(new Level.Timeline.Event("PhaseTwo", 0.6f));
				timeline.events.Add(new Level.Timeline.Event("PhaseThree", 0.24f));
				timeline.events.Add(new Level.Timeline.Event("PhaseFour", 0.15f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1700f;
				timeline.events.Add(new Level.Timeline.Event("PhaseTwo", 0.6f));
				timeline.events.Add(new Level.Timeline.Event("PhaseThree", 0.23f));
				timeline.events.Add(new Level.Timeline.Event("PhaseFour", 0.15f));
				break;
			}
			return timeline;
		}

		// Token: 0x06000743 RID: 1859 RVA: 0x000448F4 File Offset: 0x00042CF4
		public static LevelProperties.Saltbaker.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "S")
				{
					return LevelProperties.Saltbaker.Pattern.Strawberries;
				}
				if (id == "C")
				{
					return LevelProperties.Saltbaker.Pattern.Sugarcubes;
				}
				if (id == "D")
				{
					return LevelProperties.Saltbaker.Pattern.Dough;
				}
				if (id == "L")
				{
					return LevelProperties.Saltbaker.Pattern.Limes;
				}
			}
			Debug.LogError("Pattern Saltbaker.Pattern for  " + id + " not found.", null);
			return LevelProperties.Saltbaker.Pattern.Uninitialized;
		}

		// Token: 0x06000744 RID: 1860 RVA: 0x00044974 File Offset: 0x00042D74
		public static LevelProperties.Saltbaker GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Saltbaker.State> list = new List<LevelProperties.Saltbaker.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1700;
						goalTimes = new Level.GoalTimes(180f, 180f, 180f);
						list.Add(new LevelProperties.Saltbaker.State(10f, new LevelProperties.Saltbaker.Pattern[][]
						{
							new LevelProperties.Saltbaker.Pattern[]
							{
								LevelProperties.Saltbaker.Pattern.Dough,
								LevelProperties.Saltbaker.Pattern.Limes,
								LevelProperties.Saltbaker.Pattern.Strawberries,
								LevelProperties.Saltbaker.Pattern.Sugarcubes,
								LevelProperties.Saltbaker.Pattern.Limes,
								LevelProperties.Saltbaker.Pattern.Dough,
								LevelProperties.Saltbaker.Pattern.Sugarcubes,
								LevelProperties.Saltbaker.Pattern.Strawberries,
								LevelProperties.Saltbaker.Pattern.Limes,
								LevelProperties.Saltbaker.Pattern.Dough,
								LevelProperties.Saltbaker.Pattern.Strawberries,
								LevelProperties.Saltbaker.Pattern.Sugarcubes,
								LevelProperties.Saltbaker.Pattern.Dough,
								LevelProperties.Saltbaker.Pattern.Limes,
								LevelProperties.Saltbaker.Pattern.Sugarcubes,
								LevelProperties.Saltbaker.Pattern.Strawberries,
								LevelProperties.Saltbaker.Pattern.Limes,
								LevelProperties.Saltbaker.Pattern.Sugarcubes,
								LevelProperties.Saltbaker.Pattern.Limes,
								LevelProperties.Saltbaker.Pattern.Strawberries,
								LevelProperties.Saltbaker.Pattern.Limes
							}
						}, LevelProperties.Saltbaker.States.Main, new LevelProperties.Saltbaker.Strawberries(11.5f, 4.5f, 225f, new string[]
						{
							"-400,100,600,-200,300,800,0,500,1000,200,700,1200,-300,200,700,-100,400,900,100,600,1100",
							"-350,150,650,-150,350,850,50,550,1050,250,750,1250,-250,250,750,-50,450,950,150,650,1150",
							"-450,50,550,-250,250,750,-50,450,950,150,650,1150,-350,150,650,-150,350,850,50,550,1050"
						}, new string[]
						{
							"0.6,0.7,0.8"
						}, 550f, 0.75f), new LevelProperties.Saltbaker.Sugarcubes(7.5f, 9f, -100f, 2.9f, 200f, 180f, new string[]
						{
							"0,100,200,300,400,500,600,700,800,900,1000",
							"25,125,225,325,425,525,625,725,825,925,1025",
							"50,150,250,350,450,550,650,750,850,950,1050",
							"75,175,275,375,475,575,675,775,875,975,1075"
						}, new string[]
						{
							"0.92,0.93"
						}, 0.75f, "R,R,R,P,R,R,R,R,P,R,R,R,R,P"), new LevelProperties.Saltbaker.Limes(7.5f, 9.5f, -50f, -300f, -225f, 50f, 780f, 780f, 650f, new MinMax(5f, 2.5f), 1.6f, new string[]
						{
							"L,H,L,H,L,L,H,H",
							"L,L,H,L,H,L,H,L",
							"H,H,L,L,H,L,H,L",
							"H,L,H,H,L,H,H,L",
							"L,H,H,L,H,L,H"
						}, new string[]
						{
							"1.5,2.1,1,2,1.4,1.3,2",
							"2.1,1.2,1.4,1.7,2,1.6,2.2",
							"1.8,1.5,2,1.3,1.6,2.1,1.2",
							"2,1.4,1.6,1.9,1.1,1.9,1.5"
						}, 0.75f), new LevelProperties.Saltbaker.Dough(6.5f, 7.5f, 4.1f, new string[]
						{
							"P,P,P"
						}, new string[]
						{
							"0,3,1,0,3,2,3,1,0,3,2,1,3,1,2,0,3"
						}, new string[]
						{
							"0.8,1,0.7,1,0.6,1.1,1.2,0.9,0.8,0.6",
							"0.9,0.7,0.8,1,0.6,0.7,1,0.7,0.8,1.1,0.6"
						}, new float[]
						{
							380f,
							450f,
							500f,
							550f
						}, new float[]
						{
							1600f,
							2000f,
							1350f,
							1850f
						}, new float[]
						{
							3600f,
							3600f,
							3600f,
							3600f
						}, 0.55f), new LevelProperties.Saltbaker.Swooper(2, 0.5f, 4f, 710f, 1f), new LevelProperties.Saltbaker.Leaf(true, 5f, new string[]
						{
							"3,4,5"
						}, new MinMax(-300f, 300f), 400f, 0.8f, 200f, new MinMax(-50f, 50f), 0.5f), new LevelProperties.Saltbaker.Turrets(true, 47f, 3.4f, 465f, 1.6f, 0.5f, new string[]
						{
							"R,R,R,P,R,R,R,P,R,R,R,R,P"
						}), new LevelProperties.Saltbaker.Jumper(0, 0f, 0f, 0f, 0f), new LevelProperties.Saltbaker.Bouncer(0.6f, 0f, false, 0f, 630f, 1300f, 2500f, 24, 1800f), new LevelProperties.Saltbaker.Cutter(2, 275f), new LevelProperties.Saltbaker.DoomPillar(new string[]
						{
							"-0.8,0,0.6,0,-0.9,-0.4,-0.2,1,0.1,-0.5,0.1,0.9"
						}, new string[]
						{
							"240,340,360,285,380,270,240,340,360,285,380,270",
							"250,360,310,265,340,240,300,250,360,310,265,340"
						}, true, new string[]
						{
							"M,S,L,M,L,S,M,M,L,M,L,S,M"
						}, new MinMax(300f, 405f), new MinMax(650f, 475f), 20f), new LevelProperties.Saltbaker.DarkHeart(825f, new string[]
						{
							"2,3,-2,1,-3,3,-1,0,-2,-1",
							"1,3,-2,3,-1,-1,2,3,-3,-2,0,-3",
							"3,-1,2,-3,0,2,2,-3,1,-3,0"
						}, 21f, 1.5f, 0.3f), new LevelProperties.Saltbaker.SideShot(new string[0], new string[0], new string[0], 0f, 0f)));
						list.Add(new LevelProperties.Saltbaker.State(0.6f, new LevelProperties.Saltbaker.Pattern[][]
						{
							new LevelProperties.Saltbaker.Pattern[0]
						}, LevelProperties.Saltbaker.States.PhaseTwo, new LevelProperties.Saltbaker.Strawberries(11.5f, 4.5f, 225f, new string[]
						{
							"-400,100,600,-200,300,800,0,500,1000,200,700,1200,-300,200,700,-100,400,900,100,600,1100",
							"-350,150,650,-150,350,850,50,550,1050,250,750,1250,-250,250,750,-50,450,950,150,650,1150",
							"-450,50,550,-250,250,750,-50,450,950,150,650,1150,-350,150,650,-150,350,850,50,550,1050"
						}, new string[]
						{
							"0.6,0.7,0.8"
						}, 550f, 0.75f), new LevelProperties.Saltbaker.Sugarcubes(7.5f, 9f, -100f, 2.9f, 200f, 180f, new string[]
						{
							"0,100,200,300,400,500,600,700,800,900,1000",
							"25,125,225,325,425,525,625,725,825,925,1025",
							"50,150,250,350,450,550,650,750,850,950,1050",
							"75,175,275,375,475,575,675,775,875,975,1075"
						}, new string[]
						{
							"0.92,0.93"
						}, 0.75f, "R,R,R,P,R,R,R,R,P,R,R,R,R,P"), new LevelProperties.Saltbaker.Limes(7.5f, 9.5f, -50f, -300f, -225f, 50f, 780f, 780f, 650f, new MinMax(5f, 2.5f), 1.6f, new string[]
						{
							"L,H,L,H,L,L,H,H",
							"L,L,H,L,H,L,H,L",
							"H,H,L,L,H,L,H,L",
							"H,L,H,H,L,H,H,L",
							"L,H,H,L,H,L,H"
						}, new string[]
						{
							"1.5,2.1,1,2,1.4,1.3,2",
							"2.1,1.2,1.4,1.7,2,1.6,2.2",
							"1.8,1.5,2,1.3,1.6,2.1,1.2",
							"2,1.4,1.6,1.9,1.1,1.9,1.5"
						}, 0.75f), new LevelProperties.Saltbaker.Dough(6.5f, 7.5f, 4.1f, new string[]
						{
							"P,P,P"
						}, new string[]
						{
							"0,3,1,0,3,2,3,1,0,3,2,1,3,1,2,0,3"
						}, new string[]
						{
							"0.8,1,0.7,1,0.6,1.1,1.2,0.9,0.8,0.6",
							"0.9,0.7,0.8,1,0.6,0.7,1,0.7,0.8,1.1,0.6"
						}, new float[]
						{
							380f,
							450f,
							500f,
							550f
						}, new float[]
						{
							1600f,
							2000f,
							1350f,
							1850f
						}, new float[]
						{
							3600f,
							3600f,
							3600f,
							3600f
						}, 0.55f), new LevelProperties.Saltbaker.Swooper(2, 0.5f, 4f, 710f, 1f), new LevelProperties.Saltbaker.Leaf(true, 5f, new string[]
						{
							"3,4,5"
						}, new MinMax(-300f, 300f), 400f, 0.8f, 200f, new MinMax(-50f, 50f), 0.5f), new LevelProperties.Saltbaker.Turrets(true, 47f, 3.4f, 465f, 1.6f, 0.5f, new string[]
						{
							"R,R,R,P,R,R,R,P,R,R,R,R,P"
						}), new LevelProperties.Saltbaker.Jumper(2, 0.5f, 3.2f, 710f, 0.95f), new LevelProperties.Saltbaker.Bouncer(0.6f, 0f, false, 0f, 630f, 1300f, 2500f, 24, 1800f), new LevelProperties.Saltbaker.Cutter(2, 275f), new LevelProperties.Saltbaker.DoomPillar(new string[]
						{
							"-0.8,0,0.6,0,-0.9,-0.4,-0.2,1,0.1,-0.5,0.1,0.9"
						}, new string[]
						{
							"240,340,360,285,380,270,240,340,360,285,380,270",
							"250,360,310,265,340,240,300,250,360,310,265,340"
						}, true, new string[]
						{
							"M,S,L,M,L,S,M,M,L,M,L,S,M"
						}, new MinMax(300f, 405f), new MinMax(650f, 475f), 20f), new LevelProperties.Saltbaker.DarkHeart(825f, new string[]
						{
							"2,3,-2,1,-3,3,-1,0,-2,-1",
							"1,3,-2,3,-1,-1,2,3,-3,-2,0,-3",
							"3,-1,2,-3,0,2,2,-3,1,-3,0"
						}, 21f, 1.5f, 0.3f), new LevelProperties.Saltbaker.SideShot(new string[0], new string[0], new string[0], 0f, 0f)));
						list.Add(new LevelProperties.Saltbaker.State(0.23f, new LevelProperties.Saltbaker.Pattern[][]
						{
							new LevelProperties.Saltbaker.Pattern[0]
						}, LevelProperties.Saltbaker.States.PhaseThree, new LevelProperties.Saltbaker.Strawberries(11.5f, 4.5f, 225f, new string[]
						{
							"-400,100,600,-200,300,800,0,500,1000,200,700,1200,-300,200,700,-100,400,900,100,600,1100",
							"-350,150,650,-150,350,850,50,550,1050,250,750,1250,-250,250,750,-50,450,950,150,650,1150",
							"-450,50,550,-250,250,750,-50,450,950,150,650,1150,-350,150,650,-150,350,850,50,550,1050"
						}, new string[]
						{
							"0.6,0.7,0.8"
						}, 550f, 0.75f), new LevelProperties.Saltbaker.Sugarcubes(7.5f, 9f, -100f, 2.9f, 200f, 180f, new string[]
						{
							"0,100,200,300,400,500,600,700,800,900,1000",
							"25,125,225,325,425,525,625,725,825,925,1025",
							"50,150,250,350,450,550,650,750,850,950,1050",
							"75,175,275,375,475,575,675,775,875,975,1075"
						}, new string[]
						{
							"0.92,0.93"
						}, 0.75f, "R,R,R,P,R,R,R,R,P,R,R,R,R,P"), new LevelProperties.Saltbaker.Limes(7.5f, 9.5f, -50f, -300f, -225f, 50f, 780f, 780f, 650f, new MinMax(5f, 2.5f), 1.6f, new string[]
						{
							"L,H,L,H,L,L,H,H",
							"L,L,H,L,H,L,H,L",
							"H,H,L,L,H,L,H,L",
							"H,L,H,H,L,H,H,L",
							"L,H,H,L,H,L,H"
						}, new string[]
						{
							"1.5,2.1,1,2,1.4,1.3,2",
							"2.1,1.2,1.4,1.7,2,1.6,2.2",
							"1.8,1.5,2,1.3,1.6,2.1,1.2",
							"2,1.4,1.6,1.9,1.1,1.9,1.5"
						}, 0.75f), new LevelProperties.Saltbaker.Dough(6.5f, 7.5f, 4.1f, new string[]
						{
							"P,P,P"
						}, new string[]
						{
							"0,3,1,0,3,2,3,1,0,3,2,1,3,1,2,0,3"
						}, new string[]
						{
							"0.8,1,0.7,1,0.6,1.1,1.2,0.9,0.8,0.6",
							"0.9,0.7,0.8,1,0.6,0.7,1,0.7,0.8,1.1,0.6"
						}, new float[]
						{
							380f,
							450f,
							500f,
							550f
						}, new float[]
						{
							1600f,
							2000f,
							1350f,
							1850f
						}, new float[]
						{
							3600f,
							3600f,
							3600f,
							3600f
						}, 0.55f), new LevelProperties.Saltbaker.Swooper(2, 0.5f, 4f, 710f, 1f), new LevelProperties.Saltbaker.Leaf(true, 5f, new string[]
						{
							"3,4,5"
						}, new MinMax(-300f, 300f), 400f, 0.8f, 200f, new MinMax(-50f, 50f), 0.5f), new LevelProperties.Saltbaker.Turrets(true, 47f, 3.4f, 465f, 1.6f, 0.5f, new string[]
						{
							"R,R,R,P,R,R,R,P,R,R,R,R,P"
						}), new LevelProperties.Saltbaker.Jumper(2, 0.5f, 3.2f, 710f, 0.95f), new LevelProperties.Saltbaker.Bouncer(0.6f, 0f, false, 0f, 630f, 1300f, 2500f, 24, 1800f), new LevelProperties.Saltbaker.Cutter(2, 275f), new LevelProperties.Saltbaker.DoomPillar(new string[]
						{
							"-0.8,0,0.6,0,-0.9,-0.4,-0.2,1,0.1,-0.5,0.1,0.9"
						}, new string[]
						{
							"240,340,360,285,380,270,240,340,360,285,380,270",
							"250,360,310,265,340,240,300,250,360,310,265,340"
						}, true, new string[]
						{
							"M,S,L,M,L,S,M,M,L,M,L,S,M"
						}, new MinMax(300f, 405f), new MinMax(650f, 475f), 20f), new LevelProperties.Saltbaker.DarkHeart(825f, new string[]
						{
							"2,3,-2,1,-3,3,-1,0,-2,-1",
							"1,3,-2,3,-1,-1,2,3,-3,-2,0,-3",
							"3,-1,2,-3,0,2,2,-3,1,-3,0"
						}, 21f, 1.5f, 0.3f), new LevelProperties.Saltbaker.SideShot(new string[0], new string[0], new string[0], 0f, 0f)));
						list.Add(new LevelProperties.Saltbaker.State(0.15f, new LevelProperties.Saltbaker.Pattern[][]
						{
							new LevelProperties.Saltbaker.Pattern[0]
						}, LevelProperties.Saltbaker.States.PhaseFour, new LevelProperties.Saltbaker.Strawberries(11.5f, 4.5f, 225f, new string[]
						{
							"-400,100,600,-200,300,800,0,500,1000,200,700,1200,-300,200,700,-100,400,900,100,600,1100",
							"-350,150,650,-150,350,850,50,550,1050,250,750,1250,-250,250,750,-50,450,950,150,650,1150",
							"-450,50,550,-250,250,750,-50,450,950,150,650,1150,-350,150,650,-150,350,850,50,550,1050"
						}, new string[]
						{
							"0.6,0.7,0.8"
						}, 550f, 0.75f), new LevelProperties.Saltbaker.Sugarcubes(7.5f, 9f, -100f, 2.9f, 200f, 180f, new string[]
						{
							"0,100,200,300,400,500,600,700,800,900,1000",
							"25,125,225,325,425,525,625,725,825,925,1025",
							"50,150,250,350,450,550,650,750,850,950,1050",
							"75,175,275,375,475,575,675,775,875,975,1075"
						}, new string[]
						{
							"0.92,0.93"
						}, 0.75f, "R,R,R,P,R,R,R,R,P,R,R,R,R,P"), new LevelProperties.Saltbaker.Limes(7.5f, 9.5f, -50f, -300f, -225f, 50f, 780f, 780f, 650f, new MinMax(5f, 2.5f), 1.6f, new string[]
						{
							"L,H,L,H,L,L,H,H",
							"L,L,H,L,H,L,H,L",
							"H,H,L,L,H,L,H,L",
							"H,L,H,H,L,H,H,L",
							"L,H,H,L,H,L,H"
						}, new string[]
						{
							"1.5,2.1,1,2,1.4,1.3,2",
							"2.1,1.2,1.4,1.7,2,1.6,2.2",
							"1.8,1.5,2,1.3,1.6,2.1,1.2",
							"2,1.4,1.6,1.9,1.1,1.9,1.5"
						}, 0.75f), new LevelProperties.Saltbaker.Dough(6.5f, 7.5f, 4.1f, new string[]
						{
							"P,P,P"
						}, new string[]
						{
							"0,3,1,0,3,2,3,1,0,3,2,1,3,1,2,0,3"
						}, new string[]
						{
							"0.8,1,0.7,1,0.6,1.1,1.2,0.9,0.8,0.6",
							"0.9,0.7,0.8,1,0.6,0.7,1,0.7,0.8,1.1,0.6"
						}, new float[]
						{
							380f,
							450f,
							500f,
							550f
						}, new float[]
						{
							1600f,
							2000f,
							1350f,
							1850f
						}, new float[]
						{
							3600f,
							3600f,
							3600f,
							3600f
						}, 0.55f), new LevelProperties.Saltbaker.Swooper(2, 0.5f, 4f, 710f, 1f), new LevelProperties.Saltbaker.Leaf(true, 5f, new string[]
						{
							"3,4,5"
						}, new MinMax(-300f, 300f), 400f, 0.8f, 200f, new MinMax(-50f, 50f), 0.5f), new LevelProperties.Saltbaker.Turrets(true, 47f, 3.4f, 465f, 1.6f, 0.5f, new string[]
						{
							"R,R,R,P,R,R,R,P,R,R,R,R,P"
						}), new LevelProperties.Saltbaker.Jumper(2, 0.5f, 3.2f, 710f, 0.95f), new LevelProperties.Saltbaker.Bouncer(0.6f, 0f, false, 0f, 630f, 1300f, 2500f, 24, 1800f), new LevelProperties.Saltbaker.Cutter(2, 275f), new LevelProperties.Saltbaker.DoomPillar(new string[]
						{
							"-0.8,0,0.6,0,-0.9,-0.4,-0.2,1,0.1,-0.5,0.1,0.9"
						}, new string[]
						{
							"240,340,360,285,380,270,240,340,360,285,380,270",
							"250,360,310,265,340,240,300,250,360,310,265,340"
						}, true, new string[]
						{
							"M,S,L,M,L,S,M,M,L,M,L,S,M"
						}, new MinMax(300f, 405f), new MinMax(650f, 475f), 20f), new LevelProperties.Saltbaker.DarkHeart(825f, new string[]
						{
							"2,3,-2,1,-3,3,-1,0,-2,-1",
							"1,3,-2,3,-1,-1,2,3,-3,-2,0,-3",
							"3,-1,2,-3,0,2,2,-3,1,-3,0"
						}, 21f, 1.5f, 0.3f), new LevelProperties.Saltbaker.SideShot(new string[0], new string[0], new string[0], 0f, 0f)));
					}
				}
				else
				{
					hp = 1500;
					goalTimes = new Level.GoalTimes(180f, 180f, 180f);
					list.Add(new LevelProperties.Saltbaker.State(10f, new LevelProperties.Saltbaker.Pattern[][]
					{
						new LevelProperties.Saltbaker.Pattern[]
						{
							LevelProperties.Saltbaker.Pattern.Dough,
							LevelProperties.Saltbaker.Pattern.Limes,
							LevelProperties.Saltbaker.Pattern.Strawberries,
							LevelProperties.Saltbaker.Pattern.Sugarcubes,
							LevelProperties.Saltbaker.Pattern.Limes,
							LevelProperties.Saltbaker.Pattern.Dough,
							LevelProperties.Saltbaker.Pattern.Sugarcubes,
							LevelProperties.Saltbaker.Pattern.Strawberries,
							LevelProperties.Saltbaker.Pattern.Limes,
							LevelProperties.Saltbaker.Pattern.Dough,
							LevelProperties.Saltbaker.Pattern.Strawberries,
							LevelProperties.Saltbaker.Pattern.Sugarcubes,
							LevelProperties.Saltbaker.Pattern.Dough,
							LevelProperties.Saltbaker.Pattern.Limes,
							LevelProperties.Saltbaker.Pattern.Sugarcubes,
							LevelProperties.Saltbaker.Pattern.Strawberries,
							LevelProperties.Saltbaker.Pattern.Limes,
							LevelProperties.Saltbaker.Pattern.Sugarcubes,
							LevelProperties.Saltbaker.Pattern.Limes,
							LevelProperties.Saltbaker.Pattern.Strawberries,
							LevelProperties.Saltbaker.Pattern.Limes
						}
					}, LevelProperties.Saltbaker.States.Main, new LevelProperties.Saltbaker.Strawberries(10f, 5f, 225f, new string[]
					{
						"-400,100,600,-200,300,800,0,500,1000,200,700,1200,-300,200,700,-100,400,900,100,600,1100",
						"-350,150,650,-150,350,850,50,550,1050,250,750,1250,-250,250,750,-50,450,950,150,650,1150",
						"-450,50,550,-250,250,750,-50,450,950,150,650,1150,-350,150,650,-150,350,850,50,550,1050"
					}, new string[]
					{
						"0.7,0.8,0.9"
					}, 550f, 0.75f), new LevelProperties.Saltbaker.Sugarcubes(6.5f, 9.5f, -100f, 2.9f, 200f, 180f, new string[]
					{
						"0,250,500,50,300,550,100,350,600",
						"50,200,450,100,350,600,50,400,550",
						"0,300,550,150,350,600,0,250,500",
						"100,350,650,50,250,550,0,300,600",
						"0,250,450,100,350,550,50,300,500"
					}, new string[]
					{
						"1.3,1.3,1,1.1,1.7,1.6,1.4,0.6",
						"1.4,1.5,1.2,1.6,1,1.4,1.7,1.5,0.6",
						"1.2,1.5,0.9,1.2,1.6,1.4,1.6,0.6",
						"1.4,1.2,0.9,1.2,1.6,1.6,1.5,0.6",
						"1.6,1.4,1.3,1.6,1.2,1.3,1.7,1.2,0.6",
						"1.3,1.4,1,1.2,1.6,1.3,1.6,0.6"
					}, 0.75f, "R,R,R,P,R,R,R,P,R,R,R,R,P"), new LevelProperties.Saltbaker.Limes(6.5f, 10f, -50f, -300f, -225f, 50f, 730f, 730f, 650f, new MinMax(5f, 2.5f), 1.6f, new string[]
					{
						"L,H,H,L,H,L,H",
						"H,L,H,H,L,H,H,L",
						"H,H,L,L,H,L,H,H",
						"L,L,H,L,H,L,H,L",
						"L,H,L,H,L,L,H,L",
						"H,H,L,H,L,L,H"
					}, new string[]
					{
						"1.5,2.1,1,2,1.4,1.3,2",
						"2.1,1.2,1.4,1.7,2,1.6,2.2",
						"1.8,1.5,2,1.3,1.6,2.1,1.2",
						"2,1.4,1.6,1.9,1.1,1.9,1.5"
					}, 0.75f), new LevelProperties.Saltbaker.Dough(6f, 8f, 4.1f, new string[]
					{
						"P,P,P,P"
					}, new string[]
					{
						"0,3,1,0,3,2,3,1,0,3,2,1,3,1,2,0,3",
						"0,1,3,0,1,2,3,2,0,1,2,3,2,0,2,1,3"
					}, new string[]
					{
						"1,1.2,0.9,1,0.9,1.3,1.1,1.4,0.9,1,0.6",
						"0.9,1,0.8,1,0.9,0.9,1.2,0.9,1,0.6,1.3"
					}, new float[]
					{
						380f,
						450f,
						500f,
						550f
					}, new float[]
					{
						1600f,
						2000f,
						1350f,
						1850f
					}, new float[]
					{
						3600f,
						3600f,
						3600f,
						3600f
					}, 0.55f), new LevelProperties.Saltbaker.Swooper(1, 0.5f, 1.9f, 710f, 1f), new LevelProperties.Saltbaker.Leaf(true, 5f, new string[]
					{
						"3,4"
					}, new MinMax(-300f, 300f), 400f, 0.8f, 200f, new MinMax(-50f, 50f), 0.5f), new LevelProperties.Saltbaker.Turrets(true, 47f, 3.4f, 465f, 1.8f, 0.5f, new string[]
					{
						"R,R,R,P,R,R,P,R,R,R,P"
					}), new LevelProperties.Saltbaker.Jumper(0, 0.5f, 2f, 710f, 1f), new LevelProperties.Saltbaker.Bouncer(0.6f, 0f, false, 0f, 570f, 1430f, 2500f, 24, 1800f), new LevelProperties.Saltbaker.Cutter(1, 275f), new LevelProperties.Saltbaker.DoomPillar(new string[]
					{
						"-0.8,0,0.6,0,-0.9,-0.4,-0.2,1,0.1,-0.5,0.1,0.9"
					}, new string[]
					{
						"240,340,360,285,380,270,240,340,360,285,380,270",
						"250,360,310,265,340,240,300,250,360,310,265,340",
						"220,320,350,275,360,240,280,350,320,265,370,290"
					}, true, new string[]
					{
						"M,S,L,M,L,S,M,M,L,M,L,S,M"
					}, new MinMax(275f, 350f), new MinMax(600f, 475f), 20f), new LevelProperties.Saltbaker.DarkHeart(625f, new string[]
					{
						"2,3,-2,1,-3,3,-1,0,-2,-1",
						"1,3,-2,3,-1,-1,2,3,-3,-2,0,-3",
						"3,-1,2,-3,0,2,2,-3,1,-3,0"
					}, 27f, 1.5f, 0.3f), new LevelProperties.Saltbaker.SideShot(new string[]
					{
						"3.5,2.8,3.9"
					}, new string[]
					{
						"300,-150,0,-300,-200,150"
					}, new string[]
					{
						string.Empty
					}, 600f, 200f)));
					list.Add(new LevelProperties.Saltbaker.State(0.6f, new LevelProperties.Saltbaker.Pattern[][]
					{
						new LevelProperties.Saltbaker.Pattern[0]
					}, LevelProperties.Saltbaker.States.PhaseTwo, new LevelProperties.Saltbaker.Strawberries(10f, 5f, 225f, new string[]
					{
						"-400,100,600,-200,300,800,0,500,1000,200,700,1200,-300,200,700,-100,400,900,100,600,1100",
						"-350,150,650,-150,350,850,50,550,1050,250,750,1250,-250,250,750,-50,450,950,150,650,1150",
						"-450,50,550,-250,250,750,-50,450,950,150,650,1150,-350,150,650,-150,350,850,50,550,1050"
					}, new string[]
					{
						"0.7,0.8,0.9"
					}, 550f, 0.75f), new LevelProperties.Saltbaker.Sugarcubes(6.5f, 9.5f, -100f, 2.9f, 200f, 180f, new string[]
					{
						"0,250,500,50,300,550,100,350,600",
						"50,200,450,100,350,600,50,400,550",
						"0,300,550,150,350,600,0,250,500",
						"100,350,650,50,250,550,0,300,600",
						"0,250,450,100,350,550,50,300,500"
					}, new string[]
					{
						"1.3,1.3,1,1.1,1.7,1.6,1.4,0.6",
						"1.4,1.5,1.2,1.6,1,1.4,1.7,1.5,0.6",
						"1.2,1.5,0.9,1.2,1.6,1.4,1.6,0.6",
						"1.4,1.2,0.9,1.2,1.6,1.6,1.5,0.6",
						"1.6,1.4,1.3,1.6,1.2,1.3,1.7,1.2,0.6",
						"1.3,1.4,1,1.2,1.6,1.3,1.6,0.6"
					}, 0.75f, "R,R,R,P,R,R,R,P,R,R,R,R,P"), new LevelProperties.Saltbaker.Limes(6.5f, 10f, -50f, -300f, -225f, 50f, 730f, 730f, 650f, new MinMax(5f, 2.5f), 1.6f, new string[]
					{
						"L,H,H,L,H,L,H",
						"H,L,H,H,L,H,H,L",
						"H,H,L,L,H,L,H,H",
						"L,L,H,L,H,L,H,L",
						"L,H,L,H,L,L,H,L",
						"H,H,L,H,L,L,H"
					}, new string[]
					{
						"1.5,2.1,1,2,1.4,1.3,2",
						"2.1,1.2,1.4,1.7,2,1.6,2.2",
						"1.8,1.5,2,1.3,1.6,2.1,1.2",
						"2,1.4,1.6,1.9,1.1,1.9,1.5"
					}, 0.75f), new LevelProperties.Saltbaker.Dough(6f, 8f, 4.1f, new string[]
					{
						"P,P,P,P"
					}, new string[]
					{
						"0,3,1,0,3,2,3,1,0,3,2,1,3,1,2,0,3",
						"0,1,3,0,1,2,3,2,0,1,2,3,2,0,2,1,3"
					}, new string[]
					{
						"1,1.2,0.9,1,0.9,1.3,1.1,1.4,0.9,1,0.6",
						"0.9,1,0.8,1,0.9,0.9,1.2,0.9,1,0.6,1.3"
					}, new float[]
					{
						380f,
						450f,
						500f,
						550f
					}, new float[]
					{
						1600f,
						2000f,
						1350f,
						1850f
					}, new float[]
					{
						3600f,
						3600f,
						3600f,
						3600f
					}, 0.55f), new LevelProperties.Saltbaker.Swooper(1, 0.5f, 1.9f, 710f, 1f), new LevelProperties.Saltbaker.Leaf(true, 5f, new string[]
					{
						"3,4"
					}, new MinMax(-300f, 300f), 400f, 0.8f, 200f, new MinMax(-50f, 50f), 0.5f), new LevelProperties.Saltbaker.Turrets(true, 47f, 3.4f, 465f, 1.8f, 0.5f, new string[]
					{
						"R,R,R,P,R,R,P,R,R,R,P"
					}), new LevelProperties.Saltbaker.Jumper(1, 0.5f, 0.5f, 710f, 0.95f), new LevelProperties.Saltbaker.Bouncer(0.6f, 0f, false, 0f, 570f, 1430f, 2500f, 24, 1800f), new LevelProperties.Saltbaker.Cutter(1, 275f), new LevelProperties.Saltbaker.DoomPillar(new string[]
					{
						"-0.8,0,0.6,0,-0.9,-0.4,-0.2,1,0.1,-0.5,0.1,0.9"
					}, new string[]
					{
						"240,340,360,285,380,270,240,340,360,285,380,270",
						"250,360,310,265,340,240,300,250,360,310,265,340",
						"220,320,350,275,360,240,280,350,320,265,370,290"
					}, true, new string[]
					{
						"M,S,L,M,L,S,M,M,L,M,L,S,M"
					}, new MinMax(275f, 350f), new MinMax(600f, 475f), 20f), new LevelProperties.Saltbaker.DarkHeart(625f, new string[]
					{
						"2,3,-2,1,-3,3,-1,0,-2,-1",
						"1,3,-2,3,-1,-1,2,3,-3,-2,0,-3",
						"3,-1,2,-3,0,2,2,-3,1,-3,0"
					}, 27f, 1.5f, 0.3f), new LevelProperties.Saltbaker.SideShot(new string[]
					{
						"3.5,2.8,3.9"
					}, new string[]
					{
						"300,-150,0,-300,-200,150"
					}, new string[]
					{
						string.Empty
					}, 600f, 200f)));
					list.Add(new LevelProperties.Saltbaker.State(0.24f, new LevelProperties.Saltbaker.Pattern[][]
					{
						new LevelProperties.Saltbaker.Pattern[0]
					}, LevelProperties.Saltbaker.States.PhaseThree, new LevelProperties.Saltbaker.Strawberries(10f, 5f, 225f, new string[]
					{
						"-400,100,600,-200,300,800,0,500,1000,200,700,1200,-300,200,700,-100,400,900,100,600,1100",
						"-350,150,650,-150,350,850,50,550,1050,250,750,1250,-250,250,750,-50,450,950,150,650,1150",
						"-450,50,550,-250,250,750,-50,450,950,150,650,1150,-350,150,650,-150,350,850,50,550,1050"
					}, new string[]
					{
						"0.7,0.8,0.9"
					}, 550f, 0.75f), new LevelProperties.Saltbaker.Sugarcubes(6.5f, 9.5f, -100f, 2.9f, 200f, 180f, new string[]
					{
						"0,250,500,50,300,550,100,350,600",
						"50,200,450,100,350,600,50,400,550",
						"0,300,550,150,350,600,0,250,500",
						"100,350,650,50,250,550,0,300,600",
						"0,250,450,100,350,550,50,300,500"
					}, new string[]
					{
						"1.3,1.3,1,1.1,1.7,1.6,1.4,0.6",
						"1.4,1.5,1.2,1.6,1,1.4,1.7,1.5,0.6",
						"1.2,1.5,0.9,1.2,1.6,1.4,1.6,0.6",
						"1.4,1.2,0.9,1.2,1.6,1.6,1.5,0.6",
						"1.6,1.4,1.3,1.6,1.2,1.3,1.7,1.2,0.6",
						"1.3,1.4,1,1.2,1.6,1.3,1.6,0.6"
					}, 0.75f, "R,R,R,P,R,R,R,P,R,R,R,R,P"), new LevelProperties.Saltbaker.Limes(6.5f, 10f, -50f, -300f, -225f, 50f, 730f, 730f, 650f, new MinMax(5f, 2.5f), 1.6f, new string[]
					{
						"L,H,H,L,H,L,H",
						"H,L,H,H,L,H,H,L",
						"H,H,L,L,H,L,H,H",
						"L,L,H,L,H,L,H,L",
						"L,H,L,H,L,L,H,L",
						"H,H,L,H,L,L,H"
					}, new string[]
					{
						"1.5,2.1,1,2,1.4,1.3,2",
						"2.1,1.2,1.4,1.7,2,1.6,2.2",
						"1.8,1.5,2,1.3,1.6,2.1,1.2",
						"2,1.4,1.6,1.9,1.1,1.9,1.5"
					}, 0.75f), new LevelProperties.Saltbaker.Dough(6f, 8f, 4.1f, new string[]
					{
						"P,P,P,P"
					}, new string[]
					{
						"0,3,1,0,3,2,3,1,0,3,2,1,3,1,2,0,3",
						"0,1,3,0,1,2,3,2,0,1,2,3,2,0,2,1,3"
					}, new string[]
					{
						"1,1.2,0.9,1,0.9,1.3,1.1,1.4,0.9,1,0.6",
						"0.9,1,0.8,1,0.9,0.9,1.2,0.9,1,0.6,1.3"
					}, new float[]
					{
						380f,
						450f,
						500f,
						550f
					}, new float[]
					{
						1600f,
						2000f,
						1350f,
						1850f
					}, new float[]
					{
						3600f,
						3600f,
						3600f,
						3600f
					}, 0.55f), new LevelProperties.Saltbaker.Swooper(0, 0.5f, 2f, 710f, 1f), new LevelProperties.Saltbaker.Leaf(true, 5f, new string[]
					{
						"3,4"
					}, new MinMax(-300f, 300f), 400f, 0.8f, 200f, new MinMax(-50f, 50f), 0.5f), new LevelProperties.Saltbaker.Turrets(true, 47f, 3.4f, 465f, 1.8f, 0.5f, new string[]
					{
						"R,R,R,P,R,R,P,R,R,R,P"
					}), new LevelProperties.Saltbaker.Jumper(0, 0.5f, 2f, 710f, 1f), new LevelProperties.Saltbaker.Bouncer(0.6f, 0f, false, 0f, 570f, 1430f, 2500f, 24, 1800f), new LevelProperties.Saltbaker.Cutter(1, 275f), new LevelProperties.Saltbaker.DoomPillar(new string[]
					{
						"-0.8,0,0.6,0,-0.9,-0.4,-0.2,1,0.1,-0.5,0.1,0.9"
					}, new string[]
					{
						"240,340,360,285,380,270,240,340,360,285,380,270",
						"250,360,310,265,340,240,300,250,360,310,265,340",
						"220,320,350,275,360,240,280,350,320,265,370,290"
					}, true, new string[]
					{
						"M,S,L,M,L,S,M,M,L,M,L,S,M"
					}, new MinMax(275f, 350f), new MinMax(600f, 475f), 20f), new LevelProperties.Saltbaker.DarkHeart(625f, new string[]
					{
						"2,3,-2,1,-3,3,-1,0,-2,-1",
						"1,3,-2,3,-1,-1,2,3,-3,-2,0,-3",
						"3,-1,2,-3,0,2,2,-3,1,-3,0"
					}, 27f, 1.5f, 0.3f), new LevelProperties.Saltbaker.SideShot(new string[]
					{
						"3.5,2.8,3.9"
					}, new string[]
					{
						"300,-150,0,-300,-200,150"
					}, new string[]
					{
						string.Empty
					}, 600f, 200f)));
					list.Add(new LevelProperties.Saltbaker.State(0.15f, new LevelProperties.Saltbaker.Pattern[][]
					{
						new LevelProperties.Saltbaker.Pattern[0]
					}, LevelProperties.Saltbaker.States.PhaseFour, new LevelProperties.Saltbaker.Strawberries(10f, 5f, 225f, new string[]
					{
						"-400,100,600,-200,300,800,0,500,1000,200,700,1200,-300,200,700,-100,400,900,100,600,1100",
						"-350,150,650,-150,350,850,50,550,1050,250,750,1250,-250,250,750,-50,450,950,150,650,1150",
						"-450,50,550,-250,250,750,-50,450,950,150,650,1150,-350,150,650,-150,350,850,50,550,1050"
					}, new string[]
					{
						"0.7,0.8,0.9"
					}, 550f, 0.75f), new LevelProperties.Saltbaker.Sugarcubes(6.5f, 9.5f, -100f, 2.9f, 200f, 180f, new string[]
					{
						"0,250,500,50,300,550,100,350,600",
						"50,200,450,100,350,600,50,400,550",
						"0,300,550,150,350,600,0,250,500",
						"100,350,650,50,250,550,0,300,600",
						"0,250,450,100,350,550,50,300,500"
					}, new string[]
					{
						"1.3,1.3,1,1.1,1.7,1.6,1.4,0.6",
						"1.4,1.5,1.2,1.6,1,1.4,1.7,1.5,0.6",
						"1.2,1.5,0.9,1.2,1.6,1.4,1.6,0.6",
						"1.4,1.2,0.9,1.2,1.6,1.6,1.5,0.6",
						"1.6,1.4,1.3,1.6,1.2,1.3,1.7,1.2,0.6",
						"1.3,1.4,1,1.2,1.6,1.3,1.6,0.6"
					}, 0.75f, "R,R,R,P,R,R,R,P,R,R,R,R,P"), new LevelProperties.Saltbaker.Limes(6.5f, 10f, -50f, -300f, -225f, 50f, 730f, 730f, 650f, new MinMax(5f, 2.5f), 1.6f, new string[]
					{
						"L,H,H,L,H,L,H",
						"H,L,H,H,L,H,H,L",
						"H,H,L,L,H,L,H,H",
						"L,L,H,L,H,L,H,L",
						"L,H,L,H,L,L,H,L",
						"H,H,L,H,L,L,H"
					}, new string[]
					{
						"1.5,2.1,1,2,1.4,1.3,2",
						"2.1,1.2,1.4,1.7,2,1.6,2.2",
						"1.8,1.5,2,1.3,1.6,2.1,1.2",
						"2,1.4,1.6,1.9,1.1,1.9,1.5"
					}, 0.75f), new LevelProperties.Saltbaker.Dough(6f, 8f, 4.1f, new string[]
					{
						"P,P,P,P"
					}, new string[]
					{
						"0,3,1,0,3,2,3,1,0,3,2,1,3,1,2,0,3",
						"0,1,3,0,1,2,3,2,0,1,2,3,2,0,2,1,3"
					}, new string[]
					{
						"1,1.2,0.9,1,0.9,1.3,1.1,1.4,0.9,1,0.6",
						"0.9,1,0.8,1,0.9,0.9,1.2,0.9,1,0.6,1.3"
					}, new float[]
					{
						380f,
						450f,
						500f,
						550f
					}, new float[]
					{
						1600f,
						2000f,
						1350f,
						1850f
					}, new float[]
					{
						3600f,
						3600f,
						3600f,
						3600f
					}, 0.55f), new LevelProperties.Saltbaker.Swooper(0, 0.5f, 2f, 710f, 1f), new LevelProperties.Saltbaker.Leaf(true, 5f, new string[]
					{
						"3,4"
					}, new MinMax(-300f, 300f), 400f, 0.8f, 200f, new MinMax(-50f, 50f), 0.5f), new LevelProperties.Saltbaker.Turrets(true, 47f, 3.4f, 465f, 1.8f, 0.5f, new string[]
					{
						"R,R,R,P,R,R,P,R,R,R,P"
					}), new LevelProperties.Saltbaker.Jumper(0, 0.5f, 2f, 710f, 1f), new LevelProperties.Saltbaker.Bouncer(0.6f, 0f, false, 0f, 570f, 1430f, 2500f, 24, 1800f), new LevelProperties.Saltbaker.Cutter(1, 275f), new LevelProperties.Saltbaker.DoomPillar(new string[]
					{
						"-0.8,0,0.6,0,-0.9,-0.4,-0.2,1,0.1,-0.5,0.1,0.9"
					}, new string[]
					{
						"240,340,360,285,380,270,240,340,360,285,380,270",
						"250,360,310,265,340,240,300,250,360,310,265,340",
						"220,320,350,275,360,240,280,350,320,265,370,290"
					}, true, new string[]
					{
						"M,S,L,M,L,S,M,M,L,M,L,S,M"
					}, new MinMax(275f, 350f), new MinMax(600f, 475f), 20f), new LevelProperties.Saltbaker.DarkHeart(625f, new string[]
					{
						"2,3,-2,1,-3,3,-1,0,-2,-1",
						"1,3,-2,3,-1,-1,2,3,-3,-2,0,-3",
						"3,-1,2,-3,0,2,2,-3,1,-3,0"
					}, 27f, 1.5f, 0.3f), new LevelProperties.Saltbaker.SideShot(new string[]
					{
						"3.5,2.8,3.9"
					}, new string[]
					{
						"300,-150,0,-300,-200,150"
					}, new string[]
					{
						string.Empty
					}, 600f, 200f)));
				}
			}
			else
			{
				hp = 1400;
				goalTimes = new Level.GoalTimes(180f, 180f, 180f);
				list.Add(new LevelProperties.Saltbaker.State(10f, new LevelProperties.Saltbaker.Pattern[][]
				{
					new LevelProperties.Saltbaker.Pattern[]
					{
						LevelProperties.Saltbaker.Pattern.Dough,
						LevelProperties.Saltbaker.Pattern.Limes,
						LevelProperties.Saltbaker.Pattern.Strawberries,
						LevelProperties.Saltbaker.Pattern.Sugarcubes,
						LevelProperties.Saltbaker.Pattern.Limes,
						LevelProperties.Saltbaker.Pattern.Dough,
						LevelProperties.Saltbaker.Pattern.Sugarcubes,
						LevelProperties.Saltbaker.Pattern.Strawberries,
						LevelProperties.Saltbaker.Pattern.Limes,
						LevelProperties.Saltbaker.Pattern.Dough,
						LevelProperties.Saltbaker.Pattern.Strawberries,
						LevelProperties.Saltbaker.Pattern.Sugarcubes,
						LevelProperties.Saltbaker.Pattern.Dough,
						LevelProperties.Saltbaker.Pattern.Limes,
						LevelProperties.Saltbaker.Pattern.Sugarcubes,
						LevelProperties.Saltbaker.Pattern.Strawberries,
						LevelProperties.Saltbaker.Pattern.Limes,
						LevelProperties.Saltbaker.Pattern.Sugarcubes,
						LevelProperties.Saltbaker.Pattern.Limes,
						LevelProperties.Saltbaker.Pattern.Strawberries,
						LevelProperties.Saltbaker.Pattern.Limes
					}
				}, LevelProperties.Saltbaker.States.Main, new LevelProperties.Saltbaker.Strawberries(13.5f, 4.5f, 225f, new string[]
				{
					"-400,100,600,-200,300,800,0,500,1000,200,700,1200,-300,200,700,-100,400,900,100,600,1100",
					"-350,150,650,-150,350,850,50,550,1050,250,750,1250,-250,250,750,-50,450,950,150,650,1150",
					"-450,50,550,-250,250,750,-50,450,950,150,650,1150,-350,150,650,-150,350,850,50,550,1050"
				}, new string[]
				{
					"0.6,0.7,0.8"
				}, 575f, 0.75f), new LevelProperties.Saltbaker.Sugarcubes(8.5f, 8.5f, -100f, 2.9f, 200f, 180f, new string[]
				{
					"0,100,200,300,400,500,600,700,800,900,1000",
					"25,125,225,325,425,525,625,725,825,925,1025",
					"50,150,250,350,450,550,650,750,850,950,1050",
					"75,175,275,375,475,575,675,775,875,975,1075"
				}, new string[]
				{
					"0.8,0.81"
				}, 0.75f, "R,R,R,P,R,R,R,R,P,R,R,R,R,P"), new LevelProperties.Saltbaker.Limes(8.5f, 9f, -50f, -300f, -225f, 50f, 830f, 830f, 650f, new MinMax(5f, 2.5f), 1.6f, new string[]
				{
					"L,H,L,H,L,L,H,H",
					"L,L,H,L,H,L,H,L",
					"H,H,L,L,H,L,H,L",
					"H,L,H,H,L,H,H,L",
					"L,H,H,L,H,L,H"
				}, new string[]
				{
					"1.1,1.6,1,1.6,1.4,1.3,1.5",
					"1.6,1.2,1.1,1.3,1.5,1.6,1.4",
					"1.3,1.5,1.6,1.1,1.3,1.5,1.2",
					"1.6,1.4,1.3,1.4,1.1,1.2,1.5"
				}, 0.75f), new LevelProperties.Saltbaker.Dough(7.5f, 7f, 4.1f, new string[]
				{
					"P,P,P"
				}, new string[]
				{
					"0,3,1,0,3,2,3,1,0,3,2,1,3,1,2,0,3"
				}, new string[]
				{
					"0.8,0.7,0.7,1,0.6,0.6,0.8,0.9,0.7,0.6",
					"0.8,0.7,0.6,1,0.6,0.7,0.8,0.6,0.7,1,0.6"
				}, new float[]
				{
					390f,
					460f,
					520f,
					570f
				}, new float[]
				{
					1600f,
					2000f,
					1350f,
					1850f
				}, new float[]
				{
					3700f,
					3700f,
					3700f,
					3700f
				}, 0.55f), new LevelProperties.Saltbaker.Swooper(2, 0.5f, 3f, 710f, 0.75f), new LevelProperties.Saltbaker.Leaf(true, 5f, new string[]
				{
					"3,4,5,4"
				}, new MinMax(-300f, 300f), 400f, 0.8f, 200f, new MinMax(-50f, 50f), 0.5f), new LevelProperties.Saltbaker.Turrets(true, 49f, 3.2f, 556f, 0.8f, 0.5f, new string[]
				{
					"R,R,R,P,R,R,R,P,R,R,R,R,P"
				}), new LevelProperties.Saltbaker.Jumper(0, 0f, 0f, 0f, 0f), new LevelProperties.Saltbaker.Bouncer(0.6f, 0f, false, 0f, 765f, 1300f, 2500f, 24, 1800f), new LevelProperties.Saltbaker.Cutter(2, 444f), new LevelProperties.Saltbaker.DoomPillar(new string[]
				{
					"-0.8,0,0.6,0,-0.9,-0.4,-0.2,1,0.1,-0.5,0.1,0.9"
				}, new string[]
				{
					"240,340,360,285,380,270,240,340,360,285,380,270",
					"250,360,310,265,340,240,300,250,360,310,265,340"
				}, true, new string[]
				{
					"M,S,L,M,L,S,M,M,L,M,L,S,M"
				}, new MinMax(315f, 415f), new MinMax(650f, 475f), 20f), new LevelProperties.Saltbaker.DarkHeart(1025f, new string[]
				{
					"2,3,-2,1,-3,3,-1,0,-2,-1",
					"1,3,-2,3,-1,-1,2,3,-3,-2,0,-3",
					"3,-1,2,-3,0,2,2,-3,1,-3,0"
				}, 22f, 1.5f, 0.3f), new LevelProperties.Saltbaker.SideShot(new string[]
				{
					"3.5,2.8,3.9"
				}, new string[]
				{
					"300,-150,0,-300,-200,150"
				}, new string[]
				{
					"0,0,0"
				}, 600f, 200f)));
				list.Add(new LevelProperties.Saltbaker.State(0.64f, new LevelProperties.Saltbaker.Pattern[][]
				{
					new LevelProperties.Saltbaker.Pattern[0]
				}, LevelProperties.Saltbaker.States.PhaseTwo, new LevelProperties.Saltbaker.Strawberries(13.5f, 4.5f, 225f, new string[]
				{
					"-400,100,600,-200,300,800,0,500,1000,200,700,1200,-300,200,700,-100,400,900,100,600,1100",
					"-350,150,650,-150,350,850,50,550,1050,250,750,1250,-250,250,750,-50,450,950,150,650,1150",
					"-450,50,550,-250,250,750,-50,450,950,150,650,1150,-350,150,650,-150,350,850,50,550,1050"
				}, new string[]
				{
					"0.6,0.7,0.8"
				}, 575f, 0.75f), new LevelProperties.Saltbaker.Sugarcubes(8.5f, 8.5f, -100f, 2.9f, 200f, 180f, new string[]
				{
					"0,100,200,300,400,500,600,700,800,900,1000",
					"25,125,225,325,425,525,625,725,825,925,1025",
					"50,150,250,350,450,550,650,750,850,950,1050",
					"75,175,275,375,475,575,675,775,875,975,1075"
				}, new string[]
				{
					"0.8,0.81"
				}, 0.75f, "R,R,R,P,R,R,R,R,P,R,R,R,R,P"), new LevelProperties.Saltbaker.Limes(8.5f, 9f, -50f, -300f, -225f, 50f, 830f, 830f, 650f, new MinMax(5f, 2.5f), 1.6f, new string[]
				{
					"L,H,L,H,L,L,H,H",
					"L,L,H,L,H,L,H,L",
					"H,H,L,L,H,L,H,L",
					"H,L,H,H,L,H,H,L",
					"L,H,H,L,H,L,H"
				}, new string[]
				{
					"1.1,1.6,1,1.6,1.4,1.3,1.5",
					"1.6,1.2,1.1,1.3,1.5,1.6,1.4",
					"1.3,1.5,1.6,1.1,1.3,1.5,1.2",
					"1.6,1.4,1.3,1.4,1.1,1.2,1.5"
				}, 0.75f), new LevelProperties.Saltbaker.Dough(7.5f, 7f, 4.1f, new string[]
				{
					"P,P,P"
				}, new string[]
				{
					"0,3,1,0,3,2,3,1,0,3,2,1,3,1,2,0,3"
				}, new string[]
				{
					"0.8,0.7,0.7,1,0.6,0.6,0.8,0.9,0.7,0.6",
					"0.8,0.7,0.6,1,0.6,0.7,0.8,0.6,0.7,1,0.6"
				}, new float[]
				{
					390f,
					460f,
					520f,
					570f
				}, new float[]
				{
					1600f,
					2000f,
					1350f,
					1850f
				}, new float[]
				{
					3700f,
					3700f,
					3700f,
					3700f
				}, 0.55f), new LevelProperties.Saltbaker.Swooper(2, 0.5f, 3f, 710f, 0.75f), new LevelProperties.Saltbaker.Leaf(true, 5f, new string[]
				{
					"3,4,5,4"
				}, new MinMax(-300f, 300f), 400f, 0.8f, 200f, new MinMax(-50f, 50f), 0.5f), new LevelProperties.Saltbaker.Turrets(true, 49f, 3.2f, 556f, 0.8f, 0.5f, new string[]
				{
					"R,R,R,P,R,R,R,P,R,R,R,R,P"
				}), new LevelProperties.Saltbaker.Jumper(2, 0.5f, 2.9f, 710f, 0.75f), new LevelProperties.Saltbaker.Bouncer(0.6f, 0f, false, 0f, 765f, 1300f, 2500f, 24, 1800f), new LevelProperties.Saltbaker.Cutter(2, 444f), new LevelProperties.Saltbaker.DoomPillar(new string[]
				{
					"-0.8,0,0.6,0,-0.9,-0.4,-0.2,1,0.1,-0.5,0.1,0.9"
				}, new string[]
				{
					"240,340,360,285,380,270,240,340,360,285,380,270",
					"250,360,310,265,340,240,300,250,360,310,265,340"
				}, true, new string[]
				{
					"M,S,L,M,L,S,M,M,L,M,L,S,M"
				}, new MinMax(315f, 415f), new MinMax(650f, 475f), 20f), new LevelProperties.Saltbaker.DarkHeart(1025f, new string[]
				{
					"2,3,-2,1,-3,3,-1,0,-2,-1",
					"1,3,-2,3,-1,-1,2,3,-3,-2,0,-3",
					"3,-1,2,-3,0,2,2,-3,1,-3,0"
				}, 22f, 1.5f, 0.3f), new LevelProperties.Saltbaker.SideShot(new string[]
				{
					"3.5,2.8,3.9"
				}, new string[]
				{
					"300,-150,0,-300,-200,150"
				}, new string[]
				{
					"0,0,0"
				}, 600f, 200f)));
				list.Add(new LevelProperties.Saltbaker.State(0.28f, new LevelProperties.Saltbaker.Pattern[][]
				{
					new LevelProperties.Saltbaker.Pattern[0]
				}, LevelProperties.Saltbaker.States.PhaseThree, new LevelProperties.Saltbaker.Strawberries(13.5f, 4.5f, 225f, new string[]
				{
					"-400,100,600,-200,300,800,0,500,1000,200,700,1200,-300,200,700,-100,400,900,100,600,1100",
					"-350,150,650,-150,350,850,50,550,1050,250,750,1250,-250,250,750,-50,450,950,150,650,1150",
					"-450,50,550,-250,250,750,-50,450,950,150,650,1150,-350,150,650,-150,350,850,50,550,1050"
				}, new string[]
				{
					"0.6,0.7,0.8"
				}, 575f, 0.75f), new LevelProperties.Saltbaker.Sugarcubes(8.5f, 8.5f, -100f, 2.9f, 200f, 180f, new string[]
				{
					"0,100,200,300,400,500,600,700,800,900,1000",
					"25,125,225,325,425,525,625,725,825,925,1025",
					"50,150,250,350,450,550,650,750,850,950,1050",
					"75,175,275,375,475,575,675,775,875,975,1075"
				}, new string[]
				{
					"0.8,0.81"
				}, 0.75f, "R,R,R,P,R,R,R,R,P,R,R,R,R,P"), new LevelProperties.Saltbaker.Limes(8.5f, 9f, -50f, -300f, -225f, 50f, 830f, 830f, 650f, new MinMax(5f, 2.5f), 1.6f, new string[]
				{
					"L,H,L,H,L,L,H,H",
					"L,L,H,L,H,L,H,L",
					"H,H,L,L,H,L,H,L",
					"H,L,H,H,L,H,H,L",
					"L,H,H,L,H,L,H"
				}, new string[]
				{
					"1.1,1.6,1,1.6,1.4,1.3,1.5",
					"1.6,1.2,1.1,1.3,1.5,1.6,1.4",
					"1.3,1.5,1.6,1.1,1.3,1.5,1.2",
					"1.6,1.4,1.3,1.4,1.1,1.2,1.5"
				}, 0.75f), new LevelProperties.Saltbaker.Dough(7.5f, 7f, 4.1f, new string[]
				{
					"P,P,P"
				}, new string[]
				{
					"0,3,1,0,3,2,3,1,0,3,2,1,3,1,2,0,3"
				}, new string[]
				{
					"0.8,0.7,0.7,1,0.6,0.6,0.8,0.9,0.7,0.6",
					"0.8,0.7,0.6,1,0.6,0.7,0.8,0.6,0.7,1,0.6"
				}, new float[]
				{
					390f,
					460f,
					520f,
					570f
				}, new float[]
				{
					1600f,
					2000f,
					1350f,
					1850f
				}, new float[]
				{
					3700f,
					3700f,
					3700f,
					3700f
				}, 0.55f), new LevelProperties.Saltbaker.Swooper(2, 0.5f, 3f, 710f, 0.75f), new LevelProperties.Saltbaker.Leaf(true, 5f, new string[]
				{
					"3,4,5,4"
				}, new MinMax(-300f, 300f), 400f, 0.8f, 200f, new MinMax(-50f, 50f), 0.5f), new LevelProperties.Saltbaker.Turrets(true, 49f, 3.2f, 556f, 0.8f, 0.5f, new string[]
				{
					"R,R,R,P,R,R,R,P,R,R,R,R,P"
				}), new LevelProperties.Saltbaker.Jumper(2, 0.5f, 2.9f, 710f, 0.75f), new LevelProperties.Saltbaker.Bouncer(0.6f, 0f, false, 0f, 765f, 1300f, 2500f, 24, 1800f), new LevelProperties.Saltbaker.Cutter(2, 444f), new LevelProperties.Saltbaker.DoomPillar(new string[]
				{
					"-0.8,0,0.6,0,-0.9,-0.4,-0.2,1,0.1,-0.5,0.1,0.9"
				}, new string[]
				{
					"240,340,360,285,380,270,240,340,360,285,380,270",
					"250,360,310,265,340,240,300,250,360,310,265,340"
				}, true, new string[]
				{
					"M,S,L,M,L,S,M,M,L,M,L,S,M"
				}, new MinMax(315f, 415f), new MinMax(650f, 475f), 20f), new LevelProperties.Saltbaker.DarkHeart(1025f, new string[]
				{
					"2,3,-2,1,-3,3,-1,0,-2,-1",
					"1,3,-2,3,-1,-1,2,3,-3,-2,0,-3",
					"3,-1,2,-3,0,2,2,-3,1,-3,0"
				}, 22f, 1.5f, 0.3f), new LevelProperties.Saltbaker.SideShot(new string[]
				{
					"3.5,2.8,3.9"
				}, new string[]
				{
					"300,-150,0,-300,-200,150"
				}, new string[]
				{
					"0,0,0"
				}, 600f, 200f)));
				list.Add(new LevelProperties.Saltbaker.State(0.09f, new LevelProperties.Saltbaker.Pattern[][]
				{
					new LevelProperties.Saltbaker.Pattern[0]
				}, LevelProperties.Saltbaker.States.PhaseFour, new LevelProperties.Saltbaker.Strawberries(13.5f, 4.5f, 225f, new string[]
				{
					"-400,100,600,-200,300,800,0,500,1000,200,700,1200,-300,200,700,-100,400,900,100,600,1100",
					"-350,150,650,-150,350,850,50,550,1050,250,750,1250,-250,250,750,-50,450,950,150,650,1150",
					"-450,50,550,-250,250,750,-50,450,950,150,650,1150,-350,150,650,-150,350,850,50,550,1050"
				}, new string[]
				{
					"0.6,0.7,0.8"
				}, 575f, 0.75f), new LevelProperties.Saltbaker.Sugarcubes(8.5f, 8.5f, -100f, 2.9f, 200f, 180f, new string[]
				{
					"0,100,200,300,400,500,600,700,800,900,1000",
					"25,125,225,325,425,525,625,725,825,925,1025",
					"50,150,250,350,450,550,650,750,850,950,1050",
					"75,175,275,375,475,575,675,775,875,975,1075"
				}, new string[]
				{
					"0.8,0.81"
				}, 0.75f, "R,R,R,P,R,R,R,R,P,R,R,R,R,P"), new LevelProperties.Saltbaker.Limes(8.5f, 9f, -50f, -300f, -225f, 50f, 830f, 830f, 650f, new MinMax(5f, 2.5f), 1.6f, new string[]
				{
					"L,H,L,H,L,L,H,H",
					"L,L,H,L,H,L,H,L",
					"H,H,L,L,H,L,H,L",
					"H,L,H,H,L,H,H,L",
					"L,H,H,L,H,L,H"
				}, new string[]
				{
					"1.1,1.6,1,1.6,1.4,1.3,1.5",
					"1.6,1.2,1.1,1.3,1.5,1.6,1.4",
					"1.3,1.5,1.6,1.1,1.3,1.5,1.2",
					"1.6,1.4,1.3,1.4,1.1,1.2,1.5"
				}, 0.75f), new LevelProperties.Saltbaker.Dough(7.5f, 7f, 4.1f, new string[]
				{
					"P,P,P"
				}, new string[]
				{
					"0,3,1,0,3,2,3,1,0,3,2,1,3,1,2,0,3"
				}, new string[]
				{
					"0.8,0.7,0.7,1,0.6,0.6,0.8,0.9,0.7,0.6",
					"0.8,0.7,0.6,1,0.6,0.7,0.8,0.6,0.7,1,0.6"
				}, new float[]
				{
					390f,
					460f,
					520f,
					570f
				}, new float[]
				{
					1600f,
					2000f,
					1350f,
					1850f
				}, new float[]
				{
					3700f,
					3700f,
					3700f,
					3700f
				}, 0.55f), new LevelProperties.Saltbaker.Swooper(2, 0.5f, 3f, 710f, 0.75f), new LevelProperties.Saltbaker.Leaf(true, 5f, new string[]
				{
					"3,4,5,4"
				}, new MinMax(-300f, 300f), 400f, 0.8f, 200f, new MinMax(-50f, 50f), 0.5f), new LevelProperties.Saltbaker.Turrets(true, 49f, 3.2f, 556f, 0.8f, 0.5f, new string[]
				{
					"R,R,R,P,R,R,R,P,R,R,R,R,P"
				}), new LevelProperties.Saltbaker.Jumper(2, 0.5f, 2.9f, 710f, 0.75f), new LevelProperties.Saltbaker.Bouncer(0.6f, 0f, false, 0f, 765f, 1300f, 2500f, 24, 1800f), new LevelProperties.Saltbaker.Cutter(2, 444f), new LevelProperties.Saltbaker.DoomPillar(new string[]
				{
					"-0.8,0,0.6,0,-0.9,-0.4,-0.2,1,0.1,-0.5,0.1,0.9"
				}, new string[]
				{
					"240,340,360,285,380,270,240,340,360,285,380,270",
					"250,360,310,265,340,240,300,250,360,310,265,340"
				}, true, new string[]
				{
					"M,S,L,M,L,S,M,M,L,M,L,S,M"
				}, new MinMax(315f, 415f), new MinMax(650f, 475f), 20f), new LevelProperties.Saltbaker.DarkHeart(1025f, new string[]
				{
					"2,3,-2,1,-3,3,-1,0,-2,-1",
					"1,3,-2,3,-1,-1,2,3,-3,-2,0,-3",
					"3,-1,2,-3,0,2,2,-3,1,-3,0"
				}, 22f, 1.5f, 0.3f), new LevelProperties.Saltbaker.SideShot(new string[]
				{
					"3.5,2.8,3.9"
				}, new string[]
				{
					"300,-150,0,-300,-200,150"
				}, new string[]
				{
					"0,0,0"
				}, 600f, 200f)));
			}
			return new LevelProperties.Saltbaker(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200028C RID: 652
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700012F RID: 303
			// (get) Token: 0x06000746 RID: 1862 RVA: 0x000475F9 File Offset: 0x000459F9
			// (set) Token: 0x06000747 RID: 1863 RVA: 0x00047601 File Offset: 0x00045A01
			private protected LevelProperties.Saltbaker properties { protected get; private set; }

			// Token: 0x06000748 RID: 1864 RVA: 0x0004760A File Offset: 0x00045A0A
			public virtual void LevelInit(LevelProperties.Saltbaker properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000749 RID: 1865 RVA: 0x00047613 File Offset: 0x00045A13
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x0200028D RID: 653
		public enum States
		{
			// Token: 0x04000E88 RID: 3720
			Main,
			// Token: 0x04000E89 RID: 3721
			Generic,
			// Token: 0x04000E8A RID: 3722
			PhaseTwo,
			// Token: 0x04000E8B RID: 3723
			PhaseThree,
			// Token: 0x04000E8C RID: 3724
			PhaseFour
		}

		// Token: 0x0200028E RID: 654
		public enum Pattern
		{
			// Token: 0x04000E8E RID: 3726
			Strawberries,
			// Token: 0x04000E8F RID: 3727
			Sugarcubes,
			// Token: 0x04000E90 RID: 3728
			Dough,
			// Token: 0x04000E91 RID: 3729
			Limes,
			// Token: 0x04000E92 RID: 3730
			Uninitialized
		}

		// Token: 0x0200028F RID: 655
		public class State : AbstractLevelState<LevelProperties.Saltbaker.Pattern, LevelProperties.Saltbaker.States>
		{
			// Token: 0x0600074A RID: 1866 RVA: 0x00047618 File Offset: 0x00045A18
			public State(float healthTrigger, LevelProperties.Saltbaker.Pattern[][] patterns, LevelProperties.Saltbaker.States stateName, LevelProperties.Saltbaker.Strawberries strawberries, LevelProperties.Saltbaker.Sugarcubes sugarcubes, LevelProperties.Saltbaker.Limes limes, LevelProperties.Saltbaker.Dough dough, LevelProperties.Saltbaker.Swooper swooper, LevelProperties.Saltbaker.Leaf leaf, LevelProperties.Saltbaker.Turrets turrets, LevelProperties.Saltbaker.Jumper jumper, LevelProperties.Saltbaker.Bouncer bouncer, LevelProperties.Saltbaker.Cutter cutter, LevelProperties.Saltbaker.DoomPillar doomPillar, LevelProperties.Saltbaker.DarkHeart darkHeart, LevelProperties.Saltbaker.SideShot sideShot) : base(healthTrigger, patterns, stateName)
			{
				this.strawberries = strawberries;
				this.sugarcubes = sugarcubes;
				this.limes = limes;
				this.dough = dough;
				this.swooper = swooper;
				this.leaf = leaf;
				this.turrets = turrets;
				this.jumper = jumper;
				this.bouncer = bouncer;
				this.cutter = cutter;
				this.doomPillar = doomPillar;
				this.darkHeart = darkHeart;
				this.sideShot = sideShot;
			}

			// Token: 0x04000E93 RID: 3731
			public readonly LevelProperties.Saltbaker.Strawberries strawberries;

			// Token: 0x04000E94 RID: 3732
			public readonly LevelProperties.Saltbaker.Sugarcubes sugarcubes;

			// Token: 0x04000E95 RID: 3733
			public readonly LevelProperties.Saltbaker.Limes limes;

			// Token: 0x04000E96 RID: 3734
			public readonly LevelProperties.Saltbaker.Dough dough;

			// Token: 0x04000E97 RID: 3735
			public readonly LevelProperties.Saltbaker.Swooper swooper;

			// Token: 0x04000E98 RID: 3736
			public readonly LevelProperties.Saltbaker.Leaf leaf;

			// Token: 0x04000E99 RID: 3737
			public readonly LevelProperties.Saltbaker.Turrets turrets;

			// Token: 0x04000E9A RID: 3738
			public readonly LevelProperties.Saltbaker.Jumper jumper;

			// Token: 0x04000E9B RID: 3739
			public readonly LevelProperties.Saltbaker.Bouncer bouncer;

			// Token: 0x04000E9C RID: 3740
			public readonly LevelProperties.Saltbaker.Cutter cutter;

			// Token: 0x04000E9D RID: 3741
			public readonly LevelProperties.Saltbaker.DoomPillar doomPillar;

			// Token: 0x04000E9E RID: 3742
			public readonly LevelProperties.Saltbaker.DarkHeart darkHeart;

			// Token: 0x04000E9F RID: 3743
			public readonly LevelProperties.Saltbaker.SideShot sideShot;
		}

		// Token: 0x02000290 RID: 656
		public class Strawberries : AbstractLevelPropertyGroup
		{
			// Token: 0x0600074B RID: 1867 RVA: 0x00047696 File Offset: 0x00045A96
			public Strawberries(float diagAtkDuration, float startNextAtk, float diagAngle, string[] locationSpawnString, string[] bulletDelayString, float bulletSpeed, float firstDelay)
			{
				this.diagAtkDuration = diagAtkDuration;
				this.startNextAtk = startNextAtk;
				this.diagAngle = diagAngle;
				this.locationSpawnString = locationSpawnString;
				this.bulletDelayString = bulletDelayString;
				this.bulletSpeed = bulletSpeed;
				this.firstDelay = firstDelay;
			}

			// Token: 0x04000EA0 RID: 3744
			public readonly float diagAtkDuration;

			// Token: 0x04000EA1 RID: 3745
			public readonly float startNextAtk;

			// Token: 0x04000EA2 RID: 3746
			public readonly float diagAngle;

			// Token: 0x04000EA3 RID: 3747
			public readonly string[] locationSpawnString;

			// Token: 0x04000EA4 RID: 3748
			public readonly string[] bulletDelayString;

			// Token: 0x04000EA5 RID: 3749
			public readonly float bulletSpeed;

			// Token: 0x04000EA6 RID: 3750
			public readonly float firstDelay;
		}

		// Token: 0x02000291 RID: 657
		public class Sugarcubes : AbstractLevelPropertyGroup
		{
			// Token: 0x0600074C RID: 1868 RVA: 0x000476D4 File Offset: 0x00045AD4
			public Sugarcubes(float sineAttackDuration, float startNextAttack, float centerHeight, float sineFreq, float sineAmplitude, float sineWavelength, string[] phaseString, string[] bulletDelayString, float firstDelay, string parryString)
			{
				this.sineAttackDuration = sineAttackDuration;
				this.startNextAttack = startNextAttack;
				this.centerHeight = centerHeight;
				this.sineFreq = sineFreq;
				this.sineAmplitude = sineAmplitude;
				this.sineWavelength = sineWavelength;
				this.phaseString = phaseString;
				this.bulletDelayString = bulletDelayString;
				this.firstDelay = firstDelay;
				this.parryString = parryString;
			}

			// Token: 0x04000EA7 RID: 3751
			public readonly float sineAttackDuration;

			// Token: 0x04000EA8 RID: 3752
			public readonly float startNextAttack;

			// Token: 0x04000EA9 RID: 3753
			public readonly float centerHeight;

			// Token: 0x04000EAA RID: 3754
			public readonly float sineFreq;

			// Token: 0x04000EAB RID: 3755
			public readonly float sineAmplitude;

			// Token: 0x04000EAC RID: 3756
			public readonly float sineWavelength;

			// Token: 0x04000EAD RID: 3757
			public readonly string[] phaseString;

			// Token: 0x04000EAE RID: 3758
			public readonly string[] bulletDelayString;

			// Token: 0x04000EAF RID: 3759
			public readonly float firstDelay;

			// Token: 0x04000EB0 RID: 3760
			public readonly string parryString;
		}

		// Token: 0x02000292 RID: 658
		public class Limes : AbstractLevelPropertyGroup
		{
			// Token: 0x0600074D RID: 1869 RVA: 0x00047734 File Offset: 0x00045B34
			public Limes(float boomerangAttackDuration, float startNextAttack, float highStartY, float highEndY, float lowStartY, float lowEndY, float straightSpeed, float straightGravity, float distToTurn, MinMax angleSpeedToLerp, float angleLerpTime, string[] boomerangHeightString, string[] boomerangDelayString, float firstDelay)
			{
				this.boomerangAttackDuration = boomerangAttackDuration;
				this.startNextAttack = startNextAttack;
				this.highStartY = highStartY;
				this.highEndY = highEndY;
				this.lowStartY = lowStartY;
				this.lowEndY = lowEndY;
				this.straightSpeed = straightSpeed;
				this.straightGravity = straightGravity;
				this.distToTurn = distToTurn;
				this.angleSpeedToLerp = angleSpeedToLerp;
				this.angleLerpTime = angleLerpTime;
				this.boomerangHeightString = boomerangHeightString;
				this.boomerangDelayString = boomerangDelayString;
				this.firstDelay = firstDelay;
			}

			// Token: 0x04000EB1 RID: 3761
			public readonly float boomerangAttackDuration;

			// Token: 0x04000EB2 RID: 3762
			public readonly float startNextAttack;

			// Token: 0x04000EB3 RID: 3763
			public readonly float highStartY;

			// Token: 0x04000EB4 RID: 3764
			public readonly float highEndY;

			// Token: 0x04000EB5 RID: 3765
			public readonly float lowStartY;

			// Token: 0x04000EB6 RID: 3766
			public readonly float lowEndY;

			// Token: 0x04000EB7 RID: 3767
			public readonly float straightSpeed;

			// Token: 0x04000EB8 RID: 3768
			public readonly float straightGravity;

			// Token: 0x04000EB9 RID: 3769
			public readonly float distToTurn;

			// Token: 0x04000EBA RID: 3770
			public readonly MinMax angleSpeedToLerp;

			// Token: 0x04000EBB RID: 3771
			public readonly float angleLerpTime;

			// Token: 0x04000EBC RID: 3772
			public readonly string[] boomerangHeightString;

			// Token: 0x04000EBD RID: 3773
			public readonly string[] boomerangDelayString;

			// Token: 0x04000EBE RID: 3774
			public readonly float firstDelay;
		}

		// Token: 0x02000293 RID: 659
		public class Dough : AbstractLevelPropertyGroup
		{
			// Token: 0x0600074E RID: 1870 RVA: 0x000477B4 File Offset: 0x00045BB4
			public Dough(float doughAttackDuration, float startNextAttack, float doughHealth, string[] doughSpawnSideString, string[] doughSpawnTypeString, string[] doughDelayString, float[] doughXSpeed, float[] doughYSpeed, float[] doughGravity, float firstDelay)
			{
				this.doughAttackDuration = doughAttackDuration;
				this.startNextAttack = startNextAttack;
				this.doughHealth = doughHealth;
				this.doughSpawnSideString = doughSpawnSideString;
				this.doughSpawnTypeString = doughSpawnTypeString;
				this.doughDelayString = doughDelayString;
				this.doughXSpeed = doughXSpeed;
				this.doughYSpeed = doughYSpeed;
				this.doughGravity = doughGravity;
				this.firstDelay = firstDelay;
			}

			// Token: 0x04000EBF RID: 3775
			public readonly float doughAttackDuration;

			// Token: 0x04000EC0 RID: 3776
			public readonly float startNextAttack;

			// Token: 0x04000EC1 RID: 3777
			public readonly float doughHealth;

			// Token: 0x04000EC2 RID: 3778
			public readonly string[] doughSpawnSideString;

			// Token: 0x04000EC3 RID: 3779
			public readonly string[] doughSpawnTypeString;

			// Token: 0x04000EC4 RID: 3780
			public readonly string[] doughDelayString;

			// Token: 0x04000EC5 RID: 3781
			public readonly float[] doughXSpeed;

			// Token: 0x04000EC6 RID: 3782
			public readonly float[] doughYSpeed;

			// Token: 0x04000EC7 RID: 3783
			public readonly float[] doughGravity;

			// Token: 0x04000EC8 RID: 3784
			public readonly float firstDelay;
		}

		// Token: 0x02000294 RID: 660
		public class Swooper : AbstractLevelPropertyGroup
		{
			// Token: 0x0600074F RID: 1871 RVA: 0x00047814 File Offset: 0x00045C14
			public Swooper(int numberFireSwoopers, float initialFallDelay, float jumpDelay, float apexHeight, float apexTime)
			{
				this.numberFireSwoopers = numberFireSwoopers;
				this.initialFallDelay = initialFallDelay;
				this.jumpDelay = jumpDelay;
				this.apexHeight = apexHeight;
				this.apexTime = apexTime;
			}

			// Token: 0x04000EC9 RID: 3785
			public readonly int numberFireSwoopers;

			// Token: 0x04000ECA RID: 3786
			public readonly float initialFallDelay;

			// Token: 0x04000ECB RID: 3787
			public readonly float jumpDelay;

			// Token: 0x04000ECC RID: 3788
			public readonly float apexHeight;

			// Token: 0x04000ECD RID: 3789
			public readonly float apexTime;
		}

		// Token: 0x02000295 RID: 661
		public class Leaf : AbstractLevelPropertyGroup
		{
			// Token: 0x06000750 RID: 1872 RVA: 0x00047844 File Offset: 0x00045C44
			public Leaf(bool leavesOn, float leavesDelay, string[] leavesCountString, MinMax ySpeed, float yConstantSpeed, float xTime, float xDistance, MinMax leavesOffset, float reenterDelay)
			{
				this.leavesOn = leavesOn;
				this.leavesDelay = leavesDelay;
				this.leavesCountString = leavesCountString;
				this.ySpeed = ySpeed;
				this.yConstantSpeed = yConstantSpeed;
				this.xTime = xTime;
				this.xDistance = xDistance;
				this.leavesOffset = leavesOffset;
				this.reenterDelay = reenterDelay;
			}

			// Token: 0x04000ECE RID: 3790
			public readonly bool leavesOn;

			// Token: 0x04000ECF RID: 3791
			public readonly float leavesDelay;

			// Token: 0x04000ED0 RID: 3792
			public readonly string[] leavesCountString;

			// Token: 0x04000ED1 RID: 3793
			public readonly MinMax ySpeed;

			// Token: 0x04000ED2 RID: 3794
			public readonly float yConstantSpeed;

			// Token: 0x04000ED3 RID: 3795
			public readonly float xTime;

			// Token: 0x04000ED4 RID: 3796
			public readonly float xDistance;

			// Token: 0x04000ED5 RID: 3797
			public readonly MinMax leavesOffset;

			// Token: 0x04000ED6 RID: 3798
			public readonly float reenterDelay;
		}

		// Token: 0x02000296 RID: 662
		public class Turrets : AbstractLevelPropertyGroup
		{
			// Token: 0x06000751 RID: 1873 RVA: 0x0004789C File Offset: 0x00045C9C
			public Turrets(bool feistTurretsOn, float turretHealth, float respawnTime, float shotSpeed, float shotDelay, float warningTime, string[] bulletTypeString)
			{
				this.feistTurretsOn = feistTurretsOn;
				this.turretHealth = turretHealth;
				this.respawnTime = respawnTime;
				this.shotSpeed = shotSpeed;
				this.shotDelay = shotDelay;
				this.warningTime = warningTime;
				this.bulletTypeString = bulletTypeString;
			}

			// Token: 0x04000ED7 RID: 3799
			public readonly bool feistTurretsOn;

			// Token: 0x04000ED8 RID: 3800
			public readonly float turretHealth;

			// Token: 0x04000ED9 RID: 3801
			public readonly float respawnTime;

			// Token: 0x04000EDA RID: 3802
			public readonly float shotSpeed;

			// Token: 0x04000EDB RID: 3803
			public readonly float shotDelay;

			// Token: 0x04000EDC RID: 3804
			public readonly float warningTime;

			// Token: 0x04000EDD RID: 3805
			public readonly string[] bulletTypeString;
		}

		// Token: 0x02000297 RID: 663
		public class Jumper : AbstractLevelPropertyGroup
		{
			// Token: 0x06000752 RID: 1874 RVA: 0x000478D9 File Offset: 0x00045CD9
			public Jumper(int numberFireJumpers, float initialFallDelay, float jumpDelay, float apexHeight, float apexTime)
			{
				this.numberFireJumpers = numberFireJumpers;
				this.initialFallDelay = initialFallDelay;
				this.jumpDelay = jumpDelay;
				this.apexHeight = apexHeight;
				this.apexTime = apexTime;
			}

			// Token: 0x04000EDE RID: 3806
			public readonly int numberFireJumpers;

			// Token: 0x04000EDF RID: 3807
			public readonly float initialFallDelay;

			// Token: 0x04000EE0 RID: 3808
			public readonly float jumpDelay;

			// Token: 0x04000EE1 RID: 3809
			public readonly float apexHeight;

			// Token: 0x04000EE2 RID: 3810
			public readonly float apexTime;
		}

		// Token: 0x02000298 RID: 664
		public class Bouncer : AbstractLevelPropertyGroup
		{
			// Token: 0x06000753 RID: 1875 RVA: 0x00047908 File Offset: 0x00045D08
			public Bouncer(float bouncerDelay, float bouncerDuration, bool dropPestle, float dropPestleSpeed, float jumpXSpeed, float jumpYSpeed, float jumpGravity, int numBounces, float initDropYGravity)
			{
				this.bouncerDelay = bouncerDelay;
				this.bouncerDuration = bouncerDuration;
				this.dropPestle = dropPestle;
				this.dropPestleSpeed = dropPestleSpeed;
				this.jumpXSpeed = jumpXSpeed;
				this.jumpYSpeed = jumpYSpeed;
				this.jumpGravity = jumpGravity;
				this.numBounces = numBounces;
				this.initDropYGravity = initDropYGravity;
			}

			// Token: 0x04000EE3 RID: 3811
			public readonly float bouncerDelay;

			// Token: 0x04000EE4 RID: 3812
			public readonly float bouncerDuration;

			// Token: 0x04000EE5 RID: 3813
			public readonly bool dropPestle;

			// Token: 0x04000EE6 RID: 3814
			public readonly float dropPestleSpeed;

			// Token: 0x04000EE7 RID: 3815
			public readonly float jumpXSpeed;

			// Token: 0x04000EE8 RID: 3816
			public readonly float jumpYSpeed;

			// Token: 0x04000EE9 RID: 3817
			public readonly float jumpGravity;

			// Token: 0x04000EEA RID: 3818
			public readonly int numBounces;

			// Token: 0x04000EEB RID: 3819
			public readonly float initDropYGravity;
		}

		// Token: 0x02000299 RID: 665
		public class Cutter : AbstractLevelPropertyGroup
		{
			// Token: 0x06000754 RID: 1876 RVA: 0x00047960 File Offset: 0x00045D60
			public Cutter(int cutterCount, float cutterSpeed)
			{
				this.cutterCount = cutterCount;
				this.cutterSpeed = cutterSpeed;
			}

			// Token: 0x04000EEC RID: 3820
			public readonly int cutterCount;

			// Token: 0x04000EED RID: 3821
			public readonly float cutterSpeed;
		}

		// Token: 0x0200029A RID: 666
		public class DoomPillar : AbstractLevelPropertyGroup
		{
			// Token: 0x06000755 RID: 1877 RVA: 0x00047976 File Offset: 0x00045D76
			public DoomPillar(string[] platformXSpawnString, string[] platformYSpawnString, bool platformXYUnified, string[] platformSizeString, MinMax platformFallSpeed, MinMax pillarPosition, float phaseTime)
			{
				this.platformXSpawnString = platformXSpawnString;
				this.platformYSpawnString = platformYSpawnString;
				this.platformXYUnified = platformXYUnified;
				this.platformSizeString = platformSizeString;
				this.platformFallSpeed = platformFallSpeed;
				this.pillarPosition = pillarPosition;
				this.phaseTime = phaseTime;
			}

			// Token: 0x04000EEE RID: 3822
			public readonly string[] platformXSpawnString;

			// Token: 0x04000EEF RID: 3823
			public readonly string[] platformYSpawnString;

			// Token: 0x04000EF0 RID: 3824
			public readonly bool platformXYUnified;

			// Token: 0x04000EF1 RID: 3825
			public readonly string[] platformSizeString;

			// Token: 0x04000EF2 RID: 3826
			public readonly MinMax platformFallSpeed;

			// Token: 0x04000EF3 RID: 3827
			public readonly MinMax pillarPosition;

			// Token: 0x04000EF4 RID: 3828
			public readonly float phaseTime;
		}

		// Token: 0x0200029B RID: 667
		public class DarkHeart : AbstractLevelPropertyGroup
		{
			// Token: 0x06000756 RID: 1878 RVA: 0x000479B3 File Offset: 0x00045DB3
			public DarkHeart(float heartSpeed, string[] angleOffsetString, float baseAngle, float parryTimeOut, float collisionTimeOut)
			{
				this.heartSpeed = heartSpeed;
				this.angleOffsetString = angleOffsetString;
				this.baseAngle = baseAngle;
				this.parryTimeOut = parryTimeOut;
				this.collisionTimeOut = collisionTimeOut;
			}

			// Token: 0x04000EF5 RID: 3829
			public readonly float heartSpeed;

			// Token: 0x04000EF6 RID: 3830
			public readonly string[] angleOffsetString;

			// Token: 0x04000EF7 RID: 3831
			public readonly float baseAngle;

			// Token: 0x04000EF8 RID: 3832
			public readonly float parryTimeOut;

			// Token: 0x04000EF9 RID: 3833
			public readonly float collisionTimeOut;
		}

		// Token: 0x0200029C RID: 668
		public class SideShot : AbstractLevelPropertyGroup
		{
			// Token: 0x06000757 RID: 1879 RVA: 0x000479E0 File Offset: 0x00045DE0
			public SideShot(string[] shotTimeString, string[] shotHeightString, string[] shotTargetString, float gravity, float apexHeight)
			{
				this.shotTimeString = shotTimeString;
				this.shotHeightString = shotHeightString;
				this.shotTargetString = shotTargetString;
				this.gravity = gravity;
				this.apexHeight = apexHeight;
			}

			// Token: 0x04000EFA RID: 3834
			public readonly string[] shotTimeString;

			// Token: 0x04000EFB RID: 3835
			public readonly string[] shotHeightString;

			// Token: 0x04000EFC RID: 3836
			public readonly string[] shotTargetString;

			// Token: 0x04000EFD RID: 3837
			public readonly float gravity;

			// Token: 0x04000EFE RID: 3838
			public readonly float apexHeight;
		}
	}

	// Token: 0x0200029E RID: 670
	public class ShmupTutorial : AbstractLevelProperties<LevelProperties.ShmupTutorial.State, LevelProperties.ShmupTutorial.Pattern, LevelProperties.ShmupTutorial.States>
	{
		// Token: 0x06000771 RID: 1905 RVA: 0x00047A0D File Offset: 0x00045E0D
		public ShmupTutorial(int hp, Level.GoalTimes goalTimes, LevelProperties.ShmupTutorial.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000772 RID: 1906 RVA: 0x00047A1C File Offset: 0x00045E1C
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000773 RID: 1907 RVA: 0x00047A77 File Offset: 0x00045E77
		public static LevelProperties.ShmupTutorial.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.ShmupTutorial.Pattern.Default;
				}
			}
			Debug.LogError("Pattern ShmupTutorial.Pattern for  " + id + " not found.", null);
			return LevelProperties.ShmupTutorial.Pattern.Uninitialized;
		}

		// Token: 0x06000774 RID: 1908 RVA: 0x00047AB8 File Offset: 0x00045EB8
		public static LevelProperties.ShmupTutorial GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.ShmupTutorial.State> list = new List<LevelProperties.ShmupTutorial.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.ShmupTutorial.State(10f, new LevelProperties.ShmupTutorial.Pattern[][]
						{
							new LevelProperties.ShmupTutorial.Pattern[1]
						}, LevelProperties.ShmupTutorial.States.Main));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.ShmupTutorial.State(10f, new LevelProperties.ShmupTutorial.Pattern[][]
					{
						new LevelProperties.ShmupTutorial.Pattern[1]
					}, LevelProperties.ShmupTutorial.States.Main));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.ShmupTutorial.State(10f, new LevelProperties.ShmupTutorial.Pattern[][]
				{
					new LevelProperties.ShmupTutorial.Pattern[1]
				}, LevelProperties.ShmupTutorial.States.Main));
			}
			return new LevelProperties.ShmupTutorial(hp, goalTimes, list.ToArray());
		}

		// Token: 0x0200029F RID: 671
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000135 RID: 309
			// (get) Token: 0x06000776 RID: 1910 RVA: 0x00047BB4 File Offset: 0x00045FB4
			// (set) Token: 0x06000777 RID: 1911 RVA: 0x00047BBC File Offset: 0x00045FBC
			private protected LevelProperties.ShmupTutorial properties { protected get; private set; }

			// Token: 0x06000778 RID: 1912 RVA: 0x00047BC5 File Offset: 0x00045FC5
			public virtual void LevelInit(LevelProperties.ShmupTutorial properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000779 RID: 1913 RVA: 0x00047BCE File Offset: 0x00045FCE
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020002A0 RID: 672
		public enum States
		{
			// Token: 0x04000F29 RID: 3881
			Main,
			// Token: 0x04000F2A RID: 3882
			Generic
		}

		// Token: 0x020002A1 RID: 673
		public enum Pattern
		{
			// Token: 0x04000F2C RID: 3884
			Default,
			// Token: 0x04000F2D RID: 3885
			Uninitialized
		}

		// Token: 0x020002A2 RID: 674
		public class State : AbstractLevelState<LevelProperties.ShmupTutorial.Pattern, LevelProperties.ShmupTutorial.States>
		{
			// Token: 0x0600077A RID: 1914 RVA: 0x00047BD0 File Offset: 0x00045FD0
			public State(float healthTrigger, LevelProperties.ShmupTutorial.Pattern[][] patterns, LevelProperties.ShmupTutorial.States stateName) : base(healthTrigger, patterns, stateName)
			{
			}
		}
	}

	// Token: 0x020002A4 RID: 676
	public class Slime : AbstractLevelProperties<LevelProperties.Slime.State, LevelProperties.Slime.Pattern, LevelProperties.Slime.States>
	{
		// Token: 0x06000786 RID: 1926 RVA: 0x00047BDB File Offset: 0x00045FDB
		public Slime(int hp, Level.GoalTimes goalTimes, LevelProperties.Slime.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x06000787 RID: 1927 RVA: 0x00047BE8 File Offset: 0x00045FE8
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1000f;
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.8f));
				timeline.events.Add(new Level.Timeline.Event("BigSlime", 0.56f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1200f;
				timeline.events.Add(new Level.Timeline.Event("BigSlime", 0.76f));
				timeline.events.Add(new Level.Timeline.Event("Tombstone", 0.31f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1400f;
				timeline.events.Add(new Level.Timeline.Event("BigSlime", 0.76f));
				timeline.events.Add(new Level.Timeline.Event("Tombstone", 0.36f));
				break;
			}
			return timeline;
		}

		// Token: 0x06000788 RID: 1928 RVA: 0x00047CDF File Offset: 0x000460DF
		public static LevelProperties.Slime.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "J")
				{
					return LevelProperties.Slime.Pattern.Jump;
				}
			}
			Debug.LogError("Pattern Slime.Pattern for  " + id + " not found.", null);
			return LevelProperties.Slime.Pattern.Uninitialized;
		}

		// Token: 0x06000789 RID: 1929 RVA: 0x00047D20 File Offset: 0x00046120
		public static LevelProperties.Slime GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Slime.State> list = new List<LevelProperties.Slime.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1400;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Slime.State(10f, new LevelProperties.Slime.Pattern[][]
						{
							new LevelProperties.Slime.Pattern[1]
						}, LevelProperties.Slime.States.Main, new LevelProperties.Slime.Jump(0.001f, 2585f, 840f, 7150f, 2200f, 780f, 7150f, new MinMax(5f, 8f), "HJ,LJ,HJ,LJ,D.5, LJ,RJ,HJ,LJ,HJ,LJ,LJ,HJ,RJ,LJ,LJ", 3), new LevelProperties.Slime.Punch(0.65f, 0.4f), new LevelProperties.Slime.Tombstone(1050f, new MinMax(1.5f, 4f), 0.35f, "-150,80,0,140,-80,0,-160,0,150,-90,0", 0.2f, 3.1f, 3.9f, 3f)));
						list.Add(new LevelProperties.Slime.State(0.76f, new LevelProperties.Slime.Pattern[][]
						{
							new LevelProperties.Slime.Pattern[0]
						}, LevelProperties.Slime.States.BigSlime, new LevelProperties.Slime.Jump(0.05f, 2565f, 738f, 7200f, 2025f, 685f, 7200f, new MinMax(5f, 8f), "HJ,LJ,HJ,RJ,LJ,LJ,D.5, LJ,RJ,HL,LJ,RJ,HJ,LJ,HJ,LJ,LJ", 2), new LevelProperties.Slime.Punch(0.65f, 0.4f), new LevelProperties.Slime.Tombstone(1050f, new MinMax(1.5f, 4f), 0.35f, "-150,80,0,140,-80,0,-160,0,150,-90,0", 0.2f, 3.1f, 3.9f, 3f)));
						list.Add(new LevelProperties.Slime.State(0.36f, new LevelProperties.Slime.Pattern[][]
						{
							new LevelProperties.Slime.Pattern[0]
						}, LevelProperties.Slime.States.Tombstone, new LevelProperties.Slime.Jump(0.05f, 2565f, 738f, 7200f, 2025f, 685f, 7200f, new MinMax(5f, 8f), "HJ,LJ,HJ,RJ,LJ,LJ,D.5, LJ,RJ,HL,LJ,RJ,HJ,LJ,HJ,LJ,LJ", 2), new LevelProperties.Slime.Punch(0.65f, 0.4f), new LevelProperties.Slime.Tombstone(1050f, new MinMax(1.5f, 4f), 0.35f, "-150,80,0,140,-80,0,-160,0,150,-90,0", 0.2f, 3.1f, 3.9f, 3f)));
					}
				}
				else
				{
					hp = 1200;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Slime.State(10f, new LevelProperties.Slime.Pattern[][]
					{
						new LevelProperties.Slime.Pattern[1]
					}, LevelProperties.Slime.States.Main, new LevelProperties.Slime.Jump(0.2f, 2350f, 840f, 6500f, 2000f, 780f, 6500f, new MinMax(5f, 8f), "HJ,LJ,HJ,LJ,D.5, LJ,RJ,HJ,LJ,HJ,LJ,LJ,HJ,RJ,LJ,LJ", 3), new LevelProperties.Slime.Punch(0.65f, 0.4f), new LevelProperties.Slime.Tombstone(950f, new MinMax(2f, 4f), 0.35f, "-130,70,0,130,-70,0", 0.2f, 3.1f, 3.9f, 3.4f)));
					list.Add(new LevelProperties.Slime.State(0.76f, new LevelProperties.Slime.Pattern[][]
					{
						new LevelProperties.Slime.Pattern[0]
					}, LevelProperties.Slime.States.BigSlime, new LevelProperties.Slime.Jump(0.3f, 2850f, 820f, 7500f, 2250f, 760f, 7500f, new MinMax(5f, 8f), "HJ,HJ,LJ,HJ,RJ,LJ,D.5, LJ,HL,LJ,RJ,HJ,LJ,LJ,HJ,LJ,LJ", 2), new LevelProperties.Slime.Punch(0.65f, 0.4f), new LevelProperties.Slime.Tombstone(950f, new MinMax(2f, 4f), 0.35f, "-130,70,0,130,-70,0", 0.2f, 3.1f, 3.9f, 3.4f)));
					list.Add(new LevelProperties.Slime.State(0.31f, new LevelProperties.Slime.Pattern[][]
					{
						new LevelProperties.Slime.Pattern[0]
					}, LevelProperties.Slime.States.Tombstone, new LevelProperties.Slime.Jump(0.3f, 2850f, 820f, 7500f, 2250f, 760f, 7500f, new MinMax(5f, 8f), "HJ,HJ,LJ,HJ,RJ,LJ,D.5, LJ,HL,LJ,RJ,HJ,LJ,LJ,HJ,LJ,LJ", 2), new LevelProperties.Slime.Punch(0.65f, 0.4f), new LevelProperties.Slime.Tombstone(950f, new MinMax(2f, 4f), 0.35f, "-130,70,0,130,-70,0", 0.2f, 3.1f, 3.9f, 3.4f)));
				}
			}
			else
			{
				hp = 1000;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Slime.State(10f, new LevelProperties.Slime.Pattern[][]
				{
					new LevelProperties.Slime.Pattern[1]
				}, LevelProperties.Slime.States.Main, new LevelProperties.Slime.Jump(0.35f, 2300f, 700f, 6500f, 2200f, 670f, 6500f, new MinMax(5f, 8f), "LJ,LJ,HJ,LJ,RJ,HJ,LJ,HJ,LJ,HJ", 4), new LevelProperties.Slime.Punch(0.85f, 0.4f), new LevelProperties.Slime.Tombstone(0f, new MinMax(0f, 1f), 0f, string.Empty, 0f, 0f, 0f, 0f)));
				list.Add(new LevelProperties.Slime.State(0.8f, new LevelProperties.Slime.Pattern[][]
				{
					new LevelProperties.Slime.Pattern[1]
				}, LevelProperties.Slime.States.Generic, new LevelProperties.Slime.Jump(0.35f, 2350f, 750f, 6500f, 2200f, 700f, 6500f, new MinMax(5f, 8f), "HJ,HJ,LJ,HJ,LJ,RJ,HJ,LJ,LJ,HJ,LJ", 6), new LevelProperties.Slime.Punch(0.85f, 0.4f), new LevelProperties.Slime.Tombstone(0f, new MinMax(0f, 1f), 0f, string.Empty, 0f, 0f, 0f, 0f)));
				list.Add(new LevelProperties.Slime.State(0.56f, new LevelProperties.Slime.Pattern[][]
				{
					new LevelProperties.Slime.Pattern[1]
				}, LevelProperties.Slime.States.BigSlime, new LevelProperties.Slime.Jump(0.45f, 2850f, 820f, 7500f, 2320f, 785f, 7500f, new MinMax(5f, 8f), "LJ,HJ,RJ,LJ,HJ,RJ,LJ,LJ,HJ,HJ,LJ,HJ,LJ,HJ", 2), new LevelProperties.Slime.Punch(0.65f, 0.4f), new LevelProperties.Slime.Tombstone(0f, new MinMax(0f, 1f), 0f, string.Empty, 0f, 0f, 0f, 0f)));
			}
			return new LevelProperties.Slime(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020002A5 RID: 677
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700013A RID: 314
			// (get) Token: 0x0600078B RID: 1931 RVA: 0x00048380 File Offset: 0x00046780
			// (set) Token: 0x0600078C RID: 1932 RVA: 0x00048388 File Offset: 0x00046788
			private protected LevelProperties.Slime properties { protected get; private set; }

			// Token: 0x0600078D RID: 1933 RVA: 0x00048391 File Offset: 0x00046791
			public virtual void LevelInit(LevelProperties.Slime properties)
			{
				this.properties = properties;
			}

			// Token: 0x0600078E RID: 1934 RVA: 0x0004839A File Offset: 0x0004679A
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020002A6 RID: 678
		public enum States
		{
			// Token: 0x04000F35 RID: 3893
			Main,
			// Token: 0x04000F36 RID: 3894
			Generic,
			// Token: 0x04000F37 RID: 3895
			BigSlime,
			// Token: 0x04000F38 RID: 3896
			Tombstone
		}

		// Token: 0x020002A7 RID: 679
		public enum Pattern
		{
			// Token: 0x04000F3A RID: 3898
			Jump,
			// Token: 0x04000F3B RID: 3899
			Uninitialized
		}

		// Token: 0x020002A8 RID: 680
		public class State : AbstractLevelState<LevelProperties.Slime.Pattern, LevelProperties.Slime.States>
		{
			// Token: 0x0600078F RID: 1935 RVA: 0x0004839C File Offset: 0x0004679C
			public State(float healthTrigger, LevelProperties.Slime.Pattern[][] patterns, LevelProperties.Slime.States stateName, LevelProperties.Slime.Jump jump, LevelProperties.Slime.Punch punch, LevelProperties.Slime.Tombstone tombstone) : base(healthTrigger, patterns, stateName)
			{
				this.jump = jump;
				this.punch = punch;
				this.tombstone = tombstone;
			}

			// Token: 0x04000F3C RID: 3900
			public readonly LevelProperties.Slime.Jump jump;

			// Token: 0x04000F3D RID: 3901
			public readonly LevelProperties.Slime.Punch punch;

			// Token: 0x04000F3E RID: 3902
			public readonly LevelProperties.Slime.Tombstone tombstone;
		}

		// Token: 0x020002A9 RID: 681
		public class Jump : AbstractLevelPropertyGroup
		{
			// Token: 0x06000790 RID: 1936 RVA: 0x000483C0 File Offset: 0x000467C0
			public Jump(float groundDelay, float highJumpVerticalSpeed, float highJumpHorizontalSpeed, float highJumpGravity, float lowJumpVerticalSpeed, float lowJumpHorizontalSpeed, float lowJumpGravity, MinMax numJumps, string patternString, int bigSlimeInitialJumpPunchCount)
			{
				this.groundDelay = groundDelay;
				this.highJumpVerticalSpeed = highJumpVerticalSpeed;
				this.highJumpHorizontalSpeed = highJumpHorizontalSpeed;
				this.highJumpGravity = highJumpGravity;
				this.lowJumpVerticalSpeed = lowJumpVerticalSpeed;
				this.lowJumpHorizontalSpeed = lowJumpHorizontalSpeed;
				this.lowJumpGravity = lowJumpGravity;
				this.numJumps = numJumps;
				this.patternString = patternString;
				this.bigSlimeInitialJumpPunchCount = bigSlimeInitialJumpPunchCount;
			}

			// Token: 0x04000F3F RID: 3903
			public readonly float groundDelay;

			// Token: 0x04000F40 RID: 3904
			public readonly float highJumpVerticalSpeed;

			// Token: 0x04000F41 RID: 3905
			public readonly float highJumpHorizontalSpeed;

			// Token: 0x04000F42 RID: 3906
			public readonly float highJumpGravity;

			// Token: 0x04000F43 RID: 3907
			public readonly float lowJumpVerticalSpeed;

			// Token: 0x04000F44 RID: 3908
			public readonly float lowJumpHorizontalSpeed;

			// Token: 0x04000F45 RID: 3909
			public readonly float lowJumpGravity;

			// Token: 0x04000F46 RID: 3910
			public readonly MinMax numJumps;

			// Token: 0x04000F47 RID: 3911
			public readonly string patternString;

			// Token: 0x04000F48 RID: 3912
			public readonly int bigSlimeInitialJumpPunchCount;
		}

		// Token: 0x020002AA RID: 682
		public class Punch : AbstractLevelPropertyGroup
		{
			// Token: 0x06000791 RID: 1937 RVA: 0x00048420 File Offset: 0x00046820
			public Punch(float preHold, float mainHold)
			{
				this.preHold = preHold;
				this.mainHold = mainHold;
			}

			// Token: 0x04000F49 RID: 3913
			public readonly float preHold;

			// Token: 0x04000F4A RID: 3914
			public readonly float mainHold;
		}

		// Token: 0x020002AB RID: 683
		public class Tombstone : AbstractLevelPropertyGroup
		{
			// Token: 0x06000792 RID: 1938 RVA: 0x00048438 File Offset: 0x00046838
			public Tombstone(float moveSpeed, MinMax attackDelay, float anticipationHold, string attackOffsetString, float tinyMeltDelay, float tinyRunTime, float tinyHealth, float tinyTimeUntilUnmelt)
			{
				this.moveSpeed = moveSpeed;
				this.attackDelay = attackDelay;
				this.anticipationHold = anticipationHold;
				this.attackOffsetString = attackOffsetString;
				this.tinyMeltDelay = tinyMeltDelay;
				this.tinyRunTime = tinyRunTime;
				this.tinyHealth = tinyHealth;
				this.tinyTimeUntilUnmelt = tinyTimeUntilUnmelt;
			}

			// Token: 0x04000F4B RID: 3915
			public readonly float moveSpeed;

			// Token: 0x04000F4C RID: 3916
			public readonly MinMax attackDelay;

			// Token: 0x04000F4D RID: 3917
			public readonly float anticipationHold;

			// Token: 0x04000F4E RID: 3918
			public readonly string attackOffsetString;

			// Token: 0x04000F4F RID: 3919
			public readonly float tinyMeltDelay;

			// Token: 0x04000F50 RID: 3920
			public readonly float tinyRunTime;

			// Token: 0x04000F51 RID: 3921
			public readonly float tinyHealth;

			// Token: 0x04000F52 RID: 3922
			public readonly float tinyTimeUntilUnmelt;
		}
	}

	// Token: 0x020002AD RID: 685
	public class SnowCult : AbstractLevelProperties<LevelProperties.SnowCult.State, LevelProperties.SnowCult.Pattern, LevelProperties.SnowCult.States>
	{
		// Token: 0x0600079F RID: 1951 RVA: 0x00048488 File Offset: 0x00046888
		public SnowCult(int hp, Level.GoalTimes goalTimes, LevelProperties.SnowCult.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060007A0 RID: 1952 RVA: 0x00048494 File Offset: 0x00046894
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1350f;
				timeline.events.Add(new Level.Timeline.Event("Yeti", 0.83f));
				timeline.events.Add(new Level.Timeline.Event("EasyYeti", 0.4f));
				break;
			case Level.Mode.Normal:
				timeline.health = 1650f;
				timeline.events.Add(new Level.Timeline.Event("Yeti", 0.85f));
				timeline.events.Add(new Level.Timeline.Event("JackFrost", 0.43f));
				break;
			case Level.Mode.Hard:
				timeline.health = 1850f;
				timeline.events.Add(new Level.Timeline.Event("Yeti", 0.85f));
				timeline.events.Add(new Level.Timeline.Event("JackFrost", 0.43f));
				break;
			}
			return timeline;
		}

		// Token: 0x060007A1 RID: 1953 RVA: 0x0004858C File Offset: 0x0004698C
		public static LevelProperties.SnowCult.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			switch (id)
			{
			case "D":
				return LevelProperties.SnowCult.Pattern.Default;
			case "W":
				return LevelProperties.SnowCult.Pattern.Switch;
			case "E":
				return LevelProperties.SnowCult.Pattern.Eye;
			case "C":
				return LevelProperties.SnowCult.Pattern.Beam;
			case "Z":
				return LevelProperties.SnowCult.Pattern.Hazard;
			case "H":
				return LevelProperties.SnowCult.Pattern.Shard;
			case "O":
				return LevelProperties.SnowCult.Pattern.Mouth;
			case "Q":
				return LevelProperties.SnowCult.Pattern.Quad;
			case "B":
				return LevelProperties.SnowCult.Pattern.Block;
			case "R":
				return LevelProperties.SnowCult.Pattern.SeriesShot;
			case "Y":
				return LevelProperties.SnowCult.Pattern.Yeti;
			}
			Debug.LogError("Pattern SnowCult.Pattern for  " + id + " not found.", null);
			return LevelProperties.SnowCult.Pattern.Uninitialized;
		}

		// Token: 0x060007A2 RID: 1954 RVA: 0x000486C4 File Offset: 0x00046AC4
		public static LevelProperties.SnowCult GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.SnowCult.State> list = new List<LevelProperties.SnowCult.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 1850;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.SnowCult.State(10f, new LevelProperties.SnowCult.Pattern[][]
						{
							new LevelProperties.SnowCult.Pattern[]
							{
								LevelProperties.SnowCult.Pattern.Quad,
								LevelProperties.SnowCult.Pattern.Block,
								LevelProperties.SnowCult.Pattern.SeriesShot,
								LevelProperties.SnowCult.Pattern.Quad,
								LevelProperties.SnowCult.Pattern.Block,
								LevelProperties.SnowCult.Pattern.Quad,
								LevelProperties.SnowCult.Pattern.SeriesShot,
								LevelProperties.SnowCult.Pattern.Block,
								LevelProperties.SnowCult.Pattern.Quad,
								LevelProperties.SnowCult.Pattern.SeriesShot
							}
						}, LevelProperties.SnowCult.States.Main, new LevelProperties.SnowCult.Wizard(new string[]
						{
							"0.4,0.4,0.6,0.4,0.5"
						}), new LevelProperties.SnowCult.Movement(2.2f, 0.75f, 90f), new LevelProperties.SnowCult.QuadShot(new string[]
						{
							"150,0,-100,50,100,-50,-150",
							"0,-150,-50,150,-100,100"
						}, 10f, 0.2f, 0.5f, 0f, 285f, new string[]
						{
							"P,P,P,P",
							"P,P,P,P"
						}, 4f, 235f, 75f, 575f, 0.25f, 2.8f, new string[]
						{
							"2,3,0,1",
							"1,0,3,2",
							"0,2,1,3",
							"3,1,2,0",
							"0,3,1,2",
							"3,0,2,1",
							"1,3,2,0",
							"2,1,0,3"
						}, 4f), new LevelProperties.SnowCult.Whale(0f, 0f, 10f), new LevelProperties.SnowCult.Yeti("S,J,L,S,P,S,L,P,S,S,J,L,P,S,L,S,J,P,L", 265f, 0.35f, 0f, 0.41f, 0f, 0f, 1f, 1f, 4f), new LevelProperties.SnowCult.Snowman(0f, 0f, 0, 0f, 0f, 0f, 0f, 0f, false), new LevelProperties.SnowCult.IcePillar("25,50,10,65,40,35,10", 145f, 7, 0f, 0.15f, 0.5f, 0f), new LevelProperties.SnowCult.SeriesShot(new string[]
						{
							"1,2,2,1,2,1,2,1,2,2,1"
						}, 0.01f, 0.55f, 315f, "N,P,N"), new LevelProperties.SnowCult.Snowball(new string[]
						{
							"L",
							"L,M",
							"L",
							"M,L"
						}, 1.2f, 0f, 695f, 160f, 1250f, 785f, 150f, 1050f, 0f, 0f, 0f, 1350f, 45f, 925f, 80f, 1550f, 6, 3f, 50f, 375f, 1000f, 0.23f, 1.5f, 500f, "2.5,2.2,2.7,2.4,2.6,2.7,2.6,2.9", 0.29f, "0,3,1,0,2,0,3,0,2,3,1", "O,O,O", "50,150,100,175,75,125", "900,1000,850,950,975,1050", false, "0.4,0.5,0.4,0.45,0.6", "N,P,N,N,N,N,P,N,N,N,N", 0.5f), new LevelProperties.SnowCult.Platforms(5, 295f, 215f, 1.35f, -100f), new LevelProperties.SnowCult.Face(new string[]
						{
							"D,U,D,U,D,D,U,D,U,U"
						}, 1f), new LevelProperties.SnowCult.EyeAttack(0.5f, 2.4f, 450f, 2.75f, 175f, 250f, 250f, 1f, 0.55f, 0.15f, new MinMax(0.05f, 0.15f)), new LevelProperties.SnowCult.BeamAttack(0f, 0f, 0f, 0f, 0f), new LevelProperties.SnowCult.IcePlatform(0f, 0f, 0f), new LevelProperties.SnowCult.ShardAttack(1f, 5, 0f, 0.125f, "20,45,70,10,65,30,55,35,80", 375f, 999f, 1.3f, 500f, 315f, -35f), new LevelProperties.SnowCult.SplitShot(0.5f, new string[]
						{
							"R,R,P",
							"R,P,R",
							"P,R,R",
							"R,P,R"
						}, 0.25f, 615f, 31f, 3, 1.75f, new string[]
						{
							"150,0,-150",
							"-200,25,200",
							"-135,0,135",
							"175,-25,-175",
							"200,-25,-200",
							"-150,0,150",
							"135,0,-135",
							"-175,25,175"
						})));
						list.Add(new LevelProperties.SnowCult.State(0.85f, new LevelProperties.SnowCult.Pattern[][]
						{
							new LevelProperties.SnowCult.Pattern[]
							{
								LevelProperties.SnowCult.Pattern.Yeti
							}
						}, LevelProperties.SnowCult.States.Yeti, new LevelProperties.SnowCult.Wizard(new string[]
						{
							"0.4,0.4,0.6,0.4,0.5"
						}), new LevelProperties.SnowCult.Movement(2.2f, 0.75f, 90f), new LevelProperties.SnowCult.QuadShot(new string[]
						{
							"150,0,-100,50,100,-50,-150",
							"0,-150,-50,150,-100,100"
						}, 10f, 0.2f, 0.5f, 0f, 285f, new string[]
						{
							"P,P,P,P",
							"P,P,P,P"
						}, 4f, 235f, 75f, 575f, 0.25f, 2.8f, new string[]
						{
							"2,3,0,1",
							"1,0,3,2",
							"0,2,1,3",
							"3,1,2,0",
							"0,3,1,2",
							"3,0,2,1",
							"1,3,2,0",
							"2,1,0,3"
						}, 4f), new LevelProperties.SnowCult.Whale(0f, 0f, 10f), new LevelProperties.SnowCult.Yeti("S,J,L,S,P,S,L,P,S,S,J,L,P,S,L,S,J,P,L", 265f, 0.35f, 0f, 0.41f, 0f, 0f, 1f, 1f, 4f), new LevelProperties.SnowCult.Snowman(0f, 0f, 0, 0f, 0f, 0f, 0f, 0f, false), new LevelProperties.SnowCult.IcePillar("25,50,10,65,40,35,10", 145f, 7, 0f, 0.15f, 0.5f, 0f), new LevelProperties.SnowCult.SeriesShot(new string[]
						{
							"1,2,2,1,2,1,2,1,2,2,1"
						}, 0.01f, 0.55f, 315f, "N,P,N"), new LevelProperties.SnowCult.Snowball(new string[]
						{
							"L",
							"L,M",
							"L",
							"M,L"
						}, 1.2f, 0f, 695f, 160f, 1250f, 785f, 150f, 1050f, 0f, 0f, 0f, 1350f, 45f, 925f, 80f, 1550f, 6, 3f, 50f, 375f, 1000f, 0.23f, 1.5f, 500f, "2.5,2.2,2.7,2.4,2.6,2.7,2.6,2.9", 0.29f, "0,3,1,0,2,0,3,0,2,3,1", "O,O,O", "50,150,100,175,75,125", "900,1000,850,950,975,1050", false, "0.4,0.5,0.4,0.45,0.6", "N,P,N,N,N,N,P,N,N,N,N", 0.5f), new LevelProperties.SnowCult.Platforms(5, 295f, 215f, 1.35f, -100f), new LevelProperties.SnowCult.Face(new string[]
						{
							"D,U,D,U,D,D,U,D,U,U"
						}, 1f), new LevelProperties.SnowCult.EyeAttack(0.5f, 2.4f, 450f, 2.75f, 175f, 250f, 250f, 1f, 0.55f, 0.15f, new MinMax(0.05f, 0.15f)), new LevelProperties.SnowCult.BeamAttack(0f, 0f, 0f, 0f, 0f), new LevelProperties.SnowCult.IcePlatform(0f, 0f, 0f), new LevelProperties.SnowCult.ShardAttack(1f, 5, 0f, 0.125f, "20,45,70,10,65,30,55,35,80", 375f, 999f, 1.3f, 500f, 315f, -35f), new LevelProperties.SnowCult.SplitShot(0.5f, new string[]
						{
							"R,R,P",
							"R,P,R",
							"P,R,R",
							"R,P,R"
						}, 0.25f, 615f, 31f, 3, 1.75f, new string[]
						{
							"150,0,-150",
							"-200,25,200",
							"-135,0,135",
							"175,-25,-175",
							"200,-25,-200",
							"-150,0,150",
							"135,0,-135",
							"-175,25,175"
						})));
						list.Add(new LevelProperties.SnowCult.State(0.43f, new LevelProperties.SnowCult.Pattern[][]
						{
							new LevelProperties.SnowCult.Pattern[]
							{
								LevelProperties.SnowCult.Pattern.Mouth,
								LevelProperties.SnowCult.Pattern.Switch,
								LevelProperties.SnowCult.Pattern.Eye,
								LevelProperties.SnowCult.Pattern.Switch,
								LevelProperties.SnowCult.Pattern.Shard,
								LevelProperties.SnowCult.Pattern.Eye,
								LevelProperties.SnowCult.Pattern.Switch,
								LevelProperties.SnowCult.Pattern.Mouth,
								LevelProperties.SnowCult.Pattern.Switch,
								LevelProperties.SnowCult.Pattern.Eye,
								LevelProperties.SnowCult.Pattern.Switch,
								LevelProperties.SnowCult.Pattern.Shard,
								LevelProperties.SnowCult.Pattern.Switch,
								LevelProperties.SnowCult.Pattern.Mouth,
								LevelProperties.SnowCult.Pattern.Eye,
								LevelProperties.SnowCult.Pattern.Switch
							}
						}, LevelProperties.SnowCult.States.JackFrost, new LevelProperties.SnowCult.Wizard(new string[]
						{
							"0.4,0.4,0.6,0.4,0.5"
						}), new LevelProperties.SnowCult.Movement(2.2f, 0.75f, 90f), new LevelProperties.SnowCult.QuadShot(new string[]
						{
							"150,0,-100,50,100,-50,-150",
							"0,-150,-50,150,-100,100"
						}, 10f, 0.2f, 0.5f, 0f, 285f, new string[]
						{
							"P,P,P,P",
							"P,P,P,P"
						}, 4f, 235f, 75f, 575f, 0.25f, 2.8f, new string[]
						{
							"2,3,0,1",
							"1,0,3,2",
							"0,2,1,3",
							"3,1,2,0",
							"0,3,1,2",
							"3,0,2,1",
							"1,3,2,0",
							"2,1,0,3"
						}, 4f), new LevelProperties.SnowCult.Whale(0f, 0f, 10f), new LevelProperties.SnowCult.Yeti("S,J,L,S,P,S,L,P,S,S,J,L,P,S,L,S,J,P,L", 265f, 0.35f, 0f, 0.41f, 0f, 0f, 1f, 1f, 4f), new LevelProperties.SnowCult.Snowman(0f, 0f, 0, 0f, 0f, 0f, 0f, 0f, false), new LevelProperties.SnowCult.IcePillar("25,50,10,65,40,35,10", 145f, 7, 0f, 0.15f, 0.5f, 0f), new LevelProperties.SnowCult.SeriesShot(new string[]
						{
							"1,2,2,1,2,1,2,1,2,2,1"
						}, 0.01f, 0.55f, 315f, "N,P,N"), new LevelProperties.SnowCult.Snowball(new string[]
						{
							"L",
							"L,M",
							"L",
							"M,L"
						}, 1.2f, 0f, 695f, 160f, 1250f, 785f, 150f, 1050f, 0f, 0f, 0f, 1350f, 45f, 925f, 80f, 1550f, 6, 3f, 50f, 375f, 1000f, 0.23f, 1.5f, 500f, "2.5,2.2,2.7,2.4,2.6,2.7,2.6,2.9", 0.29f, "0,3,1,0,2,0,3,0,2,3,1", "O,O,O", "50,150,100,175,75,125", "900,1000,850,950,975,1050", false, "0.4,0.5,0.4,0.45,0.6", "N,P,N,N,N,N,P,N,N,N,N", 0.5f), new LevelProperties.SnowCult.Platforms(5, 295f, 215f, 1.35f, -100f), new LevelProperties.SnowCult.Face(new string[]
						{
							"D,U,D,U,D,D,U,D,U,U"
						}, 1f), new LevelProperties.SnowCult.EyeAttack(0.5f, 2.4f, 450f, 2.75f, 175f, 250f, 250f, 1f, 0.55f, 0.15f, new MinMax(0.05f, 0.15f)), new LevelProperties.SnowCult.BeamAttack(0f, 0f, 0f, 0f, 0f), new LevelProperties.SnowCult.IcePlatform(0f, 0f, 0f), new LevelProperties.SnowCult.ShardAttack(1f, 5, 0f, 0.125f, "20,45,70,10,65,30,55,35,80", 375f, 999f, 1.3f, 500f, 315f, -35f), new LevelProperties.SnowCult.SplitShot(0.5f, new string[]
						{
							"R,R,P",
							"R,P,R",
							"P,R,R",
							"R,P,R"
						}, 0.25f, 615f, 31f, 3, 1.75f, new string[]
						{
							"150,0,-150",
							"-200,25,200",
							"-135,0,135",
							"175,-25,-175",
							"200,-25,-200",
							"-150,0,150",
							"135,0,-135",
							"-175,25,175"
						})));
					}
				}
				else
				{
					hp = 1650;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.SnowCult.State(10f, new LevelProperties.SnowCult.Pattern[][]
					{
						new LevelProperties.SnowCult.Pattern[]
						{
							LevelProperties.SnowCult.Pattern.Quad,
							LevelProperties.SnowCult.Pattern.Block,
							LevelProperties.SnowCult.Pattern.SeriesShot,
							LevelProperties.SnowCult.Pattern.Quad,
							LevelProperties.SnowCult.Pattern.SeriesShot,
							LevelProperties.SnowCult.Pattern.Block,
							LevelProperties.SnowCult.Pattern.Quad,
							LevelProperties.SnowCult.Pattern.SeriesShot,
							LevelProperties.SnowCult.Pattern.Quad,
							LevelProperties.SnowCult.Pattern.Block
						}
					}, LevelProperties.SnowCult.States.Main, new LevelProperties.SnowCult.Wizard(new string[]
					{
						"0.5,0.3,0.6,0.1,0.7"
					}), new LevelProperties.SnowCult.Movement(2.4f, 0.5f, 90f), new LevelProperties.SnowCult.QuadShot(new string[]
					{
						"150,0,-100,50,100,-50,-150",
						"0,-150,-50,150,-100,100"
					}, 10f, 0.2f, 0.6f, 0f, 265f, new string[]
					{
						"F,F,F,F",
						"P,P,P,P",
						"P,P,P,P",
						"P,P,P,P"
					}, 4f, 285f, 65f, 535f, 0.3f, 2.6f, new string[]
					{
						"0,2,1,3",
						"3,1,2,0",
						"1,3,2,0",
						"1,0,3,2",
						"2,3,0,1",
						"2,1,0,3",
						"0,3,1,2",
						"3,0,2,1"
					}, 4f), new LevelProperties.SnowCult.Whale(0.33f, 0f, 10f), new LevelProperties.SnowCult.Yeti("S,J,L,S,P,S,L,P,S,S,J,L,P,S,L,S,J,P,L", 275f, 0.4f, 0f, 0.5f, 0f, 0f, 1f, 1f, 4f), new LevelProperties.SnowCult.Snowman(0f, 200f, 1, 0.5f, 4.6f, 3f, 1.8f, 0.5f, false), new LevelProperties.SnowCult.IcePillar("50,100,50,150,75,125", 245f, 4, 0f, 0.25f, 0.5f, 0f), new LevelProperties.SnowCult.SeriesShot(new string[]
					{
						"2,2,1,2,1",
						"2,1,2,1,1"
					}, 0.5f, 1.05f, 354f, "N,P,N,N,P"), new LevelProperties.SnowCult.Snowball(new string[]
					{
						"M,L",
						"M,M,M",
						"L,M",
						"M,L,M"
					}, 1.5f, 1.3f, 735f, 155f, 1250f, 815f, 145f, 1050f, 1825f, 190f, 1450f, 1350f, 45f, 925f, 80f, 1500f, 4, 3f, 50f, 375f, 1000f, 0.23f, 2f, 500f, "2.4,2.7,2.1,2.9,2.4,2.6", 0.31f, "0,0,1,0,1,3,1,0,2,1,3", "O,O,O", "50,150,100,175,75,125", "900,1000,850,950,975,1050", false, "0.4,0.5,0.4,0.4,0.6", "N,P,N,N,N,P,N,N,N,P,N", 0.5f), new LevelProperties.SnowCult.Platforms(5, 295f, 215f, 1.15f, -100f), new LevelProperties.SnowCult.Face(new string[]
					{
						"U,U,D,U,D,U,D,D,U,D"
					}, 1f), new LevelProperties.SnowCult.EyeAttack(0.5f, 2.4f, 450f, 2.75f, 175f, 250f, 250f, 0.5f, 1.05f, 0.15f, new MinMax(0.05f, 0.15f)), new LevelProperties.SnowCult.BeamAttack(1f, 1.8f, 20f, 3f, 1f), new LevelProperties.SnowCult.IcePlatform(1.5f, 20f, 1.3f), new LevelProperties.SnowCult.ShardAttack(1.4f, 4, 0f, 0.11f, "20,50,80,30,65,10,55,25,70", 425f, 999f, 1.5f, 500f, 315f, -35f), new LevelProperties.SnowCult.SplitShot(0.5f, new string[]
					{
						"R,R,P",
						"P,R,R",
						"R,P,R"
					}, 1.1f, 565f, 34f, 3, 1.75f, new string[]
					{
						"300,0,-300",
						"-200,0,200",
						"250,0,-250",
						"-300,10,300",
						"200,-10,-200",
						"-250,10,250"
					})));
					list.Add(new LevelProperties.SnowCult.State(0.85f, new LevelProperties.SnowCult.Pattern[][]
					{
						new LevelProperties.SnowCult.Pattern[]
						{
							LevelProperties.SnowCult.Pattern.Yeti
						}
					}, LevelProperties.SnowCult.States.Yeti, new LevelProperties.SnowCult.Wizard(new string[]
					{
						"0.5,0.3,0.6,0.1,0.7"
					}), new LevelProperties.SnowCult.Movement(2.4f, 0.5f, 90f), new LevelProperties.SnowCult.QuadShot(new string[]
					{
						"150,0,-100,50,100,-50,-150",
						"0,-150,-50,150,-100,100"
					}, 10f, 0.2f, 0.6f, 0f, 265f, new string[]
					{
						"F,F,F,F",
						"P,P,P,P",
						"P,P,P,P",
						"P,P,P,P"
					}, 4f, 285f, 65f, 535f, 0.3f, 2.6f, new string[]
					{
						"0,2,1,3",
						"3,1,2,0",
						"1,3,2,0",
						"1,0,3,2",
						"2,3,0,1",
						"2,1,0,3",
						"0,3,1,2",
						"3,0,2,1"
					}, 4f), new LevelProperties.SnowCult.Whale(0.33f, 0f, 10f), new LevelProperties.SnowCult.Yeti("S,J,L,S,P,S,L,P,S,S,J,L,P,S,L,S,J,P,L", 275f, 0.4f, 0f, 0.5f, 0f, 0f, 1f, 1f, 4f), new LevelProperties.SnowCult.Snowman(0f, 200f, 1, 0.5f, 4.6f, 3f, 1.8f, 0.5f, false), new LevelProperties.SnowCult.IcePillar("50,100,50,150,75,125", 245f, 4, 0f, 0.25f, 0.5f, 0f), new LevelProperties.SnowCult.SeriesShot(new string[]
					{
						"2,2,1,2,1",
						"2,1,2,1,1"
					}, 0.5f, 1.05f, 354f, "N,P,N,N,P"), new LevelProperties.SnowCult.Snowball(new string[]
					{
						"M,L",
						"M,M,M",
						"L,M",
						"M,L,M"
					}, 1.5f, 1.3f, 735f, 155f, 1250f, 815f, 145f, 1050f, 1825f, 190f, 1450f, 1350f, 45f, 925f, 80f, 1500f, 4, 3f, 50f, 375f, 1000f, 0.23f, 2f, 500f, "2.4,2.7,2.1,2.9,2.4,2.6", 0.31f, "0,0,1,0,1,3,1,0,2,1,3", "O,O,O", "50,150,100,175,75,125", "900,1000,850,950,975,1050", false, "0.4,0.5,0.4,0.4,0.6", "N,P,N,N,N,P,N,N,N,P,N", 0.5f), new LevelProperties.SnowCult.Platforms(5, 295f, 215f, 1.15f, -100f), new LevelProperties.SnowCult.Face(new string[]
					{
						"U,U,D,U,D,U,D,D,U,D"
					}, 1f), new LevelProperties.SnowCult.EyeAttack(0.5f, 2.4f, 450f, 2.75f, 175f, 250f, 250f, 0.5f, 1.05f, 0.15f, new MinMax(0.05f, 0.15f)), new LevelProperties.SnowCult.BeamAttack(1f, 1.8f, 20f, 3f, 1f), new LevelProperties.SnowCult.IcePlatform(1.5f, 20f, 1.3f), new LevelProperties.SnowCult.ShardAttack(1.4f, 4, 0f, 0.11f, "20,50,80,30,65,10,55,25,70", 425f, 999f, 1.5f, 500f, 315f, -35f), new LevelProperties.SnowCult.SplitShot(0.5f, new string[]
					{
						"R,R,P",
						"P,R,R",
						"R,P,R"
					}, 1.1f, 565f, 34f, 3, 1.75f, new string[]
					{
						"300,0,-300",
						"-200,0,200",
						"250,0,-250",
						"-300,10,300",
						"200,-10,-200",
						"-250,10,250"
					})));
					list.Add(new LevelProperties.SnowCult.State(0.43f, new LevelProperties.SnowCult.Pattern[][]
					{
						new LevelProperties.SnowCult.Pattern[]
						{
							LevelProperties.SnowCult.Pattern.Mouth,
							LevelProperties.SnowCult.Pattern.Switch,
							LevelProperties.SnowCult.Pattern.Eye,
							LevelProperties.SnowCult.Pattern.Switch,
							LevelProperties.SnowCult.Pattern.Shard,
							LevelProperties.SnowCult.Pattern.Eye,
							LevelProperties.SnowCult.Pattern.Switch,
							LevelProperties.SnowCult.Pattern.Mouth,
							LevelProperties.SnowCult.Pattern.Switch,
							LevelProperties.SnowCult.Pattern.Eye,
							LevelProperties.SnowCult.Pattern.Switch,
							LevelProperties.SnowCult.Pattern.Shard,
							LevelProperties.SnowCult.Pattern.Switch,
							LevelProperties.SnowCult.Pattern.Mouth,
							LevelProperties.SnowCult.Pattern.Eye,
							LevelProperties.SnowCult.Pattern.Switch
						}
					}, LevelProperties.SnowCult.States.JackFrost, new LevelProperties.SnowCult.Wizard(new string[]
					{
						"0.5,0.3,0.6,0.1,0.7"
					}), new LevelProperties.SnowCult.Movement(2.4f, 0.5f, 90f), new LevelProperties.SnowCult.QuadShot(new string[]
					{
						"150,0,-100,50,100,-50,-150",
						"0,-150,-50,150,-100,100"
					}, 10f, 0.2f, 0.6f, 0f, 265f, new string[]
					{
						"F,F,F,F",
						"P,P,P,P",
						"P,P,P,P",
						"P,P,P,P"
					}, 4f, 285f, 65f, 535f, 0.3f, 2.6f, new string[]
					{
						"0,2,1,3",
						"3,1,2,0",
						"1,3,2,0",
						"1,0,3,2",
						"2,3,0,1",
						"2,1,0,3",
						"0,3,1,2",
						"3,0,2,1"
					}, 4f), new LevelProperties.SnowCult.Whale(0.33f, 0f, 10f), new LevelProperties.SnowCult.Yeti("S,J,L,S,P,S,L,P,S,S,J,L,P,S,L,S,J,P,L", 275f, 0.4f, 0f, 0.5f, 0f, 0f, 1f, 1f, 4f), new LevelProperties.SnowCult.Snowman(0f, 200f, 1, 0.5f, 4.6f, 3f, 1.8f, 0.5f, false), new LevelProperties.SnowCult.IcePillar("50,100,50,150,75,125", 245f, 4, 0f, 0.25f, 0.5f, 0f), new LevelProperties.SnowCult.SeriesShot(new string[]
					{
						"2,2,1,2,1",
						"2,1,2,1,1"
					}, 0.5f, 1.05f, 354f, "N,P,N,N,P"), new LevelProperties.SnowCult.Snowball(new string[]
					{
						"M,L",
						"M,M,M",
						"L,M",
						"M,L,M"
					}, 1.5f, 1.3f, 735f, 155f, 1250f, 815f, 145f, 1050f, 1825f, 190f, 1450f, 1350f, 45f, 925f, 80f, 1500f, 4, 3f, 50f, 375f, 1000f, 0.23f, 2f, 500f, "2.4,2.7,2.1,2.9,2.4,2.6", 0.31f, "0,0,1,0,1,3,1,0,2,1,3", "O,O,O", "50,150,100,175,75,125", "900,1000,850,950,975,1050", false, "0.4,0.5,0.4,0.4,0.6", "N,P,N,N,N,P,N,N,N,P,N", 0.5f), new LevelProperties.SnowCult.Platforms(5, 295f, 215f, 1.15f, -100f), new LevelProperties.SnowCult.Face(new string[]
					{
						"U,U,D,U,D,U,D,D,U,D"
					}, 1f), new LevelProperties.SnowCult.EyeAttack(0.5f, 2.4f, 450f, 2.75f, 175f, 250f, 250f, 0.5f, 1.05f, 0.15f, new MinMax(0.05f, 0.15f)), new LevelProperties.SnowCult.BeamAttack(1f, 1.8f, 20f, 3f, 1f), new LevelProperties.SnowCult.IcePlatform(1.5f, 20f, 1.3f), new LevelProperties.SnowCult.ShardAttack(1.4f, 4, 0f, 0.11f, "20,50,80,30,65,10,55,25,70", 425f, 999f, 1.5f, 500f, 315f, -35f), new LevelProperties.SnowCult.SplitShot(0.5f, new string[]
					{
						"R,R,P",
						"P,R,R",
						"R,P,R"
					}, 1.1f, 565f, 34f, 3, 1.75f, new string[]
					{
						"300,0,-300",
						"-200,0,200",
						"250,0,-250",
						"-300,10,300",
						"200,-10,-200",
						"-250,10,250"
					})));
				}
			}
			else
			{
				hp = 1350;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.SnowCult.State(10f, new LevelProperties.SnowCult.Pattern[][]
				{
					new LevelProperties.SnowCult.Pattern[]
					{
						LevelProperties.SnowCult.Pattern.Quad,
						LevelProperties.SnowCult.Pattern.SeriesShot,
						LevelProperties.SnowCult.Pattern.Quad,
						LevelProperties.SnowCult.Pattern.SeriesShot,
						LevelProperties.SnowCult.Pattern.Block,
						LevelProperties.SnowCult.Pattern.Quad,
						LevelProperties.SnowCult.Pattern.Block,
						LevelProperties.SnowCult.Pattern.Quad,
						LevelProperties.SnowCult.Pattern.SeriesShot,
						LevelProperties.SnowCult.Pattern.Quad,
						LevelProperties.SnowCult.Pattern.Block
					}
				}, LevelProperties.SnowCult.States.Main, new LevelProperties.SnowCult.Wizard(new string[]
				{
					"0.6,0.4,0.5,0.3,0.6"
				}), new LevelProperties.SnowCult.Movement(2.6f, 0.5f, 90f), new LevelProperties.SnowCult.QuadShot(new string[]
				{
					"150,0,-100,50,100,-50,-150",
					"0,-150,-50,150,-100,100"
				}, 10f, 0.2f, 1f, 0f, 235f, new string[]
				{
					"R,R,R,R",
					"L,L,L,L",
					"R,R,R,R",
					"L,L,L,L"
				}, 4f, 325f, 45f, 465f, 0.3f, 3.6f, new string[]
				{
					"0,2,1,3",
					"3,1,2,0",
					"1,3,2,0",
					"1,0,3,2",
					"2,3,0,1",
					"2,1,0,3"
				}, 4f), new LevelProperties.SnowCult.Whale(0.66f, 0.5f, 10f), new LevelProperties.SnowCult.Yeti("S,L,J,L,S,J,L,L,S,J,L,J,P,J,L,S,P,L,J,L,J,S,L,L,S,J,L,L,J,S", 235f, 0.45f, 0.5f, 0.55f, 0.1f, 0.5f, 1f, 1f, 4f), new LevelProperties.SnowCult.Snowman(0f, 0f, 0, 0f, 0f, 0f, 0f, 0f, false), new LevelProperties.SnowCult.IcePillar("50,100,50,150,75,125", 365f, 3, 0.1f, 0.25f, 1.5f, 0f), new LevelProperties.SnowCult.SeriesShot(new string[]
				{
					"2,2,2"
				}, 0.5f, 1.3f, 354f, "N,N,P,N,P"), new LevelProperties.SnowCult.Snowball(new string[]
				{
					"S,S,M",
					"S,S,L,S",
					"S,M,M",
					"S,L,S"
				}, 1.2f, 1.6f, 705f, 145f, 1150f, 805f, 165f, 1050f, 825f, 170f, 1450f, 1450f, 45f, 925f, 80f, 1300f, 6, 3.5f, 0f, 0f, 0f, 0f, 0f, 0f, string.Empty, 0f, string.Empty, string.Empty, string.Empty, string.Empty, false, string.Empty, string.Empty, 0f), new LevelProperties.SnowCult.Platforms(5, 295f, 215f, 1.15f, -100f), new LevelProperties.SnowCult.Face(new string[]
				{
					"U,U,D,U,D,U,D,D,U,D"
				}, 1f), new LevelProperties.SnowCult.EyeAttack(0.5f, 2.4f, 500f, 2.5f, 175f, 250f, 250f, 0.3f, 0.5f, 0.25f, new MinMax(0f, 1f)), new LevelProperties.SnowCult.BeamAttack(0f, 0f, 0f, 0f, 0f), new LevelProperties.SnowCult.IcePlatform(1.5f, 20f, 1.3f), new LevelProperties.SnowCult.ShardAttack(1f, 5, 0.1f, 0.1f, "20,50,90,10", 350f, 999f, 1.3f, 0f, 0f, 0f), new LevelProperties.SnowCult.SplitShot(0.5f, new string[]
				{
					"R,R,P,R,P"
				}, 1.3f, 565f, 37f, 3, 2f, new string[]
				{
					"300,0,-300",
					"-200,0,200",
					"250,0,-250"
				})));
				list.Add(new LevelProperties.SnowCult.State(0.83f, new LevelProperties.SnowCult.Pattern[][]
				{
					new LevelProperties.SnowCult.Pattern[]
					{
						LevelProperties.SnowCult.Pattern.Yeti
					}
				}, LevelProperties.SnowCult.States.Yeti, new LevelProperties.SnowCult.Wizard(new string[]
				{
					"0.6,0.4,0.5,0.3,0.6"
				}), new LevelProperties.SnowCult.Movement(2.6f, 0.5f, 90f), new LevelProperties.SnowCult.QuadShot(new string[]
				{
					"150,0,-100,50,100,-50,-150",
					"0,-150,-50,150,-100,100"
				}, 10f, 0.2f, 1f, 0f, 235f, new string[]
				{
					"R,R,R,R",
					"L,L,L,L",
					"R,R,R,R",
					"L,L,L,L"
				}, 4f, 325f, 45f, 465f, 0.3f, 3.6f, new string[]
				{
					"0,2,1,3",
					"3,1,2,0",
					"1,3,2,0",
					"1,0,3,2",
					"2,3,0,1",
					"2,1,0,3"
				}, 4f), new LevelProperties.SnowCult.Whale(0.66f, 0.5f, 10f), new LevelProperties.SnowCult.Yeti("L", 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f), new LevelProperties.SnowCult.Snowman(0f, 0f, 0, 0f, 0f, 0f, 0f, 0f, false), new LevelProperties.SnowCult.IcePillar("50,100,50,150,75,125", 365f, 3, 0.1f, 0.25f, 1.5f, 0f), new LevelProperties.SnowCult.SeriesShot(new string[]
				{
					"2,2,2"
				}, 0.5f, 1.3f, 354f, "N,N,P,N,P"), new LevelProperties.SnowCult.Snowball(new string[]
				{
					"S,S,M",
					"S,S,L,S",
					"S,M,M",
					"S,L,S"
				}, 1.2f, 1.6f, 705f, 145f, 1150f, 805f, 165f, 1050f, 825f, 170f, 1450f, 1450f, 45f, 925f, 80f, 1300f, 6, 3.5f, 0f, 0f, 0f, 0f, 0f, 0f, string.Empty, 0f, string.Empty, string.Empty, string.Empty, string.Empty, false, string.Empty, string.Empty, 0f), new LevelProperties.SnowCult.Platforms(5, 295f, 215f, 1.15f, -100f), new LevelProperties.SnowCult.Face(new string[]
				{
					"U,U,D,U,D,U,D,D,U,D"
				}, 1f), new LevelProperties.SnowCult.EyeAttack(0.5f, 2.4f, 500f, 2.5f, 175f, 250f, 250f, 0.3f, 0.5f, 0.25f, new MinMax(0f, 1f)), new LevelProperties.SnowCult.BeamAttack(0f, 0f, 0f, 0f, 0f), new LevelProperties.SnowCult.IcePlatform(1.5f, 20f, 1.3f), new LevelProperties.SnowCult.ShardAttack(1f, 5, 0.1f, 0.1f, "20,50,90,10", 350f, 999f, 1.3f, 0f, 0f, 0f), new LevelProperties.SnowCult.SplitShot(0.5f, new string[]
				{
					"R,R,P,R,P"
				}, 1.3f, 565f, 37f, 3, 2f, new string[]
				{
					"300,0,-300",
					"-200,0,200",
					"250,0,-250"
				})));
				list.Add(new LevelProperties.SnowCult.State(0.4f, new LevelProperties.SnowCult.Pattern[][]
				{
					new LevelProperties.SnowCult.Pattern[]
					{
						LevelProperties.SnowCult.Pattern.Yeti
					}
				}, LevelProperties.SnowCult.States.EasyYeti, new LevelProperties.SnowCult.Wizard(new string[]
				{
					"0.6,0.4,0.5,0.3,0.6"
				}), new LevelProperties.SnowCult.Movement(2.6f, 0.5f, 90f), new LevelProperties.SnowCult.QuadShot(new string[]
				{
					"150,0,-100,50,100,-50,-150",
					"0,-150,-50,150,-100,100"
				}, 10f, 0.2f, 1f, 0f, 235f, new string[]
				{
					"R,R,R,R",
					"L,L,L,L",
					"R,R,R,R",
					"L,L,L,L"
				}, 4f, 325f, 45f, 465f, 0.3f, 3.6f, new string[]
				{
					"0,2,1,3",
					"3,1,2,0",
					"1,3,2,0",
					"1,0,3,2",
					"2,3,0,1",
					"2,1,0,3"
				}, 4f), new LevelProperties.SnowCult.Whale(0.66f, 0.5f, 10f), new LevelProperties.SnowCult.Yeti("S,J,S,S,J,J,S,J,S,S,J,S,S,S,J,S,J,S,S,J,S,J,S,S,S", 235f, 0.49f, 0.5f, 0.62f, 0.1f, 0.5f, 0f, 0f, 0f), new LevelProperties.SnowCult.Snowman(0f, 0f, 0, 0f, 0f, 0f, 0f, 0f, false), new LevelProperties.SnowCult.IcePillar("50,100,50,150,75,125", 365f, 3, 0.1f, 0.25f, 1.5f, 0f), new LevelProperties.SnowCult.SeriesShot(new string[]
				{
					"2,2,2"
				}, 0.5f, 1.3f, 354f, "N,N,P,N,P"), new LevelProperties.SnowCult.Snowball(new string[0], 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 6, 3f, 50f, 375f, 1000f, 0.23f, 2f, 500f, "2.9,2.8,3.4,2.6,2.7,2.5,2.5,3,2.9,2.6,2.5,2.8,2.8,2.5,2.6,3.2,2.6,2.9,2.5,3.3", 0.29f, "0,0,1,2,0,2,0,1,1,0,2,1,0,2,1", "O,S", "125,50,150,100,175,75,125,175", "1000,1050,950,1050,975,950", true, "0.5,0.45,0.45,0.6,0.55,0.45,0.6", "N,P,N,N,N,P,N,P,N,N,N,P,N,N", 0f), new LevelProperties.SnowCult.Platforms(5, 295f, 215f, 1.15f, -100f), new LevelProperties.SnowCult.Face(new string[]
				{
					"U,U,D,U,D,U,D,D,U,D"
				}, 1f), new LevelProperties.SnowCult.EyeAttack(0.5f, 2.4f, 500f, 2.5f, 175f, 250f, 250f, 0.3f, 0.5f, 0.25f, new MinMax(0f, 1f)), new LevelProperties.SnowCult.BeamAttack(0f, 0f, 0f, 0f, 0f), new LevelProperties.SnowCult.IcePlatform(1.5f, 20f, 1.3f), new LevelProperties.SnowCult.ShardAttack(1f, 5, 0.1f, 0.1f, "20,50,90,10", 350f, 999f, 1.3f, 0f, 0f, 0f), new LevelProperties.SnowCult.SplitShot(0.5f, new string[]
				{
					"R,R,P,R,P"
				}, 1.3f, 565f, 37f, 3, 2f, new string[]
				{
					"300,0,-300",
					"-200,0,200",
					"250,0,-250"
				})));
			}
			return new LevelProperties.SnowCult(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020002AE RID: 686
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700013F RID: 319
			// (get) Token: 0x060007A4 RID: 1956 RVA: 0x0004AA6D File Offset: 0x00048E6D
			// (set) Token: 0x060007A5 RID: 1957 RVA: 0x0004AA75 File Offset: 0x00048E75
			private protected LevelProperties.SnowCult properties { protected get; private set; }

			// Token: 0x060007A6 RID: 1958 RVA: 0x0004AA7E File Offset: 0x00048E7E
			public virtual void LevelInit(LevelProperties.SnowCult properties)
			{
				this.properties = properties;
			}

			// Token: 0x060007A7 RID: 1959 RVA: 0x0004AA87 File Offset: 0x00048E87
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020002AF RID: 687
		public enum States
		{
			// Token: 0x04000F63 RID: 3939
			Main,
			// Token: 0x04000F64 RID: 3940
			Generic,
			// Token: 0x04000F65 RID: 3941
			JackFrost,
			// Token: 0x04000F66 RID: 3942
			Yeti,
			// Token: 0x04000F67 RID: 3943
			EasyYeti
		}

		// Token: 0x020002B0 RID: 688
		public enum Pattern
		{
			// Token: 0x04000F69 RID: 3945
			Default,
			// Token: 0x04000F6A RID: 3946
			Switch,
			// Token: 0x04000F6B RID: 3947
			Eye,
			// Token: 0x04000F6C RID: 3948
			Beam,
			// Token: 0x04000F6D RID: 3949
			Hazard,
			// Token: 0x04000F6E RID: 3950
			Shard,
			// Token: 0x04000F6F RID: 3951
			Mouth,
			// Token: 0x04000F70 RID: 3952
			Quad,
			// Token: 0x04000F71 RID: 3953
			Block,
			// Token: 0x04000F72 RID: 3954
			SeriesShot,
			// Token: 0x04000F73 RID: 3955
			Yeti,
			// Token: 0x04000F74 RID: 3956
			Uninitialized
		}

		// Token: 0x020002B1 RID: 689
		public class State : AbstractLevelState<LevelProperties.SnowCult.Pattern, LevelProperties.SnowCult.States>
		{
			// Token: 0x060007A8 RID: 1960 RVA: 0x0004AA8C File Offset: 0x00048E8C
			public State(float healthTrigger, LevelProperties.SnowCult.Pattern[][] patterns, LevelProperties.SnowCult.States stateName, LevelProperties.SnowCult.Wizard wizard, LevelProperties.SnowCult.Movement movement, LevelProperties.SnowCult.QuadShot quadShot, LevelProperties.SnowCult.Whale whale, LevelProperties.SnowCult.Yeti yeti, LevelProperties.SnowCult.Snowman snowman, LevelProperties.SnowCult.IcePillar icePillar, LevelProperties.SnowCult.SeriesShot seriesShot, LevelProperties.SnowCult.Snowball snowball, LevelProperties.SnowCult.Platforms platforms, LevelProperties.SnowCult.Face face, LevelProperties.SnowCult.EyeAttack eyeAttack, LevelProperties.SnowCult.BeamAttack beamAttack, LevelProperties.SnowCult.IcePlatform icePlatform, LevelProperties.SnowCult.ShardAttack shardAttack, LevelProperties.SnowCult.SplitShot splitShot) : base(healthTrigger, patterns, stateName)
			{
				this.wizard = wizard;
				this.movement = movement;
				this.quadShot = quadShot;
				this.whale = whale;
				this.yeti = yeti;
				this.snowman = snowman;
				this.icePillar = icePillar;
				this.seriesShot = seriesShot;
				this.snowball = snowball;
				this.platforms = platforms;
				this.face = face;
				this.eyeAttack = eyeAttack;
				this.beamAttack = beamAttack;
				this.icePlatform = icePlatform;
				this.shardAttack = shardAttack;
				this.splitShot = splitShot;
			}

			// Token: 0x04000F75 RID: 3957
			public readonly LevelProperties.SnowCult.Wizard wizard;

			// Token: 0x04000F76 RID: 3958
			public readonly LevelProperties.SnowCult.Movement movement;

			// Token: 0x04000F77 RID: 3959
			public readonly LevelProperties.SnowCult.QuadShot quadShot;

			// Token: 0x04000F78 RID: 3960
			public readonly LevelProperties.SnowCult.Whale whale;

			// Token: 0x04000F79 RID: 3961
			public readonly LevelProperties.SnowCult.Yeti yeti;

			// Token: 0x04000F7A RID: 3962
			public readonly LevelProperties.SnowCult.Snowman snowman;

			// Token: 0x04000F7B RID: 3963
			public readonly LevelProperties.SnowCult.IcePillar icePillar;

			// Token: 0x04000F7C RID: 3964
			public readonly LevelProperties.SnowCult.SeriesShot seriesShot;

			// Token: 0x04000F7D RID: 3965
			public readonly LevelProperties.SnowCult.Snowball snowball;

			// Token: 0x04000F7E RID: 3966
			public readonly LevelProperties.SnowCult.Platforms platforms;

			// Token: 0x04000F7F RID: 3967
			public readonly LevelProperties.SnowCult.Face face;

			// Token: 0x04000F80 RID: 3968
			public readonly LevelProperties.SnowCult.EyeAttack eyeAttack;

			// Token: 0x04000F81 RID: 3969
			public readonly LevelProperties.SnowCult.BeamAttack beamAttack;

			// Token: 0x04000F82 RID: 3970
			public readonly LevelProperties.SnowCult.IcePlatform icePlatform;

			// Token: 0x04000F83 RID: 3971
			public readonly LevelProperties.SnowCult.ShardAttack shardAttack;

			// Token: 0x04000F84 RID: 3972
			public readonly LevelProperties.SnowCult.SplitShot splitShot;
		}

		// Token: 0x020002B2 RID: 690
		public class Wizard : AbstractLevelPropertyGroup
		{
			// Token: 0x060007A9 RID: 1961 RVA: 0x0004AB22 File Offset: 0x00048F22
			public Wizard(string[] wizardHesitationString)
			{
				this.wizardHesitationString = wizardHesitationString;
			}

			// Token: 0x04000F85 RID: 3973
			public readonly string[] wizardHesitationString;
		}

		// Token: 0x020002B3 RID: 691
		public class Movement : AbstractLevelPropertyGroup
		{
			// Token: 0x060007AA RID: 1962 RVA: 0x0004AB31 File Offset: 0x00048F31
			public Movement(float speed, float easing, float dipAmount)
			{
				this.speed = speed;
				this.easing = easing;
				this.dipAmount = dipAmount;
			}

			// Token: 0x04000F86 RID: 3974
			public readonly float speed;

			// Token: 0x04000F87 RID: 3975
			public readonly float easing;

			// Token: 0x04000F88 RID: 3976
			public readonly float dipAmount;
		}

		// Token: 0x020002B4 RID: 692
		public class QuadShot : AbstractLevelPropertyGroup
		{
			// Token: 0x060007AB RID: 1963 RVA: 0x0004AB50 File Offset: 0x00048F50
			public QuadShot(string[] attackLocationString, float distToAttack, float preattackDelay, float attackDelay, float maxOffset, float hazardSpeed, string[] hazardDirectionString, float hazardHealth, float distanceBetween, float distanceDown, float shotVelocity, float ballDelay, float hazardMoveDelay, string[] ballDelayString, float groundHealth)
			{
				this.attackLocationString = attackLocationString;
				this.distToAttack = distToAttack;
				this.preattackDelay = preattackDelay;
				this.attackDelay = attackDelay;
				this.maxOffset = maxOffset;
				this.hazardSpeed = hazardSpeed;
				this.hazardDirectionString = hazardDirectionString;
				this.hazardHealth = hazardHealth;
				this.distanceBetween = distanceBetween;
				this.distanceDown = distanceDown;
				this.shotVelocity = shotVelocity;
				this.ballDelay = ballDelay;
				this.hazardMoveDelay = hazardMoveDelay;
				this.ballDelayString = ballDelayString;
				this.groundHealth = groundHealth;
			}

			// Token: 0x04000F89 RID: 3977
			public readonly string[] attackLocationString;

			// Token: 0x04000F8A RID: 3978
			public readonly float distToAttack;

			// Token: 0x04000F8B RID: 3979
			public readonly float preattackDelay;

			// Token: 0x04000F8C RID: 3980
			public readonly float attackDelay;

			// Token: 0x04000F8D RID: 3981
			public readonly float maxOffset;

			// Token: 0x04000F8E RID: 3982
			public readonly float hazardSpeed;

			// Token: 0x04000F8F RID: 3983
			public readonly string[] hazardDirectionString;

			// Token: 0x04000F90 RID: 3984
			public readonly float hazardHealth;

			// Token: 0x04000F91 RID: 3985
			public readonly float distanceBetween;

			// Token: 0x04000F92 RID: 3986
			public readonly float distanceDown;

			// Token: 0x04000F93 RID: 3987
			public readonly float shotVelocity;

			// Token: 0x04000F94 RID: 3988
			public readonly float ballDelay;

			// Token: 0x04000F95 RID: 3989
			public readonly float hazardMoveDelay;

			// Token: 0x04000F96 RID: 3990
			public readonly string[] ballDelayString;

			// Token: 0x04000F97 RID: 3991
			public readonly float groundHealth;
		}

		// Token: 0x020002B5 RID: 693
		public class Whale : AbstractLevelPropertyGroup
		{
			// Token: 0x060007AC RID: 1964 RVA: 0x0004ABD8 File Offset: 0x00048FD8
			public Whale(float attackDelay, float recoveryDelay, float distToDrop)
			{
				this.attackDelay = attackDelay;
				this.recoveryDelay = recoveryDelay;
				this.distToDrop = distToDrop;
			}

			// Token: 0x04000F98 RID: 3992
			public readonly float attackDelay;

			// Token: 0x04000F99 RID: 3993
			public readonly float recoveryDelay;

			// Token: 0x04000F9A RID: 3994
			public readonly float distToDrop;
		}

		// Token: 0x020002B6 RID: 694
		public class Yeti : AbstractLevelPropertyGroup
		{
			// Token: 0x060007AD RID: 1965 RVA: 0x0004ABF8 File Offset: 0x00048FF8
			public Yeti(string yetiPatternString, float jumpApexHeight, float jumpApexTime, float jumpWarning, float slideTime, float slideWarning, float hesitate, float timeToPlatforms, float timeToCameraMove, float timeForCameraMove)
			{
				this.yetiPatternString = yetiPatternString;
				this.jumpApexHeight = jumpApexHeight;
				this.jumpApexTime = jumpApexTime;
				this.jumpWarning = jumpWarning;
				this.slideTime = slideTime;
				this.slideWarning = slideWarning;
				this.hesitate = hesitate;
				this.timeToPlatforms = timeToPlatforms;
				this.timeToCameraMove = timeToCameraMove;
				this.timeForCameraMove = timeForCameraMove;
			}

			// Token: 0x04000F9B RID: 3995
			public readonly string yetiPatternString;

			// Token: 0x04000F9C RID: 3996
			public readonly float jumpApexHeight;

			// Token: 0x04000F9D RID: 3997
			public readonly float jumpApexTime;

			// Token: 0x04000F9E RID: 3998
			public readonly float jumpWarning;

			// Token: 0x04000F9F RID: 3999
			public readonly float slideTime;

			// Token: 0x04000FA0 RID: 4000
			public readonly float slideWarning;

			// Token: 0x04000FA1 RID: 4001
			public readonly float hesitate;

			// Token: 0x04000FA2 RID: 4002
			public readonly float timeToPlatforms;

			// Token: 0x04000FA3 RID: 4003
			public readonly float timeToCameraMove;

			// Token: 0x04000FA4 RID: 4004
			public readonly float timeForCameraMove;
		}

		// Token: 0x020002B7 RID: 695
		public class Snowman : AbstractLevelPropertyGroup
		{
			// Token: 0x060007AE RID: 1966 RVA: 0x0004AC58 File Offset: 0x00049058
			public Snowman(float startCoordLeft, float startCoordRight, int snowmanCount, float meltDelay, float runTime, float health, float timeUntilUnmelt, float unmeltLoopTime, bool enableSnowman)
			{
				this.startCoordLeft = startCoordLeft;
				this.startCoordRight = startCoordRight;
				this.snowmanCount = snowmanCount;
				this.meltDelay = meltDelay;
				this.runTime = runTime;
				this.health = health;
				this.timeUntilUnmelt = timeUntilUnmelt;
				this.unmeltLoopTime = unmeltLoopTime;
				this.enableSnowman = enableSnowman;
			}

			// Token: 0x04000FA5 RID: 4005
			public readonly float startCoordLeft;

			// Token: 0x04000FA6 RID: 4006
			public readonly float startCoordRight;

			// Token: 0x04000FA7 RID: 4007
			public readonly int snowmanCount;

			// Token: 0x04000FA8 RID: 4008
			public readonly float meltDelay;

			// Token: 0x04000FA9 RID: 4009
			public readonly float runTime;

			// Token: 0x04000FAA RID: 4010
			public readonly float health;

			// Token: 0x04000FAB RID: 4011
			public readonly float timeUntilUnmelt;

			// Token: 0x04000FAC RID: 4012
			public readonly float unmeltLoopTime;

			// Token: 0x04000FAD RID: 4013
			public readonly bool enableSnowman;
		}

		// Token: 0x020002B8 RID: 696
		public class IcePillar : AbstractLevelPropertyGroup
		{
			// Token: 0x060007AF RID: 1967 RVA: 0x0004ACB0 File Offset: 0x000490B0
			public IcePillar(string offsetCoordString, float icePillarSpacing, int icePillarCount, float moveTime, float appearDelay, float hesitate, float outTime)
			{
				this.offsetCoordString = offsetCoordString;
				this.icePillarSpacing = icePillarSpacing;
				this.icePillarCount = icePillarCount;
				this.moveTime = moveTime;
				this.appearDelay = appearDelay;
				this.hesitate = hesitate;
				this.outTime = outTime;
			}

			// Token: 0x04000FAE RID: 4014
			public readonly string offsetCoordString;

			// Token: 0x04000FAF RID: 4015
			public readonly float icePillarSpacing;

			// Token: 0x04000FB0 RID: 4016
			public readonly int icePillarCount;

			// Token: 0x04000FB1 RID: 4017
			public readonly float moveTime;

			// Token: 0x04000FB2 RID: 4018
			public readonly float appearDelay;

			// Token: 0x04000FB3 RID: 4019
			public readonly float hesitate;

			// Token: 0x04000FB4 RID: 4020
			public readonly float outTime;
		}

		// Token: 0x020002B9 RID: 697
		public class SeriesShot : AbstractLevelPropertyGroup
		{
			// Token: 0x060007B0 RID: 1968 RVA: 0x0004ACED File Offset: 0x000490ED
			public SeriesShot(string[] seriesShotCountString, float seriesShotWarningTime, float betweenShotDelay, float bulletSpeed, string parryString)
			{
				this.seriesShotCountString = seriesShotCountString;
				this.seriesShotWarningTime = seriesShotWarningTime;
				this.betweenShotDelay = betweenShotDelay;
				this.bulletSpeed = bulletSpeed;
				this.parryString = parryString;
			}

			// Token: 0x04000FB5 RID: 4021
			public readonly string[] seriesShotCountString;

			// Token: 0x04000FB6 RID: 4022
			public readonly float seriesShotWarningTime;

			// Token: 0x04000FB7 RID: 4023
			public readonly float betweenShotDelay;

			// Token: 0x04000FB8 RID: 4024
			public readonly float bulletSpeed;

			// Token: 0x04000FB9 RID: 4025
			public readonly string parryString;
		}

		// Token: 0x020002BA RID: 698
		public class Snowball : AbstractLevelPropertyGroup
		{
			// Token: 0x060007B1 RID: 1969 RVA: 0x0004AD1C File Offset: 0x0004911C
			public Snowball(string[] snowballTypeString, float snowballThrowDelay, float hesitate, float smallVelocityY, float smallVelocityX, float smallGravity, float mediumVelocityY, float mediumVelocityX, float mediumGravity, float largeVelocityY, float largeVelocityX, float largeGravity, float shotMaxSpeed, float shotMaxAngle, float shotMinSpeed, float shotMinAngle, float shotGravity, int batCount, float batHP, float batEllipseHeight, float batEllipseWidth, float batEllipseElevation, float batCirclingSpeed, float batInitialDelay, float batShotSpeed, string batAttackInterDelay, float batAttackSpeed, string batAttackPosition, string batAttackSide, string batAttackHeight, string batAttackWidth, bool batsReaddedOnEscape, string batArcModifier, string batParryableString, float batLaunchDelay)
			{
				this.snowballTypeString = snowballTypeString;
				this.snowballThrowDelay = snowballThrowDelay;
				this.hesitate = hesitate;
				this.smallVelocityY = smallVelocityY;
				this.smallVelocityX = smallVelocityX;
				this.smallGravity = smallGravity;
				this.mediumVelocityY = mediumVelocityY;
				this.mediumVelocityX = mediumVelocityX;
				this.mediumGravity = mediumGravity;
				this.largeVelocityY = largeVelocityY;
				this.largeVelocityX = largeVelocityX;
				this.largeGravity = largeGravity;
				this.shotMaxSpeed = shotMaxSpeed;
				this.shotMaxAngle = shotMaxAngle;
				this.shotMinSpeed = shotMinSpeed;
				this.shotMinAngle = shotMinAngle;
				this.shotGravity = shotGravity;
				this.batCount = batCount;
				this.batHP = batHP;
				this.batEllipseHeight = batEllipseHeight;
				this.batEllipseWidth = batEllipseWidth;
				this.batEllipseElevation = batEllipseElevation;
				this.batCirclingSpeed = batCirclingSpeed;
				this.batInitialDelay = batInitialDelay;
				this.batShotSpeed = batShotSpeed;
				this.batAttackInterDelay = batAttackInterDelay;
				this.batAttackSpeed = batAttackSpeed;
				this.batAttackPosition = batAttackPosition;
				this.batAttackSide = batAttackSide;
				this.batAttackHeight = batAttackHeight;
				this.batAttackWidth = batAttackWidth;
				this.batsReaddedOnEscape = batsReaddedOnEscape;
				this.batArcModifier = batArcModifier;
				this.batParryableString = batParryableString;
				this.batLaunchDelay = batLaunchDelay;
			}

			// Token: 0x04000FBA RID: 4026
			public readonly string[] snowballTypeString;

			// Token: 0x04000FBB RID: 4027
			public readonly float snowballThrowDelay;

			// Token: 0x04000FBC RID: 4028
			public readonly float hesitate;

			// Token: 0x04000FBD RID: 4029
			public readonly float smallVelocityY;

			// Token: 0x04000FBE RID: 4030
			public readonly float smallVelocityX;

			// Token: 0x04000FBF RID: 4031
			public readonly float smallGravity;

			// Token: 0x04000FC0 RID: 4032
			public readonly float mediumVelocityY;

			// Token: 0x04000FC1 RID: 4033
			public readonly float mediumVelocityX;

			// Token: 0x04000FC2 RID: 4034
			public readonly float mediumGravity;

			// Token: 0x04000FC3 RID: 4035
			public readonly float largeVelocityY;

			// Token: 0x04000FC4 RID: 4036
			public readonly float largeVelocityX;

			// Token: 0x04000FC5 RID: 4037
			public readonly float largeGravity;

			// Token: 0x04000FC6 RID: 4038
			public readonly float shotMaxSpeed;

			// Token: 0x04000FC7 RID: 4039
			public readonly float shotMaxAngle;

			// Token: 0x04000FC8 RID: 4040
			public readonly float shotMinSpeed;

			// Token: 0x04000FC9 RID: 4041
			public readonly float shotMinAngle;

			// Token: 0x04000FCA RID: 4042
			public readonly float shotGravity;

			// Token: 0x04000FCB RID: 4043
			public readonly int batCount;

			// Token: 0x04000FCC RID: 4044
			public readonly float batHP;

			// Token: 0x04000FCD RID: 4045
			public readonly float batEllipseHeight;

			// Token: 0x04000FCE RID: 4046
			public readonly float batEllipseWidth;

			// Token: 0x04000FCF RID: 4047
			public readonly float batEllipseElevation;

			// Token: 0x04000FD0 RID: 4048
			public readonly float batCirclingSpeed;

			// Token: 0x04000FD1 RID: 4049
			public readonly float batInitialDelay;

			// Token: 0x04000FD2 RID: 4050
			public readonly float batShotSpeed;

			// Token: 0x04000FD3 RID: 4051
			public readonly string batAttackInterDelay;

			// Token: 0x04000FD4 RID: 4052
			public readonly float batAttackSpeed;

			// Token: 0x04000FD5 RID: 4053
			public readonly string batAttackPosition;

			// Token: 0x04000FD6 RID: 4054
			public readonly string batAttackSide;

			// Token: 0x04000FD7 RID: 4055
			public readonly string batAttackHeight;

			// Token: 0x04000FD8 RID: 4056
			public readonly string batAttackWidth;

			// Token: 0x04000FD9 RID: 4057
			public readonly bool batsReaddedOnEscape;

			// Token: 0x04000FDA RID: 4058
			public readonly string batArcModifier;

			// Token: 0x04000FDB RID: 4059
			public readonly string batParryableString;

			// Token: 0x04000FDC RID: 4060
			public readonly float batLaunchDelay;
		}

		// Token: 0x020002BB RID: 699
		public class Platforms : AbstractLevelPropertyGroup
		{
			// Token: 0x060007B2 RID: 1970 RVA: 0x0004AE44 File Offset: 0x00049244
			public Platforms(int platformNum, float loopSizeX, float loopSizeY, float platformSpeed, float pivotPointYOffset)
			{
				this.platformNum = platformNum;
				this.loopSizeX = loopSizeX;
				this.loopSizeY = loopSizeY;
				this.platformSpeed = platformSpeed;
				this.pivotPointYOffset = pivotPointYOffset;
			}

			// Token: 0x04000FDD RID: 4061
			public readonly int platformNum;

			// Token: 0x04000FDE RID: 4062
			public readonly float loopSizeX;

			// Token: 0x04000FDF RID: 4063
			public readonly float loopSizeY;

			// Token: 0x04000FE0 RID: 4064
			public readonly float platformSpeed;

			// Token: 0x04000FE1 RID: 4065
			public readonly float pivotPointYOffset;
		}

		// Token: 0x020002BC RID: 700
		public class Face : AbstractLevelPropertyGroup
		{
			// Token: 0x060007B3 RID: 1971 RVA: 0x0004AE71 File Offset: 0x00049271
			public Face(string[] faceOrientationString, float hesitate)
			{
				this.faceOrientationString = faceOrientationString;
				this.hesitate = hesitate;
			}

			// Token: 0x04000FE2 RID: 4066
			public readonly string[] faceOrientationString;

			// Token: 0x04000FE3 RID: 4067
			public readonly float hesitate;
		}

		// Token: 0x020002BD RID: 701
		public class EyeAttack : AbstractLevelPropertyGroup
		{
			// Token: 0x060007B4 RID: 1972 RVA: 0x0004AE88 File Offset: 0x00049288
			public EyeAttack(float warningLength, float eyeSize, float eyeStraightSpeed, float eyeCurveSpeed, float distanceToTurn, float loopSizeY, float loopSizeX, float attackDelay, float beamDelay, float beamDuration, MinMax initialBeamDelay)
			{
				this.warningLength = warningLength;
				this.eyeSize = eyeSize;
				this.eyeStraightSpeed = eyeStraightSpeed;
				this.eyeCurveSpeed = eyeCurveSpeed;
				this.distanceToTurn = distanceToTurn;
				this.loopSizeY = loopSizeY;
				this.loopSizeX = loopSizeX;
				this.attackDelay = attackDelay;
				this.beamDelay = beamDelay;
				this.beamDuration = beamDuration;
				this.initialBeamDelay = initialBeamDelay;
			}

			// Token: 0x04000FE4 RID: 4068
			public readonly float warningLength;

			// Token: 0x04000FE5 RID: 4069
			public readonly float eyeSize;

			// Token: 0x04000FE6 RID: 4070
			public readonly float eyeStraightSpeed;

			// Token: 0x04000FE7 RID: 4071
			public readonly float eyeCurveSpeed;

			// Token: 0x04000FE8 RID: 4072
			public readonly float distanceToTurn;

			// Token: 0x04000FE9 RID: 4073
			public readonly float loopSizeY;

			// Token: 0x04000FEA RID: 4074
			public readonly float loopSizeX;

			// Token: 0x04000FEB RID: 4075
			public readonly float attackDelay;

			// Token: 0x04000FEC RID: 4076
			public readonly float beamDelay;

			// Token: 0x04000FED RID: 4077
			public readonly float beamDuration;

			// Token: 0x04000FEE RID: 4078
			public readonly MinMax initialBeamDelay;
		}

		// Token: 0x020002BE RID: 702
		public class BeamAttack : AbstractLevelPropertyGroup
		{
			// Token: 0x060007B5 RID: 1973 RVA: 0x0004AEF0 File Offset: 0x000492F0
			public BeamAttack(float warningLength, float beamDuration, float beamOffset, float beamWidth, float attackDelay)
			{
				this.warningLength = warningLength;
				this.beamDuration = beamDuration;
				this.beamOffset = beamOffset;
				this.beamWidth = beamWidth;
				this.attackDelay = attackDelay;
			}

			// Token: 0x04000FEF RID: 4079
			public readonly float warningLength;

			// Token: 0x04000FF0 RID: 4080
			public readonly float beamDuration;

			// Token: 0x04000FF1 RID: 4081
			public readonly float beamOffset;

			// Token: 0x04000FF2 RID: 4082
			public readonly float beamWidth;

			// Token: 0x04000FF3 RID: 4083
			public readonly float attackDelay;
		}

		// Token: 0x020002BF RID: 703
		public class IcePlatform : AbstractLevelPropertyGroup
		{
			// Token: 0x060007B6 RID: 1974 RVA: 0x0004AF1D File Offset: 0x0004931D
			public IcePlatform(float warningLength, float icePlatformHealth, float attackDelay)
			{
				this.warningLength = warningLength;
				this.icePlatformHealth = icePlatformHealth;
				this.attackDelay = attackDelay;
			}

			// Token: 0x04000FF4 RID: 4084
			public readonly float warningLength;

			// Token: 0x04000FF5 RID: 4085
			public readonly float icePlatformHealth;

			// Token: 0x04000FF6 RID: 4086
			public readonly float attackDelay;
		}

		// Token: 0x020002C0 RID: 704
		public class ShardAttack : AbstractLevelPropertyGroup
		{
			// Token: 0x060007B7 RID: 1975 RVA: 0x0004AF3C File Offset: 0x0004933C
			public ShardAttack(float warningLength, int shardNumber, float shardHesitation, float shardDelay, string angleOffset, float shardSpeed, float shardHealth, float attackDelay, float circleSizeX, float circleSizeY, float circleOffsetY)
			{
				this.warningLength = warningLength;
				this.shardNumber = shardNumber;
				this.shardHesitation = shardHesitation;
				this.shardDelay = shardDelay;
				this.angleOffset = angleOffset;
				this.shardSpeed = shardSpeed;
				this.shardHealth = shardHealth;
				this.attackDelay = attackDelay;
				this.circleSizeX = circleSizeX;
				this.circleSizeY = circleSizeY;
				this.circleOffsetY = circleOffsetY;
			}

			// Token: 0x04000FF7 RID: 4087
			public readonly float warningLength;

			// Token: 0x04000FF8 RID: 4088
			public readonly int shardNumber;

			// Token: 0x04000FF9 RID: 4089
			public readonly float shardHesitation;

			// Token: 0x04000FFA RID: 4090
			public readonly float shardDelay;

			// Token: 0x04000FFB RID: 4091
			public readonly string angleOffset;

			// Token: 0x04000FFC RID: 4092
			public readonly float shardSpeed;

			// Token: 0x04000FFD RID: 4093
			public readonly float shardHealth;

			// Token: 0x04000FFE RID: 4094
			public readonly float attackDelay;

			// Token: 0x04000FFF RID: 4095
			public readonly float circleSizeX;

			// Token: 0x04001000 RID: 4096
			public readonly float circleSizeY;

			// Token: 0x04001001 RID: 4097
			public readonly float circleOffsetY;
		}

		// Token: 0x020002C1 RID: 705
		public class SplitShot : AbstractLevelPropertyGroup
		{
			// Token: 0x060007B8 RID: 1976 RVA: 0x0004AFA4 File Offset: 0x000493A4
			public SplitShot(float warningLength, string[] pinkString, float shotDelay, float shotSpeed, float spreadAngle, int shatterCount, float attackDelay, string[] shotCoordString)
			{
				this.warningLength = warningLength;
				this.pinkString = pinkString;
				this.shotDelay = shotDelay;
				this.shotSpeed = shotSpeed;
				this.spreadAngle = spreadAngle;
				this.shatterCount = shatterCount;
				this.attackDelay = attackDelay;
				this.shotCoordString = shotCoordString;
			}

			// Token: 0x04001002 RID: 4098
			public readonly float warningLength;

			// Token: 0x04001003 RID: 4099
			public readonly string[] pinkString;

			// Token: 0x04001004 RID: 4100
			public readonly float shotDelay;

			// Token: 0x04001005 RID: 4101
			public readonly float shotSpeed;

			// Token: 0x04001006 RID: 4102
			public readonly float spreadAngle;

			// Token: 0x04001007 RID: 4103
			public readonly int shatterCount;

			// Token: 0x04001008 RID: 4104
			public readonly float attackDelay;

			// Token: 0x04001009 RID: 4105
			public readonly string[] shotCoordString;
		}
	}

	// Token: 0x020002C3 RID: 707
	public class Test : AbstractLevelProperties<LevelProperties.Test.State, LevelProperties.Test.Pattern, LevelProperties.Test.States>
	{
		// Token: 0x060007D5 RID: 2005 RVA: 0x0004AFF4 File Offset: 0x000493F4
		public Test(int hp, Level.GoalTimes goalTimes, LevelProperties.Test.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060007D6 RID: 2006 RVA: 0x0004B000 File Offset: 0x00049400
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 1001f;
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				timeline.events.Add(new Level.Timeline.Event("Test", 0.5f));
				timeline.events.Add(new Level.Timeline.Event("SecondTest", 0.1f));
				timeline.events.Add(new Level.Timeline.Event("Generic", 0.05f));
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x060007D7 RID: 2007 RVA: 0x0004B0A9 File Offset: 0x000494A9
		public static LevelProperties.Test.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "M")
				{
					return LevelProperties.Test.Pattern.Main;
				}
			}
			Debug.LogError("Pattern Test.Pattern for  " + id + " not found.", null);
			return LevelProperties.Test.Pattern.Uninitialized;
		}

		// Token: 0x060007D8 RID: 2008 RVA: 0x0004B0E8 File Offset: 0x000494E8
		public static LevelProperties.Test GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Test.State> list = new List<LevelProperties.Test.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Test.State(10f, new LevelProperties.Test.Pattern[][]
						{
							new LevelProperties.Test.Pattern[1]
						}, LevelProperties.Test.States.Main, new LevelProperties.Test.Moving(new MinMax(1f, 0.1f), new MinMax(1f, 0.1f), new MinMax(1f, 0.1f))));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Test.State(10f, new LevelProperties.Test.Pattern[][]
					{
						new LevelProperties.Test.Pattern[3]
					}, LevelProperties.Test.States.Main, new LevelProperties.Test.Moving(new MinMax(7f, 2f), new MinMax(3f, 0.2f), new MinMax(1f, 0.3f))));
					list.Add(new LevelProperties.Test.State(0.5f, new LevelProperties.Test.Pattern[][]
					{
						new LevelProperties.Test.Pattern[1]
					}, LevelProperties.Test.States.Test, new LevelProperties.Test.Moving(new MinMax(7f, 2f), new MinMax(3f, 0.2f), new MinMax(1f, 0.3f))));
					list.Add(new LevelProperties.Test.State(0.1f, new LevelProperties.Test.Pattern[][]
					{
						new LevelProperties.Test.Pattern[1]
					}, LevelProperties.Test.States.SecondTest, new LevelProperties.Test.Moving(new MinMax(7f, 2f), new MinMax(3f, 0.2f), new MinMax(1f, 0.3f))));
					list.Add(new LevelProperties.Test.State(0.05f, new LevelProperties.Test.Pattern[][]
					{
						new LevelProperties.Test.Pattern[1]
					}, LevelProperties.Test.States.Generic, new LevelProperties.Test.Moving(new MinMax(7f, 2f), new MinMax(3f, 0.2f), new MinMax(1f, 0.3f))));
				}
			}
			else
			{
				hp = 1001;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Test.State(10f, new LevelProperties.Test.Pattern[][]
				{
					new LevelProperties.Test.Pattern[1]
				}, LevelProperties.Test.States.Main, new LevelProperties.Test.Moving(new MinMax(20f, 5f), new MinMax(20f, 5f), new MinMax(20f, 5f))));
			}
			return new LevelProperties.Test(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020002C4 RID: 708
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000144 RID: 324
			// (get) Token: 0x060007DA RID: 2010 RVA: 0x0004B373 File Offset: 0x00049773
			// (set) Token: 0x060007DB RID: 2011 RVA: 0x0004B37B File Offset: 0x0004977B
			private protected LevelProperties.Test properties { protected get; private set; }

			// Token: 0x060007DC RID: 2012 RVA: 0x0004B384 File Offset: 0x00049784
			public virtual void LevelInit(LevelProperties.Test properties)
			{
				this.properties = properties;
			}

			// Token: 0x060007DD RID: 2013 RVA: 0x0004B38D File Offset: 0x0004978D
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020002C5 RID: 709
		public enum States
		{
			// Token: 0x0400101D RID: 4125
			Main,
			// Token: 0x0400101E RID: 4126
			Generic,
			// Token: 0x0400101F RID: 4127
			Test,
			// Token: 0x04001020 RID: 4128
			SecondTest
		}

		// Token: 0x020002C6 RID: 710
		public enum Pattern
		{
			// Token: 0x04001022 RID: 4130
			Main,
			// Token: 0x04001023 RID: 4131
			Uninitialized
		}

		// Token: 0x020002C7 RID: 711
		public class State : AbstractLevelState<LevelProperties.Test.Pattern, LevelProperties.Test.States>
		{
			// Token: 0x060007DE RID: 2014 RVA: 0x0004B38F File Offset: 0x0004978F
			public State(float healthTrigger, LevelProperties.Test.Pattern[][] patterns, LevelProperties.Test.States stateName, LevelProperties.Test.Moving moving) : base(healthTrigger, patterns, stateName)
			{
				this.moving = moving;
			}

			// Token: 0x04001024 RID: 4132
			public readonly LevelProperties.Test.Moving moving;
		}

		// Token: 0x020002C8 RID: 712
		public class Moving : AbstractLevelPropertyGroup
		{
			// Token: 0x060007DF RID: 2015 RVA: 0x0004B3A2 File Offset: 0x000497A2
			public Moving(MinMax timeX, MinMax timeY, MinMax timeScale)
			{
				this.timeX = timeX;
				this.timeY = timeY;
				this.timeScale = timeScale;
			}

			// Token: 0x04001025 RID: 4133
			public readonly MinMax timeX;

			// Token: 0x04001026 RID: 4134
			public readonly MinMax timeY;

			// Token: 0x04001027 RID: 4135
			public readonly MinMax timeScale;
		}
	}

	// Token: 0x020002CA RID: 714
	public class TowerOfPower : AbstractLevelProperties<LevelProperties.TowerOfPower.State, LevelProperties.TowerOfPower.Pattern, LevelProperties.TowerOfPower.States>
	{
		// Token: 0x060007EC RID: 2028 RVA: 0x0004B3BF File Offset: 0x000497BF
		public TowerOfPower(int hp, Level.GoalTimes goalTimes, LevelProperties.TowerOfPower.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x060007ED RID: 2029 RVA: 0x0004B3CC File Offset: 0x000497CC
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 100f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x060007EE RID: 2030 RVA: 0x0004B427 File Offset: 0x00049827
		public static LevelProperties.TowerOfPower.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "D")
				{
					return LevelProperties.TowerOfPower.Pattern.Default;
				}
			}
			Debug.LogError("Pattern TowerOfPower.Pattern for  " + id + " not found.", null);
			return LevelProperties.TowerOfPower.Pattern.Uninitialized;
		}

		// Token: 0x060007EF RID: 2031 RVA: 0x0004B468 File Offset: 0x00049868
		public static LevelProperties.TowerOfPower GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.TowerOfPower.State> list = new List<LevelProperties.TowerOfPower.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.TowerOfPower.State(10f, new LevelProperties.TowerOfPower.Pattern[][]
						{
							new LevelProperties.TowerOfPower.Pattern[1]
						}, LevelProperties.TowerOfPower.States.Main, new LevelProperties.TowerOfPower.BossesPropertises("1,3,2,1,3,1,1,3,3,1,2,1,1,2,1,1,2,3,1,1,2,1,3,1,1,1,3,1,1,2,1", "2,3,3,4,5,6,7,8,8", 4, true, "1,1,1,1,1,2,2,2,2,2,2,2,2,2", "Slime,Frogs,Flower,Veggies,Flower,Pirate", "SallyStagePlay,Frogs,Clown,Bee,Mouse,Pirate,Flower,Robot,RumRunners", "Dragon,Clown,Bee,Train,SallyStagePlay,Mouse,Mouse,Veggies", "FlyingBlimp,FlyingBird,FlyingBlimp,FlyingBlimp", "FlyingGenie,FlyingBird,FlyingGenie,FlyingBird,FlyingBird,FlyingMermaid", "FlyingMermaid,FlyingGenie,Robot,FlyingMermaid,Robot,FlyingGenie,FlyingMermaid,FlyingBlimp", "DicePalaceBooze,DicePalaceChips,DicePalaceCigar", "DicePalaceDomino,DicePalaceRabbit,DicePalaceFlyingHorse,DicePalaceRabbit,DicePalaceCigar", "DicePalaceDomino,DicePalaceEightBall,DicePalaceRoulette,DicePalaceFlyingMemory,DicePalaceCigar,DicePalaceRoulette,DicePalaceEightBall", "DicePalaceBooze,DicePalaceEightBall,DicePalaceFlyingHorse,DicePalaceRoulette,DicePalaceCigar,DicePalaceChips"), new LevelProperties.TowerOfPower.SlotMachine(0, 7, "peashot,homing,boomerang,charge,bouncer,peashot,boomerang,bouncer", "spreadshot,peashot,None,charge,bouncer,spreadshot,boomerang,homing,spreadshot,None", "health_up_1,health_up_2,super_builder,parry_attack,smoke_dash,health_up_1,parry_attack,parry_plus,pit_saver,None,health_up_2,parry_plus,health_up_1", "beam,ghost,invincible,None", "health_up_1,health_up_2,None,extra_token,health_up_1,None,extra_token,None", "shmup,vert_beam,shield,None")));
					}
				}
				else
				{
					hp = 100;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.TowerOfPower.State(10f, new LevelProperties.TowerOfPower.Pattern[][]
					{
						new LevelProperties.TowerOfPower.Pattern[1]
					}, LevelProperties.TowerOfPower.States.Main, new LevelProperties.TowerOfPower.BossesPropertises("1,3,2,1,3,1,1,3,3,1,2,1,1,2,1,1,2,3,1,1,2,1,3,1,1,1,3,1,1,2,1", "2,3,3,4,5,6,7,8,8", 3, true, "1,1,1,1,1,1,1,2,1,1,1,1,1", "Slime,Frogs,Flower,Veggies,Flower,Pirate", "SallyStagePlay,Frogs,Clown,Bee,Mouse,Pirate,Flower,Robot,RumRunners", "Dragon,Clown,Bee,Train,SallyStagePlay,Mouse,Mouse,Veggies", "FlyingBlimp,FlyingBird,FlyingBlimp,FlyingBlimp", "FlyingGenie,FlyingBird,FlyingGenie,FlyingBird,FlyingBird,FlyingMermaid", "FlyingMermaid,FlyingGenie,Robot,FlyingMermaid,Robot,FlyingGenie,FlyingMermaid,FlyingBlimp", "DicePalaceBooze,DicePalaceChips,DicePalaceCigar", "DicePalaceDomino,DicePalaceRabbit,DicePalaceFlyingHorse,DicePalaceRabbit,DicePalaceCigar", "DicePalaceDomino,DicePalaceEightBall,DicePalaceRoulette,DicePalaceFlyingMemory,DicePalaceCigar,DicePalaceRoulette,DicePalaceEightBall", "DicePalaceBooze,DicePalaceEightBall,DicePalaceFlyingHorse,DicePalaceRoulette,DicePalaceCigar,DicePalaceChips"), new LevelProperties.TowerOfPower.SlotMachine(3, 10, "peashot,homing,boomerang,charge,bouncer,peashot,boomerang,bouncer", "spreadshot,peashot,None,charge,bouncer,spreadshot,boomerang,homing,spreadshot,None", "health_up_1,health_up_2,super_builder,parry_attack,smoke_dash,health_up_1,parry_attack,parry_plus,pit_saver,None,health_up_2,parry_plus,health_up_1", "beam,ghost,invincible,None", "health_up_1,health_up_2,None,extra_token,health_up_1,None,extra_token,None", "shmup,vert_beam,shield,None")));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.TowerOfPower.State(10f, new LevelProperties.TowerOfPower.Pattern[][]
				{
					new LevelProperties.TowerOfPower.Pattern[1]
				}, LevelProperties.TowerOfPower.States.Main, new LevelProperties.TowerOfPower.BossesPropertises("1,3,2,1,3,1,1,3,3,1,2,1,1,2,1,1,2,3,1,1,2,1,3,1,1,1,3,1,1,2,1", "2,3,3,4,5,6,7,8,8", 2, false, "0,0,0,1,1,1,1,1,1,1,1", "Slime,Frogs,Flower,Veggies,Flower,Pirate", "SallyStagePlay,Frogs,Clown,Bee,Mouse,Pirate,Flower,Robot,RumRunners", "Dragon,Clown,Bee,Train,SallyStagePlay,Mouse,Mouse,Veggies", "FlyingBlimp,FlyingBird,FlyingBlimp,FlyingBlimp", "FlyingGenie,FlyingBird,FlyingGenie,FlyingBird,FlyingBird,FlyingMermaid", "FlyingMermaid,FlyingGenie,Robot,FlyingMermaid,Robot,FlyingGenie,FlyingMermaid,FlyingBlimp", "DicePalaceBooze,DicePalaceChips,DicePalaceCigar", "DicePalaceDomino,DicePalaceRabbit,DicePalaceFlyingHorse,DicePalaceRabbit,DicePalaceCigar", "DicePalaceDomino,DicePalaceEightBall,DicePalaceRoulette,DicePalaceFlyingMemory,DicePalaceCigar,DicePalaceRoulette,DicePalaceEightBall", "DicePalaceBooze,DicePalaceEightBall,DicePalaceFlyingHorse,DicePalaceRoulette,DicePalaceCigar,DicePalaceChips"), new LevelProperties.TowerOfPower.SlotMachine(3, 7, "peashot,homing,boomerang,charge,bouncer,peashot,boomerang,bouncer", "spreadshot,peashot,None,charge,bouncer,spreadshot,boomerang,homing,spreadshot,None", "health_up_1,health_up_2,super_builder,parry_attack,smoke_dash,health_up_1,parry_attack,parry_plus,pit_saver,None,health_up_2,parry_plus,health_up_1", "beam,ghost,invincible,None", "health_up_1,health_up_2,None,extra_token,health_up_1,None,extra_token,None", "shmup,vert_beam,shield,None")));
			}
			return new LevelProperties.TowerOfPower(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020002CB RID: 715
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000149 RID: 329
			// (get) Token: 0x060007F1 RID: 2033 RVA: 0x0004B6AC File Offset: 0x00049AAC
			// (set) Token: 0x060007F2 RID: 2034 RVA: 0x0004B6B4 File Offset: 0x00049AB4
			private protected LevelProperties.TowerOfPower properties { protected get; private set; }

			// Token: 0x060007F3 RID: 2035 RVA: 0x0004B6BD File Offset: 0x00049ABD
			public virtual void LevelInit(LevelProperties.TowerOfPower properties)
			{
				this.properties = properties;
			}

			// Token: 0x060007F4 RID: 2036 RVA: 0x0004B6C6 File Offset: 0x00049AC6
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020002CC RID: 716
		public enum States
		{
			// Token: 0x0400102E RID: 4142
			Main,
			// Token: 0x0400102F RID: 4143
			Generic
		}

		// Token: 0x020002CD RID: 717
		public enum Pattern
		{
			// Token: 0x04001031 RID: 4145
			Default,
			// Token: 0x04001032 RID: 4146
			Uninitialized
		}

		// Token: 0x020002CE RID: 718
		public class State : AbstractLevelState<LevelProperties.TowerOfPower.Pattern, LevelProperties.TowerOfPower.States>
		{
			// Token: 0x060007F5 RID: 2037 RVA: 0x0004B6C8 File Offset: 0x00049AC8
			public State(float healthTrigger, LevelProperties.TowerOfPower.Pattern[][] patterns, LevelProperties.TowerOfPower.States stateName, LevelProperties.TowerOfPower.BossesPropertises bossesPropertises, LevelProperties.TowerOfPower.SlotMachine slotMachine) : base(healthTrigger, patterns, stateName)
			{
				this.bossesPropertises = bossesPropertises;
				this.slotMachine = slotMachine;
			}

			// Token: 0x04001033 RID: 4147
			public readonly LevelProperties.TowerOfPower.BossesPropertises bossesPropertises;

			// Token: 0x04001034 RID: 4148
			public readonly LevelProperties.TowerOfPower.SlotMachine slotMachine;
		}

		// Token: 0x020002CF RID: 719
		public class BossesPropertises : AbstractLevelPropertyGroup
		{
			// Token: 0x060007F6 RID: 2038 RVA: 0x0004B6E4 File Offset: 0x00049AE4
			public BossesPropertises(string ShmupCountString, string ShmupPlacementString, int KingDiceMiniBossCount, bool DevilFinalBoss, string MiniBossDifficultyByIndex, string PoolOneString, string PoolTwoString, string PoolThreeString, string ShmupPoolOneString, string ShmupPoolTwoString, string ShmupPoolThreeString, string KingDicePoolOneString, string KingDicePoolTwoString, string KingDicePoolThreeString, string KingDicePoolFourString)
			{
				this.ShmupCountString = ShmupCountString;
				this.ShmupPlacementString = ShmupPlacementString;
				this.KingDiceMiniBossCount = KingDiceMiniBossCount;
				this.DevilFinalBoss = DevilFinalBoss;
				this.MiniBossDifficultyByIndex = MiniBossDifficultyByIndex;
				this.PoolOneString = PoolOneString;
				this.PoolTwoString = PoolTwoString;
				this.PoolThreeString = PoolThreeString;
				this.ShmupPoolOneString = ShmupPoolOneString;
				this.ShmupPoolTwoString = ShmupPoolTwoString;
				this.ShmupPoolThreeString = ShmupPoolThreeString;
				this.KingDicePoolOneString = KingDicePoolOneString;
				this.KingDicePoolTwoString = KingDicePoolTwoString;
				this.KingDicePoolThreeString = KingDicePoolThreeString;
				this.KingDicePoolFourString = KingDicePoolFourString;
			}

			// Token: 0x04001035 RID: 4149
			public readonly string ShmupCountString;

			// Token: 0x04001036 RID: 4150
			public readonly string ShmupPlacementString;

			// Token: 0x04001037 RID: 4151
			public readonly int KingDiceMiniBossCount;

			// Token: 0x04001038 RID: 4152
			public readonly bool DevilFinalBoss;

			// Token: 0x04001039 RID: 4153
			public readonly string MiniBossDifficultyByIndex;

			// Token: 0x0400103A RID: 4154
			public readonly string PoolOneString;

			// Token: 0x0400103B RID: 4155
			public readonly string PoolTwoString;

			// Token: 0x0400103C RID: 4156
			public readonly string PoolThreeString;

			// Token: 0x0400103D RID: 4157
			public readonly string ShmupPoolOneString;

			// Token: 0x0400103E RID: 4158
			public readonly string ShmupPoolTwoString;

			// Token: 0x0400103F RID: 4159
			public readonly string ShmupPoolThreeString;

			// Token: 0x04001040 RID: 4160
			public readonly string KingDicePoolOneString;

			// Token: 0x04001041 RID: 4161
			public readonly string KingDicePoolTwoString;

			// Token: 0x04001042 RID: 4162
			public readonly string KingDicePoolThreeString;

			// Token: 0x04001043 RID: 4163
			public readonly string KingDicePoolFourString;
		}

		// Token: 0x020002D0 RID: 720
		public class SlotMachine : AbstractLevelPropertyGroup
		{
			// Token: 0x060007F7 RID: 2039 RVA: 0x0004B76C File Offset: 0x00049B6C
			public SlotMachine(int DefaultStartingToken, int MinRankToGainToken, string SlotOneWeapon, string SlotTwoWeapon, string SlotThreeCharm, string SlotFourSuper, string SlotThreeChalice, string SlotFourChalice)
			{
				this.DefaultStartingToken = DefaultStartingToken;
				this.MinRankToGainToken = MinRankToGainToken;
				this.SlotOneWeapon = SlotOneWeapon;
				this.SlotTwoWeapon = SlotTwoWeapon;
				this.SlotThreeCharm = SlotThreeCharm;
				this.SlotFourSuper = SlotFourSuper;
				this.SlotThreeChalice = SlotThreeChalice;
				this.SlotFourChalice = SlotFourChalice;
			}

			// Token: 0x04001044 RID: 4164
			public readonly int DefaultStartingToken;

			// Token: 0x04001045 RID: 4165
			public readonly int MinRankToGainToken;

			// Token: 0x04001046 RID: 4166
			public readonly string SlotOneWeapon;

			// Token: 0x04001047 RID: 4167
			public readonly string SlotTwoWeapon;

			// Token: 0x04001048 RID: 4168
			public readonly string SlotThreeCharm;

			// Token: 0x04001049 RID: 4169
			public readonly string SlotFourSuper;

			// Token: 0x0400104A RID: 4170
			public readonly string SlotThreeChalice;

			// Token: 0x0400104B RID: 4171
			public readonly string SlotFourChalice;
		}
	}

	// Token: 0x020002D2 RID: 722
	public class Train : AbstractLevelProperties<LevelProperties.Train.State, LevelProperties.Train.Pattern, LevelProperties.Train.States>
	{
		// Token: 0x0600080A RID: 2058 RVA: 0x0004B7BC File Offset: 0x00049BBC
		public Train(int hp, Level.GoalTimes goalTimes, LevelProperties.Train.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600080B RID: 2059 RVA: 0x0004B7C8 File Offset: 0x00049BC8
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 500f;
				break;
			case Level.Mode.Normal:
				timeline.health = 500f;
				break;
			case Level.Mode.Hard:
				timeline.health = 500f;
				break;
			}
			return timeline;
		}

		// Token: 0x0600080C RID: 2060 RVA: 0x0004B823 File Offset: 0x00049C23
		public static LevelProperties.Train.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "T")
				{
					return LevelProperties.Train.Pattern.Train;
				}
			}
			Debug.LogError("Pattern Train.Pattern for  " + id + " not found.", null);
			return LevelProperties.Train.Pattern.Uninitialized;
		}

		// Token: 0x0600080D RID: 2061 RVA: 0x0004B864 File Offset: 0x00049C64
		public static LevelProperties.Train GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Train.State> list = new List<LevelProperties.Train.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 500;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Train.State(10f, new LevelProperties.Train.Pattern[][]
						{
							new LevelProperties.Train.Pattern[1]
						}, LevelProperties.Train.States.Main, new LevelProperties.Train.BlindSpecter(425, 3, new MinMax(100f, 300f), new MinMax(3.4f, 4.3f), new MinMax(0.5f, 0.7f), 1.4f, 3.5f), new LevelProperties.Train.Skeleton(325f, new MinMax(2f, 0.5f), 2f, 1.5f), new LevelProperties.Train.LollipopGhouls(200f, 1.5f, 0.5f, 1f, 1.8f, 600f, 2.7f, 1f, 275f, 1.35f, 5f, 900f), new LevelProperties.Train.Engine(200f, 2.9f, 3.6f, new MinMax(4.5f, 6f), 1f, -300f, 425f, 0.35f, 800, new MinMax(-325f, 325f), new MinMax(400f, 650f), 3.8f, 650f, 850f, 1000f), new LevelProperties.Train.Pumpkins("1,2,4", 4f, 250f, 1.5f, 4.5f)));
					}
				}
				else
				{
					hp = 500;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Train.State(10f, new LevelProperties.Train.Pattern[][]
					{
						new LevelProperties.Train.Pattern[1]
					}, LevelProperties.Train.States.Main, new LevelProperties.Train.BlindSpecter(425, 2, new MinMax(60f, 220f), new MinMax(3.9f, 4.8f), new MinMax(0.5f, 0.7f), 1.4f, 3.5f), new LevelProperties.Train.Skeleton(325f, new MinMax(2.5f, 0.5f), 2f, 2f), new LevelProperties.Train.LollipopGhouls(200f, 2f, 1.25f, 1f, 2.6f, 700f, 3.4f, 1f, 250f, 1.35f, 5f, 900f), new LevelProperties.Train.Engine(200f, 3.3f, 5f, new MinMax(4.5f, 6f), 1f, 300f, -425f, 0.45f, 800, new MinMax(-350f, 350f), new MinMax(350f, 600f), 4.2f, 650f, 750f, 1000f), new LevelProperties.Train.Pumpkins("1,2", 4f, 200f, 1.5f, 5f)));
				}
			}
			else
			{
				hp = 500;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Train.State(10f, new LevelProperties.Train.Pattern[][]
				{
					new LevelProperties.Train.Pattern[1]
				}, LevelProperties.Train.States.Main, new LevelProperties.Train.BlindSpecter(400, 2, new MinMax(150f, 300f), new MinMax(3.5f, 4.5f), new MinMax(0.7f, 0.9f), 3f, 3.5f), new LevelProperties.Train.Skeleton(320f, new MinMax(3.5f, 1.5f), 2f, 2.3f), new LevelProperties.Train.LollipopGhouls(180f, 2f, 1.5f, 1f, 3.3f, 600f, 5.5f, 1f, 250f, 1.35f, 5f, 800f), new LevelProperties.Train.Engine(230f, 3.3f, 5f, new MinMax(4f, 6f), 1.8f, 0f, 0f, 0.25f, 1000, new MinMax(-300f, 300f), new MinMax(500f, 800f), 4.2f, 650f, 1000f, 1000f), new LevelProperties.Train.Pumpkins("0", 4f, 200f, 1.5f, 5f)));
			}
			return new LevelProperties.Train(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020002D3 RID: 723
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000150 RID: 336
			// (get) Token: 0x0600080F RID: 2063 RVA: 0x0004BCFF File Offset: 0x0004A0FF
			// (set) Token: 0x06000810 RID: 2064 RVA: 0x0004BD07 File Offset: 0x0004A107
			private protected LevelProperties.Train properties { protected get; private set; }

			// Token: 0x06000811 RID: 2065 RVA: 0x0004BD10 File Offset: 0x0004A110
			public virtual void LevelInit(LevelProperties.Train properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000812 RID: 2066 RVA: 0x0004BD19 File Offset: 0x0004A119
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020002D4 RID: 724
		public enum States
		{
			// Token: 0x04001052 RID: 4178
			Main,
			// Token: 0x04001053 RID: 4179
			Generic
		}

		// Token: 0x020002D5 RID: 725
		public enum Pattern
		{
			// Token: 0x04001055 RID: 4181
			Train,
			// Token: 0x04001056 RID: 4182
			Uninitialized
		}

		// Token: 0x020002D6 RID: 726
		public class State : AbstractLevelState<LevelProperties.Train.Pattern, LevelProperties.Train.States>
		{
			// Token: 0x06000813 RID: 2067 RVA: 0x0004BD1B File Offset: 0x0004A11B
			public State(float healthTrigger, LevelProperties.Train.Pattern[][] patterns, LevelProperties.Train.States stateName, LevelProperties.Train.BlindSpecter blindSpecter, LevelProperties.Train.Skeleton skeleton, LevelProperties.Train.LollipopGhouls lollipopGhouls, LevelProperties.Train.Engine engine, LevelProperties.Train.Pumpkins pumpkins) : base(healthTrigger, patterns, stateName)
			{
				this.blindSpecter = blindSpecter;
				this.skeleton = skeleton;
				this.lollipopGhouls = lollipopGhouls;
				this.engine = engine;
				this.pumpkins = pumpkins;
			}

			// Token: 0x04001057 RID: 4183
			public readonly LevelProperties.Train.BlindSpecter blindSpecter;

			// Token: 0x04001058 RID: 4184
			public readonly LevelProperties.Train.Skeleton skeleton;

			// Token: 0x04001059 RID: 4185
			public readonly LevelProperties.Train.LollipopGhouls lollipopGhouls;

			// Token: 0x0400105A RID: 4186
			public readonly LevelProperties.Train.Engine engine;

			// Token: 0x0400105B RID: 4187
			public readonly LevelProperties.Train.Pumpkins pumpkins;
		}

		// Token: 0x020002D7 RID: 727
		public class BlindSpecter : AbstractLevelPropertyGroup
		{
			// Token: 0x06000814 RID: 2068 RVA: 0x0004BD4E File Offset: 0x0004A14E
			public BlindSpecter(int health, int attackLoops, MinMax heightMax, MinMax timeX, MinMax timeY, float hesitate, float eyeHealth)
			{
				this.health = health;
				this.attackLoops = attackLoops;
				this.heightMax = heightMax;
				this.timeX = timeX;
				this.timeY = timeY;
				this.hesitate = hesitate;
				this.eyeHealth = eyeHealth;
			}

			// Token: 0x0400105C RID: 4188
			public readonly int health;

			// Token: 0x0400105D RID: 4189
			public readonly int attackLoops;

			// Token: 0x0400105E RID: 4190
			public readonly MinMax heightMax;

			// Token: 0x0400105F RID: 4191
			public readonly MinMax timeX;

			// Token: 0x04001060 RID: 4192
			public readonly MinMax timeY;

			// Token: 0x04001061 RID: 4193
			public readonly float hesitate;

			// Token: 0x04001062 RID: 4194
			public readonly float eyeHealth;
		}

		// Token: 0x020002D8 RID: 728
		public class Skeleton : AbstractLevelPropertyGroup
		{
			// Token: 0x06000815 RID: 2069 RVA: 0x0004BD8B File Offset: 0x0004A18B
			public Skeleton(float health, MinMax attackDelay, float appearDelay, float slapHoldTime)
			{
				this.health = health;
				this.attackDelay = attackDelay;
				this.appearDelay = appearDelay;
				this.slapHoldTime = slapHoldTime;
			}

			// Token: 0x04001063 RID: 4195
			public readonly float health;

			// Token: 0x04001064 RID: 4196
			public readonly MinMax attackDelay;

			// Token: 0x04001065 RID: 4197
			public readonly float appearDelay;

			// Token: 0x04001066 RID: 4198
			public readonly float slapHoldTime;
		}

		// Token: 0x020002D9 RID: 729
		public class LollipopGhouls : AbstractLevelPropertyGroup
		{
			// Token: 0x06000816 RID: 2070 RVA: 0x0004BDB0 File Offset: 0x0004A1B0
			public LollipopGhouls(float health, float initDelay, float mainDelay, float warningTime, float moveTime, float moveDistance, float cannonDelay, float ghostDelay, float ghostSpeed, float ghostAimSpeed, float ghostHealth, float skullSpeed)
			{
				this.health = health;
				this.initDelay = initDelay;
				this.mainDelay = mainDelay;
				this.warningTime = warningTime;
				this.moveTime = moveTime;
				this.moveDistance = moveDistance;
				this.cannonDelay = cannonDelay;
				this.ghostDelay = ghostDelay;
				this.ghostSpeed = ghostSpeed;
				this.ghostAimSpeed = ghostAimSpeed;
				this.ghostHealth = ghostHealth;
				this.skullSpeed = skullSpeed;
			}

			// Token: 0x04001067 RID: 4199
			public readonly float health;

			// Token: 0x04001068 RID: 4200
			public readonly float initDelay;

			// Token: 0x04001069 RID: 4201
			public readonly float mainDelay;

			// Token: 0x0400106A RID: 4202
			public readonly float warningTime;

			// Token: 0x0400106B RID: 4203
			public readonly float moveTime;

			// Token: 0x0400106C RID: 4204
			public readonly float moveDistance;

			// Token: 0x0400106D RID: 4205
			public readonly float cannonDelay;

			// Token: 0x0400106E RID: 4206
			public readonly float ghostDelay;

			// Token: 0x0400106F RID: 4207
			public readonly float ghostSpeed;

			// Token: 0x04001070 RID: 4208
			public readonly float ghostAimSpeed;

			// Token: 0x04001071 RID: 4209
			public readonly float ghostHealth;

			// Token: 0x04001072 RID: 4210
			public readonly float skullSpeed;
		}

		// Token: 0x020002DA RID: 730
		public class Engine : AbstractLevelPropertyGroup
		{
			// Token: 0x06000817 RID: 2071 RVA: 0x0004BE20 File Offset: 0x0004A220
			public Engine(float health, float forwardTime, float backTime, MinMax doorTime, float tailDelay, float maxDist, float minDist, float fireDelay, int fireGravity, MinMax fireVelocityX, MinMax fireVelocityY, float projectileDelay, float projectileUpSpeed, float projectileXSpeed, float projectileGravity)
			{
				this.health = health;
				this.forwardTime = forwardTime;
				this.backTime = backTime;
				this.doorTime = doorTime;
				this.tailDelay = tailDelay;
				this.maxDist = maxDist;
				this.minDist = minDist;
				this.fireDelay = fireDelay;
				this.fireGravity = fireGravity;
				this.fireVelocityX = fireVelocityX;
				this.fireVelocityY = fireVelocityY;
				this.projectileDelay = projectileDelay;
				this.projectileUpSpeed = projectileUpSpeed;
				this.projectileXSpeed = projectileXSpeed;
				this.projectileGravity = projectileGravity;
			}

			// Token: 0x04001073 RID: 4211
			public readonly float health;

			// Token: 0x04001074 RID: 4212
			public readonly float forwardTime;

			// Token: 0x04001075 RID: 4213
			public readonly float backTime;

			// Token: 0x04001076 RID: 4214
			public readonly MinMax doorTime;

			// Token: 0x04001077 RID: 4215
			public readonly float tailDelay;

			// Token: 0x04001078 RID: 4216
			public readonly float maxDist;

			// Token: 0x04001079 RID: 4217
			public readonly float minDist;

			// Token: 0x0400107A RID: 4218
			public readonly float fireDelay;

			// Token: 0x0400107B RID: 4219
			public readonly int fireGravity;

			// Token: 0x0400107C RID: 4220
			public readonly MinMax fireVelocityX;

			// Token: 0x0400107D RID: 4221
			public readonly MinMax fireVelocityY;

			// Token: 0x0400107E RID: 4222
			public readonly float projectileDelay;

			// Token: 0x0400107F RID: 4223
			public readonly float projectileUpSpeed;

			// Token: 0x04001080 RID: 4224
			public readonly float projectileXSpeed;

			// Token: 0x04001081 RID: 4225
			public readonly float projectileGravity;
		}

		// Token: 0x020002DB RID: 731
		public class Pumpkins : AbstractLevelPropertyGroup
		{
			// Token: 0x06000818 RID: 2072 RVA: 0x0004BEA8 File Offset: 0x0004A2A8
			public Pumpkins(string bossPhaseOn, float health, float speed, float fallTime, float delay)
			{
				this.bossPhaseOn = bossPhaseOn;
				this.health = health;
				this.speed = speed;
				this.fallTime = fallTime;
				this.delay = delay;
			}

			// Token: 0x04001082 RID: 4226
			public readonly string bossPhaseOn;

			// Token: 0x04001083 RID: 4227
			public readonly float health;

			// Token: 0x04001084 RID: 4228
			public readonly float speed;

			// Token: 0x04001085 RID: 4229
			public readonly float fallTime;

			// Token: 0x04001086 RID: 4230
			public readonly float delay;
		}
	}

	// Token: 0x020002DD RID: 733
	public class Tutorial : AbstractLevelProperties<LevelProperties.Tutorial.State, LevelProperties.Tutorial.Pattern, LevelProperties.Tutorial.States>
	{
		// Token: 0x0600082A RID: 2090 RVA: 0x0004BED5 File Offset: 0x0004A2D5
		public Tutorial(int hp, Level.GoalTimes goalTimes, LevelProperties.Tutorial.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600082B RID: 2091 RVA: 0x0004BEE4 File Offset: 0x0004A2E4
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 5000f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x0600082C RID: 2092 RVA: 0x0004BF3F File Offset: 0x0004A33F
		public static LevelProperties.Tutorial.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "A")
				{
					return LevelProperties.Tutorial.Pattern.A;
				}
			}
			Debug.LogError("Pattern Tutorial.Pattern for  " + id + " not found.", null);
			return LevelProperties.Tutorial.Pattern.Uninitialized;
		}

		// Token: 0x0600082D RID: 2093 RVA: 0x0004BF80 File Offset: 0x0004A380
		public static LevelProperties.Tutorial GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Tutorial.State> list = new List<LevelProperties.Tutorial.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Tutorial.State(10f, new LevelProperties.Tutorial.Pattern[][]
						{
							new LevelProperties.Tutorial.Pattern[0]
						}, LevelProperties.Tutorial.States.Main));
					}
				}
				else
				{
					hp = 5000;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Tutorial.State(10f, new LevelProperties.Tutorial.Pattern[][]
					{
						new LevelProperties.Tutorial.Pattern[1]
					}, LevelProperties.Tutorial.States.Main));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Tutorial.State(10f, new LevelProperties.Tutorial.Pattern[][]
				{
					new LevelProperties.Tutorial.Pattern[0]
				}, LevelProperties.Tutorial.States.Main));
			}
			return new LevelProperties.Tutorial(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020002DE RID: 734
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x17000155 RID: 341
			// (get) Token: 0x0600082F RID: 2095 RVA: 0x0004C07F File Offset: 0x0004A47F
			// (set) Token: 0x06000830 RID: 2096 RVA: 0x0004C087 File Offset: 0x0004A487
			private protected LevelProperties.Tutorial properties { protected get; private set; }

			// Token: 0x06000831 RID: 2097 RVA: 0x0004C090 File Offset: 0x0004A490
			public virtual void LevelInit(LevelProperties.Tutorial properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000832 RID: 2098 RVA: 0x0004C099 File Offset: 0x0004A499
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020002DF RID: 735
		public enum States
		{
			// Token: 0x0400109D RID: 4253
			Main,
			// Token: 0x0400109E RID: 4254
			Generic
		}

		// Token: 0x020002E0 RID: 736
		public enum Pattern
		{
			// Token: 0x040010A0 RID: 4256
			A,
			// Token: 0x040010A1 RID: 4257
			Uninitialized
		}

		// Token: 0x020002E1 RID: 737
		public class State : AbstractLevelState<LevelProperties.Tutorial.Pattern, LevelProperties.Tutorial.States>
		{
			// Token: 0x06000833 RID: 2099 RVA: 0x0004C09B File Offset: 0x0004A49B
			public State(float healthTrigger, LevelProperties.Tutorial.Pattern[][] patterns, LevelProperties.Tutorial.States stateName) : base(healthTrigger, patterns, stateName)
			{
			}
		}
	}

	// Token: 0x020002E3 RID: 739
	public class Veggies : AbstractLevelProperties<LevelProperties.Veggies.State, LevelProperties.Veggies.Pattern, LevelProperties.Veggies.States>
	{
		// Token: 0x0600083E RID: 2110 RVA: 0x0004C0A6 File Offset: 0x0004A4A6
		public Veggies(int hp, Level.GoalTimes goalTimes, LevelProperties.Veggies.State[] states) : base((float)hp, goalTimes, states)
		{
		}

		// Token: 0x0600083F RID: 2111 RVA: 0x0004C0B4 File Offset: 0x0004A4B4
		public Level.Timeline CreateTimeline(Level.Mode mode)
		{
			Level.Timeline timeline = new Level.Timeline();
			switch (mode)
			{
			default:
				timeline.health = 100f;
				break;
			case Level.Mode.Normal:
				timeline.health = 1000f;
				break;
			case Level.Mode.Hard:
				timeline.health = 100f;
				break;
			}
			return timeline;
		}

		// Token: 0x06000840 RID: 2112 RVA: 0x0004C110 File Offset: 0x0004A510
		public static LevelProperties.Veggies.Pattern GetPatternByID(string id)
		{
			id = id.ToUpper();
			if (id != null)
			{
				if (id == "P")
				{
					return LevelProperties.Veggies.Pattern.Potato;
				}
				if (id == "O")
				{
					return LevelProperties.Veggies.Pattern.Onion;
				}
				if (id == "B")
				{
					return LevelProperties.Veggies.Pattern.Beet;
				}
				if (id == "H")
				{
					return LevelProperties.Veggies.Pattern.Peas;
				}
				if (id == "C")
				{
					return LevelProperties.Veggies.Pattern.Carrot;
				}
			}
			Debug.LogError("Pattern Veggies.Pattern for  " + id + " not found.", null);
			return LevelProperties.Veggies.Pattern.Uninitialized;
		}

		// Token: 0x06000841 RID: 2113 RVA: 0x0004C1A4 File Offset: 0x0004A5A4
		public static LevelProperties.Veggies GetMode(Level.Mode mode)
		{
			int hp = 0;
			Level.GoalTimes goalTimes = null;
			List<LevelProperties.Veggies.State> list = new List<LevelProperties.Veggies.State>();
			if (mode != Level.Mode.Easy)
			{
				if (mode != Level.Mode.Normal)
				{
					if (mode == Level.Mode.Hard)
					{
						hp = 100;
						goalTimes = new Level.GoalTimes(120f, 120f, 120f);
						list.Add(new LevelProperties.Veggies.State(10f, new LevelProperties.Veggies.Pattern[][]
						{
							new LevelProperties.Veggies.Pattern[0]
						}, LevelProperties.Veggies.States.Main, new LevelProperties.Veggies.Potato(400, 2.5f, 3, 1f, 4, new MinMax(0.1f, 0.4f), -1000f), new LevelProperties.Veggies.Onion(425, 6f, new MinMax(38f, 38f), new string[]
						{
							"280,500,330,630,280,400,350,550,280,630,300",
							"630,280,400,500,320,450,280,630,505,330,630",
							"280,630,350,550,405,460,280,635,535,280,600",
							"330,480,630,280,520,630,280,350,450,280,570",
							"450,630,350,280,400,560,460,325,630,280,420",
							"630,450,280,330,550,415,630,580,280,500,330",
							"330,280,505,630,450,630,280,580,330,400,550"
						}, 0.1f, 0.005f, 0.9f, new MinMax(5f, 7f), 775f, 915f, 2f, 260), new LevelProperties.Veggies.Beet(0, 0f, new string[0], 0f, 0, 0f, 0f, 0f, new MinMax(0f, 1f)), new LevelProperties.Veggies.Peas(0), new LevelProperties.Veggies.Carrot(475, 1.5f, new MinMax(5f, 6f), 2, 1.5f, 850f, 1f, 260f, 2.3f, 4, 0.8f, new MinMax(0f, 0f), 550f, new MinMax(5f, 7f))));
					}
				}
				else
				{
					hp = 1000;
					goalTimes = new Level.GoalTimes(120f, 120f, 120f);
					list.Add(new LevelProperties.Veggies.State(10f, new LevelProperties.Veggies.Pattern[][]
					{
						new LevelProperties.Veggies.Pattern[]
						{
							LevelProperties.Veggies.Pattern.Potato,
							LevelProperties.Veggies.Pattern.Onion,
							LevelProperties.Veggies.Pattern.Carrot
						}
					}, LevelProperties.Veggies.States.Main, new LevelProperties.Veggies.Potato(360, 3f, 3, 1f, 4, new MinMax(0.2f, 0.6f), -700f), new LevelProperties.Veggies.Onion(400, 6f, new MinMax(38f, 38f), new string[]
					{
						"280,630,400,500,335,450,280,635,535,280,525",
						"450,280,350,630,280,560,460,335,630,510,360",
						"630,280,470,550,320,400,280,630,505,360,280",
						"450,550,350,630,280,400,300,500,280,630,315",
						"330,630,415,280,520,630,280,450,500,280,570",
						"450,630,400,280,330,570,450,350,280,630,500",
						"630,400,280,550,630,350,280,450,500,280,400"
					}, 0.2f, 0.2f, 1.1f, new MinMax(4f, 6f), 750f, 850f, 2.5f, 230), new LevelProperties.Veggies.Beet(5, 2f, new string[]
					{
						"2,4,2"
					}, 800f, 800, 45f, 1f, 2f, new MinMax(4f, 7f)), new LevelProperties.Veggies.Peas(5), new LevelProperties.Veggies.Carrot(475, 0f, new MinMax(6.8f, 8f), 3, 1.5f, 800f, 1f, 250f, 2.3f, 4, 1.2f, new MinMax(0f, 0f), 550f, new MinMax(4f, 6f))));
				}
			}
			else
			{
				hp = 100;
				goalTimes = new Level.GoalTimes(120f, 120f, 120f);
				list.Add(new LevelProperties.Veggies.State(10f, new LevelProperties.Veggies.Pattern[][]
				{
					new LevelProperties.Veggies.Pattern[0]
				}, LevelProperties.Veggies.States.Main, new LevelProperties.Veggies.Potato(450, 3f, 3, 1.2f, 3, new MinMax(0.4f, 0.7f), -600f), new LevelProperties.Veggies.Onion(0, 0f, new MinMax(0f, 1f), new string[0], 0f, 0f, 0f, new MinMax(0f, 1f), 0f, 0f, 0f, 0), new LevelProperties.Veggies.Beet(0, 0f, new string[0], 0f, 0, 0f, 0f, 0f, new MinMax(0f, 1f)), new LevelProperties.Veggies.Peas(0), new LevelProperties.Veggies.Carrot(450, 0f, new MinMax(6f, 7f), 2, 2f, 700f, 1f, 200f, 2.2f, 4, 1.5f, new MinMax(0f, 0f), 550f, new MinMax(3f, 5f))));
			}
			return new LevelProperties.Veggies(hp, goalTimes, list.ToArray());
		}

		// Token: 0x020002E4 RID: 740
		public class Entity : AbstractLevelEntity
		{
			// Token: 0x1700015A RID: 346
			// (get) Token: 0x06000843 RID: 2115 RVA: 0x0004C673 File Offset: 0x0004AA73
			// (set) Token: 0x06000844 RID: 2116 RVA: 0x0004C67B File Offset: 0x0004AA7B
			private protected LevelProperties.Veggies properties { protected get; private set; }

			// Token: 0x06000845 RID: 2117 RVA: 0x0004C684 File Offset: 0x0004AA84
			public virtual void LevelInit(LevelProperties.Veggies properties)
			{
				this.properties = properties;
			}

			// Token: 0x06000846 RID: 2118 RVA: 0x0004C68D File Offset: 0x0004AA8D
			public virtual void LevelInitWithGroup(AbstractLevelPropertyGroup propertyGroup)
			{
			}
		}

		// Token: 0x020002E5 RID: 741
		public enum States
		{
			// Token: 0x040010A9 RID: 4265
			Main,
			// Token: 0x040010AA RID: 4266
			Generic
		}

		// Token: 0x020002E6 RID: 742
		public enum Pattern
		{
			// Token: 0x040010AC RID: 4268
			Potato,
			// Token: 0x040010AD RID: 4269
			Onion,
			// Token: 0x040010AE RID: 4270
			Beet,
			// Token: 0x040010AF RID: 4271
			Peas,
			// Token: 0x040010B0 RID: 4272
			Carrot,
			// Token: 0x040010B1 RID: 4273
			Uninitialized
		}

		// Token: 0x020002E7 RID: 743
		public class State : AbstractLevelState<LevelProperties.Veggies.Pattern, LevelProperties.Veggies.States>
		{
			// Token: 0x06000847 RID: 2119 RVA: 0x0004C68F File Offset: 0x0004AA8F
			public State(float healthTrigger, LevelProperties.Veggies.Pattern[][] patterns, LevelProperties.Veggies.States stateName, LevelProperties.Veggies.Potato potato, LevelProperties.Veggies.Onion onion, LevelProperties.Veggies.Beet beet, LevelProperties.Veggies.Peas peas, LevelProperties.Veggies.Carrot carrot) : base(healthTrigger, patterns, stateName)
			{
				this.potato = potato;
				this.onion = onion;
				this.beet = beet;
				this.peas = peas;
				this.carrot = carrot;
			}

			// Token: 0x040010B2 RID: 4274
			public readonly LevelProperties.Veggies.Potato potato;

			// Token: 0x040010B3 RID: 4275
			public readonly LevelProperties.Veggies.Onion onion;

			// Token: 0x040010B4 RID: 4276
			public readonly LevelProperties.Veggies.Beet beet;

			// Token: 0x040010B5 RID: 4277
			public readonly LevelProperties.Veggies.Peas peas;

			// Token: 0x040010B6 RID: 4278
			public readonly LevelProperties.Veggies.Carrot carrot;
		}

		// Token: 0x020002E8 RID: 744
		public class Potato : AbstractLevelPropertyGroup
		{
			// Token: 0x06000848 RID: 2120 RVA: 0x0004C6C2 File Offset: 0x0004AAC2
			public Potato(int hp, float idleTime, int seriesCount, float seriesDelay, int bulletCount, MinMax bulletDelay, float bulletSpeed)
			{
				this.hp = hp;
				this.idleTime = idleTime;
				this.seriesCount = seriesCount;
				this.seriesDelay = seriesDelay;
				this.bulletCount = bulletCount;
				this.bulletDelay = bulletDelay;
				this.bulletSpeed = bulletSpeed;
			}

			// Token: 0x040010B7 RID: 4279
			public readonly int hp;

			// Token: 0x040010B8 RID: 4280
			public readonly float idleTime;

			// Token: 0x040010B9 RID: 4281
			public readonly int seriesCount;

			// Token: 0x040010BA RID: 4282
			public readonly float seriesDelay;

			// Token: 0x040010BB RID: 4283
			public readonly int bulletCount;

			// Token: 0x040010BC RID: 4284
			public readonly MinMax bulletDelay;

			// Token: 0x040010BD RID: 4285
			public readonly float bulletSpeed;
		}

		// Token: 0x020002E9 RID: 745
		public class Onion : AbstractLevelPropertyGroup
		{
			// Token: 0x06000849 RID: 2121 RVA: 0x0004C700 File Offset: 0x0004AB00
			public Onion(int hp, float happyTime, MinMax cryLoops, string[] tearPatterns, float tearAnticipate, float tearCommaDelay, float tearTime, MinMax pinkTearRange, float heartMaxSpeed, float heartAcceleration, float heartBounceRatio, int heartHP)
			{
				this.hp = hp;
				this.happyTime = happyTime;
				this.cryLoops = cryLoops;
				this.tearPatterns = tearPatterns;
				this.tearAnticipate = tearAnticipate;
				this.tearCommaDelay = tearCommaDelay;
				this.tearTime = tearTime;
				this.pinkTearRange = pinkTearRange;
				this.heartMaxSpeed = heartMaxSpeed;
				this.heartAcceleration = heartAcceleration;
				this.heartBounceRatio = heartBounceRatio;
				this.heartHP = heartHP;
			}

			// Token: 0x040010BE RID: 4286
			public readonly int hp;

			// Token: 0x040010BF RID: 4287
			public readonly float happyTime;

			// Token: 0x040010C0 RID: 4288
			public readonly MinMax cryLoops;

			// Token: 0x040010C1 RID: 4289
			public readonly string[] tearPatterns;

			// Token: 0x040010C2 RID: 4290
			public readonly float tearAnticipate;

			// Token: 0x040010C3 RID: 4291
			public readonly float tearCommaDelay;

			// Token: 0x040010C4 RID: 4292
			public readonly float tearTime;

			// Token: 0x040010C5 RID: 4293
			public readonly MinMax pinkTearRange;

			// Token: 0x040010C6 RID: 4294
			public readonly float heartMaxSpeed;

			// Token: 0x040010C7 RID: 4295
			public readonly float heartAcceleration;

			// Token: 0x040010C8 RID: 4296
			public readonly float heartBounceRatio;

			// Token: 0x040010C9 RID: 4297
			public readonly int heartHP;
		}

		// Token: 0x020002EA RID: 746
		public class Beet : AbstractLevelPropertyGroup
		{
			// Token: 0x0600084A RID: 2122 RVA: 0x0004C770 File Offset: 0x0004AB70
			public Beet(int hp, float idleTime, string[] babyPatterns, float babySpeedUp, int babySpeedSpread, float babySpreadAngle, float babyDelay, float babyGroupDelay, MinMax alternateRate)
			{
				this.hp = hp;
				this.idleTime = idleTime;
				this.babyPatterns = babyPatterns;
				this.babySpeedUp = babySpeedUp;
				this.babySpeedSpread = babySpeedSpread;
				this.babySpreadAngle = babySpreadAngle;
				this.babyDelay = babyDelay;
				this.babyGroupDelay = babyGroupDelay;
				this.alternateRate = alternateRate;
			}

			// Token: 0x040010CA RID: 4298
			public readonly int hp;

			// Token: 0x040010CB RID: 4299
			public readonly float idleTime;

			// Token: 0x040010CC RID: 4300
			public readonly string[] babyPatterns;

			// Token: 0x040010CD RID: 4301
			public readonly float babySpeedUp;

			// Token: 0x040010CE RID: 4302
			public readonly int babySpeedSpread;

			// Token: 0x040010CF RID: 4303
			public readonly float babySpreadAngle;

			// Token: 0x040010D0 RID: 4304
			public readonly float babyDelay;

			// Token: 0x040010D1 RID: 4305
			public readonly float babyGroupDelay;

			// Token: 0x040010D2 RID: 4306
			public readonly MinMax alternateRate;
		}

		// Token: 0x020002EB RID: 747
		public class Peas : AbstractLevelPropertyGroup
		{
			// Token: 0x0600084B RID: 2123 RVA: 0x0004C7C8 File Offset: 0x0004ABC8
			public Peas(int hp)
			{
				this.hp = hp;
			}

			// Token: 0x040010D3 RID: 4307
			public readonly int hp;
		}

		// Token: 0x020002EC RID: 748
		public class Carrot : AbstractLevelPropertyGroup
		{
			// Token: 0x0600084C RID: 2124 RVA: 0x0004C7D8 File Offset: 0x0004ABD8
			public Carrot(int hp, float startIdleTime, MinMax idleRange, int bulletCount, float bulletDelay, float bulletSpeed, float homingInitDelay, float homingSpeed, float homingRotation, int homingHP, float homingDelay, MinMax homingDuration, float homingBgSpeed, MinMax homingNumOfCarrots)
			{
				this.hp = hp;
				this.startIdleTime = startIdleTime;
				this.idleRange = idleRange;
				this.bulletCount = bulletCount;
				this.bulletDelay = bulletDelay;
				this.bulletSpeed = bulletSpeed;
				this.homingInitDelay = homingInitDelay;
				this.homingSpeed = homingSpeed;
				this.homingRotation = homingRotation;
				this.homingHP = homingHP;
				this.homingDelay = homingDelay;
				this.homingDuration = homingDuration;
				this.homingBgSpeed = homingBgSpeed;
				this.homingNumOfCarrots = homingNumOfCarrots;
			}

			// Token: 0x040010D4 RID: 4308
			public readonly int hp;

			// Token: 0x040010D5 RID: 4309
			public readonly float startIdleTime;

			// Token: 0x040010D6 RID: 4310
			public readonly MinMax idleRange;

			// Token: 0x040010D7 RID: 4311
			public readonly int bulletCount;

			// Token: 0x040010D8 RID: 4312
			public readonly float bulletDelay;

			// Token: 0x040010D9 RID: 4313
			public readonly float bulletSpeed;

			// Token: 0x040010DA RID: 4314
			public readonly float homingInitDelay;

			// Token: 0x040010DB RID: 4315
			public readonly float homingSpeed;

			// Token: 0x040010DC RID: 4316
			public readonly float homingRotation;

			// Token: 0x040010DD RID: 4317
			public readonly int homingHP;

			// Token: 0x040010DE RID: 4318
			public readonly float homingDelay;

			// Token: 0x040010DF RID: 4319
			public readonly MinMax homingDuration;

			// Token: 0x040010E0 RID: 4320
			public readonly float homingBgSpeed;

			// Token: 0x040010E1 RID: 4321
			public readonly MinMax homingNumOfCarrots;
		}
	}
}
